# id;timestamp;commentText;codeText;commentWords;codeWords
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1328020251;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return this.continueScheduledExecutionAfterException_				? new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER)_				: new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER)__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1356735495;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return this.continueScheduledExecutionAfterException_				? new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER)_				: new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER)__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1357119239;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return this.continueScheduledExecutionAfterException_				? new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER)_				: new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER)__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1368482696;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return this.continueScheduledExecutionAfterException_				? new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER)_				: new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER)__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1378149646;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1383178438;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1404066532;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1404070239;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1404097013;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1407154420;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1411601053;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1411763921;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1446044795;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1467677340;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1498780456;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1502974979;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1532091916;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> protected Runnable getRunnableToSchedule(ScheduledExecutorTask task);1533667007;Determine the actual Runnable to schedule for the given task._<p>Wraps the task's Runnable in a_{@link org.springframework.scheduling.support.DelegatingErrorHandlingRunnable}_that will catch and log the Exception. If necessary, it will suppress the_Exception according to the_{@link #setContinueScheduledExecutionAfterException "continueScheduledExecutionAfterException"}_flag._@param task the ScheduledExecutorTask to schedule_@return the actual Runnable to schedule (may be a decorator);protected Runnable getRunnableToSchedule(ScheduledExecutorTask task) {_		return (this.continueScheduledExecutionAfterException ?_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :_				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER))__	};determine,the,actual,runnable,to,schedule,for,the,given,task,p,wraps,the,task,s,runnable,in,a,link,org,springframework,scheduling,support,delegating,error,handling,runnable,that,will,catch,and,log,the,exception,if,necessary,it,will,suppress,the,exception,according,to,the,link,set,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception,flag,param,task,the,scheduled,executor,task,to,schedule,return,the,actual,runnable,to,schedule,may,be,a,decorator;protected,runnable,get,runnable,to,schedule,scheduled,executor,task,task,return,this,continue,scheduled,execution,after,exception,new,delegating,error,handling,runnable,task,get,runnable,task,utils,new,delegating,error,handling,runnable,task,get,runnable,task,utils
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1328020251;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1356735495;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1357119239;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1368482696;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1378149646;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1383178438;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1404066532;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1404070239;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1404097013;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1407154420;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1411601053;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1411763921;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1446044795;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1467677340;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1498780456;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1502974979;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1532091916;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException);1533667007;Specify whether to continue the execution of a scheduled task_after it threw an exception._<p>Default is "false", matching the native behavior of a_{@link java.util.concurrent.ScheduledExecutorService}._Switch this flag to "true" for exception-proof execution of each task,_continuing scheduled execution as in the case of successful execution._@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate;public void setContinueScheduledExecutionAfterException(boolean continueScheduledExecutionAfterException) {_		this.continueScheduledExecutionAfterException = continueScheduledExecutionAfterException__	};specify,whether,to,continue,the,execution,of,a,scheduled,task,after,it,threw,an,exception,p,default,is,false,matching,the,native,behavior,of,a,link,java,util,concurrent,scheduled,executor,service,switch,this,flag,to,true,for,exception,proof,execution,of,each,task,continuing,scheduled,execution,as,in,the,case,of,successful,execution,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate;public,void,set,continue,scheduled,execution,after,exception,boolean,continue,scheduled,execution,after,exception,this,continue,scheduled,execution,after,exception,continue,scheduled,execution,after,exception
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1328020251;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1356735495;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1357119239;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1368482696;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1378149646;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1383178438;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1404066532;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1404070239;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1404097013;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1407154420;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1411601053;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1411763921;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1446044795;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1467677340;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1498780456;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1502974979;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1532091916;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor);1533667007;Register the specified {@link ScheduledExecutorTask ScheduledExecutorTasks}_on the given {@link ScheduledExecutorService}._@param tasks the specified ScheduledExecutorTasks (never empty)_@param executor the ScheduledExecutorService to register the tasks on.;protected void registerTasks(ScheduledExecutorTask[] tasks, ScheduledExecutorService executor) {_		for (ScheduledExecutorTask task : tasks) {_			Runnable runnable = getRunnableToSchedule(task)__			if (task.isOneTimeTask()) {_				executor.schedule(runnable, task.getDelay(), task.getTimeUnit())__			}_			else {_				if (task.isFixedRate()) {_					executor.scheduleAtFixedRate(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_				else {_					executor.scheduleWithFixedDelay(runnable, task.getDelay(), task.getPeriod(), task.getTimeUnit())__				}_			}_		}_	};register,the,specified,link,scheduled,executor,task,scheduled,executor,tasks,on,the,given,link,scheduled,executor,service,param,tasks,the,specified,scheduled,executor,tasks,never,empty,param,executor,the,scheduled,executor,service,to,register,the,tasks,on;protected,void,register,tasks,scheduled,executor,task,tasks,scheduled,executor,service,executor,for,scheduled,executor,task,task,tasks,runnable,runnable,get,runnable,to,schedule,task,if,task,is,one,time,task,executor,schedule,runnable,task,get,delay,task,get,time,unit,else,if,task,is,fixed,rate,executor,schedule,at,fixed,rate,runnable,task,get,delay,task,get,period,task,get,time,unit,else,executor,schedule,with,fixed,delay,runnable,task,get,delay,task,get,period,task,get,time,unit
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1328020251;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1356735495;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1357119239;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1368482696;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1378149646;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1383178438;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1404066532;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1404070239;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1404097013;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1407154420;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1411601053;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1411763921;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1446044795;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1467677340;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1498780456;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1502974979;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1532091916;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setPoolSize(int poolSize);1533667007;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1328020251;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1356735495;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1357119239;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1368482696;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1378149646;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1383178438;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1404066532;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1404070239;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1404097013;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1407154420;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1411601053;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1411763921;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1446044795;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1467677340;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1498780456;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1502974979;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1532091916;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor);1533667007;Specify whether this FactoryBean should expose an unconfigurable_decorator for the created executor._<p>Default is "false", exposing the raw executor as bean reference._Switch this flag to "true" to strictly prevent clients from_modifying the executor's configuration._@see java.util.concurrent.Executors#unconfigurableScheduledExecutorService;public void setExposeUnconfigurableExecutor(boolean exposeUnconfigurableExecutor) {_		this.exposeUnconfigurableExecutor = exposeUnconfigurableExecutor__	};specify,whether,this,factory,bean,should,expose,an,unconfigurable,decorator,for,the,created,executor,p,default,is,false,exposing,the,raw,executor,as,bean,reference,switch,this,flag,to,true,to,strictly,prevent,clients,from,modifying,the,executor,s,configuration,see,java,util,concurrent,executors,unconfigurable,scheduled,executor,service;public,void,set,expose,unconfigurable,executor,boolean,expose,unconfigurable,executor,this,expose,unconfigurable,executor,expose,unconfigurable,executor
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1328020251;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1356735495;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1357119239;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1368482696;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1378149646;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1383178438;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1404066532;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1404070239;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1404097013;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1407154420;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1411601053;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1411763921;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1446044795;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1467677340;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1498780456;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1502974979;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1532091916;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1533667007;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1378149646;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1383178438;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1404066532;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1404070239;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1404097013;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1407154420;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1411601053;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1411763921;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1446044795;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1467677340;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1498780456;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1502974979;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1532091916;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks);1533667007;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask[] scheduledExecutorTasks);1328020251;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask[] scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask[] scheduledExecutorTasks);1356735495;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask[] scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask[] scheduledExecutorTasks);1357119239;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask[] scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setScheduledExecutorTasks(ScheduledExecutorTask[] scheduledExecutorTasks);1368482696;Register a list of ScheduledExecutorTask objects with the ScheduledExecutorService_that this FactoryBean creates. Depending on each ScheduledExecutorTask's settings,_it will be registered via one of ScheduledExecutorService's schedule methods._@see java.util.concurrent.ScheduledExecutorService#schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setScheduledExecutorTasks(ScheduledExecutorTask[] scheduledExecutorTasks) {_		this.scheduledExecutorTasks = scheduledExecutorTasks__	};register,a,list,of,scheduled,executor,task,objects,with,the,scheduled,executor,service,that,this,factory,bean,creates,depending,on,each,scheduled,executor,task,s,settings,it,will,be,registered,via,one,of,scheduled,executor,service,s,schedule,methods,see,java,util,concurrent,scheduled,executor,service,schedule,java,lang,runnable,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,scheduled,executor,tasks,scheduled,executor,task,scheduled,executor,tasks,this,scheduled,executor,tasks,scheduled,executor,tasks
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1404066532;Set the same property on ScheduledExecutorService available in JDK 1.7 or_higher. This property is ignored on JDK 1.6._Default is false.;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,same,property,on,scheduled,executor,service,available,in,jdk,1,7,or,higher,this,property,is,ignored,on,jdk,1,6,default,is,false;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1404070239;Set the same property on ScheduledExecutorService (JDK 1.7+)._There is no default. If not set, the executor property is not set.;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,same,property,on,scheduled,executor,service,jdk,1,7,there,is,no,default,if,not,set,the,executor,property,is,not,set;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1404097013;Set the same property on ScheduledExecutorService (JDK 1.7+)._There is no default. If not set, the executor property is not set.;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,same,property,on,scheduled,executor,service,jdk,1,7,there,is,no,default,if,not,set,the,executor,property,is,not,set;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1407154420;Set the same property on ScheduledExecutorService (JDK 1.7+)._There is no default. If not set, the executor property is not set.;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,same,property,on,scheduled,executor,service,jdk,1,7,there,is,no,default,if,not,set,the,executor,property,is,not,set;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1411601053;Set the same property on ScheduledExecutorService (JDK 1.7+)._There is no default. If not set, the executor property is not set.;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,same,property,on,scheduled,executor,service,jdk,1,7,there,is,no,default,if,not,set,the,executor,property,is,not,set;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1411763921;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise).;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1446044795;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise).;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1467677340;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise).;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1498780456;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise).;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1502974979;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise).;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1532091916;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise).;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
ScheduledExecutorFactoryBean -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1533667007;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor}._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise).;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy
