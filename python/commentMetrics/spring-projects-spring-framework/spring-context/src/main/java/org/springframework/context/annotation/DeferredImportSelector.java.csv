commented;modifiers;parameterAmount;loc;comment;code
true;default;0;4;/**  * Return a specific import group or {@code null} if no grouping is required.  * @return the import group class or {@code null}  */ ;/**  * Return a specific import group or {@code null} if no grouping is required.  * @return the import group class or {@code null}  */ @Nullable default Class<? extends Group> getImportGroup() {     return null. }
true;;2;1;/**  * Process the {@link AnnotationMetadata} of the importing @{@link Configuration}  * class using the specified {@link DeferredImportSelector}.  */ ;/**  * Process the {@link AnnotationMetadata} of the importing @{@link Configuration}  * class using the specified {@link DeferredImportSelector}.  */ void process(AnnotationMetadata metadata, DeferredImportSelector selector).
true;;0;1;/**  * Return the {@link Entry entries} of which class(es) should be imported for this  * group.  */ ;/**  * Return the {@link Entry entries} of which class(es) should be imported for this  * group.  */ Iterable<Entry> selectImports().
true;public;0;3;/**  * Return the {@link AnnotationMetadata} of the importing  * {@link Configuration} class.  */ ;/**  * Return the {@link AnnotationMetadata} of the importing  * {@link Configuration} class.  */ public AnnotationMetadata getMetadata() {     return this.metadata. }
true;public;0;3;/**  * Return the fully qualified name of the class to import.  */ ;/**  * Return the fully qualified name of the class to import.  */ public String getImportClassName() {     return this.importClassName. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Entry entry = (Entry) o.     return Objects.equals(this.metadata, entry.metadata) && Objects.equals(this.importClassName, entry.importClassName). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(this.metadata, this.importClassName). }
