# id;timestamp;commentText;codeText;commentWords;codeWords
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1328020251;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either <code>null</code> or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the <code>Errors</code> instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,code,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,code,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1356735495;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1403611325;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1490602346;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1495868221;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1496259743;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1496837955;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1531839694;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode);1545053096;Reject the given field with the given error code if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmpty(Errors errors, String field, String errorCode) {_		rejectIfEmpty(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,reject,if,empty,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1328020251;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either <code>null</code>,_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the <code>Errors</code> instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,code,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,code,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1356735495;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1403611325;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1490602346;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1495868221;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1496259743;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1496837955;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1531839694;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode);1545053096;Reject the given field with the given error code if the value is empty_or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key;public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode) {_		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, null)__	};reject,the,given,field,with,the,given,error,code,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,reject,if,empty,or,whitespace,errors,field,error,code,null,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage);1328020251;Reject the given field with the given error code, error arguments_and default message if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either <code>null</code>,_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the <code>Errors</code> instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be <code>null</code>)_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null ||!StringUtils.hasText(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,code,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,code,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,code,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,object,error,args,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,text,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage);1356735495;Reject the given field with the given error code, error arguments_and default message if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null ||!StringUtils.hasText(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,object,error,args,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,text,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage);1403611325;Reject the given field with the given error code, error arguments_and default message if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null ||!StringUtils.hasText(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,object,error,args,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,text,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage);1490602346;Reject the given field with the given error code, error arguments_and default message if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null ||!StringUtils.hasText(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,object,error,args,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,text,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints);1328020251;Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and_{@link Errors} instance._@param validator the <code>Validator</code> to be invoked (must not be <code>null</code>)_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be <code>null</code>)_@param validationHints one or more hint objects to be passed to the validation engine_@throws IllegalArgumentException if either of the <code>Validator</code> or <code>Errors</code> arguments is_<code>null</code>, or if the supplied <code>Validator</code> does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) {_		Assert.notNull(validator, "Validator must not be null")__		Assert.notNull(errors, "Errors object must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking validator [" + validator + "]")__		}_		if (obj != null && !validator.supports(obj.getClass())) {_			throw new IllegalArgumentException(_					"Validator [" + validator.getClass() + "] does not support [" + obj.getClass() + "]")__		}_		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {_			((SmartValidator) validator).validate(obj, errors, validationHints)__		}_		else {_			validator.validate(obj, errors)__		}_		if (logger.isDebugEnabled()) {_			if (errors.hasErrors()) {_				logger.debug("Validator found " + errors.getErrorCount() + " errors")__			}_			else {_				logger.debug("Validator found no errors")__			}_		}_	};invoke,the,given,link,validator,link,smart,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,code,to,be,invoked,must,not,be,code,null,code,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,code,param,validation,hints,one,or,more,hint,objects,to,be,passed,to,the,validation,engine,throws,illegal,argument,exception,if,either,of,the,code,validator,code,or,code,errors,code,arguments,is,code,null,code,or,if,the,supplied,code,validator,code,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,object,validation,hints,assert,not,null,validator,validator,must,not,be,null,assert,not,null,errors,errors,object,must,not,be,null,if,logger,is,debug,enabled,logger,debug,invoking,validator,validator,if,obj,null,validator,supports,obj,get,class,throw,new,illegal,argument,exception,validator,validator,get,class,does,not,support,obj,get,class,if,object,utils,is,empty,validation,hints,validator,instanceof,smart,validator,smart,validator,validator,validate,obj,errors,validation,hints,else,validator,validate,obj,errors,if,logger,is,debug,enabled,if,errors,has,errors,logger,debug,validator,found,errors,get,error,count,errors,else,logger,debug,validator,found,no,errors
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints);1356735495;Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@param validationHints one or more hint objects to be passed to the validation engine_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) {_		Assert.notNull(validator, "Validator must not be null")__		Assert.notNull(errors, "Errors object must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking validator [" + validator + "]")__		}_		if (obj != null && !validator.supports(obj.getClass())) {_			throw new IllegalArgumentException(_					"Validator [" + validator.getClass() + "] does not support [" + obj.getClass() + "]")__		}_		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {_			((SmartValidator) validator).validate(obj, errors, validationHints)__		}_		else {_			validator.validate(obj, errors)__		}_		if (logger.isDebugEnabled()) {_			if (errors.hasErrors()) {_				logger.debug("Validator found " + errors.getErrorCount() + " errors")__			}_			else {_				logger.debug("Validator found no errors")__			}_		}_	};invoke,the,given,link,validator,link,smart,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,param,validation,hints,one,or,more,hint,objects,to,be,passed,to,the,validation,engine,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,object,validation,hints,assert,not,null,validator,validator,must,not,be,null,assert,not,null,errors,errors,object,must,not,be,null,if,logger,is,debug,enabled,logger,debug,invoking,validator,validator,if,obj,null,validator,supports,obj,get,class,throw,new,illegal,argument,exception,validator,validator,get,class,does,not,support,obj,get,class,if,object,utils,is,empty,validation,hints,validator,instanceof,smart,validator,smart,validator,validator,validate,obj,errors,validation,hints,else,validator,validate,obj,errors,if,logger,is,debug,enabled,if,errors,has,errors,logger,debug,validator,found,errors,get,error,count,errors,else,logger,debug,validator,found,no,errors
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints);1403611325;Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@param validationHints one or more hint objects to be passed to the validation engine_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) {_		Assert.notNull(validator, "Validator must not be null")__		Assert.notNull(errors, "Errors object must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking validator [" + validator + "]")__		}_		if (obj != null && !validator.supports(obj.getClass())) {_			throw new IllegalArgumentException(_					"Validator [" + validator.getClass() + "] does not support [" + obj.getClass() + "]")__		}_		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {_			((SmartValidator) validator).validate(obj, errors, validationHints)__		}_		else {_			validator.validate(obj, errors)__		}_		if (logger.isDebugEnabled()) {_			if (errors.hasErrors()) {_				logger.debug("Validator found " + errors.getErrorCount() + " errors")__			}_			else {_				logger.debug("Validator found no errors")__			}_		}_	};invoke,the,given,link,validator,link,smart,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,param,validation,hints,one,or,more,hint,objects,to,be,passed,to,the,validation,engine,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,object,validation,hints,assert,not,null,validator,validator,must,not,be,null,assert,not,null,errors,errors,object,must,not,be,null,if,logger,is,debug,enabled,logger,debug,invoking,validator,validator,if,obj,null,validator,supports,obj,get,class,throw,new,illegal,argument,exception,validator,validator,get,class,does,not,support,obj,get,class,if,object,utils,is,empty,validation,hints,validator,instanceof,smart,validator,smart,validator,validator,validate,obj,errors,validation,hints,else,validator,validate,obj,errors,if,logger,is,debug,enabled,if,errors,has,errors,logger,debug,validator,found,errors,get,error,count,errors,else,logger,debug,validator,found,no,errors
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints);1490602346;Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@param validationHints one or more hint objects to be passed to the validation engine_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) {_		Assert.notNull(validator, "Validator must not be null")__		Assert.notNull(errors, "Errors object must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking validator [" + validator + "]")__		}_		if (obj != null && !validator.supports(obj.getClass())) {_			throw new IllegalArgumentException(_					"Validator [" + validator.getClass() + "] does not support [" + obj.getClass() + "]")__		}_		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {_			((SmartValidator) validator).validate(obj, errors, validationHints)__		}_		else {_			validator.validate(obj, errors)__		}_		if (logger.isDebugEnabled()) {_			if (errors.hasErrors()) {_				logger.debug("Validator found " + errors.getErrorCount() + " errors")__			}_			else {_				logger.debug("Validator found no errors")__			}_		}_	};invoke,the,given,link,validator,link,smart,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,param,validation,hints,one,or,more,hint,objects,to,be,passed,to,the,validation,engine,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,object,validation,hints,assert,not,null,validator,validator,must,not,be,null,assert,not,null,errors,errors,object,must,not,be,null,if,logger,is,debug,enabled,logger,debug,invoking,validator,validator,if,obj,null,validator,supports,obj,get,class,throw,new,illegal,argument,exception,validator,validator,get,class,does,not,support,obj,get,class,if,object,utils,is,empty,validation,hints,validator,instanceof,smart,validator,smart,validator,validator,validate,obj,errors,validation,hints,else,validator,validate,obj,errors,if,logger,is,debug,enabled,if,errors,has,errors,logger,debug,validator,found,errors,get,error,count,errors,else,logger,debug,validator,found,no,errors
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints);1495868221;Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@param validationHints one or more hint objects to be passed to the validation engine_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) {_		Assert.notNull(validator, "Validator must not be null")__		Assert.notNull(errors, "Errors object must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking validator [" + validator + "]")__		}_		if (obj != null && !validator.supports(obj.getClass())) {_			throw new IllegalArgumentException(_					"Validator [" + validator.getClass() + "] does not support [" + obj.getClass() + "]")__		}_		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {_			((SmartValidator) validator).validate(obj, errors, validationHints)__		}_		else {_			validator.validate(obj, errors)__		}_		if (logger.isDebugEnabled()) {_			if (errors.hasErrors()) {_				logger.debug("Validator found " + errors.getErrorCount() + " errors")__			}_			else {_				logger.debug("Validator found no errors")__			}_		}_	};invoke,the,given,link,validator,link,smart,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,param,validation,hints,one,or,more,hint,objects,to,be,passed,to,the,validation,engine,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,object,validation,hints,assert,not,null,validator,validator,must,not,be,null,assert,not,null,errors,errors,object,must,not,be,null,if,logger,is,debug,enabled,logger,debug,invoking,validator,validator,if,obj,null,validator,supports,obj,get,class,throw,new,illegal,argument,exception,validator,validator,get,class,does,not,support,obj,get,class,if,object,utils,is,empty,validation,hints,validator,instanceof,smart,validator,smart,validator,validator,validate,obj,errors,validation,hints,else,validator,validate,obj,errors,if,logger,is,debug,enabled,if,errors,has,errors,logger,debug,validator,found,errors,get,error,count,errors,else,logger,debug,validator,found,no,errors
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints);1496259743;Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@param validationHints one or more hint objects to be passed to the validation engine_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) {_		Assert.notNull(validator, "Validator must not be null")__		Assert.notNull(errors, "Errors object must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking validator [" + validator + "]")__		}_		if (obj != null && !validator.supports(obj.getClass())) {_			throw new IllegalArgumentException(_					"Validator [" + validator.getClass() + "] does not support [" + obj.getClass() + "]")__		}_		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {_			((SmartValidator) validator).validate(obj, errors, validationHints)__		}_		else {_			validator.validate(obj, errors)__		}_		if (logger.isDebugEnabled()) {_			if (errors.hasErrors()) {_				logger.debug("Validator found " + errors.getErrorCount() + " errors")__			}_			else {_				logger.debug("Validator found no errors")__			}_		}_	};invoke,the,given,link,validator,link,smart,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,param,validation,hints,one,or,more,hint,objects,to,be,passed,to,the,validation,engine,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,object,validation,hints,assert,not,null,validator,validator,must,not,be,null,assert,not,null,errors,errors,object,must,not,be,null,if,logger,is,debug,enabled,logger,debug,invoking,validator,validator,if,obj,null,validator,supports,obj,get,class,throw,new,illegal,argument,exception,validator,validator,get,class,does,not,support,obj,get,class,if,object,utils,is,empty,validation,hints,validator,instanceof,smart,validator,smart,validator,validator,validate,obj,errors,validation,hints,else,validator,validate,obj,errors,if,logger,is,debug,enabled,if,errors,has,errors,logger,debug,validator,found,errors,get,error,count,errors,else,logger,debug,validator,found,no,errors
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs);1328020251;Reject the given field with the given error codea nd error arguments_if the value is empty._<p>An 'empty' value in this context means either <code>null</code> or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the <code>Errors</code> instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be <code>null</code>);public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,codea,nd,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,code,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,code,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,code;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs);1356735495;Reject the given field with the given error codea nd error arguments_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,codea,nd,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs);1403611325;Reject the given field with the given error codea nd error arguments_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,codea,nd,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs);1490602346;Reject the given field with the given error code and error arguments_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs);1496837955;Reject the given field with the given error code and error arguments_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs);1531839694;Reject the given field with the given error code and error arguments_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs);1545053096;Reject the given field with the given error code and error arguments_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, @Nullable String errorCode, Object[] errorArgs);1495868221;Reject the given field with the given error code and error arguments_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmpty(Errors errors, String field, @Nullable String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,errors,errors,string,field,nullable,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, @Nullable String errorCode, Object[] errorArgs);1496259743;Reject the given field with the given error code and error arguments_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmpty(Errors errors, String field, @Nullable String errorCode, Object[] errorArgs) {_		rejectIfEmpty(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,errors,errors,string,field,nullable,string,error,code,object,error,args,reject,if,empty,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs);1495868221;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs);1496259743;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs);1496837955;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs);1531839694;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs);1545053096;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage);1496259743;Reject the given field with the given error code, error arguments_and default message if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null ||!StringUtils.hasText(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,nullable,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,text,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage);1496837955;Reject the given field with the given error code, error arguments_and default message if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null ||!StringUtils.hasText(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,nullable,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,text,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage);1531839694;Reject the given field with the given error code, error arguments_and default message if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null ||!StringUtils.hasText(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,nullable,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,text,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage);1545053096;Reject the given field with the given error code, error arguments_and default message if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null ||!StringUtils.hasText(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,nullable,object,error,args,nullable,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,text,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmpty( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage);1328020251;Reject the given field with the given error code, error arguments_and default message if the value is empty._<p>An 'empty' value in this context means either <code>null</code> or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the <code>Errors</code> instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be <code>null</code>)_@param defaultMessage fallback default message;public static void rejectIfEmpty(_			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null || !StringUtils.hasLength(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,code,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,code,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,code,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,length,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmpty( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage);1356735495;Reject the given field with the given error code, error arguments_and default message if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmpty(_			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null || !StringUtils.hasLength(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,length,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmpty( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage);1403611325;Reject the given field with the given error code, error arguments_and default message if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmpty(_			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null || !StringUtils.hasLength(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,length,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmpty( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage);1490602346;Reject the given field with the given error code, error arguments_and default message if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmpty(_			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null || !StringUtils.hasLength(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,object,error,args,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,length,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors);1328020251;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the <code>Validator</code> to be invoked (must not be <code>null</code>)_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be <code>null</code>)_@throws IllegalArgumentException if either of the <code>Validator</code> or <code>Errors</code> arguments is_<code>null</code>, or if the supplied <code>Validator</code> does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors) {_		invokeValidator(validator, obj, errors, (Class[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,code,to,be,invoked,must,not,be,code,null,code,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,code,throws,illegal,argument,exception,if,either,of,the,code,validator,code,or,code,errors,code,arguments,is,code,null,code,or,if,the,supplied,code,validator,code,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,invoke,validator,validator,obj,errors,class,null
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors);1356735495;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors) {_		invokeValidator(validator, obj, errors, (Object[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,invoke,validator,validator,obj,errors,object,null
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors);1403611325;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors) {_		invokeValidator(validator, obj, errors, (Object[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,invoke,validator,validator,obj,errors,object,null
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors);1490602346;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors) {_		invokeValidator(validator, obj, errors, (Object[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,invoke,validator,validator,obj,errors,object,null
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors);1495868221;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors) {_		invokeValidator(validator, obj, errors, (Object[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,invoke,validator,validator,obj,errors,object,null
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors);1496259743;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors) {_		invokeValidator(validator, obj, errors, (Object[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,invoke,validator,validator,obj,errors,object,null
ValidationUtils -> public static void invokeValidator(Validator validator, Object obj, Errors errors);1496837955;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked (must not be {@code null})_@param obj the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors (must not be {@code null})_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors} arguments is_{@code null}, or if the supplied {@code Validator} does not {@link Validator#supports(Class) support}_the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object obj, Errors errors) {_		invokeValidator(validator, obj, errors, (Object[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,must,not,be,code,null,param,obj,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,must,not,be,code,null,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,obj,errors,errors,invoke,validator,validator,obj,errors,object,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1328020251;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either <code>null</code> or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the <code>Errors</code> instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,code,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,code,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1356735495;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1403611325;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1490602346;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1495868221;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1496259743;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1496837955;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1531839694;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage);1545053096;Reject the given field with the given error code and default message_if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage) {_		rejectIfEmpty(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1328020251;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either <code>null</code>,_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the <code>Errors</code> instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,code,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,code,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1356735495;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1403611325;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1490602346;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1495868221;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1496259743;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1496837955;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1531839694;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, String defaultMessage);1545053096;Reject the given field with the given error code and default message_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param defaultMessage fallback default message;public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, String defaultMessage) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, null, defaultMessage)__	};reject,the,given,field,with,the,given,error,code,and,default,message,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,default,message,fallback,default,message;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,string,default,message,reject,if,empty,or,whitespace,errors,field,error,code,null,default,message
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, Object[] errorArgs);1328020251;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either <code>null</code>,_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the <code>Errors</code> instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be <code>null</code>);public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,code,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,code,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,code;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, Object[] errorArgs);1356735495;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, Object[] errorArgs);1403611325;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void rejectIfEmptyOrWhitespace( 			Errors errors, String field, String errorCode, Object[] errorArgs);1490602346;Reject the given field with the given error code and error arguments_if the value is empty or just contains whitespace._<p>An 'empty' value in this context means either {@code null},_the empty string "", or consisting wholly of whitespace._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null});public static void rejectIfEmptyOrWhitespace(_			Errors errors, String field, String errorCode, Object[] errorArgs) {__		rejectIfEmptyOrWhitespace(errors, field, errorCode, errorArgs, null)__	};reject,the,given,field,with,the,given,error,code,and,error,arguments,if,the,value,is,empty,or,just,contains,whitespace,p,an,empty,value,in,this,context,means,either,code,null,the,empty,string,or,consisting,wholly,of,whitespace,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null;public,static,void,reject,if,empty,or,whitespace,errors,errors,string,field,string,error,code,object,error,args,reject,if,empty,or,whitespace,errors,field,error,code,error,args,null
ValidationUtils -> public static void invokeValidator( 			Validator validator, Object target, Errors errors, @Nullable Object... validationHints);1531839694;Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked_@param target the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors_@param validationHints one or more hint objects to be passed to the validation engine_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors}_arguments is {@code null}, or if the supplied {@code Validator} does not_{@link Validator#supports(Class) support} the validation of the supplied object's type;public static void invokeValidator(_			Validator validator, Object target, Errors errors, @Nullable Object... validationHints) {__		Assert.notNull(validator, "Validator must not be null")__		Assert.notNull(errors, "Errors object must not be null")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking validator [" + validator + "]")__		}_		if (!validator.supports(target.getClass())) {_			throw new IllegalArgumentException(_					"Validator [" + validator.getClass() + "] does not support [" + target.getClass() + "]")__		}__		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {_			((SmartValidator) validator).validate(target, errors, validationHints)__		}_		else {_			validator.validate(target, errors)__		}__		if (logger.isDebugEnabled()) {_			if (errors.hasErrors()) {_				logger.debug("Validator found " + errors.getErrorCount() + " errors")__			}_			else {_				logger.debug("Validator found no errors")__			}_		}_	};invoke,the,given,link,validator,link,smart,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,param,target,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,param,validation,hints,one,or,more,hint,objects,to,be,passed,to,the,validation,engine,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,target,errors,errors,nullable,object,validation,hints,assert,not,null,validator,validator,must,not,be,null,assert,not,null,errors,errors,object,must,not,be,null,if,logger,is,debug,enabled,logger,debug,invoking,validator,validator,if,validator,supports,target,get,class,throw,new,illegal,argument,exception,validator,validator,get,class,does,not,support,target,get,class,if,object,utils,is,empty,validation,hints,validator,instanceof,smart,validator,smart,validator,validator,validate,target,errors,validation,hints,else,validator,validate,target,errors,if,logger,is,debug,enabled,if,errors,has,errors,logger,debug,validator,found,errors,get,error,count,errors,else,logger,debug,validator,found,no,errors
ValidationUtils -> public static void invokeValidator( 			Validator validator, Object target, Errors errors, @Nullable Object... validationHints);1545053096;Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked_@param target the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors_@param validationHints one or more hint objects to be passed to the validation engine_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors}_arguments is {@code null}, or if the supplied {@code Validator} does not_{@link Validator#supports(Class) support} the validation of the supplied object's type;public static void invokeValidator(_			Validator validator, Object target, Errors errors, @Nullable Object... validationHints) {__		Assert.notNull(validator, "Validator must not be null")__		Assert.notNull(target, "Target object must not be null")__		Assert.notNull(errors, "Errors object must not be null")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking validator [" + validator + "]")__		}_		if (!validator.supports(target.getClass())) {_			throw new IllegalArgumentException(_					"Validator [" + validator.getClass() + "] does not support [" + target.getClass() + "]")__		}__		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {_			((SmartValidator) validator).validate(target, errors, validationHints)__		}_		else {_			validator.validate(target, errors)__		}__		if (logger.isDebugEnabled()) {_			if (errors.hasErrors()) {_				logger.debug("Validator found " + errors.getErrorCount() + " errors")__			}_			else {_				logger.debug("Validator found no errors")__			}_		}_	};invoke,the,given,link,validator,link,smart,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,param,target,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,param,validation,hints,one,or,more,hint,objects,to,be,passed,to,the,validation,engine,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,target,errors,errors,nullable,object,validation,hints,assert,not,null,validator,validator,must,not,be,null,assert,not,null,target,target,object,must,not,be,null,assert,not,null,errors,errors,object,must,not,be,null,if,logger,is,debug,enabled,logger,debug,invoking,validator,validator,if,validator,supports,target,get,class,throw,new,illegal,argument,exception,validator,validator,get,class,does,not,support,target,get,class,if,object,utils,is,empty,validation,hints,validator,instanceof,smart,validator,smart,validator,validator,validate,target,errors,validation,hints,else,validator,validate,target,errors,if,logger,is,debug,enabled,if,errors,has,errors,logger,debug,validator,found,errors,get,error,count,errors,else,logger,debug,validator,found,no,errors
ValidationUtils -> public static void invokeValidator(Validator validator, Object target, Errors errors);1531839694;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked_@param target the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors}_arguments is {@code null}, or if the supplied {@code Validator} does not_{@link Validator#supports(Class) support} the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object target, Errors errors) {_		invokeValidator(validator, target, errors, (Object[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,param,target,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,target,errors,errors,invoke,validator,validator,target,errors,object,null
ValidationUtils -> public static void invokeValidator(Validator validator, Object target, Errors errors);1545053096;Invoke the given {@link Validator} for the supplied object and_{@link Errors} instance._@param validator the {@code Validator} to be invoked_@param target the object to bind the parameters to_@param errors the {@link Errors} instance that should store the errors_@throws IllegalArgumentException if either of the {@code Validator} or {@code Errors}_arguments is {@code null}, or if the supplied {@code Validator} does not_{@link Validator#supports(Class) support} the validation of the supplied object's type;public static void invokeValidator(Validator validator, Object target, Errors errors) {_		invokeValidator(validator, target, errors, (Object[]) null)__	};invoke,the,given,link,validator,for,the,supplied,object,and,link,errors,instance,param,validator,the,code,validator,to,be,invoked,param,target,the,object,to,bind,the,parameters,to,param,errors,the,link,errors,instance,that,should,store,the,errors,throws,illegal,argument,exception,if,either,of,the,code,validator,or,code,errors,arguments,is,code,null,or,if,the,supplied,code,validator,does,not,link,validator,supports,class,support,the,validation,of,the,supplied,object,s,type;public,static,void,invoke,validator,validator,validator,object,target,errors,errors,invoke,validator,validator,target,errors,object,null
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, 			@Nullable Object[] errorArgs, @Nullable String defaultMessage);1496837955;Reject the given field with the given error code, error arguments_and default message if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode,_			@Nullable Object[] errorArgs, @Nullable String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null || !StringUtils.hasLength(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,nullable,object,error,args,nullable,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,length,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, 			@Nullable Object[] errorArgs, @Nullable String defaultMessage);1531839694;Reject the given field with the given error code, error arguments_and default message if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode,_			@Nullable Object[] errorArgs, @Nullable String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null || !StringUtils.hasLength(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,nullable,object,error,args,nullable,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,length,value,to,string,errors,reject,value,field,error,code,error,args,default,message
ValidationUtils -> public static void rejectIfEmpty(Errors errors, String field, String errorCode, 			@Nullable Object[] errorArgs, @Nullable String defaultMessage);1545053096;Reject the given field with the given error code, error arguments_and default message if the value is empty._<p>An 'empty' value in this context means either {@code null} or_the empty string ""._<p>The object whose field is being validated does not need to be passed_in because the {@link Errors} instance can resolve field values by itself_(it will usually hold an internal reference to the target object)._@param errors the {@code Errors} instance to register errors on_@param field the field name to check_@param errorCode the error code, interpretable as message key_@param errorArgs the error arguments, for argument binding via MessageFormat_(can be {@code null})_@param defaultMessage fallback default message;public static void rejectIfEmpty(Errors errors, String field, String errorCode,_			@Nullable Object[] errorArgs, @Nullable String defaultMessage) {__		Assert.notNull(errors, "Errors object must not be null")__		Object value = errors.getFieldValue(field)__		if (value == null || !StringUtils.hasLength(value.toString())) {_			errors.rejectValue(field, errorCode, errorArgs, defaultMessage)__		}_	};reject,the,given,field,with,the,given,error,code,error,arguments,and,default,message,if,the,value,is,empty,p,an,empty,value,in,this,context,means,either,code,null,or,the,empty,string,p,the,object,whose,field,is,being,validated,does,not,need,to,be,passed,in,because,the,link,errors,instance,can,resolve,field,values,by,itself,it,will,usually,hold,an,internal,reference,to,the,target,object,param,errors,the,code,errors,instance,to,register,errors,on,param,field,the,field,name,to,check,param,error,code,the,error,code,interpretable,as,message,key,param,error,args,the,error,arguments,for,argument,binding,via,message,format,can,be,code,null,param,default,message,fallback,default,message;public,static,void,reject,if,empty,errors,errors,string,field,string,error,code,nullable,object,error,args,nullable,string,default,message,assert,not,null,errors,errors,object,must,not,be,null,object,value,errors,get,field,value,field,if,value,null,string,utils,has,length,value,to,string,errors,reject,value,field,error,code,error,args,default,message
