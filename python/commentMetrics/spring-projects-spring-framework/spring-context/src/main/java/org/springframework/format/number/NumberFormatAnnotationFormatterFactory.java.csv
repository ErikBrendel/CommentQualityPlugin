commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<Class<?>> getFieldTypes() {     return NumberUtils.STANDARD_NUMBER_TYPES. }
false;public;2;4;;@Override public Printer<Number> getPrinter(NumberFormat annotation, Class<?> fieldType) {     return configureFormatterFrom(annotation). }
false;public;2;4;;@Override public Parser<Number> getParser(NumberFormat annotation, Class<?> fieldType) {     return configureFormatterFrom(annotation). }
false;private;1;18;;private Formatter<Number> configureFormatterFrom(NumberFormat annotation) {     String pattern = resolveEmbeddedValue(annotation.pattern()).     if (StringUtils.hasLength(pattern)) {         return new NumberStyleFormatter(pattern).     } else {         Style style = annotation.style().         if (style == Style.CURRENCY) {             return new CurrencyStyleFormatter().         } else if (style == Style.PERCENT) {             return new PercentStyleFormatter().         } else {             return new NumberStyleFormatter().         }     } }
