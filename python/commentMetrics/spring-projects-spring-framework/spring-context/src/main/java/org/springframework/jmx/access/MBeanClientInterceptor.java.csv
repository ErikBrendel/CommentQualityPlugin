# id;timestamp;commentText;codeText;commentWords;codeWords
MBeanClientInterceptor -> public void setManagementInterface(@Nullable Class<?> managementInterface);1500448076;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(@Nullable Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,nullable,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(@Nullable Class<?> managementInterface);1519732288;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(@Nullable Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,nullable,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(@Nullable Class<?> managementInterface);1530174524;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(@Nullable Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,nullable,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> protected final Class<?> getManagementInterface();1385412762;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class<?> getManagementInterface();1419855992;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class<?> getManagementInterface();1419881658;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class<?> getManagementInterface();1458999130;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class<?> getManagementInterface();1467730834;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class<?> getManagementInterface();1485277217;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1328020251;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1335774711;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1356735495;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1357119239;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1368482696;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1385412762;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1419855992;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1419881658;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1458999130;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1467730834;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1485277217;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1495868221;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1496242568;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> public Map<String, ?> getEnvironment();1496837955;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> protected final Class getManagementInterface();1328020251;Return the management interface of the target MBean,_or <code>null</code> if none specified.;protected final Class getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,code,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class getManagementInterface();1335774711;Return the management interface of the target MBean,_or <code>null</code> if none specified.;protected final Class getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,code,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class getManagementInterface();1356735495;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class getManagementInterface();1357119239;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> protected final Class getManagementInterface();1368482696;Return the management interface of the target MBean,_or {@code null} if none specified.;protected final Class getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> @Nullable 	public Map<String, ?> getEnvironment();1498780456;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;@Nullable_	public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;nullable,public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> @Nullable 	public Map<String, ?> getEnvironment();1500416137;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;@Nullable_	public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;nullable,public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> @Nullable 	public Map<String, ?> getEnvironment();1500448076;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;@Nullable_	public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;nullable,public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> @Nullable 	public Map<String, ?> getEnvironment();1519732288;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;@Nullable_	public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;nullable,public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> @Nullable 	public Map<String, ?> getEnvironment();1530174524;Allow Map access to the environment to be set for the connector,_with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"environment[myKey]". This is particularly useful for_adding or overriding entries in child bean definitions.;@Nullable_	public Map<String, ?> getEnvironment() {_		return this.environment__	};allow,map,access,to,the,environment,to,be,set,for,the,connector,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,environment,my,key,this,is,particularly,useful,for,adding,or,overriding,entries,in,child,bean,definitions;nullable,public,map,string,get,environment,return,this,environment
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes);1496837955;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,nullable,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes);1498780456;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,nullable,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes);1500416137;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,nullable,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes);1500448076;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,nullable,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes);1519732288;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,nullable,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes);1530174524;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, @Nullable Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,nullable,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1328020251;Set whether or not the proxy should connect to the <code>MBeanServer</code>_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,code,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1335774711;Set whether or not the proxy should connect to the <code>MBeanServer</code>_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,code,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1356735495;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1357119239;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1368482696;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1385412762;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1419855992;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1419881658;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1458999130;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1467730834;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1485277217;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1495868221;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1496242568;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1496837955;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1498780456;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1500416137;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1500448076;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1519732288;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void setConnectOnStartup(boolean connectOnStartup);1530174524;Set whether or not the proxy should connect to the {@code MBeanServer}_at creation time ("true") or the first time it is invoked ("false")._Default is "true".;public void setConnectOnStartup(boolean connectOnStartup) {_		this.connectOnStartup = connectOnStartup__	};set,whether,or,not,the,proxy,should,connect,to,the,code,mbean,server,at,creation,time,true,or,the,first,time,it,is,invoked,false,default,is,true;public,void,set,connect,on,startup,boolean,connect,on,startup,this,connect,on,startup,connect,on,startup
MBeanClientInterceptor -> public void prepare();1328020251;Ensures that an <code>MBeanServerConnection</code> is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				_				if (JmxUtils.isMXBeanSupportAvailable()) {_					this.invocationHandler =_							new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_									(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__				}_				else {_					this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName)__				}_			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,code,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,if,jmx,utils,is,mxbean,support,available,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1335774711;Ensures that an <code>MBeanServerConnection</code> is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				_				if (JmxUtils.isMXBeanSupportAvailable()) {_					this.invocationHandler =_							new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_									(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__				}_				else {_					this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName)__				}_			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,code,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,if,jmx,utils,is,mxbean,support,available,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1356735495;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				_				if (JmxUtils.isMXBeanSupportAvailable()) {_					this.invocationHandler =_							new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_									(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__				}_				else {_					this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName)__				}_			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,if,jmx,utils,is,mxbean,support,available,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1357119239;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				_				if (JmxUtils.isMXBeanSupportAvailable()) {_					this.invocationHandler =_							new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_									(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__				}_				else {_					this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName)__				}_			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,if,jmx,utils,is,mxbean,support,available,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1368482696;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				_				if (JmxUtils.isMXBeanSupportAvailable()) {_					this.invocationHandler =_							new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_									(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__				}_				else {_					this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName)__				}_			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,if,jmx,utils,is,mxbean,support,available,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1385412762;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				_				if (JmxUtils.isMXBeanSupportAvailable()) {_					this.invocationHandler =_							new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_									(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__				}_				else {_					this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName)__				}_			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,if,jmx,utils,is,mxbean,support,available,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1419855992;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1419881658;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1458999130;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1467730834;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1485277217;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1495868221;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1496242568;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1496837955;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo()__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info
MBeanClientInterceptor -> public void prepare();1498780456;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				Assert.state(this.objectName != null, "No ObjectName set")__				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo(this.serverToUse)__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,assert,state,this,object,name,null,no,object,name,set,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info,this,server,to,use
MBeanClientInterceptor -> public void prepare();1500416137;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				Assert.state(this.objectName != null, "No ObjectName set")__				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo(this.serverToUse)__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,assert,state,this,object,name,null,no,object,name,set,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info,this,server,to,use
MBeanClientInterceptor -> public void prepare();1500448076;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				Assert.state(this.objectName != null, "No ObjectName set")__				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo(this.serverToUse)__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,assert,state,this,object,name,null,no,object,name,set,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info,this,server,to,use
MBeanClientInterceptor -> public void prepare();1519732288;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				Assert.state(this.objectName != null, "No ObjectName set")__				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo(this.serverToUse)__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,assert,state,this,object,name,null,no,object,name,set,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info,this,server,to,use
MBeanClientInterceptor -> public void prepare();1530174524;Ensures that an {@code MBeanServerConnection} is configured and attempts_to detect a local connection if one is not supplied.;public void prepare() {_		synchronized (this.preparationMonitor) {_			if (this.server != null) {_				this.serverToUse = this.server__			}_			else {_				this.serverToUse = null__				this.serverToUse = this.connector.connect(this.serviceUrl, this.environment, this.agentId)__			}_			this.invocationHandler = null__			if (this.useStrictCasing) {_				Assert.state(this.objectName != null, "No ObjectName set")__				_				this.invocationHandler = new MBeanServerInvocationHandler(this.serverToUse, this.objectName,_						(this.managementInterface != null && JMX.isMXBeanInterface(this.managementInterface)))__			}_			else {_				_				_				retrieveMBeanInfo(this.serverToUse)__			}_		}_	};ensures,that,an,code,mbean,server,connection,is,configured,and,attempts,to,detect,a,local,connection,if,one,is,not,supplied;public,void,prepare,synchronized,this,preparation,monitor,if,this,server,null,this,server,to,use,this,server,else,this,server,to,use,null,this,server,to,use,this,connector,connect,this,service,url,this,environment,this,agent,id,this,invocation,handler,null,if,this,use,strict,casing,assert,state,this,object,name,null,no,object,name,set,this,invocation,handler,new,mbean,server,invocation,handler,this,server,to,use,this,object,name,this,management,interface,null,jmx,is,mxbean,interface,this,management,interface,else,retrieve,mbean,info,this,server,to,use
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1328020251;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_<code>getFoo()</code> translates to an attribute called <code>Foo</code>._With strict casing disabled, <code>getFoo()</code> would translate to just_<code>foo</code>.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,code,translates,to,an,attribute,called,code,foo,code,with,strict,casing,disabled,code,get,foo,code,would,translate,to,just,code,foo,code;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1335774711;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_<code>getFoo()</code> translates to an attribute called <code>Foo</code>._With strict casing disabled, <code>getFoo()</code> would translate to just_<code>foo</code>.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,code,translates,to,an,attribute,called,code,foo,code,with,strict,casing,disabled,code,get,foo,code,would,translate,to,just,code,foo,code;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1356735495;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1357119239;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1368482696;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1385412762;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1419855992;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1419881658;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1458999130;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1467730834;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1485277217;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1495868221;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1496242568;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1496837955;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1498780456;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1500416137;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1500448076;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1519732288;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> public void setUseStrictCasing(boolean useStrictCasing);1530174524;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class[] parameterTypes);1328020251;Create a new instance of <code>MethodCacheKey</code> with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class[0])__		};create,a,new,instance,of,code,method,cache,key,code,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class[] parameterTypes);1335774711;Create a new instance of <code>MethodCacheKey</code> with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class[0])__		};create,a,new,instance,of,code,method,cache,key,code,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class[] parameterTypes);1356735495;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class[] parameterTypes);1357119239;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class[] parameterTypes);1368482696;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> protected boolean isPrepared();1328020251;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1335774711;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1356735495;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1357119239;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1368482696;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1385412762;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1419855992;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1419881658;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1458999130;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1467730834;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1485277217;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1495868221;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1496242568;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1496837955;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1498780456;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1500416137;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1500448076;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1519732288;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> protected boolean isPrepared();1530174524;Return whether this client interceptor has already been prepared,_i.e. has already looked up the server and cached all metadata.;protected boolean isPrepared() {_		synchronized (this.preparationMonitor) {_			return (this.serverToUse != null)__		}_	};return,whether,this,client,interceptor,has,already,been,prepared,i,e,has,already,looked,up,the,server,and,cached,all,metadata;protected,boolean,is,prepared,synchronized,this,preparation,monitor,return,this,server,to,use,null
MBeanClientInterceptor -> private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException;1498780456;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = server.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,mbean,server,connection,server,throws,mbean,info,retrieval,exception,try,mbean,info,info,server,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException;1500416137;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = server.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,mbean,server,connection,server,throws,mbean,info,retrieval,exception,try,mbean,info,info,server,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException;1500448076;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = server.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,mbean,server,connection,server,throws,mbean,info,retrieval,exception,try,mbean,info,info,server,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException;1519732288;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = server.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,mbean,server,connection,server,throws,mbean,info,retrieval,exception,try,mbean,info,info,server,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException;1530174524;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo(MBeanServerConnection server) throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = server.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,mbean,server,connection,server,throws,mbean,info,retrieval,exception,try,mbean,info,info,server,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1356735495;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1368482696;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1385412762;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1419855992;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1419881658;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1458999130;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1467730834;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1485277217;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1495868221;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1496242568;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1496837955;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1498780456;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1500416137;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1500448076;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1519732288;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Override 	public void afterPropertiesSet();1530174524;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;@Override_	public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;override,public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation) throws Throwable;1496837955;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;@Nullable_	protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;nullable,protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation) throws Throwable;1498780456;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;@Nullable_	protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;nullable,protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation) throws Throwable;1500416137;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;@Nullable_	protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;nullable,protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation) throws Throwable;1500448076;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;@Nullable_	protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;nullable,protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation) throws Throwable;1519732288;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;@Nullable_	protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;nullable,protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation) throws Throwable;1530174524;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;@Nullable_	protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;nullable,protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> @Override 	@Nullable 	public Object invoke(MethodInvocation invocation) throws Throwable;1500416137;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	@Nullable_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,nullable,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	@Nullable 	public Object invoke(MethodInvocation invocation) throws Throwable;1500448076;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	@Nullable_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,nullable,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	@Nullable 	public Object invoke(MethodInvocation invocation) throws Throwable;1519732288;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	@Nullable_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException | IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,nullable,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	@Nullable 	public Object invoke(MethodInvocation invocation) throws Throwable;1530174524;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	@Nullable_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException | IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,nullable,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> public void setEnvironment(@Nullable Map<String, ?> environment);1500448076;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(@Nullable Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,nullable,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(@Nullable Map<String, ?> environment);1519732288;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(@Nullable Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,nullable,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(@Nullable Map<String, ?> environment);1530174524;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(@Nullable Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,nullable,map,string,environment,this,environment,environment
MBeanClientInterceptor -> @Nullable 	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter);1495868221;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;@Nullable_	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;nullable,protected,object,convert,result,value,if,necessary,nullable,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> @Nullable 	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter);1496242568;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;@Nullable_	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;nullable,protected,object,convert,result,value,if,necessary,nullable,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> @Nullable 	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter);1496837955;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;@Nullable_	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;nullable,protected,object,convert,result,value,if,necessary,nullable,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> @Nullable 	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter);1498780456;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;@Nullable_	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;nullable,protected,object,convert,result,value,if,necessary,nullable,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> @Nullable 	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter);1500416137;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;@Nullable_	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;nullable,protected,object,convert,result,value,if,necessary,nullable,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> @Nullable 	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter);1500448076;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;@Nullable_	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;nullable,protected,object,convert,result,value,if,necessary,nullable,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> @Nullable 	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter);1519732288;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;@Nullable_	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;nullable,protected,object,convert,result,value,if,necessary,nullable,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> @Nullable 	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter);1530174524;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;@Nullable_	protected Object convertResultValueIfNecessary(@Nullable Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;nullable,protected,object,convert,result,value,if,necessary,nullable,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1328020251;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1335774711;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1356735495;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1357119239;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1368482696;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1385412762;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1419855992;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1419881658;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1458999130;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1467730834;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1485277217;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1495868221;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1496242568;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1496837955;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1498780456;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> public void setEnvironment(Map<String, ?> environment);1500416137;Specify the environment for the JMX connector._@see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map);public void setEnvironment(Map<String, ?> environment) {_		this.environment = environment__	};specify,the,environment,for,the,jmx,connector,see,javax,management,remote,jmxconnector,factory,connect,javax,management,remote,jmxservice,url,java,util,map;public,void,set,environment,map,string,environment,this,environment,environment
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1356735495;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1368482696;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1385412762;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1419855992;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1419881658;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1458999130;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1467730834;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1485277217;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1495868221;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1496242568;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1496837955;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1498780456;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;override,public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> @Nullable 	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1496837955;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;@Nullable_	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;nullable,protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> @Nullable 	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1498780456;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;@Nullable_	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;nullable,protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> @Nullable 	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1500416137;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;@Nullable_	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;nullable,protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> @Nullable 	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1500448076;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;@Nullable_	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;nullable,protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> @Nullable 	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1519732288;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;@Nullable_	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;nullable,protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> @Nullable 	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1530174524;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;@Nullable_	protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;nullable,protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1328020251;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the <code>MBeanServer</code>_@param targetClass the result type of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,code,param,target,class,the,result,type,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1335774711;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the <code>MBeanServer</code>_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,code,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1356735495;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1357119239;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1368482696;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1385412762;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1419855992;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1419881658;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1458999130;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1467730834;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,generic,collection,type,resolver,get,collection,parameter,type,parameter,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter);1485277217;Convert the given result object (from attribute access or operation invocation)_to the specified target class for returning from the proxy method._@param result the result object as returned by the {@code MBeanServer}_@param parameter the method parameter of the proxy method that's been invoked_@return the converted result object, or the passed-in object if no conversion_is necessary;protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {_		Class<?> targetClass = parameter.getParameterType()__		try {_			if (result == null) {_				return null__			}_			if (ClassUtils.isAssignableValue(targetClass, result)) {_				return result__			}_			if (result instanceof CompositeData) {_				Method fromMethod = targetClass.getMethod("from", CompositeData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof CompositeData[]) {_				CompositeData[] array = (CompositeData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			else if (result instanceof TabularData) {_				Method fromMethod = targetClass.getMethod("from", TabularData.class)__				return ReflectionUtils.invokeMethod(fromMethod, null, result)__			}_			else if (result instanceof TabularData[]) {_				TabularData[] array = (TabularData[]) result__				if (targetClass.isArray()) {_					return convertDataArrayToTargetArray(array, targetClass)__				}_				else if (Collection.class.isAssignableFrom(targetClass)) {_					Class<?> elementType =_							ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric()__					if (elementType != null) {_						return convertDataArrayToTargetCollection(array, targetClass, elementType)__					}_				}_			}_			throw new InvocationFailureException(_					"Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")__		}_		catch (NoSuchMethodException ex) {_			throw new InvocationFailureException(_					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +_							targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")__		}_	};convert,the,given,result,object,from,attribute,access,or,operation,invocation,to,the,specified,target,class,for,returning,from,the,proxy,method,param,result,the,result,object,as,returned,by,the,code,mbean,server,param,parameter,the,method,parameter,of,the,proxy,method,that,s,been,invoked,return,the,converted,result,object,or,the,passed,in,object,if,no,conversion,is,necessary;protected,object,convert,result,value,if,necessary,object,result,method,parameter,parameter,class,target,class,parameter,get,parameter,type,try,if,result,null,return,null,if,class,utils,is,assignable,value,target,class,result,return,result,if,result,instanceof,composite,data,method,from,method,target,class,get,method,from,composite,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,composite,data,composite,data,array,composite,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,else,if,result,instanceof,tabular,data,method,from,method,target,class,get,method,from,tabular,data,class,return,reflection,utils,invoke,method,from,method,null,result,else,if,result,instanceof,tabular,data,tabular,data,array,tabular,data,result,if,target,class,is,array,return,convert,data,array,to,target,array,array,target,class,else,if,collection,class,is,assignable,from,target,class,class,element,type,resolvable,type,for,method,parameter,parameter,as,collection,resolve,generic,if,element,type,null,return,convert,data,array,to,target,collection,array,target,class,element,type,throw,new,invocation,failure,exception,incompatible,result,value,result,for,target,type,target,class,get,name,catch,no,such,method,exception,ex,throw,new,invocation,failure,exception,could,not,obtain,from,composite,data,from,tabular,data,method,on,target,type,target,class,get,name,for,conversion,of,mxbean,data,structure,result
MBeanClientInterceptor -> public void setManagementInterface(Class managementInterface);1328020251;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class managementInterface);1335774711;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class managementInterface);1356735495;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class managementInterface);1357119239;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class managementInterface);1368482696;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1328020251;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1335774711;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1356735495;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1357119239;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1368482696;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1385412762;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1419855992;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1419881658;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1458999130;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<String, MBeanAttributeInfo>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<MethodCacheKey, MBeanOperationInfo>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,string,mbean,attribute,info,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,method,cache,key,mbean,operation,info,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1467730834;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1485277217;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1495868221;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1496242568;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> private void retrieveMBeanInfo() throws MBeanInfoRetrievalException;1496837955;Loads the management interface info for the configured MBean into the caches._This information is used by the proxy when determining whether an invocation matches_a valid operation or attribute on the management interface of the managed resource.;private void retrieveMBeanInfo() throws MBeanInfoRetrievalException {_		try {_			MBeanInfo info = this.serverToUse.getMBeanInfo(this.objectName)___			MBeanAttributeInfo[] attributeInfo = info.getAttributes()__			this.allowedAttributes = new HashMap<>(attributeInfo.length)__			for (MBeanAttributeInfo infoEle : attributeInfo) {_				this.allowedAttributes.put(infoEle.getName(), infoEle)__			}__			MBeanOperationInfo[] operationInfo = info.getOperations()__			this.allowedOperations = new HashMap<>(operationInfo.length)__			for (MBeanOperationInfo infoEle : operationInfo) {_				Class<?>[] paramTypes = JmxUtils.parameterInfoToTypes(infoEle.getSignature(), this.beanClassLoader)__				this.allowedOperations.put(new MethodCacheKey(infoEle.getName(), paramTypes), infoEle)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature", ex)__		}_		catch (IntrospectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]", ex)__		}_		catch (InstanceNotFoundException ex) {_			_			throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName +_					"]: it is likely that this bean was unregistered during the proxy creation process",_					ex)__		}_		catch (ReflectionException ex) {_			throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]", ex)__		}_		catch (IOException ex) {_			throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " +_					"MBeanServer. It is likely that you are communicating with a remote MBeanServer. " +_					"Check the inner exception for exact details.", ex)__		}_	};loads,the,management,interface,info,for,the,configured,mbean,into,the,caches,this,information,is,used,by,the,proxy,when,determining,whether,an,invocation,matches,a,valid,operation,or,attribute,on,the,management,interface,of,the,managed,resource;private,void,retrieve,mbean,info,throws,mbean,info,retrieval,exception,try,mbean,info,info,this,server,to,use,get,mbean,info,this,object,name,mbean,attribute,info,attribute,info,info,get,attributes,this,allowed,attributes,new,hash,map,attribute,info,length,for,mbean,attribute,info,info,ele,attribute,info,this,allowed,attributes,put,info,ele,get,name,info,ele,mbean,operation,info,operation,info,info,get,operations,this,allowed,operations,new,hash,map,operation,info,length,for,mbean,operation,info,info,ele,operation,info,class,param,types,jmx,utils,parameter,info,to,types,info,ele,get,signature,this,bean,class,loader,this,allowed,operations,put,new,method,cache,key,info,ele,get,name,param,types,info,ele,catch,class,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,locate,class,specified,in,method,signature,ex,catch,introspection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,ex,catch,instance,not,found,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,obtain,mbean,info,for,bean,this,object,name,it,is,likely,that,this,bean,was,unregistered,during,the,proxy,creation,process,ex,catch,reflection,exception,ex,throw,new,mbean,info,retrieval,exception,unable,to,read,mbean,info,for,bean,this,object,name,ex,catch,ioexception,ex,throw,new,mbean,info,retrieval,exception,an,ioexception,occurred,when,communicating,with,the,mbean,server,it,is,likely,that,you,are,communicating,with,a,remote,mbean,server,check,the,inner,exception,for,exact,details,ex
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class<?>[] parameterTypes);1385412762;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class<?>[] parameterTypes);1419855992;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class<?>[] parameterTypes);1419881658;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class<?>[] parameterTypes);1458999130;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class<?>[] parameterTypes);1467730834;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class<?>[] parameterTypes);1485277217;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class<?>[] parameterTypes);1495868221;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> MethodCacheKey -> public MethodCacheKey(String name, Class<?>[] parameterTypes);1496242568;Create a new instance of {@code MethodCacheKey} with the supplied_method name and parameter list._@param name the name of the method_@param parameterTypes the arguments in the method signature;public MethodCacheKey(String name, Class<?>[] parameterTypes) {_			this.name = name__			this.parameterTypes = (parameterTypes != null ? parameterTypes : new Class<?>[0])__		};create,a,new,instance,of,code,method,cache,key,with,the,supplied,method,name,and,parameter,list,param,name,the,name,of,the,method,param,parameter,types,the,arguments,in,the,method,signature;public,method,cache,key,string,name,class,parameter,types,this,name,name,this,parameter,types,parameter,types,null,parameter,types,new,class,0
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1328020251;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to <code>MBeanServerConnection.get/setAttribute</code> and method invocation to_<code>MBeanServerConnection.invoke</code>._@param invocation the <code>MethodInvocation</code> to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,code,and,method,invocation,to,code,mbean,server,connection,invoke,code,param,invocation,the,code,method,invocation,code,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1335774711;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to <code>MBeanServerConnection.get/setAttribute</code> and method invocation to_<code>MBeanServerConnection.invoke</code>._@param invocation the <code>MethodInvocation</code> to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,code,and,method,invocation,to,code,mbean,server,connection,invoke,code,param,invocation,the,code,method,invocation,code,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1356735495;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1357119239;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1368482696;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1385412762;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1419855992;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1419881658;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1458999130;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1467730834;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1485277217;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1495868221;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object doInvoke(MethodInvocation invocation) throws Throwable;1496242568;Route the invocation to the configured managed resource. Correctly routes JavaBean property_access to {@code MBeanServerConnection.get/setAttribute} and method invocation to_{@code MBeanServerConnection.invoke}._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user;protected Object doInvoke(MethodInvocation invocation) throws Throwable {_		Method method = invocation.getMethod()__		try {_			Object result = null__			if (this.invocationHandler != null) {_				result = this.invocationHandler.invoke(invocation.getThis(), method, invocation.getArguments())__			}_			else {_				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__				if (pd != null) {_					result = invokeAttribute(pd, invocation)__				}_				else {_					result = invokeOperation(method, invocation.getArguments())__				}_			}_			return convertResultValueIfNecessary(result, new MethodParameter(method, -1))__		}_		catch (MBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeMBeanException ex) {_			throw ex.getTargetException()__		}_		catch (RuntimeErrorException ex) {_			throw ex.getTargetError()__		}_		catch (RuntimeOperationsException ex) {_			_			RuntimeException rex = ex.getTargetException()__			if (rex instanceof RuntimeMBeanException) {_				throw ((RuntimeMBeanException) rex).getTargetException()__			}_			else if (rex instanceof RuntimeErrorException) {_				throw ((RuntimeErrorException) rex).getTargetError()__			}_			else {_				throw rex__			}_		}_		catch (OperationsException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvalidInvocationException(ex.getMessage())__			}_		}_		catch (JMException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new InvocationFailureException("JMX access failed", ex)__			}_		}_		catch (IOException ex) {_			if (ReflectionUtils.declaresException(method, ex.getClass())) {_				throw ex__			}_			else {_				throw new MBeanConnectFailureException("I/O failure during JMX access", ex)__			}_		}_	};route,the,invocation,to,the,configured,managed,resource,correctly,routes,java,bean,property,access,to,code,mbean,server,connection,get,set,attribute,and,method,invocation,to,code,mbean,server,connection,invoke,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user;protected,object,do,invoke,method,invocation,invocation,throws,throwable,method,method,invocation,get,method,try,object,result,null,if,this,invocation,handler,null,result,this,invocation,handler,invoke,invocation,get,this,method,invocation,get,arguments,else,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,result,invoke,attribute,pd,invocation,else,result,invoke,operation,method,invocation,get,arguments,return,convert,result,value,if,necessary,result,new,method,parameter,method,1,catch,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,mbean,exception,ex,throw,ex,get,target,exception,catch,runtime,error,exception,ex,throw,ex,get,target,error,catch,runtime,operations,exception,ex,runtime,exception,rex,ex,get,target,exception,if,rex,instanceof,runtime,mbean,exception,throw,runtime,mbean,exception,rex,get,target,exception,else,if,rex,instanceof,runtime,error,exception,throw,runtime,error,exception,rex,get,target,error,else,throw,rex,catch,operations,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invalid,invocation,exception,ex,get,message,catch,jmexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,invocation,failure,exception,jmx,access,failed,ex,catch,ioexception,ex,if,reflection,utils,declares,exception,method,ex,get,class,throw,ex,else,throw,new,mbean,connect,failure,exception,i,o,failure,during,jmx,access,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1328020251;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1335774711;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1356735495;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1357119239;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1368482696;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1385412762;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1419855992;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1419881658;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1458999130;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1467730834;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1485277217;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1495868221;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1496242568;Refresh the connection and retry the MBean invocation if possible._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshOnConnectFailure_@see #doInvoke;protected Object handleConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshOnConnectFailure) {_			String msg = "Could not connect to JMX server - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			prepare()__			return doInvoke(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,connection,and,retry,the,mbean,invocation,if,possible,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,on,connect,failure,see,do,invoke;protected,object,handle,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,on,connect,failure,string,msg,could,not,connect,to,jmx,server,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,prepare,return,do,invoke,invocation,else,throw,ex
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1328020251;Set the <code>ObjectName</code> of the MBean which calls are routed to,_as <code>ObjectName</code> instance or as <code>String</code>.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,code,of,the,mbean,which,calls,are,routed,to,as,code,object,name,code,instance,or,as,code,string,code;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1335774711;Set the <code>ObjectName</code> of the MBean which calls are routed to,_as <code>ObjectName</code> instance or as <code>String</code>.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,code,of,the,mbean,which,calls,are,routed,to,as,code,object,name,code,instance,or,as,code,string,code;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1356735495;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1357119239;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1368482696;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1385412762;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1419855992;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1419881658;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1458999130;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1467730834;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1485277217;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1495868221;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1496242568;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1496837955;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1498780456;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1500416137;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1500448076;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1519732288;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void setObjectName(Object objectName) throws MalformedObjectNameException;1530174524;Set the {@code ObjectName} of the MBean which calls are routed to,_as {@code ObjectName} instance or as {@code String}.;public void setObjectName(Object objectName) throws MalformedObjectNameException {_		this.objectName = ObjectNameManager.getInstance(objectName)__	};set,the,code,object,name,of,the,mbean,which,calls,are,routed,to,as,code,object,name,instance,or,as,code,string;public,void,set,object,name,object,object,name,throws,malformed,object,name,exception,this,object,name,object,name,manager,get,instance,object,name
MBeanClientInterceptor -> public void afterPropertiesSet();1328020251;Prepares the <code>MBeanServerConnection</code> if the "connectOnStartup"_is turned on (which it is by default).;public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,code,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> public void afterPropertiesSet();1335774711;Prepares the <code>MBeanServerConnection</code> if the "connectOnStartup"_is turned on (which it is by default).;public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,code,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> public void afterPropertiesSet();1357119239;Prepares the {@code MBeanServerConnection} if the "connectOnStartup"_is turned on (which it is by default).;public void afterPropertiesSet() {_		if (this.server != null && this.refreshOnConnectFailure) {_			throw new IllegalArgumentException("'refreshOnConnectFailure' does not work when setting " +_					"a 'server' reference. Prefer 'serviceUrl' etc instead.")__		}_		if (this.connectOnStartup) {_			prepare()__		}_	};prepares,the,code,mbean,server,connection,if,the,connect,on,startup,is,turned,on,which,it,is,by,default;public,void,after,properties,set,if,this,server,null,this,refresh,on,connect,failure,throw,new,illegal,argument,exception,refresh,on,connect,failure,does,not,work,when,setting,a,server,reference,prefer,service,url,etc,instead,if,this,connect,on,startup,prepare
MBeanClientInterceptor -> public void setAgentId(String agentId);1328020251;Set the agent id of the <code>MBeanServer</code> to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,code,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1335774711;Set the agent id of the <code>MBeanServer</code> to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,code,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1356735495;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1357119239;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1368482696;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1385412762;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1419855992;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1419881658;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1458999130;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1467730834;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1485277217;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1495868221;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1496242568;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1496837955;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1498780456;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1500416137;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1500448076;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1519732288;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setAgentId(String agentId);1530174524;Set the agent id of the {@code MBeanServer} to locate._<p>Default is none. If specified, this will result in an_attempt being made to locate the attendant MBeanServer, unless_the {@link #setServiceUrl "serviceUrl"} property has been set._@see javax.management.MBeanServerFactory#findMBeanServer(String)_<p>Specifying the empty String indicates the platform MBeanServer.;public void setAgentId(String agentId) {_		this.agentId = agentId__	};set,the,agent,id,of,the,code,mbean,server,to,locate,p,default,is,none,if,specified,this,will,result,in,an,attempt,being,made,to,locate,the,attendant,mbean,server,unless,the,link,set,service,url,service,url,property,has,been,set,see,javax,management,mbean,server,factory,find,mbean,server,string,p,specifying,the,empty,string,indicates,the,platform,mbean,server;public,void,set,agent,id,string,agent,id,this,agent,id,agent,id
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1328020251;Set the <code>MBeanServerConnection</code> used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,code,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1335774711;Set the <code>MBeanServerConnection</code> used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,code,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1356735495;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1357119239;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1368482696;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1385412762;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1419855992;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1419881658;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1458999130;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1467730834;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1485277217;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1495868221;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1496242568;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1496837955;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1498780456;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1500416137;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1500448076;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1519732288;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public void setServer(MBeanServerConnection server);1530174524;Set the {@code MBeanServerConnection} used to connect to the_MBean which all invocations are routed to.;public void setServer(MBeanServerConnection server) {_		this.server = server__	};set,the,code,mbean,server,connection,used,to,connect,to,the,mbean,which,all,invocations,are,routed,to;public,void,set,server,mbean,server,connection,server,this,server,server
MBeanClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1328020251;Route the invocation to the configured managed resource.._@param invocation the <code>MethodInvocation</code> to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,code,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1335774711;Route the invocation to the configured managed resource.._@param invocation the <code>MethodInvocation</code> to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,code,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1357119239;Route the invocation to the configured managed resource.._@param invocation the {@code MethodInvocation} to re-route_@return the value returned as a result of the re-routed invocation_@throws Throwable an invocation error propagated to the user_@see #doInvoke_@see #handleConnectFailure;public Object invoke(MethodInvocation invocation) throws Throwable {_		_		synchronized (this.preparationMonitor) {_			if (!isPrepared()) {_				prepare()__			}_		}_		try {_			return doInvoke(invocation)__		}_		catch (MBeanConnectFailureException ex) {_			return handleConnectFailure(invocation, ex)__		}_		catch (IOException ex) {_			return handleConnectFailure(invocation, ex)__		}_	};route,the,invocation,to,the,configured,managed,resource,param,invocation,the,code,method,invocation,to,re,route,return,the,value,returned,as,a,result,of,the,re,routed,invocation,throws,throwable,an,invocation,error,propagated,to,the,user,see,do,invoke,see,handle,connect,failure;public,object,invoke,method,invocation,invocation,throws,throwable,synchronized,this,preparation,monitor,if,is,prepared,prepare,try,return,do,invoke,invocation,catch,mbean,connect,failure,exception,ex,return,handle,connect,failure,invocation,ex,catch,ioexception,ex,return,handle,connect,failure,invocation,ex
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1328020251;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1335774711;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1356735495;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1357119239;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1368482696;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1385412762;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1419855992;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1419881658;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1458999130;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1467730834;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1485277217;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1495868221;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1496242568;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1496837955;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}_		String[] signature = null__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}_		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,null,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1498780456;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		Assert.state(this.serverToUse != null, "No MBeanServerConnection available")___		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}__		String[] signature__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}__		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,assert,state,this,server,to,use,null,no,mbean,server,connection,available,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1500416137;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		Assert.state(this.serverToUse != null, "No MBeanServerConnection available")___		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}__		String[] signature__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}__		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,assert,state,this,server,to,use,null,no,mbean,server,connection,available,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1500448076;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		Assert.state(this.serverToUse != null, "No MBeanServerConnection available")___		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}__		String[] signature__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}__		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,assert,state,this,server,to,use,null,no,mbean,server,connection,available,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1519732288;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		Assert.state(this.serverToUse != null, "No MBeanServerConnection available")___		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}__		String[] signature__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}__		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,assert,state,this,server,to,use,null,no,mbean,server,connection,available,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> private Object invokeOperation(Method method, Object[] args) throws JMException, IOException;1530174524;Routes a method invocation (not a property get/set) to the corresponding_operation on the managed resource._@param method the method corresponding to operation on the managed resource._@param args the invocation arguments_@return the value returned by the method invocation.;private Object invokeOperation(Method method, Object[] args) throws JMException, IOException {_		Assert.state(this.serverToUse != null, "No MBeanServerConnection available")___		MethodCacheKey key = new MethodCacheKey(method.getName(), method.getParameterTypes())__		MBeanOperationInfo info = this.allowedOperations.get(key)__		if (info == null) {_			throw new InvalidInvocationException("Operation '" + method.getName() +_					"' is not exposed on the management interface")__		}__		String[] signature__		synchronized (this.signatureCache) {_			signature = this.signatureCache.get(method)__			if (signature == null) {_				signature = JmxUtils.getMethodSignature(method)__				this.signatureCache.put(method, signature)__			}_		}__		return this.serverToUse.invoke(this.objectName, method.getName(), args, signature)__	};routes,a,method,invocation,not,a,property,get,set,to,the,corresponding,operation,on,the,managed,resource,param,method,the,method,corresponding,to,operation,on,the,managed,resource,param,args,the,invocation,arguments,return,the,value,returned,by,the,method,invocation;private,object,invoke,operation,method,method,object,args,throws,jmexception,ioexception,assert,state,this,server,to,use,null,no,mbean,server,connection,available,method,cache,key,key,new,method,cache,key,method,get,name,method,get,parameter,types,mbean,operation,info,info,this,allowed,operations,get,key,if,info,null,throw,new,invalid,invocation,exception,operation,method,get,name,is,not,exposed,on,the,management,interface,string,signature,synchronized,this,signature,cache,signature,this,signature,cache,get,method,if,signature,null,signature,jmx,utils,get,method,signature,method,this,signature,cache,put,method,signature,return,this,server,to,use,invoke,this,object,name,method,get,name,args,signature
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1328020251;Set the service URL of the remote <code>MBeanServer</code>.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server,code;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1335774711;Set the service URL of the remote <code>MBeanServer</code>.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server,code;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1356735495;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1357119239;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1368482696;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1385412762;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1419855992;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1419881658;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1458999130;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1467730834;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1485277217;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1495868221;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1496242568;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1496837955;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1498780456;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1500416137;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1500448076;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1519732288;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setServiceUrl(String url) throws MalformedURLException;1530174524;Set the service URL of the remote {@code MBeanServer}.;public void setServiceUrl(String url) throws MalformedURLException {_		this.serviceUrl = new JMXServiceURL(url)__	};set,the,service,url,of,the,remote,code,mbean,server;public,void,set,service,url,string,url,throws,malformed,urlexception,this,service,url,new,jmxservice,url,url
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1385412762;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1419855992;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1419881658;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1458999130;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1467730834;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1485277217;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1495868221;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1496242568;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1496837955;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1498780456;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> public void setManagementInterface(Class<?> managementInterface);1500416137;Set the management interface of the target MBean, exposing bean property_setters and getters for MBean attributes and conventional Java methods_for MBean operations.;public void setManagementInterface(Class<?> managementInterface) {_		this.managementInterface = managementInterface__	};set,the,management,interface,of,the,target,mbean,exposing,bean,property,setters,and,getters,for,mbean,attributes,and,conventional,java,methods,for,mbean,operations;public,void,set,management,interface,class,management,interface,this,management,interface,management,interface
MBeanClientInterceptor -> @Nullable 	protected final Class<?> getManagementInterface();1495868221;Return the management interface of the target MBean,_or {@code null} if none specified.;@Nullable_	protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;nullable,protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> @Nullable 	protected final Class<?> getManagementInterface();1496242568;Return the management interface of the target MBean,_or {@code null} if none specified.;@Nullable_	protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;nullable,protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> @Nullable 	protected final Class<?> getManagementInterface();1496837955;Return the management interface of the target MBean,_or {@code null} if none specified.;@Nullable_	protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;nullable,protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> @Nullable 	protected final Class<?> getManagementInterface();1498780456;Return the management interface of the target MBean,_or {@code null} if none specified.;@Nullable_	protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;nullable,protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> @Nullable 	protected final Class<?> getManagementInterface();1500416137;Return the management interface of the target MBean,_or {@code null} if none specified.;@Nullable_	protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;nullable,protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> @Nullable 	protected final Class<?> getManagementInterface();1500448076;Return the management interface of the target MBean,_or {@code null} if none specified.;@Nullable_	protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;nullable,protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> @Nullable 	protected final Class<?> getManagementInterface();1519732288;Return the management interface of the target MBean,_or {@code null} if none specified.;@Nullable_	protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;nullable,protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> @Nullable 	protected final Class<?> getManagementInterface();1530174524;Return the management interface of the target MBean,_or {@code null} if none specified.;@Nullable_	protected final Class<?> getManagementInterface() {_		return this.managementInterface__	};return,the,management,interface,of,the,target,mbean,or,code,null,if,none,specified;nullable,protected,final,class,get,management,interface,return,this,management,interface
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1328020251;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1335774711;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1356735495;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1357119239;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1368482696;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1385412762;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1419855992;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1419881658;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1458999130;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1467730834;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1485277217;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1495868221;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1496242568;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1496837955;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1498780456;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1500416137;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1500448076;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1519732288;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
MBeanClientInterceptor -> public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure);1530174524;Set whether to refresh the MBeanServer connection on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the JMX server,_automatically reconnecting and retrying in case of an IOException.;public void setRefreshOnConnectFailure(boolean refreshOnConnectFailure) {_		this.refreshOnConnectFailure = refreshOnConnectFailure__	};set,whether,to,refresh,the,mbean,server,connection,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,jmx,server,automatically,reconnecting,and,retrying,in,case,of,an,ioexception;public,void,set,refresh,on,connect,failure,boolean,refresh,on,connect,failure,this,refresh,on,connect,failure,refresh,on,connect,failure
