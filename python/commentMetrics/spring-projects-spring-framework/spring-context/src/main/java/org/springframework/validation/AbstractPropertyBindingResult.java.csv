# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractPropertyBindingResult -> @Override 	public Class<?> getFieldType(@Nullable String field);1496242568;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	public Class<?> getFieldType(@Nullable String field) {_		return getPropertyAccessor().getPropertyType(fixedField(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,public,class,get,field,type,nullable,string,field,return,get,property,accessor,get,property,type,fixed,field,field
AbstractPropertyBindingResult -> @Override 	public Class<?> getFieldType(@Nullable String field);1496837955;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	public Class<?> getFieldType(@Nullable String field) {_		return getPropertyAccessor().getPropertyType(fixedField(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,public,class,get,field,type,nullable,string,field,return,get,property,accessor,get,property,type,fixed,field,field
AbstractPropertyBindingResult -> @Override 	public Class<?> getFieldType(@Nullable String field);1498780456;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	public Class<?> getFieldType(@Nullable String field) {_		return getPropertyAccessor().getPropertyType(fixedField(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,public,class,get,field,type,nullable,string,field,return,get,property,accessor,get,property,type,fixed,field,field
AbstractPropertyBindingResult -> protected PropertyEditor getCustomEditor(String fixedField);1328020251;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or <code>null</code>;protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null,code;protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> protected PropertyEditor getCustomEditor(String fixedField);1356735495;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or {@code null};protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null;protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> protected PropertyEditor getCustomEditor(String fixedField);1476284935;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or {@code null};protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null;protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> @Override 	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType);1496242568;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,public,property,editor,find,editor,nullable,string,field,nullable,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
AbstractPropertyBindingResult -> @Override 	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType);1496837955;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (ptd != null && (valueType == null || valueType.isAssignableFrom(ptd.getType()))) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,public,property,editor,find,editor,nullable,string,field,nullable,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,ptd,null,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
AbstractPropertyBindingResult -> @Override 	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType);1498780456;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (ptd != null && (valueType == null || valueType.isAssignableFrom(ptd.getType()))) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,public,property,editor,find,editor,nullable,string,field,nullable,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,ptd,null,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
AbstractPropertyBindingResult -> @Override 	@Nullable 	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType);1502974979;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	@Nullable_	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (ptd != null && (valueType == null || valueType.isAssignableFrom(ptd.getType()))) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,nullable,public,property,editor,find,editor,nullable,string,field,nullable,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,ptd,null,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
AbstractPropertyBindingResult -> @Override 	@Nullable 	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType);1517567636;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	@Nullable_	public PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null && getTarget() != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (ptd != null && (valueType == null || valueType.isAssignableFrom(ptd.getType()))) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,nullable,public,property,editor,find,editor,nullable,string,field,nullable,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,get,target,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,ptd,null,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
AbstractPropertyBindingResult -> @Override 	protected Object getActualFieldValue(String field);1328020251;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> @Override 	protected Object getActualFieldValue(String field);1356735495;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> @Override 	protected Object getActualFieldValue(String field);1476284935;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> @Override 	protected Object getActualFieldValue(String field);1495868221;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> @Override 	protected Object getActualFieldValue(String field);1496242568;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> @Override 	protected Object getActualFieldValue(String field);1496837955;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> @Override 	protected Object getActualFieldValue(String field);1498780456;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, Object value);1328020251;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, Object value);1356735495;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, Object value);1476284935;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, Object value);1495868221;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, Object value);1496242568;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1328020251;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return getPropertyAccessor()__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1356735495;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return getPropertyAccessor()__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1476284935;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return getPropertyAccessor()__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1495868221;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return getPropertyAccessor()__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1496242568;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return getPropertyAccessor()__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1496837955;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return getPropertyAccessor()__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1498780456;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return getPropertyAccessor()__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1502974979;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return getPropertyAccessor()__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditorRegistry getPropertyEditorRegistry();1517567636;Returns the underlying PropertyAccessor._@see #getPropertyAccessor();@Override_	public PropertyEditorRegistry getPropertyEditorRegistry() {_		return (getTarget() != null ? getPropertyAccessor() : null)__	};returns,the,underlying,property,accessor,see,get,property,accessor;override,public,property,editor,registry,get,property,editor,registry,return,get,target,null,get,property,accessor,null
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, @Nullable Object value);1496837955;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, @Nullable Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,nullable,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, @Nullable Object value);1498780456;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, @Nullable Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,nullable,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, @Nullable Object value);1502974979;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, @Nullable Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,nullable,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> @Override 	protected Object formatFieldValue(String field, @Nullable Object value);1517567636;Formats the field value based on registered PropertyEditors._@see #getCustomEditor;@Override_	protected Object formatFieldValue(String field, @Nullable Object value) {_		String fixedField = fixedField(field)__		_		PropertyEditor customEditor = getCustomEditor(fixedField)__		if (customEditor != null) {_			customEditor.setValue(value)__			String textValue = customEditor.getAsText()__			_			_			if (textValue != null) {_				return textValue__			}_		}_		if (this.conversionService != null) {_			_			TypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField)__			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class)__			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {_				return this.conversionService.convert(value, fieldDesc, strDesc)__			}_		}_		return value__	};formats,the,field,value,based,on,registered,property,editors,see,get,custom,editor;override,protected,object,format,field,value,string,field,nullable,object,value,string,fixed,field,fixed,field,field,property,editor,custom,editor,get,custom,editor,fixed,field,if,custom,editor,null,custom,editor,set,value,value,string,text,value,custom,editor,get,as,text,if,text,value,null,return,text,value,if,this,conversion,service,null,type,descriptor,field,desc,get,property,accessor,get,property,type,descriptor,fixed,field,type,descriptor,str,desc,type,descriptor,value,of,string,class,if,field,desc,null,this,conversion,service,can,convert,field,desc,str,desc,return,this,conversion,service,convert,value,field,desc,str,desc,return,value
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1328020251;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1356735495;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1476284935;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1495868221;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1496242568;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1496837955;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1498780456;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1502974979;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> protected AbstractPropertyBindingResult(String objectName);1517567636;Create a new AbstractPropertyBindingResult instance._@param objectName the name of the target object_@see DefaultMessageCodesResolver;protected AbstractPropertyBindingResult(String objectName) {_		super(objectName)__	};create,a,new,abstract,property,binding,result,instance,param,object,name,the,name,of,the,target,object,see,default,message,codes,resolver;protected,abstract,property,binding,result,string,object,name,super,object,name
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1328020251;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1356735495;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1476284935;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1495868221;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1496242568;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1496837955;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1498780456;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1502974979;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	protected String canonicalFieldName(String field);1517567636;Returns the canonical property name._@see org.springframework.beans.PropertyAccessorUtils#canonicalPropertyName;@Override_	protected String canonicalFieldName(String field) {_		return PropertyAccessorUtils.canonicalPropertyName(field)__	};returns,the,canonical,property,name,see,org,springframework,beans,property,accessor,utils,canonical,property,name;override,protected,string,canonical,field,name,string,field,return,property,accessor,utils,canonical,property,name,field
AbstractPropertyBindingResult -> @Override 	public Class<?> getFieldType(String field);1328020251;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	public Class<?> getFieldType(String field) {_		return getPropertyAccessor().getPropertyType(fixedField(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,public,class,get,field,type,string,field,return,get,property,accessor,get,property,type,fixed,field,field
AbstractPropertyBindingResult -> @Override 	public Class<?> getFieldType(String field);1356735495;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	public Class<?> getFieldType(String field) {_		return getPropertyAccessor().getPropertyType(fixedField(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,public,class,get,field,type,string,field,return,get,property,accessor,get,property,type,fixed,field,field
AbstractPropertyBindingResult -> @Override 	public Class<?> getFieldType(String field);1476284935;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	public Class<?> getFieldType(String field) {_		return getPropertyAccessor().getPropertyType(fixedField(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,public,class,get,field,type,string,field,return,get,property,accessor,get,property,type,fixed,field,field
AbstractPropertyBindingResult -> @Override 	public Class<?> getFieldType(String field);1495868221;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	public Class<?> getFieldType(String field) {_		return getPropertyAccessor().getPropertyType(fixedField(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,public,class,get,field,type,string,field,return,get,property,accessor,get,property,type,fixed,field,field
AbstractPropertyBindingResult -> @Override 	@Nullable 	public Class<?> getFieldType(@Nullable String field);1502974979;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	@Nullable_	public Class<?> getFieldType(@Nullable String field) {_		return getPropertyAccessor().getPropertyType(fixedField(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,nullable,public,class,get,field,type,nullable,string,field,return,get,property,accessor,get,property,type,fixed,field,field
AbstractPropertyBindingResult -> @Override 	@Nullable 	public Class<?> getFieldType(@Nullable String field);1517567636;Determines the field type from the property type._@see #getPropertyAccessor();@Override_	@Nullable_	public Class<?> getFieldType(@Nullable String field) {_		return (getTarget() != null ? getPropertyAccessor().getPropertyType(fixedField(field)) :_				super.getFieldType(field))__	};determines,the,field,type,from,the,property,type,see,get,property,accessor;override,nullable,public,class,get,field,type,nullable,string,field,return,get,target,null,get,property,accessor,get,property,type,fixed,field,field,super,get,field,type,field
AbstractPropertyBindingResult -> @Nullable 	protected PropertyEditor getCustomEditor(String fixedField);1495868221;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or {@code null};@Nullable_	protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null;nullable,protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> @Nullable 	protected PropertyEditor getCustomEditor(String fixedField);1496242568;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or {@code null};@Nullable_	protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null;nullable,protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> @Nullable 	protected PropertyEditor getCustomEditor(String fixedField);1496837955;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or {@code null};@Nullable_	protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null;nullable,protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> @Nullable 	protected PropertyEditor getCustomEditor(String fixedField);1498780456;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or {@code null};@Nullable_	protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null;nullable,protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> @Nullable 	protected PropertyEditor getCustomEditor(String fixedField);1502974979;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or {@code null};@Nullable_	protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null;nullable,protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> @Nullable 	protected PropertyEditor getCustomEditor(String fixedField);1517567636;Retrieve the custom PropertyEditor for the given field, if any._@param fixedField the fully qualified field name_@return the custom PropertyEditor, or {@code null};@Nullable_	protected PropertyEditor getCustomEditor(String fixedField) {_		Class<?> targetType = getPropertyAccessor().getPropertyType(fixedField)__		PropertyEditor editor = getPropertyAccessor().findCustomEditor(targetType, fixedField)__		if (editor == null) {_			editor = BeanUtils.findEditorByConvention(targetType)__		}_		return editor__	};retrieve,the,custom,property,editor,for,the,given,field,if,any,param,fixed,field,the,fully,qualified,field,name,return,the,custom,property,editor,or,code,null;nullable,protected,property,editor,get,custom,editor,string,fixed,field,class,target,type,get,property,accessor,get,property,type,fixed,field,property,editor,editor,get,property,accessor,find,custom,editor,target,type,fixed,field,if,editor,null,editor,bean,utils,find,editor,by,convention,target,type,return,editor
AbstractPropertyBindingResult -> @Override 	@Nullable 	protected Object getActualFieldValue(String field);1502974979;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	@Nullable_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,nullable,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> @Override 	@Nullable 	protected Object getActualFieldValue(String field);1517567636;Fetches the field value from the PropertyAccessor._@see #getPropertyAccessor();@Override_	@Nullable_	protected Object getActualFieldValue(String field) {_		return getPropertyAccessor().getPropertyValue(field)__	};fetches,the,field,value,from,the,property,accessor,see,get,property,accessor;override,nullable,protected,object,get,actual,field,value,string,field,return,get,property,accessor,get,property,value,field
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1328020251;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1356735495;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1476284935;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1495868221;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1496242568;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1496837955;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1498780456;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1502974979;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;1517567636;Provide the PropertyAccessor to work with, according to the_concrete strategy of access._<p>Note that a PropertyAccessor used by a BindingResult should_always have its "extractOldValueForEditor" flag set to "true"_by default, since this is typically possible without side effects_for model objects that serve as data binding target._@see ConfigurablePropertyAccessor#setExtractOldValueForEditor;public abstract ConfigurablePropertyAccessor getPropertyAccessor()_;provide,the,property,accessor,to,work,with,according,to,the,concrete,strategy,of,access,p,note,that,a,property,accessor,used,by,a,binding,result,should,always,have,its,extract,old,value,for,editor,flag,set,to,true,by,default,since,this,is,typically,possible,without,side,effects,for,model,objects,that,serve,as,data,binding,target,see,configurable,property,accessor,set,extract,old,value,for,editor;public,abstract,configurable,property,accessor,get,property,accessor
AbstractPropertyBindingResult -> @Override 	public PropertyEditor findEditor(String field, Class<?> valueType);1328020251;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	public PropertyEditor findEditor(String field, Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,public,property,editor,find,editor,string,field,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
AbstractPropertyBindingResult -> @Override 	public PropertyEditor findEditor(String field, Class<?> valueType);1356735495;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	public PropertyEditor findEditor(String field, Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,public,property,editor,find,editor,string,field,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
AbstractPropertyBindingResult -> @Override 	public PropertyEditor findEditor(String field, Class<?> valueType);1476284935;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	public PropertyEditor findEditor(String field, Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,public,property,editor,find,editor,string,field,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
AbstractPropertyBindingResult -> @Override 	public PropertyEditor findEditor(String field, Class<?> valueType);1495868221;This implementation exposes a PropertyEditor adapter for a Formatter,_if applicable.;@Override_	public PropertyEditor findEditor(String field, Class<?> valueType) {_		Class<?> valueTypeForLookup = valueType__		if (valueTypeForLookup == null) {_			valueTypeForLookup = getFieldType(field)__		}_		PropertyEditor editor = super.findEditor(field, valueTypeForLookup)__		if (editor == null && this.conversionService != null) {_			TypeDescriptor td = null__			if (field != null) {_				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field))__				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {_					td = ptd__				}_			}_			if (td == null) {_				td = TypeDescriptor.valueOf(valueTypeForLookup)__			}_			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {_				editor = new ConvertingPropertyEditorAdapter(this.conversionService, td)__			}_		}_		return editor__	};this,implementation,exposes,a,property,editor,adapter,for,a,formatter,if,applicable;override,public,property,editor,find,editor,string,field,class,value,type,class,value,type,for,lookup,value,type,if,value,type,for,lookup,null,value,type,for,lookup,get,field,type,field,property,editor,editor,super,find,editor,field,value,type,for,lookup,if,editor,null,this,conversion,service,null,type,descriptor,td,null,if,field,null,type,descriptor,ptd,get,property,accessor,get,property,type,descriptor,fixed,field,field,if,value,type,null,value,type,is,assignable,from,ptd,get,type,td,ptd,if,td,null,td,type,descriptor,value,of,value,type,for,lookup,if,this,conversion,service,can,convert,type,descriptor,value,of,string,class,td,editor,new,converting,property,editor,adapter,this,conversion,service,td,return,editor
