commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onApplicationEvent(ApplicationEvent event) {     this.delegate.onApplicationEvent(event). }
false;public;1;11;;@Override @SuppressWarnings("unchecked") public boolean supportsEventType(ResolvableType eventType) {     if (this.delegate instanceof SmartApplicationListener) {         Class<? extends ApplicationEvent> eventClass = (Class<? extends ApplicationEvent>) eventType.resolve().         return (eventClass != null && ((SmartApplicationListener) this.delegate).supportsEventType(eventClass)).     } else {         return (this.declaredEventType == null || this.declaredEventType.isAssignableFrom(eventType)).     } }
false;public;1;4;;@Override public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {     return supportsEventType(ResolvableType.forClass(eventType)). }
false;public;1;5;;@Override public boolean supportsSourceType(@Nullable Class<?> sourceType) {     return !(this.delegate instanceof SmartApplicationListener) || ((SmartApplicationListener) this.delegate).supportsSourceType(sourceType). }
false;public;0;4;;@Override public int getOrder() {     return (this.delegate instanceof Ordered ? ((Ordered) this.delegate).getOrder() : Ordered.LOWEST_PRECEDENCE). }
false;private,static;1;11;;@Nullable private static ResolvableType resolveDeclaredEventType(ApplicationListener<ApplicationEvent> listener) {     ResolvableType declaredEventType = resolveDeclaredEventType(listener.getClass()).     if (declaredEventType == null || declaredEventType.isAssignableFrom(ApplicationEvent.class)) {         Class<?> targetClass = AopUtils.getTargetClass(listener).         if (targetClass != listener.getClass()) {             declaredEventType = resolveDeclaredEventType(targetClass).         }     }     return declaredEventType. }
false;static;1;9;;@Nullable static ResolvableType resolveDeclaredEventType(Class<?> listenerType) {     ResolvableType eventType = eventTypeCache.get(listenerType).     if (eventType == null) {         eventType = ResolvableType.forClass(listenerType).as(ApplicationListener.class).getGeneric().         eventTypeCache.put(listenerType, eventType).     }     return (eventType != ResolvableType.NONE ? eventType : null). }
