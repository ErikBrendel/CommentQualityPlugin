# id;timestamp;commentText;codeText;commentWords;codeWords
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName);1328020251;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName) {_		return convertRmiAccessException(method, ex, isConnectFailure(ex), serviceName)__	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,string,service,name,return,convert,rmi,access,exception,method,ex,is,connect,failure,ex,service,name
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName);1356735495;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName) {_		return convertRmiAccessException(method, ex, isConnectFailure(ex), serviceName)__	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,string,service,name,return,convert,rmi,access,exception,method,ex,is,connect,failure,ex,service,name
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName);1363701206;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName) {_		return convertRmiAccessException(method, ex, isConnectFailure(ex), serviceName)__	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,string,service,name,return,convert,rmi,access,exception,method,ex,is,connect,failure,ex,service,name
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName);1367508310;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName) {_		return convertRmiAccessException(method, ex, isConnectFailure(ex), serviceName)__	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,string,service,name,return,convert,rmi,access,exception,method,ex,is,connect,failure,ex,service,name
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName);1468949854;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName) {_		return convertRmiAccessException(method, ex, isConnectFailure(ex), serviceName)__	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,string,service,name,return,convert,rmi,access,exception,method,ex,is,connect,failure,ex,service,name
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName);1495868221;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, RemoteException ex, String serviceName) {_		return convertRmiAccessException(method, ex, isConnectFailure(ex), serviceName)__	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,string,service,name,return,convert,rmi,access,exception,method,ex,is,connect,failure,ex,service,name
RmiClientInterceptorUtils -> @Deprecated 	public static Object doInvoke(MethodInvocation invocation, Remote stub) throws InvocationTargetException;1328020251;Perform a raw method invocation on the given RMI stub,_letting reflection exceptions through as-is._@deprecated as of Spring 2.5, in favor of {@link #invokeRemoteMethod};@Deprecated_	public static Object doInvoke(MethodInvocation invocation, Remote stub) throws InvocationTargetException {_		return invokeRemoteMethod(invocation, stub)__	};perform,a,raw,method,invocation,on,the,given,rmi,stub,letting,reflection,exceptions,through,as,is,deprecated,as,of,spring,2,5,in,favor,of,link,invoke,remote,method;deprecated,public,static,object,do,invoke,method,invocation,invocation,remote,stub,throws,invocation,target,exception,return,invoke,remote,method,invocation,stub
RmiClientInterceptorUtils -> @Deprecated 	public static Object doInvoke(MethodInvocation invocation, Remote stub) throws InvocationTargetException;1356735495;Perform a raw method invocation on the given RMI stub,_letting reflection exceptions through as-is._@deprecated as of Spring 2.5, in favor of {@link #invokeRemoteMethod};@Deprecated_	public static Object doInvoke(MethodInvocation invocation, Remote stub) throws InvocationTargetException {_		return invokeRemoteMethod(invocation, stub)__	};perform,a,raw,method,invocation,on,the,given,rmi,stub,letting,reflection,exceptions,through,as,is,deprecated,as,of,spring,2,5,in,favor,of,link,invoke,remote,method;deprecated,public,static,object,do,invoke,method,invocation,invocation,remote,stub,throws,invocation,target,exception,return,invoke,remote,method,invocation,stub
RmiClientInterceptorUtils -> @Deprecated 	public static Object doInvoke(MethodInvocation invocation, Remote stub) throws InvocationTargetException;1363701206;Perform a raw method invocation on the given RMI stub,_letting reflection exceptions through as-is._@deprecated as of Spring 2.5, in favor of {@link #invokeRemoteMethod};@Deprecated_	public static Object doInvoke(MethodInvocation invocation, Remote stub) throws InvocationTargetException {_		return invokeRemoteMethod(invocation, stub)__	};perform,a,raw,method,invocation,on,the,given,rmi,stub,letting,reflection,exceptions,through,as,is,deprecated,as,of,spring,2,5,in,favor,of,link,invoke,remote,method;deprecated,public,static,object,do,invoke,method,invocation,invocation,remote,stub,throws,invocation,target,exception,return,invoke,remote,method,invocation,stub
RmiClientInterceptorUtils -> public static boolean isConnectFailure(RemoteException ex);1328020251;Determine whether the given RMI exception indicates a connect failure._<p>Treats RMI's ConnectException, ConnectIOException, UnknownHostException,_NoSuchObjectException and StubNotFoundException as connect failure,_as well as Oracle's OC4J <code>com.evermind.server.rmi.RMIConnectionException</code>_(which doesn't derive from from any well-known RMI connect exception)._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.UnknownHostException_@see java.rmi.NoSuchObjectException_@see java.rmi.StubNotFoundException;public static boolean isConnectFailure(RemoteException ex) {_		return (ex instanceof ConnectException || ex instanceof ConnectIOException ||_				ex instanceof UnknownHostException || ex instanceof NoSuchObjectException ||_				ex instanceof StubNotFoundException || ex.getCause() instanceof SocketException ||_				isCorbaConnectFailure(ex.getCause()) || ORACLE_CONNECTION_EXCEPTION.equals(ex.getClass().getName()))__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,treats,rmi,s,connect,exception,connect,ioexception,unknown,host,exception,no,such,object,exception,and,stub,not,found,exception,as,connect,failure,as,well,as,oracle,s,oc4j,code,com,evermind,server,rmi,rmiconnection,exception,code,which,doesn,t,derive,from,from,any,well,known,rmi,connect,exception,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,unknown,host,exception,see,java,rmi,no,such,object,exception,see,java,rmi,stub,not,found,exception;public,static,boolean,is,connect,failure,remote,exception,ex,return,ex,instanceof,connect,exception,ex,instanceof,connect,ioexception,ex,instanceof,unknown,host,exception,ex,instanceof,no,such,object,exception,ex,instanceof,stub,not,found,exception,ex,get,cause,instanceof,socket,exception,is,corba,connect,failure,ex,get,cause,equals,ex,get,class,get,name
RmiClientInterceptorUtils -> public static boolean isConnectFailure(RemoteException ex);1356735495;Determine whether the given RMI exception indicates a connect failure._<p>Treats RMI's ConnectException, ConnectIOException, UnknownHostException,_NoSuchObjectException and StubNotFoundException as connect failure,_as well as Oracle's OC4J {@code com.evermind.server.rmi.RMIConnectionException}_(which doesn't derive from from any well-known RMI connect exception)._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.UnknownHostException_@see java.rmi.NoSuchObjectException_@see java.rmi.StubNotFoundException;public static boolean isConnectFailure(RemoteException ex) {_		return (ex instanceof ConnectException || ex instanceof ConnectIOException ||_				ex instanceof UnknownHostException || ex instanceof NoSuchObjectException ||_				ex instanceof StubNotFoundException || ex.getCause() instanceof SocketException ||_				isCorbaConnectFailure(ex.getCause()) || ORACLE_CONNECTION_EXCEPTION.equals(ex.getClass().getName()))__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,treats,rmi,s,connect,exception,connect,ioexception,unknown,host,exception,no,such,object,exception,and,stub,not,found,exception,as,connect,failure,as,well,as,oracle,s,oc4j,code,com,evermind,server,rmi,rmiconnection,exception,which,doesn,t,derive,from,from,any,well,known,rmi,connect,exception,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,unknown,host,exception,see,java,rmi,no,such,object,exception,see,java,rmi,stub,not,found,exception;public,static,boolean,is,connect,failure,remote,exception,ex,return,ex,instanceof,connect,exception,ex,instanceof,connect,ioexception,ex,instanceof,unknown,host,exception,ex,instanceof,no,such,object,exception,ex,instanceof,stub,not,found,exception,ex,get,cause,instanceof,socket,exception,is,corba,connect,failure,ex,get,cause,equals,ex,get,class,get,name
RmiClientInterceptorUtils -> public static boolean isConnectFailure(RemoteException ex);1363701206;Determine whether the given RMI exception indicates a connect failure._<p>Treats RMI's ConnectException, ConnectIOException, UnknownHostException,_NoSuchObjectException and StubNotFoundException as connect failure._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.UnknownHostException_@see java.rmi.NoSuchObjectException_@see java.rmi.StubNotFoundException;public static boolean isConnectFailure(RemoteException ex) {_		return (ex instanceof ConnectException || ex instanceof ConnectIOException ||_				ex instanceof UnknownHostException || ex instanceof NoSuchObjectException ||_				ex instanceof StubNotFoundException || ex.getCause() instanceof SocketException ||_				isCorbaConnectFailure(ex.getCause()))__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,treats,rmi,s,connect,exception,connect,ioexception,unknown,host,exception,no,such,object,exception,and,stub,not,found,exception,as,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,unknown,host,exception,see,java,rmi,no,such,object,exception,see,java,rmi,stub,not,found,exception;public,static,boolean,is,connect,failure,remote,exception,ex,return,ex,instanceof,connect,exception,ex,instanceof,connect,ioexception,ex,instanceof,unknown,host,exception,ex,instanceof,no,such,object,exception,ex,instanceof,stub,not,found,exception,ex,get,cause,instanceof,socket,exception,is,corba,connect,failure,ex,get,cause
RmiClientInterceptorUtils -> public static boolean isConnectFailure(RemoteException ex);1367508310;Determine whether the given RMI exception indicates a connect failure._<p>Treats RMI's ConnectException, ConnectIOException, UnknownHostException,_NoSuchObjectException and StubNotFoundException as connect failure._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.UnknownHostException_@see java.rmi.NoSuchObjectException_@see java.rmi.StubNotFoundException;public static boolean isConnectFailure(RemoteException ex) {_		return (ex instanceof ConnectException || ex instanceof ConnectIOException ||_				ex instanceof UnknownHostException || ex instanceof NoSuchObjectException ||_				ex instanceof StubNotFoundException || ex.getCause() instanceof SocketException ||_				isCorbaConnectFailure(ex.getCause()))__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,treats,rmi,s,connect,exception,connect,ioexception,unknown,host,exception,no,such,object,exception,and,stub,not,found,exception,as,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,unknown,host,exception,see,java,rmi,no,such,object,exception,see,java,rmi,stub,not,found,exception;public,static,boolean,is,connect,failure,remote,exception,ex,return,ex,instanceof,connect,exception,ex,instanceof,connect,ioexception,ex,instanceof,unknown,host,exception,ex,instanceof,no,such,object,exception,ex,instanceof,stub,not,found,exception,ex,get,cause,instanceof,socket,exception,is,corba,connect,failure,ex,get,cause
RmiClientInterceptorUtils -> public static boolean isConnectFailure(RemoteException ex);1468949854;Determine whether the given RMI exception indicates a connect failure._<p>Treats RMI's ConnectException, ConnectIOException, UnknownHostException,_NoSuchObjectException and StubNotFoundException as connect failure._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.UnknownHostException_@see java.rmi.NoSuchObjectException_@see java.rmi.StubNotFoundException;public static boolean isConnectFailure(RemoteException ex) {_		return (ex instanceof ConnectException || ex instanceof ConnectIOException ||_				ex instanceof UnknownHostException || ex instanceof NoSuchObjectException ||_				ex instanceof StubNotFoundException || ex.getCause() instanceof SocketException)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,treats,rmi,s,connect,exception,connect,ioexception,unknown,host,exception,no,such,object,exception,and,stub,not,found,exception,as,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,unknown,host,exception,see,java,rmi,no,such,object,exception,see,java,rmi,stub,not,found,exception;public,static,boolean,is,connect,failure,remote,exception,ex,return,ex,instanceof,connect,exception,ex,instanceof,connect,ioexception,ex,instanceof,unknown,host,exception,ex,instanceof,no,such,object,exception,ex,instanceof,stub,not,found,exception,ex,get,cause,instanceof,socket,exception
RmiClientInterceptorUtils -> public static boolean isConnectFailure(RemoteException ex);1495868221;Determine whether the given RMI exception indicates a connect failure._<p>Treats RMI's ConnectException, ConnectIOException, UnknownHostException,_NoSuchObjectException and StubNotFoundException as connect failure._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.UnknownHostException_@see java.rmi.NoSuchObjectException_@see java.rmi.StubNotFoundException;public static boolean isConnectFailure(RemoteException ex) {_		return (ex instanceof ConnectException || ex instanceof ConnectIOException ||_				ex instanceof UnknownHostException || ex instanceof NoSuchObjectException ||_				ex instanceof StubNotFoundException || ex.getCause() instanceof SocketException)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,treats,rmi,s,connect,exception,connect,ioexception,unknown,host,exception,no,such,object,exception,and,stub,not,found,exception,as,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,unknown,host,exception,see,java,rmi,no,such,object,exception,see,java,rmi,stub,not,found,exception;public,static,boolean,is,connect,failure,remote,exception,ex,return,ex,instanceof,connect,exception,ex,instanceof,connect,ioexception,ex,instanceof,unknown,host,exception,ex,instanceof,no,such,object,exception,ex,instanceof,stub,not,found,exception,ex,get,cause,instanceof,socket,exception
RmiClientInterceptorUtils -> public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) 			throws InvocationTargetException;1328020251;Perform a raw method invocation on the given RMI stub,_letting reflection exceptions through as-is._@param invocation the AOP MethodInvocation_@param stub the RMI stub_@return the invocation result, if any_@throws InvocationTargetException if thrown by reflection;public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub)_			throws InvocationTargetException {__		Method method = invocation.getMethod()__		try {_			if (method.getDeclaringClass().isInstance(stub)) {_				_				return method.invoke(stub, invocation.getArguments())__			}_			else {_				_				Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())__				return stubMethod.invoke(stub, invocation.getArguments())__			}_		}_		catch (InvocationTargetException ex) {_			throw ex__		}_		catch (NoSuchMethodException ex) {_			throw new RemoteProxyFailureException("No matching RMI stub method found for: " + method, ex)__		}_		catch (Throwable ex) {_			throw new RemoteProxyFailureException("Invocation of RMI stub method failed: " + method, ex)__		}_	};perform,a,raw,method,invocation,on,the,given,rmi,stub,letting,reflection,exceptions,through,as,is,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,return,the,invocation,result,if,any,throws,invocation,target,exception,if,thrown,by,reflection;public,static,object,invoke,remote,method,method,invocation,invocation,object,stub,throws,invocation,target,exception,method,method,invocation,get,method,try,if,method,get,declaring,class,is,instance,stub,return,method,invoke,stub,invocation,get,arguments,else,method,stub,method,stub,get,class,get,method,method,get,name,method,get,parameter,types,return,stub,method,invoke,stub,invocation,get,arguments,catch,invocation,target,exception,ex,throw,ex,catch,no,such,method,exception,ex,throw,new,remote,proxy,failure,exception,no,matching,rmi,stub,method,found,for,method,ex,catch,throwable,ex,throw,new,remote,proxy,failure,exception,invocation,of,rmi,stub,method,failed,method,ex
RmiClientInterceptorUtils -> public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) 			throws InvocationTargetException;1356735495;Perform a raw method invocation on the given RMI stub,_letting reflection exceptions through as-is._@param invocation the AOP MethodInvocation_@param stub the RMI stub_@return the invocation result, if any_@throws InvocationTargetException if thrown by reflection;public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub)_			throws InvocationTargetException {__		Method method = invocation.getMethod()__		try {_			if (method.getDeclaringClass().isInstance(stub)) {_				_				return method.invoke(stub, invocation.getArguments())__			}_			else {_				_				Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())__				return stubMethod.invoke(stub, invocation.getArguments())__			}_		}_		catch (InvocationTargetException ex) {_			throw ex__		}_		catch (NoSuchMethodException ex) {_			throw new RemoteProxyFailureException("No matching RMI stub method found for: " + method, ex)__		}_		catch (Throwable ex) {_			throw new RemoteProxyFailureException("Invocation of RMI stub method failed: " + method, ex)__		}_	};perform,a,raw,method,invocation,on,the,given,rmi,stub,letting,reflection,exceptions,through,as,is,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,return,the,invocation,result,if,any,throws,invocation,target,exception,if,thrown,by,reflection;public,static,object,invoke,remote,method,method,invocation,invocation,object,stub,throws,invocation,target,exception,method,method,invocation,get,method,try,if,method,get,declaring,class,is,instance,stub,return,method,invoke,stub,invocation,get,arguments,else,method,stub,method,stub,get,class,get,method,method,get,name,method,get,parameter,types,return,stub,method,invoke,stub,invocation,get,arguments,catch,invocation,target,exception,ex,throw,ex,catch,no,such,method,exception,ex,throw,new,remote,proxy,failure,exception,no,matching,rmi,stub,method,found,for,method,ex,catch,throwable,ex,throw,new,remote,proxy,failure,exception,invocation,of,rmi,stub,method,failed,method,ex
RmiClientInterceptorUtils -> public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) 			throws InvocationTargetException;1363701206;Perform a raw method invocation on the given RMI stub,_letting reflection exceptions through as-is._@param invocation the AOP MethodInvocation_@param stub the RMI stub_@return the invocation result, if any_@throws InvocationTargetException if thrown by reflection;public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub)_			throws InvocationTargetException {__		Method method = invocation.getMethod()__		try {_			if (method.getDeclaringClass().isInstance(stub)) {_				_				return method.invoke(stub, invocation.getArguments())__			}_			else {_				_				Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())__				return stubMethod.invoke(stub, invocation.getArguments())__			}_		}_		catch (InvocationTargetException ex) {_			throw ex__		}_		catch (NoSuchMethodException ex) {_			throw new RemoteProxyFailureException("No matching RMI stub method found for: " + method, ex)__		}_		catch (Throwable ex) {_			throw new RemoteProxyFailureException("Invocation of RMI stub method failed: " + method, ex)__		}_	};perform,a,raw,method,invocation,on,the,given,rmi,stub,letting,reflection,exceptions,through,as,is,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,return,the,invocation,result,if,any,throws,invocation,target,exception,if,thrown,by,reflection;public,static,object,invoke,remote,method,method,invocation,invocation,object,stub,throws,invocation,target,exception,method,method,invocation,get,method,try,if,method,get,declaring,class,is,instance,stub,return,method,invoke,stub,invocation,get,arguments,else,method,stub,method,stub,get,class,get,method,method,get,name,method,get,parameter,types,return,stub,method,invoke,stub,invocation,get,arguments,catch,invocation,target,exception,ex,throw,ex,catch,no,such,method,exception,ex,throw,new,remote,proxy,failure,exception,no,matching,rmi,stub,method,found,for,method,ex,catch,throwable,ex,throw,new,remote,proxy,failure,exception,invocation,of,rmi,stub,method,failed,method,ex
RmiClientInterceptorUtils -> public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) 			throws InvocationTargetException;1367508310;Perform a raw method invocation on the given RMI stub,_letting reflection exceptions through as-is._@param invocation the AOP MethodInvocation_@param stub the RMI stub_@return the invocation result, if any_@throws InvocationTargetException if thrown by reflection;public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub)_			throws InvocationTargetException {__		Method method = invocation.getMethod()__		try {_			if (method.getDeclaringClass().isInstance(stub)) {_				_				return method.invoke(stub, invocation.getArguments())__			}_			else {_				_				Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())__				return stubMethod.invoke(stub, invocation.getArguments())__			}_		}_		catch (InvocationTargetException ex) {_			throw ex__		}_		catch (NoSuchMethodException ex) {_			throw new RemoteProxyFailureException("No matching RMI stub method found for: " + method, ex)__		}_		catch (Throwable ex) {_			throw new RemoteProxyFailureException("Invocation of RMI stub method failed: " + method, ex)__		}_	};perform,a,raw,method,invocation,on,the,given,rmi,stub,letting,reflection,exceptions,through,as,is,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,return,the,invocation,result,if,any,throws,invocation,target,exception,if,thrown,by,reflection;public,static,object,invoke,remote,method,method,invocation,invocation,object,stub,throws,invocation,target,exception,method,method,invocation,get,method,try,if,method,get,declaring,class,is,instance,stub,return,method,invoke,stub,invocation,get,arguments,else,method,stub,method,stub,get,class,get,method,method,get,name,method,get,parameter,types,return,stub,method,invoke,stub,invocation,get,arguments,catch,invocation,target,exception,ex,throw,ex,catch,no,such,method,exception,ex,throw,new,remote,proxy,failure,exception,no,matching,rmi,stub,method,found,for,method,ex,catch,throwable,ex,throw,new,remote,proxy,failure,exception,invocation,of,rmi,stub,method,failed,method,ex
RmiClientInterceptorUtils -> public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) 			throws InvocationTargetException;1468949854;Perform a raw method invocation on the given RMI stub,_letting reflection exceptions through as-is._@param invocation the AOP MethodInvocation_@param stub the RMI stub_@return the invocation result, if any_@throws InvocationTargetException if thrown by reflection;public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub)_			throws InvocationTargetException {__		Method method = invocation.getMethod()__		try {_			if (method.getDeclaringClass().isInstance(stub)) {_				_				return method.invoke(stub, invocation.getArguments())__			}_			else {_				_				Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())__				return stubMethod.invoke(stub, invocation.getArguments())__			}_		}_		catch (InvocationTargetException ex) {_			throw ex__		}_		catch (NoSuchMethodException ex) {_			throw new RemoteProxyFailureException("No matching RMI stub method found for: " + method, ex)__		}_		catch (Throwable ex) {_			throw new RemoteProxyFailureException("Invocation of RMI stub method failed: " + method, ex)__		}_	};perform,a,raw,method,invocation,on,the,given,rmi,stub,letting,reflection,exceptions,through,as,is,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,return,the,invocation,result,if,any,throws,invocation,target,exception,if,thrown,by,reflection;public,static,object,invoke,remote,method,method,invocation,invocation,object,stub,throws,invocation,target,exception,method,method,invocation,get,method,try,if,method,get,declaring,class,is,instance,stub,return,method,invoke,stub,invocation,get,arguments,else,method,stub,method,stub,get,class,get,method,method,get,name,method,get,parameter,types,return,stub,method,invoke,stub,invocation,get,arguments,catch,invocation,target,exception,ex,throw,ex,catch,no,such,method,exception,ex,throw,new,remote,proxy,failure,exception,no,matching,rmi,stub,method,found,for,method,ex,catch,throwable,ex,throw,new,remote,proxy,failure,exception,invocation,of,rmi,stub,method,failed,method,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException( 			Method method, RemoteException ex, boolean isConnectFailure, String serviceName);1328020251;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param isConnectFailure whether the given exception should be considered_a connect failure_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(_			Method method, RemoteException ex, boolean isConnectFailure, String serviceName) {__		if (logger.isDebugEnabled()) {_			logger.debug("Remote service [" + serviceName + "] threw exception", ex)__		}_		if (ReflectionUtils.declaresException(method, ex.getClass())) {_			return ex__		}_		else {_			if (isConnectFailure) {_				return new RemoteConnectFailureException("Could not connect to remote service [" + serviceName + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access remote service [" + serviceName + "]", ex)__			}_		}_	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,is,connect,failure,whether,the,given,exception,should,be,considered,a,connect,failure,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,boolean,is,connect,failure,string,service,name,if,logger,is,debug,enabled,logger,debug,remote,service,service,name,threw,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,return,ex,else,if,is,connect,failure,return,new,remote,connect,failure,exception,could,not,connect,to,remote,service,service,name,ex,else,return,new,remote,access,exception,could,not,access,remote,service,service,name,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException( 			Method method, RemoteException ex, boolean isConnectFailure, String serviceName);1356735495;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param isConnectFailure whether the given exception should be considered_a connect failure_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(_			Method method, RemoteException ex, boolean isConnectFailure, String serviceName) {__		if (logger.isDebugEnabled()) {_			logger.debug("Remote service [" + serviceName + "] threw exception", ex)__		}_		if (ReflectionUtils.declaresException(method, ex.getClass())) {_			return ex__		}_		else {_			if (isConnectFailure) {_				return new RemoteConnectFailureException("Could not connect to remote service [" + serviceName + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access remote service [" + serviceName + "]", ex)__			}_		}_	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,is,connect,failure,whether,the,given,exception,should,be,considered,a,connect,failure,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,boolean,is,connect,failure,string,service,name,if,logger,is,debug,enabled,logger,debug,remote,service,service,name,threw,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,return,ex,else,if,is,connect,failure,return,new,remote,connect,failure,exception,could,not,connect,to,remote,service,service,name,ex,else,return,new,remote,access,exception,could,not,access,remote,service,service,name,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException( 			Method method, RemoteException ex, boolean isConnectFailure, String serviceName);1363701206;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param isConnectFailure whether the given exception should be considered_a connect failure_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(_			Method method, RemoteException ex, boolean isConnectFailure, String serviceName) {__		if (logger.isDebugEnabled()) {_			logger.debug("Remote service [" + serviceName + "] threw exception", ex)__		}_		if (ReflectionUtils.declaresException(method, ex.getClass())) {_			return ex__		}_		else {_			if (isConnectFailure) {_				return new RemoteConnectFailureException("Could not connect to remote service [" + serviceName + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access remote service [" + serviceName + "]", ex)__			}_		}_	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,is,connect,failure,whether,the,given,exception,should,be,considered,a,connect,failure,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,boolean,is,connect,failure,string,service,name,if,logger,is,debug,enabled,logger,debug,remote,service,service,name,threw,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,return,ex,else,if,is,connect,failure,return,new,remote,connect,failure,exception,could,not,connect,to,remote,service,service,name,ex,else,return,new,remote,access,exception,could,not,access,remote,service,service,name,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException( 			Method method, RemoteException ex, boolean isConnectFailure, String serviceName);1367508310;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param isConnectFailure whether the given exception should be considered_a connect failure_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(_			Method method, RemoteException ex, boolean isConnectFailure, String serviceName) {__		if (logger.isDebugEnabled()) {_			logger.debug("Remote service [" + serviceName + "] threw exception", ex)__		}_		if (ReflectionUtils.declaresException(method, ex.getClass())) {_			return ex__		}_		else {_			if (isConnectFailure) {_				return new RemoteConnectFailureException("Could not connect to remote service [" + serviceName + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access remote service [" + serviceName + "]", ex)__			}_		}_	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,is,connect,failure,whether,the,given,exception,should,be,considered,a,connect,failure,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,boolean,is,connect,failure,string,service,name,if,logger,is,debug,enabled,logger,debug,remote,service,service,name,threw,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,return,ex,else,if,is,connect,failure,return,new,remote,connect,failure,exception,could,not,connect,to,remote,service,service,name,ex,else,return,new,remote,access,exception,could,not,access,remote,service,service,name,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException( 			Method method, RemoteException ex, boolean isConnectFailure, String serviceName);1468949854;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param isConnectFailure whether the given exception should be considered_a connect failure_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(_			Method method, RemoteException ex, boolean isConnectFailure, String serviceName) {__		if (logger.isDebugEnabled()) {_			logger.debug("Remote service [" + serviceName + "] threw exception", ex)__		}_		if (ReflectionUtils.declaresException(method, ex.getClass())) {_			return ex__		}_		else {_			if (isConnectFailure) {_				return new RemoteConnectFailureException("Could not connect to remote service [" + serviceName + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access remote service [" + serviceName + "]", ex)__			}_		}_	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,is,connect,failure,whether,the,given,exception,should,be,considered,a,connect,failure,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,boolean,is,connect,failure,string,service,name,if,logger,is,debug,enabled,logger,debug,remote,service,service,name,threw,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,return,ex,else,if,is,connect,failure,return,new,remote,connect,failure,exception,could,not,connect,to,remote,service,service,name,ex,else,return,new,remote,access,exception,could,not,access,remote,service,service,name,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException( 			Method method, RemoteException ex, boolean isConnectFailure, String serviceName);1495868221;Convert the given RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not_support RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@param isConnectFailure whether the given exception should be considered_a connect failure_@param serviceName the name of the service (for debugging purposes)_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(_			Method method, RemoteException ex, boolean isConnectFailure, String serviceName) {__		if (logger.isDebugEnabled()) {_			logger.debug("Remote service [" + serviceName + "] threw exception", ex)__		}_		if (ReflectionUtils.declaresException(method, ex.getClass())) {_			return ex__		}_		else {_			if (isConnectFailure) {_				return new RemoteConnectFailureException("Could not connect to remote service [" + serviceName + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access remote service [" + serviceName + "]", ex)__			}_		}_	};convert,the,given,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,param,is,connect,failure,whether,the,given,exception,should,be,considered,a,connect,failure,param,service,name,the,name,of,the,service,for,debugging,purposes,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,remote,exception,ex,boolean,is,connect,failure,string,service,name,if,logger,is,debug,enabled,logger,debug,remote,service,service,name,threw,exception,ex,if,reflection,utils,declares,exception,method,ex,get,class,return,ex,else,if,is,connect,failure,return,new,remote,connect,failure,exception,could,not,connect,to,remote,service,service,name,ex,else,return,new,remote,access,exception,could,not,access,remote,service,service,name,ex
RmiClientInterceptorUtils -> private static boolean isCorbaConnectFailure(Throwable ex);1328020251;Check whether the given RMI exception root cause indicates a CORBA_connection failure._<p>This is relevant on the IBM JVM, in particular for WebSphere EJB clients._<p>See the_<a href="http://www.redbooks.ibm.com/Redbooks.nsf/RedbookAbstracts/tips0243.html">IBM website</code>_for details._@param ex the RMI exception to check;private static boolean isCorbaConnectFailure(Throwable ex) {_		return ((ex instanceof COMM_FAILURE || ex instanceof NO_RESPONSE) &&_				((SystemException) ex).completed == CompletionStatus.COMPLETED_NO)__	};check,whether,the,given,rmi,exception,root,cause,indicates,a,corba,connection,failure,p,this,is,relevant,on,the,ibm,jvm,in,particular,for,web,sphere,ejb,clients,p,see,the,a,href,http,www,redbooks,ibm,com,redbooks,nsf,redbook,abstracts,tips0243,html,ibm,website,code,for,details,param,ex,the,rmi,exception,to,check;private,static,boolean,is,corba,connect,failure,throwable,ex,return,ex,instanceof,ex,instanceof,system,exception,ex,completed,completion,status
RmiClientInterceptorUtils -> private static boolean isCorbaConnectFailure(Throwable ex);1356735495;Check whether the given RMI exception root cause indicates a CORBA_connection failure._<p>This is relevant on the IBM JVM, in particular for WebSphere EJB clients._<p>See the_<a href="http://www.redbooks.ibm.com/Redbooks.nsf/RedbookAbstracts/tips0243.html">IBM website</code>_for details._@param ex the RMI exception to check;private static boolean isCorbaConnectFailure(Throwable ex) {_		return ((ex instanceof COMM_FAILURE || ex instanceof NO_RESPONSE) &&_				((SystemException) ex).completed == CompletionStatus.COMPLETED_NO)__	};check,whether,the,given,rmi,exception,root,cause,indicates,a,corba,connection,failure,p,this,is,relevant,on,the,ibm,jvm,in,particular,for,web,sphere,ejb,clients,p,see,the,a,href,http,www,redbooks,ibm,com,redbooks,nsf,redbook,abstracts,tips0243,html,ibm,website,code,for,details,param,ex,the,rmi,exception,to,check;private,static,boolean,is,corba,connect,failure,throwable,ex,return,ex,instanceof,ex,instanceof,system,exception,ex,completed,completion,status
RmiClientInterceptorUtils -> private static boolean isCorbaConnectFailure(Throwable ex);1363701206;Check whether the given RMI exception root cause indicates a CORBA_connection failure._<p>This is relevant on the IBM JVM, in particular for WebSphere EJB clients._<p>See the_<a href="http://www.redbooks.ibm.com/Redbooks.nsf/RedbookAbstracts/tips0243.html">IBM website</code>_for details._@param ex the RMI exception to check;private static boolean isCorbaConnectFailure(Throwable ex) {_		return ((ex instanceof COMM_FAILURE || ex instanceof NO_RESPONSE) &&_				((SystemException) ex).completed == CompletionStatus.COMPLETED_NO)__	};check,whether,the,given,rmi,exception,root,cause,indicates,a,corba,connection,failure,p,this,is,relevant,on,the,ibm,jvm,in,particular,for,web,sphere,ejb,clients,p,see,the,a,href,http,www,redbooks,ibm,com,redbooks,nsf,redbook,abstracts,tips0243,html,ibm,website,code,for,details,param,ex,the,rmi,exception,to,check;private,static,boolean,is,corba,connect,failure,throwable,ex,return,ex,instanceof,ex,instanceof,system,exception,ex,completed,completion,status
RmiClientInterceptorUtils -> private static boolean isCorbaConnectFailure(Throwable ex);1367508310;Check whether the given RMI exception root cause indicates a CORBA_connection failure._<p>This is relevant on the IBM JVM, in particular for WebSphere EJB clients._<p>See the_<a href="http://www.redbooks.ibm.com/Redbooks.nsf/RedbookAbstracts/tips0243.html">IBM website</code>_for details._@param ex the RMI exception to check;private static boolean isCorbaConnectFailure(Throwable ex) {_		return ((ex instanceof COMM_FAILURE || ex instanceof NO_RESPONSE) &&_				((SystemException) ex).completed == CompletionStatus.COMPLETED_NO)__	};check,whether,the,given,rmi,exception,root,cause,indicates,a,corba,connection,failure,p,this,is,relevant,on,the,ibm,jvm,in,particular,for,web,sphere,ejb,clients,p,see,the,a,href,http,www,redbooks,ibm,com,redbooks,nsf,redbook,abstracts,tips0243,html,ibm,website,code,for,details,param,ex,the,rmi,exception,to,check;private,static,boolean,is,corba,connect,failure,throwable,ex,return,ex,instanceof,ex,instanceof,system,exception,ex,completed,completion,status
RmiClientInterceptorUtils -> @Deprecated 	public static Object invoke(MethodInvocation invocation, Remote stub, String serviceName) throws Throwable;1328020251;Apply the given method invocation to the given RMI stub._<p>Delegates to the corresponding method if the RMI stub does not directly_implement the invoked method. This typically happens when a non-RMI service_interface is used for an RMI service. The methods of such a service interface_have to match the RMI stub methods, but they typically don't declare_<code>java.rmi.RemoteException</code>: A RemoteException thrown by the RMI stub_will be automatically converted to Spring's RemoteAccessException._@deprecated as of Spring 2.5, in favor of {@link #invokeRemoteMethod};@Deprecated_	public static Object invoke(MethodInvocation invocation, Remote stub, String serviceName) throws Throwable {_		try {_			return invokeRemoteMethod(invocation, stub)__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof RemoteException) {_				RemoteException rex = (RemoteException) targetEx__				throw convertRmiAccessException(invocation.getMethod(), rex, serviceName)__			}_			else {_				throw targetEx__			}_		}_	};apply,the,given,method,invocation,to,the,given,rmi,stub,p,delegates,to,the,corresponding,method,if,the,rmi,stub,does,not,directly,implement,the,invoked,method,this,typically,happens,when,a,non,rmi,service,interface,is,used,for,an,rmi,service,the,methods,of,such,a,service,interface,have,to,match,the,rmi,stub,methods,but,they,typically,don,t,declare,code,java,rmi,remote,exception,code,a,remote,exception,thrown,by,the,rmi,stub,will,be,automatically,converted,to,spring,s,remote,access,exception,deprecated,as,of,spring,2,5,in,favor,of,link,invoke,remote,method;deprecated,public,static,object,invoke,method,invocation,invocation,remote,stub,string,service,name,throws,throwable,try,return,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,remote,exception,rex,remote,exception,target,ex,throw,convert,rmi,access,exception,invocation,get,method,rex,service,name,else,throw,target,ex
RmiClientInterceptorUtils -> @Deprecated 	public static Object invoke(MethodInvocation invocation, Remote stub, String serviceName) throws Throwable;1356735495;Apply the given method invocation to the given RMI stub._<p>Delegates to the corresponding method if the RMI stub does not directly_implement the invoked method. This typically happens when a non-RMI service_interface is used for an RMI service. The methods of such a service interface_have to match the RMI stub methods, but they typically don't declare_{@code java.rmi.RemoteException}: A RemoteException thrown by the RMI stub_will be automatically converted to Spring's RemoteAccessException._@deprecated as of Spring 2.5, in favor of {@link #invokeRemoteMethod};@Deprecated_	public static Object invoke(MethodInvocation invocation, Remote stub, String serviceName) throws Throwable {_		try {_			return invokeRemoteMethod(invocation, stub)__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof RemoteException) {_				RemoteException rex = (RemoteException) targetEx__				throw convertRmiAccessException(invocation.getMethod(), rex, serviceName)__			}_			else {_				throw targetEx__			}_		}_	};apply,the,given,method,invocation,to,the,given,rmi,stub,p,delegates,to,the,corresponding,method,if,the,rmi,stub,does,not,directly,implement,the,invoked,method,this,typically,happens,when,a,non,rmi,service,interface,is,used,for,an,rmi,service,the,methods,of,such,a,service,interface,have,to,match,the,rmi,stub,methods,but,they,typically,don,t,declare,code,java,rmi,remote,exception,a,remote,exception,thrown,by,the,rmi,stub,will,be,automatically,converted,to,spring,s,remote,access,exception,deprecated,as,of,spring,2,5,in,favor,of,link,invoke,remote,method;deprecated,public,static,object,invoke,method,invocation,invocation,remote,stub,string,service,name,throws,throwable,try,return,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,remote,exception,rex,remote,exception,target,ex,throw,convert,rmi,access,exception,invocation,get,method,rex,service,name,else,throw,target,ex
RmiClientInterceptorUtils -> @Deprecated 	public static Object invoke(MethodInvocation invocation, Remote stub, String serviceName) throws Throwable;1363701206;Apply the given method invocation to the given RMI stub._<p>Delegates to the corresponding method if the RMI stub does not directly_implement the invoked method. This typically happens when a non-RMI service_interface is used for an RMI service. The methods of such a service interface_have to match the RMI stub methods, but they typically don't declare_{@code java.rmi.RemoteException}: A RemoteException thrown by the RMI stub_will be automatically converted to Spring's RemoteAccessException._@deprecated as of Spring 2.5, in favor of {@link #invokeRemoteMethod};@Deprecated_	public static Object invoke(MethodInvocation invocation, Remote stub, String serviceName) throws Throwable {_		try {_			return invokeRemoteMethod(invocation, stub)__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof RemoteException) {_				RemoteException rex = (RemoteException) targetEx__				throw convertRmiAccessException(invocation.getMethod(), rex, serviceName)__			}_			else {_				throw targetEx__			}_		}_	};apply,the,given,method,invocation,to,the,given,rmi,stub,p,delegates,to,the,corresponding,method,if,the,rmi,stub,does,not,directly,implement,the,invoked,method,this,typically,happens,when,a,non,rmi,service,interface,is,used,for,an,rmi,service,the,methods,of,such,a,service,interface,have,to,match,the,rmi,stub,methods,but,they,typically,don,t,declare,code,java,rmi,remote,exception,a,remote,exception,thrown,by,the,rmi,stub,will,be,automatically,converted,to,spring,s,remote,access,exception,deprecated,as,of,spring,2,5,in,favor,of,link,invoke,remote,method;deprecated,public,static,object,invoke,method,invocation,invocation,remote,stub,string,service,name,throws,throwable,try,return,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,remote,exception,rex,remote,exception,target,ex,throw,convert,rmi,access,exception,invocation,get,method,rex,service,name,else,throw,target,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, Throwable ex, String message);1328020251;Wrap the given arbitrary exception that happened during remote access_in either a RemoteException or a Spring RemoteAccessException (if the_method signature does not support RemoteException)._<p>Only call this for remote access exceptions, not for exceptions_thrown by the target service itself!_@param method the invoked method_@param ex the exception that happened, to be used as cause for the_RemoteAccessException or RemoteException_@param message the message for the RemoteAccessException respectively_RemoteException_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, Throwable ex, String message) {_		if (logger.isDebugEnabled()) {_			logger.debug(message, ex)__		}_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			return new RemoteException(message, ex)__		}_		else {_			return new RemoteAccessException(message, ex)__		}_	};wrap,the,given,arbitrary,exception,that,happened,during,remote,access,in,either,a,remote,exception,or,a,spring,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,p,only,call,this,for,remote,access,exceptions,not,for,exceptions,thrown,by,the,target,service,itself,param,method,the,invoked,method,param,ex,the,exception,that,happened,to,be,used,as,cause,for,the,remote,access,exception,or,remote,exception,param,message,the,message,for,the,remote,access,exception,respectively,remote,exception,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,throwable,ex,string,message,if,logger,is,debug,enabled,logger,debug,message,ex,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,message,ex,else,return,new,remote,access,exception,message,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, Throwable ex, String message);1356735495;Wrap the given arbitrary exception that happened during remote access_in either a RemoteException or a Spring RemoteAccessException (if the_method signature does not support RemoteException)._<p>Only call this for remote access exceptions, not for exceptions_thrown by the target service itself!_@param method the invoked method_@param ex the exception that happened, to be used as cause for the_RemoteAccessException or RemoteException_@param message the message for the RemoteAccessException respectively_RemoteException_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, Throwable ex, String message) {_		if (logger.isDebugEnabled()) {_			logger.debug(message, ex)__		}_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			return new RemoteException(message, ex)__		}_		else {_			return new RemoteAccessException(message, ex)__		}_	};wrap,the,given,arbitrary,exception,that,happened,during,remote,access,in,either,a,remote,exception,or,a,spring,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,p,only,call,this,for,remote,access,exceptions,not,for,exceptions,thrown,by,the,target,service,itself,param,method,the,invoked,method,param,ex,the,exception,that,happened,to,be,used,as,cause,for,the,remote,access,exception,or,remote,exception,param,message,the,message,for,the,remote,access,exception,respectively,remote,exception,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,throwable,ex,string,message,if,logger,is,debug,enabled,logger,debug,message,ex,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,message,ex,else,return,new,remote,access,exception,message,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, Throwable ex, String message);1363701206;Wrap the given arbitrary exception that happened during remote access_in either a RemoteException or a Spring RemoteAccessException (if the_method signature does not support RemoteException)._<p>Only call this for remote access exceptions, not for exceptions_thrown by the target service itself!_@param method the invoked method_@param ex the exception that happened, to be used as cause for the_RemoteAccessException or RemoteException_@param message the message for the RemoteAccessException respectively_RemoteException_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, Throwable ex, String message) {_		if (logger.isDebugEnabled()) {_			logger.debug(message, ex)__		}_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			return new RemoteException(message, ex)__		}_		else {_			return new RemoteAccessException(message, ex)__		}_	};wrap,the,given,arbitrary,exception,that,happened,during,remote,access,in,either,a,remote,exception,or,a,spring,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,p,only,call,this,for,remote,access,exceptions,not,for,exceptions,thrown,by,the,target,service,itself,param,method,the,invoked,method,param,ex,the,exception,that,happened,to,be,used,as,cause,for,the,remote,access,exception,or,remote,exception,param,message,the,message,for,the,remote,access,exception,respectively,remote,exception,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,throwable,ex,string,message,if,logger,is,debug,enabled,logger,debug,message,ex,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,message,ex,else,return,new,remote,access,exception,message,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, Throwable ex, String message);1367508310;Wrap the given arbitrary exception that happened during remote access_in either a RemoteException or a Spring RemoteAccessException (if the_method signature does not support RemoteException)._<p>Only call this for remote access exceptions, not for exceptions_thrown by the target service itself!_@param method the invoked method_@param ex the exception that happened, to be used as cause for the_RemoteAccessException or RemoteException_@param message the message for the RemoteAccessException respectively_RemoteException_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, Throwable ex, String message) {_		if (logger.isDebugEnabled()) {_			logger.debug(message, ex)__		}_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			return new RemoteException(message, ex)__		}_		else {_			return new RemoteAccessException(message, ex)__		}_	};wrap,the,given,arbitrary,exception,that,happened,during,remote,access,in,either,a,remote,exception,or,a,spring,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,p,only,call,this,for,remote,access,exceptions,not,for,exceptions,thrown,by,the,target,service,itself,param,method,the,invoked,method,param,ex,the,exception,that,happened,to,be,used,as,cause,for,the,remote,access,exception,or,remote,exception,param,message,the,message,for,the,remote,access,exception,respectively,remote,exception,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,throwable,ex,string,message,if,logger,is,debug,enabled,logger,debug,message,ex,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,message,ex,else,return,new,remote,access,exception,message,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, Throwable ex, String message);1468949854;Wrap the given arbitrary exception that happened during remote access_in either a RemoteException or a Spring RemoteAccessException (if the_method signature does not support RemoteException)._<p>Only call this for remote access exceptions, not for exceptions_thrown by the target service itself!_@param method the invoked method_@param ex the exception that happened, to be used as cause for the_RemoteAccessException or RemoteException_@param message the message for the RemoteAccessException respectively_RemoteException_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, Throwable ex, String message) {_		if (logger.isDebugEnabled()) {_			logger.debug(message, ex)__		}_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			return new RemoteException(message, ex)__		}_		else {_			return new RemoteAccessException(message, ex)__		}_	};wrap,the,given,arbitrary,exception,that,happened,during,remote,access,in,either,a,remote,exception,or,a,spring,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,p,only,call,this,for,remote,access,exceptions,not,for,exceptions,thrown,by,the,target,service,itself,param,method,the,invoked,method,param,ex,the,exception,that,happened,to,be,used,as,cause,for,the,remote,access,exception,or,remote,exception,param,message,the,message,for,the,remote,access,exception,respectively,remote,exception,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,throwable,ex,string,message,if,logger,is,debug,enabled,logger,debug,message,ex,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,message,ex,else,return,new,remote,access,exception,message,ex
RmiClientInterceptorUtils -> public static Exception convertRmiAccessException(Method method, Throwable ex, String message);1495868221;Wrap the given arbitrary exception that happened during remote access_in either a RemoteException or a Spring RemoteAccessException (if the_method signature does not support RemoteException)._<p>Only call this for remote access exceptions, not for exceptions_thrown by the target service itself!_@param method the invoked method_@param ex the exception that happened, to be used as cause for the_RemoteAccessException or RemoteException_@param message the message for the RemoteAccessException respectively_RemoteException_@return the exception to be thrown to the caller;public static Exception convertRmiAccessException(Method method, Throwable ex, String message) {_		if (logger.isDebugEnabled()) {_			logger.debug(message, ex)__		}_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			return new RemoteException(message, ex)__		}_		else {_			return new RemoteAccessException(message, ex)__		}_	};wrap,the,given,arbitrary,exception,that,happened,during,remote,access,in,either,a,remote,exception,or,a,spring,remote,access,exception,if,the,method,signature,does,not,support,remote,exception,p,only,call,this,for,remote,access,exceptions,not,for,exceptions,thrown,by,the,target,service,itself,param,method,the,invoked,method,param,ex,the,exception,that,happened,to,be,used,as,cause,for,the,remote,access,exception,or,remote,exception,param,message,the,message,for,the,remote,access,exception,respectively,remote,exception,return,the,exception,to,be,thrown,to,the,caller;public,static,exception,convert,rmi,access,exception,method,method,throwable,ex,string,message,if,logger,is,debug,enabled,logger,debug,message,ex,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,message,ex,else,return,new,remote,access,exception,message,ex
