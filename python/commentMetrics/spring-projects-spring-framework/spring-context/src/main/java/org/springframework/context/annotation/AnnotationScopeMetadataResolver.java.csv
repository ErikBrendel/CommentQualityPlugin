commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the type of annotation that is checked for by this  * {@code AnnotationScopeMetadataResolver}.  * @param scopeAnnotationType the target annotation type  */ ;/**  * Set the type of annotation that is checked for by this  * {@code AnnotationScopeMetadataResolver}.  * @param scopeAnnotationType the target annotation type  */ public void setScopeAnnotationType(Class<? extends Annotation> scopeAnnotationType) {     Assert.notNull(scopeAnnotationType, "'scopeAnnotationType' must not be null").     this.scopeAnnotationType = scopeAnnotationType. }
false;public;1;18;;@Override public ScopeMetadata resolveScopeMetadata(BeanDefinition definition) {     ScopeMetadata metadata = new ScopeMetadata().     if (definition instanceof AnnotatedBeanDefinition) {         AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition.         AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(annDef.getMetadata(), this.scopeAnnotationType).         if (attributes != null) {             metadata.setScopeName(attributes.getString("value")).             ScopedProxyMode proxyMode = attributes.getEnum("proxyMode").             if (proxyMode == ScopedProxyMode.DEFAULT) {                 proxyMode = this.defaultProxyMode.             }             metadata.setScopedProxyMode(proxyMode).         }     }     return metadata. }
