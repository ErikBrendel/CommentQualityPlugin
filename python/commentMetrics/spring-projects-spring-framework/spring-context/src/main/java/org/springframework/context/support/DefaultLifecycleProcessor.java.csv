# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultLifecycleProcessor -> public void stop();1328020251;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> public void stop();1357119239;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> public void stop();1365871149;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1328020251;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1356735495;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1357119239;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1365871149;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1368482696;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1461047077;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1467730834;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1477045587;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1485810955;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1496837955;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1497250713;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1497251962;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1497341397;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = this.beanFactory.getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,this,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1500495740;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1515363788;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1518179491;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1518772998;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && !this.equals(bean)) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,this,equals,bean,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1521905451;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && bean != this) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,bean,this,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1528313126;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && bean != this) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,bean,this,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1528667547;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && bean != this) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,bean,this,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1530174524;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans a Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && bean != this) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,a,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,bean,this,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1532091916;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans a Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && bean != this) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isDebugEnabled()) {_					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,a,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,bean,this,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,debug,enabled,logger,debug,starting,bean,bean,name,of,type,bean,get,class,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1533828689;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans a Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && bean != this) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isTraceEnabled()) {_					logger.trace("Starting bean '" + beanName + "' of type [" + bean.getClass().getName() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,a,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,bean,this,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,trace,enabled,logger,trace,starting,bean,bean,name,of,type,bean,get,class,get,name,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly);1534414082;Start the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that it depends on are started first._@param lifecycleBeans a Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to start;private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {_		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null && bean != this) {_			String[] dependenciesForBean = getBeanFactory().getDependenciesForBean(beanName)__			for (String dependency : dependenciesForBean) {_				doStart(lifecycleBeans, dependency, autoStartupOnly)__			}_			if (!bean.isRunning() &&_					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {_				if (logger.isTraceEnabled()) {_					logger.trace("Starting bean '" + beanName + "' of type [" + bean.getClass().getName() + "]")__				}_				try {_					bean.start()__				}_				catch (Throwable ex) {_					throw new ApplicationContextException("Failed to start bean '" + beanName + "'", ex)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Successfully started bean '" + beanName + "'")__				}_			}_		}_	};start,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,it,depends,on,are,started,first,param,lifecycle,beans,a,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,start;private,void,do,start,map,string,extends,lifecycle,lifecycle,beans,string,bean,name,boolean,auto,startup,only,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,bean,this,string,dependencies,for,bean,get,bean,factory,get,dependencies,for,bean,bean,name,for,string,dependency,dependencies,for,bean,do,start,lifecycle,beans,dependency,auto,startup,only,if,bean,is,running,auto,startup,only,bean,instanceof,smart,lifecycle,smart,lifecycle,bean,is,auto,startup,if,logger,is,trace,enabled,logger,trace,starting,bean,bean,name,of,type,bean,get,class,get,name,try,bean,start,catch,throwable,ex,throw,new,application,context,exception,failed,to,start,bean,bean,name,ex,if,logger,is,debug,enabled,logger,debug,successfully,started,bean,bean,name
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1328020251;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1356735495;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1357119239;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1365871149;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1368482696;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1461047077;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1467730834;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1477045587;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1485810955;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1496837955;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1497250713;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1497251962;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1497341397;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1500495740;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1515363788;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1518179491;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1518772998;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1521905451;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1528313126;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1528667547;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1530174524;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1532091916;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1533828689;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase);1534414082;Specify the maximum time allotted in milliseconds for the shutdown of_any phase (group of SmartLifecycle beans with the same 'phase' value)._<p>The default value is 30 seconds.;public void setTimeoutPerShutdownPhase(long timeoutPerShutdownPhase) {_		this.timeoutPerShutdownPhase = timeoutPerShutdownPhase__	};specify,the,maximum,time,allotted,in,milliseconds,for,the,shutdown,of,any,phase,group,of,smart,lifecycle,beans,with,the,same,phase,value,p,the,default,value,is,30,seconds;public,void,set,timeout,per,shutdown,phase,long,timeout,per,shutdown,phase,this,timeout,per,shutdown,phase,timeout,per,shutdown,phase
DefaultLifecycleProcessor -> public void start();1328020251;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> public void start();1357119239;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> public void start();1365871149;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void stop();1356735495;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1368482696;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1461047077;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1467730834;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1477045587;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1485810955;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1496837955;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1497250713;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1497251962;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1497341397;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1500495740;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1515363788;Stop all registered beans that implement Lifecycle and <i>are</i>_currently running. Any bean that implements SmartLifecycle_will be stopped within its 'phase', and all phases will be ordered_from highest to lowest value. All beans that do not implement_SmartLifecycle will be stopped in the default phase 0. A bean_declared as dependent on another bean will be stopped before_the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1518179491;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1518772998;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1521905451;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1528313126;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1528667547;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1530174524;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1532091916;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1533828689;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> @Override 	public void stop();1534414082;Stop all registered beans that implement {@link Lifecycle} and <i>are</i>_currently running. Any bean that implements {@link SmartLifecycle} will be_stopped within its 'phase', and all phases will be ordered from highest to_lowest value. All beans that do not implement {@link SmartLifecycle} will be_stopped in the default phase 0. A bean declared as dependent on another bean_will be stopped before the dependency bean regardless of the declared phase.;@Override_	public void stop() {_		stopBeans()__		this.running = false__	};stop,all,registered,beans,that,implement,link,lifecycle,and,i,are,i,currently,running,any,bean,that,implements,link,smart,lifecycle,will,be,stopped,within,its,phase,and,all,phases,will,be,ordered,from,highest,to,lowest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,stopped,in,the,default,phase,0,a,bean,declared,as,dependent,on,another,bean,will,be,stopped,before,the,dependency,bean,regardless,of,the,declared,phase;override,public,void,stop,stop,beans,this,running,false
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1328020251;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1356735495;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1357119239;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1365871149;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1368482696;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1461047077;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1467730834;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1477045587;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1485810955;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1496837955;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1497250713;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1497251962;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(new Runnable() {_							@Override_							public void run() {_								latch.countDown()__								countDownBeanNames.remove(beanName)__								if (logger.isDebugEnabled()) {_									logger.debug("Bean '" + beanName + "' completed its stop procedure")__								}_							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,new,runnable,override,public,void,run,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1497341397;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,this,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1500495740;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1515363788;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1518179491;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1518772998;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1521905451;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1528313126;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1528667547;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1530174524;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans a Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,a,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1532091916;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans a Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isDebugEnabled()) {_							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,a,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,debug,enabled,logger,debug,asking,bean,bean,name,of,type,bean,get,class,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,debug,enabled,logger,debug,stopping,bean,bean,name,of,type,bean,get,class,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1533828689;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans a Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isTraceEnabled()) {_							logger.trace("Asking bean '" + beanName + "' of type [" +_									bean.getClass().getName() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isTraceEnabled()) {_							logger.trace("Stopping bean '" + beanName + "' of type [" +_									bean.getClass().getName() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,a,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,trace,enabled,logger,trace,asking,bean,bean,name,of,type,bean,get,class,get,name,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,trace,enabled,logger,trace,stopping,bean,bean,name,of,type,bean,get,class,get,name,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName, 			final CountDownLatch latch, final Set<String> countDownBeanNames);1534414082;Stop the specified bean as part of the given set of Lifecycle beans,_making sure that any beans that depends on it are stopped first._@param lifecycleBeans a Map with bean name as key and Lifecycle instance as value_@param beanName the name of the bean to stop;private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,_			final CountDownLatch latch, final Set<String> countDownBeanNames) {__		Lifecycle bean = lifecycleBeans.remove(beanName)__		if (bean != null) {_			String[] dependentBeans = getBeanFactory().getDependentBeans(beanName)__			for (String dependentBean : dependentBeans) {_				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames)__			}_			try {_				if (bean.isRunning()) {_					if (bean instanceof SmartLifecycle) {_						if (logger.isTraceEnabled()) {_							logger.trace("Asking bean '" + beanName + "' of type [" +_									bean.getClass().getName() + "] to stop")__						}_						countDownBeanNames.add(beanName)__						((SmartLifecycle) bean).stop(() -> {_							latch.countDown()__							countDownBeanNames.remove(beanName)__							if (logger.isDebugEnabled()) {_								logger.debug("Bean '" + beanName + "' completed its stop procedure")__							}_						})__					}_					else {_						if (logger.isTraceEnabled()) {_							logger.trace("Stopping bean '" + beanName + "' of type [" +_									bean.getClass().getName() + "]")__						}_						bean.stop()__						if (logger.isDebugEnabled()) {_							logger.debug("Successfully stopped bean '" + beanName + "'")__						}_					}_				}_				else if (bean instanceof SmartLifecycle) {_					_					latch.countDown()__				}_			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to stop bean '" + beanName + "'", ex)__				}_			}_		}_	};stop,the,specified,bean,as,part,of,the,given,set,of,lifecycle,beans,making,sure,that,any,beans,that,depends,on,it,are,stopped,first,param,lifecycle,beans,a,map,with,bean,name,as,key,and,lifecycle,instance,as,value,param,bean,name,the,name,of,the,bean,to,stop;private,void,do,stop,map,string,extends,lifecycle,lifecycle,beans,final,string,bean,name,final,count,down,latch,latch,final,set,string,count,down,bean,names,lifecycle,bean,lifecycle,beans,remove,bean,name,if,bean,null,string,dependent,beans,get,bean,factory,get,dependent,beans,bean,name,for,string,dependent,bean,dependent,beans,do,stop,lifecycle,beans,dependent,bean,latch,count,down,bean,names,try,if,bean,is,running,if,bean,instanceof,smart,lifecycle,if,logger,is,trace,enabled,logger,trace,asking,bean,bean,name,of,type,bean,get,class,get,name,to,stop,count,down,bean,names,add,bean,name,smart,lifecycle,bean,stop,latch,count,down,count,down,bean,names,remove,bean,name,if,logger,is,debug,enabled,logger,debug,bean,bean,name,completed,its,stop,procedure,else,if,logger,is,trace,enabled,logger,trace,stopping,bean,bean,name,of,type,bean,get,class,get,name,bean,stop,if,logger,is,debug,enabled,logger,debug,successfully,stopped,bean,bean,name,else,if,bean,instanceof,smart,lifecycle,latch,count,down,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,stop,bean,bean,name,ex
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1328020251;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1356735495;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1357119239;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1365871149;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1368482696;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1461047077;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1467730834;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1477045587;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1485810955;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1496837955;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1497250713;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1497251962;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1497341397;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1500495740;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1515363788;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1518179491;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1518772998;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1521905451;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1528313126;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1528667547;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1530174524;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1532091916;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1533828689;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface._Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase an integer value. The suggested default is 0._@see Phased_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,the,suggested,default,is,0,see,phased,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> protected int getPhase(Lifecycle bean);1534414082;Determine the lifecycle phase of the given bean._<p>The default implementation checks for the {@link Phased} interface, using_a default of 0 otherwise. Can be overridden to apply other/further policies._@param bean the bean to introspect_@return the phase (an integer value)_@see Phased#getPhase()_@see SmartLifecycle;protected int getPhase(Lifecycle bean) {_		return (bean instanceof Phased ? ((Phased) bean).getPhase() : 0)__	};determine,the,lifecycle,phase,of,the,given,bean,p,the,default,implementation,checks,for,the,link,phased,interface,using,a,default,of,0,otherwise,can,be,overridden,to,apply,other,further,policies,param,bean,the,bean,to,introspect,return,the,phase,an,integer,value,see,phased,get,phase,see,smart,lifecycle;protected,int,get,phase,lifecycle,bean,return,bean,instanceof,phased,phased,bean,get,phase,0
DefaultLifecycleProcessor -> @Override 	public void start();1356735495;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1368482696;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1461047077;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1467730834;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1477045587;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1485810955;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1496837955;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1497250713;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1497251962;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1497341397;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1500495740;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1515363788;Start all registered beans that implement Lifecycle and are_<i>not</i> already running. Any bean that implements SmartLifecycle_will be started within its 'phase', and all phases will be ordered_from lowest to highest value. All beans that do not implement_SmartLifecycle will be started in the default phase 0. A bean_declared as a dependency of another bean will be started before_the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1518179491;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1518772998;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1521905451;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1528313126;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1528667547;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1530174524;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1532091916;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1533828689;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> @Override 	public void start();1534414082;Start all registered beans that implement {@link Lifecycle} and are <i>not</i>_already running. Any bean that implements {@link SmartLifecycle} will be_started within its 'phase', and all phases will be ordered from lowest to_highest value. All beans that do not implement {@link SmartLifecycle} will be_started in the default phase 0. A bean declared as a dependency of another bean_will be started before the dependent bean regardless of the declared phase.;@Override_	public void start() {_		startBeans(false)__		this.running = true__	};start,all,registered,beans,that,implement,link,lifecycle,and,are,i,not,i,already,running,any,bean,that,implements,link,smart,lifecycle,will,be,started,within,its,phase,and,all,phases,will,be,ordered,from,lowest,to,highest,value,all,beans,that,do,not,implement,link,smart,lifecycle,will,be,started,in,the,default,phase,0,a,bean,declared,as,a,dependency,of,another,bean,will,be,started,before,the,dependent,bean,regardless,of,the,declared,phase;override,public,void,start,start,beans,false,this,running,true
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1328020251;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<String, Lifecycle>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,lifecycle,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1356735495;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<String, Lifecycle>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,lifecycle,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1357119239;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<String, Lifecycle>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,lifecycle,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1365871149;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<String, Lifecycle>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,lifecycle,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1368482696;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<String, Lifecycle>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,lifecycle,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1461047077;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<String, Lifecycle>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,lifecycle,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1467730834;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1477045587;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1485810955;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||_					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,smart,lifecycle,class,is,assignable,from,this,bean,factory,get,type,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1496837955;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck)) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,matches,bean,type,smart,lifecycle,class,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1497250713;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck)) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,matches,bean,type,smart,lifecycle,class,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1497251962;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck)) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,matches,bean,type,smart,lifecycle,class,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1497341397;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((this.beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck)) {_				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,this,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,this,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,this,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,matches,bean,type,smart,lifecycle,class,bean,name,to,check,lifecycle,bean,this,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1500495740;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = getBeanFactory().getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = getBeanFactory().isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((getBeanFactory().containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck)) {_				Lifecycle bean = getBeanFactory().getBean(beanNameToCheck, Lifecycle.class)__				if (bean != this) {_					beans.put(beanNameToRegister, bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,get,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,get,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,get,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,matches,bean,type,smart,lifecycle,class,bean,name,to,check,lifecycle,bean,get,bean,factory,get,bean,bean,name,to,check,lifecycle,class,if,bean,this,beans,put,bean,name,to,register,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1515363788;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = getBeanFactory().getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = getBeanFactory().isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((getBeanFactory().containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck)) {_				Object bean = getBeanFactory().getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,get,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,get,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,get,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,matches,bean,type,smart,lifecycle,class,bean,name,to,check,object,bean,get,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1518179491;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1518772998;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1521905451;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1528313126;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1528667547;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1530174524;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1532091916;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1533828689;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
DefaultLifecycleProcessor -> protected Map<String, Lifecycle> getLifecycleBeans();1534414082;Retrieve all applicable Lifecycle beans: all singletons that have already been created,_as well as all SmartLifecycle beans (even if they are marked as lazy-init)._@return the Map of applicable beans, with bean names as keys and bean instances as values;protected Map<String, Lifecycle> getLifecycleBeans() {_		ConfigurableListableBeanFactory beanFactory = getBeanFactory()__		Map<String, Lifecycle> beans = new LinkedHashMap<>()__		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false)__		for (String beanName : beanNames) {_			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName)__			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister)__			String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__			if ((beanFactory.containsSingleton(beanNameToRegister) &&_					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||_					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {_				Object bean = beanFactory.getBean(beanNameToCheck)__				if (bean != this && bean instanceof Lifecycle) {_					beans.put(beanNameToRegister, (Lifecycle) bean)__				}_			}_		}_		return beans__	};retrieve,all,applicable,lifecycle,beans,all,singletons,that,have,already,been,created,as,well,as,all,smart,lifecycle,beans,even,if,they,are,marked,as,lazy,init,return,the,map,of,applicable,beans,with,bean,names,as,keys,and,bean,instances,as,values;protected,map,string,lifecycle,get,lifecycle,beans,configurable,listable,bean,factory,bean,factory,get,bean,factory,map,string,lifecycle,beans,new,linked,hash,map,string,bean,names,bean,factory,get,bean,names,for,type,lifecycle,class,false,false,for,string,bean,name,bean,names,string,bean,name,to,register,bean,factory,utils,transformed,bean,name,bean,name,boolean,is,factory,bean,bean,factory,is,factory,bean,bean,name,to,register,string,bean,name,to,check,is,factory,bean,bean,factory,bean,name,bean,name,if,bean,factory,contains,singleton,bean,name,to,register,is,factory,bean,matches,bean,type,lifecycle,class,bean,name,to,check,bean,factory,matches,bean,type,smart,lifecycle,class,bean,name,to,check,bean,factory,object,bean,bean,factory,get,bean,bean,name,to,check,if,bean,this,bean,instanceof,lifecycle,beans,put,bean,name,to,register,lifecycle,bean,return,beans
