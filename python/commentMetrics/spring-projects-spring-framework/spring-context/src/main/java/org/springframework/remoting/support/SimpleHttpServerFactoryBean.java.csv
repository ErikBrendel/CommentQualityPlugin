commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the HTTP server's port. Default is 8080.  */ ;/**  * Specify the HTTP server's port. Default is 8080.  */ public void setPort(int port) {     this.port = port. }
true;public;1;3;/**  * Specify the HTTP server's hostname to bind to. Default is localhost.  * can be overridden with a specific network address to bind to.  */ ;/**  * Specify the HTTP server's hostname to bind to. Default is localhost.  * can be overridden with a specific network address to bind to.  */ public void setHostname(String hostname) {     this.hostname = hostname. }
true;public;1;3;/**  * Specify the HTTP server's TCP backlog. Default is -1,  * indicating the system's default value.  */ ;/**  * Specify the HTTP server's TCP backlog. Default is -1,  * indicating the system's default value.  */ public void setBacklog(int backlog) {     this.backlog = backlog. }
true;public;1;3;/**  * Specify the number of seconds to wait until HTTP exchanges have  * completed when shutting down the HTTP server. Default is 0.  */ ;/**  * Specify the number of seconds to wait until HTTP exchanges have  * completed when shutting down the HTTP server. Default is 0.  */ public void setShutdownDelay(int shutdownDelay) {     this.shutdownDelay = shutdownDelay. }
true;public;1;3;/**  * Set the JDK concurrent executor to use for dispatching incoming requests.  * @see com.sun.net.httpserver.HttpServer#setExecutor  */ ;/**  * Set the JDK concurrent executor to use for dispatching incoming requests.  * @see com.sun.net.httpserver.HttpServer#setExecutor  */ public void setExecutor(Executor executor) {     this.executor = executor. }
true;public;1;3;/**  * Register {@link com.sun.net.httpserver.HttpHandler HttpHandlers}  * for specific context paths.  * @param contexts a Map with context paths as keys and HttpHandler  * objects as values  * @see org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter  * @see org.springframework.remoting.caucho.SimpleHessianServiceExporter  */ ;/**  * Register {@link com.sun.net.httpserver.HttpHandler HttpHandlers}  * for specific context paths.  * @param contexts a Map with context paths as keys and HttpHandler  * objects as values  * @see org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter  * @see org.springframework.remoting.caucho.SimpleHessianServiceExporter  */ public void setContexts(Map<String, HttpHandler> contexts) {     this.contexts = contexts. }
true;public;1;3;/**  * Register common {@link com.sun.net.httpserver.Filter Filters} to be  * applied to all locally registered {@link #setContexts contexts}.  */ ;/**  * Register common {@link com.sun.net.httpserver.Filter Filters} to be  * applied to all locally registered {@link #setContexts contexts}.  */ public void setFilters(List<Filter> filters) {     this.filters = filters. }
true;public;1;3;/**  * Register a common {@link com.sun.net.httpserver.Authenticator} to be  * applied to all locally registered {@link #setContexts contexts}.  */ ;/**  * Register a common {@link com.sun.net.httpserver.Authenticator} to be  * applied to all locally registered {@link #setContexts contexts}.  */ public void setAuthenticator(Authenticator authenticator) {     this.authenticator = authenticator. }
false;public;0;24;;@Override public void afterPropertiesSet() throws IOException {     InetSocketAddress address = (this.hostname != null ? new InetSocketAddress(this.hostname, this.port) : new InetSocketAddress(this.port)).     this.server = HttpServer.create(address, this.backlog).     if (this.executor != null) {         this.server.setExecutor(this.executor).     }     if (this.contexts != null) {         this.contexts.forEach((key, context) -> {             HttpContext httpContext = this.server.createContext(key, context).             if (this.filters != null) {                 httpContext.getFilters().addAll(this.filters).             }             if (this.authenticator != null) {                 httpContext.setAuthenticator(this.authenticator).             }         }).     }     if (logger.isInfoEnabled()) {         logger.info("Starting HttpServer at address " + address).     }     this.server.start(). }
false;public;0;4;;@Override public HttpServer getObject() {     return this.server. }
false;public;0;4;;@Override public Class<? extends HttpServer> getObjectType() {     return (this.server != null ? this.server.getClass() : HttpServer.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;5;;@Override public void destroy() {     logger.info("Stopping HttpServer").     this.server.stop(this.shutdownDelay). }
