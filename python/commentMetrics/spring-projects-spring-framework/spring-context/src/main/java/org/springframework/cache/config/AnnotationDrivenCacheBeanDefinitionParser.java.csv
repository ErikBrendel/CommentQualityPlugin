# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1396865240;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheManagerProperty(element, def)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,manager,property,element,def,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1400596774;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheManagerProperty(element, def)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,manager,property,element,def,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1400655798;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheResolution(element, def, false)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,resolution,element,def,false,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1406577501;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheResolution(element, def, false)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,cache,management,config,utils,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,resolution,element,def,false,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def,cache,management,config,utils
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1467677340;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheResolution(element, def, false)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,cache,management,config,utils,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,resolution,element,def,false,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def,cache,management,config,utils
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1496837955;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheResolution(element, def, false)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,cache,management,config,utils,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,resolution,element,def,false,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def,cache,management,config,utils
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1502974979;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheResolution(element, def, false)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,cache,management,config,utils,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,resolution,element,def,false,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def,cache,management,config,utils
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1530174524;Registers a cache aspect._<pre class="code">_&lt_bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf"&gt__&lt_property name="cacheManager" ref="cacheManager"/&gt__&lt_property name="keyGenerator" ref="keyGenerator"/&gt__&lt_/bean&gt__</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheResolution(element, def, false)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,cache,aspect,pre,class,code,lt,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,gt,lt,property,name,cache,manager,ref,cache,manager,gt,lt,property,name,key,generator,ref,key,generator,gt,lt,bean,gt,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,cache,management,config,utils,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,resolution,element,def,false,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def,cache,management,config,utils
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1531589372;Registers a cache aspect._<pre class="code">_&lt_bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf"&gt__&lt_property name="cacheManager" ref="cacheManager"/&gt__&lt_property name="keyGenerator" ref="keyGenerator"/&gt__&lt_/bean&gt__</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheResolution(element, def, false)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,cache,aspect,pre,class,code,lt,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,gt,lt,property,name,cache,manager,ref,cache,manager,gt,lt,property,name,key,generator,ref,key,generator,gt,lt,bean,gt,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,cache,management,config,utils,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,resolution,element,def,false,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def,cache,management,config,utils
AnnotationDrivenCacheBeanDefinitionParser -> SpringCachingConfigurer -> private static void registerCacheAspect(Element element, ParserContext parserContext);1532509782;Registers a cache aspect._<pre class="code">_&lt_bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf"&gt__&lt_property name="cacheManager" ref="cacheManager"/&gt__&lt_property name="keyGenerator" ref="keyGenerator"/&gt__&lt_/bean&gt__</pre>;private static void registerCacheAspect(Element element, ParserContext parserContext) {_			if (!parserContext.getRegistry().containsBeanDefinition(CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME)) {_				RootBeanDefinition def = new RootBeanDefinition()__				def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__				def.setFactoryMethodName("aspectOf")__				parseCacheResolution(element, def, false)__				CacheNamespaceHandler.parseKeyGenerator(element, def)__				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME))__			}_		};registers,a,cache,aspect,pre,class,code,lt,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,gt,lt,property,name,cache,manager,ref,cache,manager,gt,lt,property,name,key,generator,ref,key,generator,gt,lt,bean,gt,pre;private,static,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,cache,management,config,utils,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,resolution,element,def,false,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def,cache,management,config,utils
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	public BeanDefinition parse(Element element, ParserContext parserContext);1356735495;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,aop,auto,proxy,configurer,configure,auto,proxy,creator,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	public BeanDefinition parse(Element element, ParserContext parserContext);1368482696;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,aop,auto,proxy,configurer,configure,auto,proxy,creator,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	public BeanDefinition parse(Element element, ParserContext parserContext);1396865240;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	public BeanDefinition parse(Element element, ParserContext parserContext);1400596774;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	public BeanDefinition parse(Element element, ParserContext parserContext);1400655798;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	public BeanDefinition parse(Element element, ParserContext parserContext);1406577501;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	public BeanDefinition parse(Element element, ParserContext parserContext);1467677340;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	public BeanDefinition parse(Element element, ParserContext parserContext);1496837955;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth);1400655798;Parse the cache resolution strategy to use. If a 'cache-resolver' attribute_is set, it is injected. Otherwise the 'cache-manager' is set. If {@code setBoth}_is {@code true}, both service are actually injected.;private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth) {_		String name = element.getAttribute("cache-resolver")__		if (StringUtils.hasText(name)) {_			def.getPropertyValues().add("cacheResolver", new RuntimeBeanReference(name.trim()))__		}_		if (!StringUtils.hasText(name) || setBoth) {_			def.getPropertyValues().add("cacheManager",_					new RuntimeBeanReference(CacheNamespaceHandler.extractCacheManager(element)))__		}_	};parse,the,cache,resolution,strategy,to,use,if,a,cache,resolver,attribute,is,set,it,is,injected,otherwise,the,cache,manager,is,set,if,code,set,both,is,code,true,both,service,are,actually,injected;private,static,void,parse,cache,resolution,element,element,bean,definition,def,boolean,set,both,string,name,element,get,attribute,cache,resolver,if,string,utils,has,text,name,def,get,property,values,add,cache,resolver,new,runtime,bean,reference,name,trim,if,string,utils,has,text,name,set,both,def,get,property,values,add,cache,manager,new,runtime,bean,reference,cache,namespace,handler,extract,cache,manager,element
AnnotationDrivenCacheBeanDefinitionParser -> private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth);1406577501;Parse the cache resolution strategy to use. If a 'cache-resolver' attribute_is set, it is injected. Otherwise the 'cache-manager' is set. If {@code setBoth}_is {@code true}, both service are actually injected.;private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth) {_		String name = element.getAttribute("cache-resolver")__		if (StringUtils.hasText(name)) {_			def.getPropertyValues().add("cacheResolver", new RuntimeBeanReference(name.trim()))__		}_		if (!StringUtils.hasText(name) || setBoth) {_			def.getPropertyValues().add("cacheManager",_					new RuntimeBeanReference(CacheNamespaceHandler.extractCacheManager(element)))__		}_	};parse,the,cache,resolution,strategy,to,use,if,a,cache,resolver,attribute,is,set,it,is,injected,otherwise,the,cache,manager,is,set,if,code,set,both,is,code,true,both,service,are,actually,injected;private,static,void,parse,cache,resolution,element,element,bean,definition,def,boolean,set,both,string,name,element,get,attribute,cache,resolver,if,string,utils,has,text,name,def,get,property,values,add,cache,resolver,new,runtime,bean,reference,name,trim,if,string,utils,has,text,name,set,both,def,get,property,values,add,cache,manager,new,runtime,bean,reference,cache,namespace,handler,extract,cache,manager,element
AnnotationDrivenCacheBeanDefinitionParser -> private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth);1467677340;Parse the cache resolution strategy to use. If a 'cache-resolver' attribute_is set, it is injected. Otherwise the 'cache-manager' is set. If {@code setBoth}_is {@code true}, both service are actually injected.;private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth) {_		String name = element.getAttribute("cache-resolver")__		if (StringUtils.hasText(name)) {_			def.getPropertyValues().add("cacheResolver", new RuntimeBeanReference(name.trim()))__		}_		if (!StringUtils.hasText(name) || setBoth) {_			def.getPropertyValues().add("cacheManager",_					new RuntimeBeanReference(CacheNamespaceHandler.extractCacheManager(element)))__		}_	};parse,the,cache,resolution,strategy,to,use,if,a,cache,resolver,attribute,is,set,it,is,injected,otherwise,the,cache,manager,is,set,if,code,set,both,is,code,true,both,service,are,actually,injected;private,static,void,parse,cache,resolution,element,element,bean,definition,def,boolean,set,both,string,name,element,get,attribute,cache,resolver,if,string,utils,has,text,name,def,get,property,values,add,cache,resolver,new,runtime,bean,reference,name,trim,if,string,utils,has,text,name,set,both,def,get,property,values,add,cache,manager,new,runtime,bean,reference,cache,namespace,handler,extract,cache,manager,element
AnnotationDrivenCacheBeanDefinitionParser -> private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth);1496837955;Parse the cache resolution strategy to use. If a 'cache-resolver' attribute_is set, it is injected. Otherwise the 'cache-manager' is set. If {@code setBoth}_is {@code true}, both service are actually injected.;private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth) {_		String name = element.getAttribute("cache-resolver")__		if (StringUtils.hasText(name)) {_			def.getPropertyValues().add("cacheResolver", new RuntimeBeanReference(name.trim()))__		}_		if (!StringUtils.hasText(name) || setBoth) {_			def.getPropertyValues().add("cacheManager",_					new RuntimeBeanReference(CacheNamespaceHandler.extractCacheManager(element)))__		}_	};parse,the,cache,resolution,strategy,to,use,if,a,cache,resolver,attribute,is,set,it,is,injected,otherwise,the,cache,manager,is,set,if,code,set,both,is,code,true,both,service,are,actually,injected;private,static,void,parse,cache,resolution,element,element,bean,definition,def,boolean,set,both,string,name,element,get,attribute,cache,resolver,if,string,utils,has,text,name,def,get,property,values,add,cache,resolver,new,runtime,bean,reference,name,trim,if,string,utils,has,text,name,set,both,def,get,property,values,add,cache,manager,new,runtime,bean,reference,cache,namespace,handler,extract,cache,manager,element
AnnotationDrivenCacheBeanDefinitionParser -> private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth);1502974979;Parse the cache resolution strategy to use. If a 'cache-resolver' attribute_is set, it is injected. Otherwise the 'cache-manager' is set. If {@code setBoth}_is {@code true}, both service are actually injected.;private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth) {_		String name = element.getAttribute("cache-resolver")__		if (StringUtils.hasText(name)) {_			def.getPropertyValues().add("cacheResolver", new RuntimeBeanReference(name.trim()))__		}_		if (!StringUtils.hasText(name) || setBoth) {_			def.getPropertyValues().add("cacheManager",_					new RuntimeBeanReference(CacheNamespaceHandler.extractCacheManager(element)))__		}_	};parse,the,cache,resolution,strategy,to,use,if,a,cache,resolver,attribute,is,set,it,is,injected,otherwise,the,cache,manager,is,set,if,code,set,both,is,code,true,both,service,are,actually,injected;private,static,void,parse,cache,resolution,element,element,bean,definition,def,boolean,set,both,string,name,element,get,attribute,cache,resolver,if,string,utils,has,text,name,def,get,property,values,add,cache,resolver,new,runtime,bean,reference,name,trim,if,string,utils,has,text,name,set,both,def,get,property,values,add,cache,manager,new,runtime,bean,reference,cache,namespace,handler,extract,cache,manager,element
AnnotationDrivenCacheBeanDefinitionParser -> private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth);1530174524;Parse the cache resolution strategy to use. If a 'cache-resolver' attribute_is set, it is injected. Otherwise the 'cache-manager' is set. If {@code setBoth}_is {@code true}, both service are actually injected.;private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth) {_		String name = element.getAttribute("cache-resolver")__		if (StringUtils.hasText(name)) {_			def.getPropertyValues().add("cacheResolver", new RuntimeBeanReference(name.trim()))__		}_		if (!StringUtils.hasText(name) || setBoth) {_			def.getPropertyValues().add("cacheManager",_					new RuntimeBeanReference(CacheNamespaceHandler.extractCacheManager(element)))__		}_	};parse,the,cache,resolution,strategy,to,use,if,a,cache,resolver,attribute,is,set,it,is,injected,otherwise,the,cache,manager,is,set,if,code,set,both,is,code,true,both,service,are,actually,injected;private,static,void,parse,cache,resolution,element,element,bean,definition,def,boolean,set,both,string,name,element,get,attribute,cache,resolver,if,string,utils,has,text,name,def,get,property,values,add,cache,resolver,new,runtime,bean,reference,name,trim,if,string,utils,has,text,name,set,both,def,get,property,values,add,cache,manager,new,runtime,bean,reference,cache,namespace,handler,extract,cache,manager,element
AnnotationDrivenCacheBeanDefinitionParser -> private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth);1531589372;Parse the cache resolution strategy to use. If a 'cache-resolver' attribute_is set, it is injected. Otherwise the 'cache-manager' is set. If {@code setBoth}_is {@code true}, both service are actually injected.;private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth) {_		String name = element.getAttribute("cache-resolver")__		boolean hasText = StringUtils.hasText(name)__		if (hasText) {_			def.getPropertyValues().add("cacheResolver", new RuntimeBeanReference(name.trim()))__		}_		if (!hasText || setBoth) {_			def.getPropertyValues().add("cacheManager",_					new RuntimeBeanReference(CacheNamespaceHandler.extractCacheManager(element)))__		}_	};parse,the,cache,resolution,strategy,to,use,if,a,cache,resolver,attribute,is,set,it,is,injected,otherwise,the,cache,manager,is,set,if,code,set,both,is,code,true,both,service,are,actually,injected;private,static,void,parse,cache,resolution,element,element,bean,definition,def,boolean,set,both,string,name,element,get,attribute,cache,resolver,boolean,has,text,string,utils,has,text,name,if,has,text,def,get,property,values,add,cache,resolver,new,runtime,bean,reference,name,trim,if,has,text,set,both,def,get,property,values,add,cache,manager,new,runtime,bean,reference,cache,namespace,handler,extract,cache,manager,element
AnnotationDrivenCacheBeanDefinitionParser -> private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth);1532509782;Parse the cache resolution strategy to use. If a 'cache-resolver' attribute_is set, it is injected. Otherwise the 'cache-manager' is set. If {@code setBoth}_is {@code true}, both service are actually injected.;private static void parseCacheResolution(Element element, BeanDefinition def, boolean setBoth) {_		String name = element.getAttribute("cache-resolver")__		boolean hasText = StringUtils.hasText(name)__		if (hasText) {_			def.getPropertyValues().add("cacheResolver", new RuntimeBeanReference(name.trim()))__		}_		if (!hasText || setBoth) {_			def.getPropertyValues().add("cacheManager",_					new RuntimeBeanReference(CacheNamespaceHandler.extractCacheManager(element)))__		}_	};parse,the,cache,resolution,strategy,to,use,if,a,cache,resolver,attribute,is,set,it,is,injected,otherwise,the,cache,manager,is,set,if,code,set,both,is,code,true,both,service,are,actually,injected;private,static,void,parse,cache,resolution,element,element,bean,definition,def,boolean,set,both,string,name,element,get,attribute,cache,resolver,boolean,has,text,string,utils,has,text,name,if,has,text,def,get,property,values,add,cache,resolver,new,runtime,bean,reference,name,trim,if,has,text,set,both,def,get,property,values,add,cache,manager,new,runtime,bean,reference,cache,namespace,handler,extract,cache,manager,element
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	@Nullable 	public BeanDefinition parse(Element element, ParserContext parserContext);1502974979;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	@Nullable_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,nullable,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	@Nullable 	public BeanDefinition parse(Element element, ParserContext parserContext);1530174524;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	@Nullable_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,nullable,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	@Nullable 	public BeanDefinition parse(Element element, ParserContext parserContext);1531589372;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	@Nullable_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,nullable,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> @Override 	@Nullable 	public BeanDefinition parse(Element element, ParserContext parserContext);1532509782;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;@Override_	@Nullable_	public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			registerCacheAdvisor(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;override,nullable,public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,register,cache,advisor,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> public BeanDefinition parse(Element element, ParserContext parserContext);1328020251;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,aop,auto,proxy,configurer,configure,auto,proxy,creator,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> public BeanDefinition parse(Element element, ParserContext parserContext);1357119239;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,aop,auto,proxy,configurer,configure,auto,proxy,creator,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> public BeanDefinition parse(Element element, ParserContext parserContext);1367955086;Parses the '{@code <cache:annotation-driven>}' tag. Will_{@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary_register an AutoProxyCreator} with the container as necessary.;public BeanDefinition parse(Element element, ParserContext parserContext) {_		String mode = element.getAttribute("mode")__		if ("aspectj".equals(mode)) {_			_			registerCacheAspect(element, parserContext)__		}_		else {_			_			AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext)__		}__		return null__	};parses,the,code,cache,annotation,driven,tag,will,link,aop,namespace,utils,register,auto,proxy,creator,if,necessary,register,an,auto,proxy,creator,with,the,container,as,necessary;public,bean,definition,parse,element,element,parser,context,parser,context,string,mode,element,get,attribute,mode,if,aspectj,equals,mode,register,cache,aspect,element,parser,context,else,aop,auto,proxy,configurer,configure,auto,proxy,creator,element,parser,context,return,null
AnnotationDrivenCacheBeanDefinitionParser -> private void registerCacheAspect(Element element, ParserContext parserContext);1328020251;Registers a_<pre>_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>__</pre>_@param element_@param parserContext;private void registerCacheAspect(Element element, ParserContext parserContext) {_		if (!parserContext.getRegistry().containsBeanDefinition(CACHE_ASPECT_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__			def.setFactoryMethodName("aspectOf")__			parseCacheManagerProperty(element, def)__			CacheNamespaceHandler.parseKeyGenerator(element, def)__			parserContext.registerBeanComponent(new BeanComponentDefinition(def, CACHE_ASPECT_BEAN_NAME))__		}_	};registers,a,pre,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre,param,element,param,parser,context;private,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,manager,property,element,def,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def
AnnotationDrivenCacheBeanDefinitionParser -> private void registerCacheAspect(Element element, ParserContext parserContext);1356735495;Registers a_<pre>_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>__</pre>_@param element_@param parserContext;private void registerCacheAspect(Element element, ParserContext parserContext) {_		if (!parserContext.getRegistry().containsBeanDefinition(CACHE_ASPECT_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__			def.setFactoryMethodName("aspectOf")__			parseCacheManagerProperty(element, def)__			CacheNamespaceHandler.parseKeyGenerator(element, def)__			parserContext.registerBeanComponent(new BeanComponentDefinition(def, CACHE_ASPECT_BEAN_NAME))__		}_	};registers,a,pre,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre,param,element,param,parser,context;private,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,manager,property,element,def,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def
AnnotationDrivenCacheBeanDefinitionParser -> private void registerCacheAspect(Element element, ParserContext parserContext);1357119239;Registers a_<pre>_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>__</pre>_@param element_@param parserContext;private void registerCacheAspect(Element element, ParserContext parserContext) {_		if (!parserContext.getRegistry().containsBeanDefinition(CACHE_ASPECT_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__			def.setFactoryMethodName("aspectOf")__			parseCacheManagerProperty(element, def)__			CacheNamespaceHandler.parseKeyGenerator(element, def)__			parserContext.registerBeanComponent(new BeanComponentDefinition(def, CACHE_ASPECT_BEAN_NAME))__		}_	};registers,a,pre,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre,param,element,param,parser,context;private,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,manager,property,element,def,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def
AnnotationDrivenCacheBeanDefinitionParser -> private void registerCacheAspect(Element element, ParserContext parserContext);1367955086;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private void registerCacheAspect(Element element, ParserContext parserContext) {_		if (!parserContext.getRegistry().containsBeanDefinition(CACHE_ASPECT_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__			def.setFactoryMethodName("aspectOf")__			parseCacheManagerProperty(element, def)__			CacheNamespaceHandler.parseKeyGenerator(element, def)__			parserContext.registerBeanComponent(new BeanComponentDefinition(def, CACHE_ASPECT_BEAN_NAME))__		}_	};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,manager,property,element,def,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def
AnnotationDrivenCacheBeanDefinitionParser -> private void registerCacheAspect(Element element, ParserContext parserContext);1368482696;Registers a_<pre class="code">_<bean id="cacheAspect" class="org.springframework.cache.aspectj.AnnotationCacheAspect" factory-method="aspectOf">_<property name="cacheManager" ref="cacheManager"/>_<property name="keyGenerator" ref="keyGenerator"/>_</bean>_</pre>;private void registerCacheAspect(Element element, ParserContext parserContext) {_		if (!parserContext.getRegistry().containsBeanDefinition(CACHE_ASPECT_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			def.setBeanClassName(CACHE_ASPECT_CLASS_NAME)__			def.setFactoryMethodName("aspectOf")__			parseCacheManagerProperty(element, def)__			CacheNamespaceHandler.parseKeyGenerator(element, def)__			parserContext.registerBeanComponent(new BeanComponentDefinition(def, CACHE_ASPECT_BEAN_NAME))__		}_	};registers,a,pre,class,code,bean,id,cache,aspect,class,org,springframework,cache,aspectj,annotation,cache,aspect,factory,method,aspect,of,property,name,cache,manager,ref,cache,manager,property,name,key,generator,ref,key,generator,bean,pre;private,void,register,cache,aspect,element,element,parser,context,parser,context,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,def,set,bean,class,name,def,set,factory,method,name,aspect,of,parse,cache,manager,property,element,def,cache,namespace,handler,parse,key,generator,element,def,parser,context,register,bean,component,new,bean,component,definition,def
