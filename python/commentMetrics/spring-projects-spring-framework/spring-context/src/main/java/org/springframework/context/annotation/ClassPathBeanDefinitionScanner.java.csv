# id;timestamp;commentText;codeText;commentWords;codeWords
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1328020251;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return this.registry.getBeanDefinitionCount() - beanCountAtScanStart__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1356735495;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return this.registry.getBeanDefinitionCount() - beanCountAtScanStart__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1368068203;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return this.registry.getBeanDefinitionCount() - beanCountAtScanStart__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1372363092;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return this.registry.getBeanDefinitionCount() - beanCountAtScanStart__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1377720968;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return this.registry.getBeanDefinitionCount() - beanCountAtScanStart__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1407505146;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return this.registry.getBeanDefinitionCount() - beanCountAtScanStart__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1407511029;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1411599760;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1461047077;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1467730834;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1482842304;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1496263893;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1496837955;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1498780456;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public int scan(String... basePackages);1502974979;Perform a scan within the specified base packages._@param basePackages the packages to check for annotated classes_@return number of beans registered;public int scan(String... basePackages) {_		int beanCountAtScanStart = this.registry.getBeanDefinitionCount()___		doScan(basePackages)___		_		if (this.includeAnnotationConfig) {_			AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)__		}__		return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart)__	};perform,a,scan,within,the,specified,base,packages,param,base,packages,the,packages,to,check,for,annotated,classes,return,number,of,beans,registered;public,int,scan,string,base,packages,int,bean,count,at,scan,start,this,registry,get,bean,definition,count,do,scan,base,packages,if,this,include,annotation,config,annotation,config,utils,register,annotation,config,processors,this,registry,return,this,registry,get,bean,definition,count,bean,count,at,scan,start
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1496837955;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1498780456;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1502974979;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String... autowireCandidatePatterns);1407511029;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String... autowireCandidatePatterns);1411599760;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String... autowireCandidatePatterns);1461047077;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String... autowireCandidatePatterns);1467730834;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String... autowireCandidatePatterns);1482842304;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String... autowireCandidatePatterns);1496263893;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1328020251;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1356735495;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1368068203;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1372363092;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1377720968;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1407505146;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1407511029;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1411599760;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1461047077;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1467730834;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1482842304;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1496263893;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1496837955;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1498780456;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName);1502974979;Apply further settings to the given bean definition,_beyond the contents retrieved from scanning the component class._@param beanDefinition the scanned bean definition_@param beanName the generated bean name for the given bean;protected void postProcessBeanDefinition(AbstractBeanDefinition beanDefinition, String beanName) {_		beanDefinition.applyDefaults(this.beanDefinitionDefaults)__		if (this.autowireCandidatePatterns != null) {_			beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(this.autowireCandidatePatterns, beanName))__		}_	};apply,further,settings,to,the,given,bean,definition,beyond,the,contents,retrieved,from,scanning,the,component,class,param,bean,definition,the,scanned,bean,definition,param,bean,name,the,generated,bean,name,for,the,given,bean;protected,void,post,process,bean,definition,abstract,bean,definition,bean,definition,string,bean,name,bean,definition,apply,defaults,this,bean,definition,defaults,if,this,autowire,candidate,patterns,null,bean,definition,set,autowire,candidate,pattern,match,utils,simple,match,this,autowire,candidate,patterns,bean,name
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(@Nullable String... autowireCandidatePatterns);1496837955;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(@Nullable String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,nullable,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(@Nullable String... autowireCandidatePatterns);1498780456;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(@Nullable String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,nullable,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(@Nullable String... autowireCandidatePatterns);1502974979;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(@Nullable String... autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,nullable,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1328020251;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1356735495;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1368068203;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1372363092;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1377720968;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1407505146;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1407511029;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1411599760;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1461047077;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1467730834;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1482842304;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1496263893;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1496837955;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public final BeanDefinitionRegistry getRegistry();1498780456;Return the BeanDefinitionRegistry that this scanner operates on.;public final BeanDefinitionRegistry getRegistry() {_		return this.registry__	};return,the,bean,definition,registry,that,this,scanner,operates,on;public,final,bean,definition,registry,get,registry,return,this,registry
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(@Nullable BeanDefinitionDefaults beanDefinitionDefaults);1496837955;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(@Nullable BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,nullable,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(@Nullable BeanDefinitionDefaults beanDefinitionDefaults);1498780456;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(@Nullable BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,nullable,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(@Nullable BeanDefinitionDefaults beanDefinitionDefaults);1502974979;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(@Nullable BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,nullable,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1496837955;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver =_				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1498780456;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver =_				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1502974979;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver =_				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1407505146;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1407511029;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1411599760;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1461047077;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1467730834;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1482842304;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1496263893;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1496837955;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1498780456;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1502974979;Return the defaults to use for detected beans (never {@code null})._@since 4.1;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		return this.beanDefinitionDefaults__	};return,the,defaults,to,use,for,detected,beans,never,code,null,since,4,1;public,bean,definition,defaults,get,bean,definition,defaults,return,this,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1328020251;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1356735495;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1368068203;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1372363092;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1377720968;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1407505146;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1407511029;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1411599760;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1461047077;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1467730834;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1482842304;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1496263893;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1496837955;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1498780456;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry);1502974979;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry};public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) {_		this(registry, true)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry;public,class,path,bean,definition,scanner,bean,definition,registry,registry,this,registry,true
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1328020251;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return <code>true</code> if the bean can be registered as-is__<code>false</code> if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,code,if,the,bean,can,be,registered,as,is,code,false,code,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1356735495;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1368068203;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (ConditionalAnnotationHelper.shouldSkip(beanDefinition, getRegistry(),_				getEnvironment(), this.beanNameGenerator)) {_			return false__		}_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,conditional,annotation,helper,should,skip,bean,definition,get,registry,get,environment,this,bean,name,generator,return,false,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1372363092;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1377720968;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1407505146;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1407511029;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1411599760;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1461047077;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1467730834;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1482842304;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1496263893;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1496837955;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1498780456;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException;1502974979;Check the given candidate's bean name, determining whether the corresponding_bean definition needs to be registered or conflicts with an existing definition._@param beanName the suggested name for the bean_@param beanDefinition the corresponding bean definition_@return {@code true} if the bean can be registered as-is__{@code false} if it should be skipped because there is an_existing, compatible bean definition for the specified name_@throws ConflictingBeanDefinitionException if an existing, incompatible_bean definition has been found for the specified name;protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {_		if (!this.registry.containsBeanDefinition(beanName)) {_			return true__		}_		BeanDefinition existingDef = this.registry.getBeanDefinition(beanName)__		BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition()__		if (originatingDef != null) {_			existingDef = originatingDef__		}_		if (isCompatible(beanDefinition, existingDef)) {_			return false__		}_		throw new ConflictingBeanDefinitionException("Annotation-specified bean name '" + beanName +_				"' for bean class [" + beanDefinition.getBeanClassName() + "] conflicts with existing, " +_				"non-compatible bean definition of same name and class [" + existingDef.getBeanClassName() + "]")__	};check,the,given,candidate,s,bean,name,determining,whether,the,corresponding,bean,definition,needs,to,be,registered,or,conflicts,with,an,existing,definition,param,bean,name,the,suggested,name,for,the,bean,param,bean,definition,the,corresponding,bean,definition,return,code,true,if,the,bean,can,be,registered,as,is,code,false,if,it,should,be,skipped,because,there,is,an,existing,compatible,bean,definition,for,the,specified,name,throws,conflicting,bean,definition,exception,if,an,existing,incompatible,bean,definition,has,been,found,for,the,specified,name;protected,boolean,check,candidate,string,bean,name,bean,definition,bean,definition,throws,illegal,state,exception,if,this,registry,contains,bean,definition,bean,name,return,true,bean,definition,existing,def,this,registry,get,bean,definition,bean,name,bean,definition,originating,def,existing,def,get,originating,bean,definition,if,originating,def,null,existing,def,originating,def,if,is,compatible,bean,definition,existing,def,return,false,throw,new,conflicting,bean,definition,exception,annotation,specified,bean,name,bean,name,for,bean,class,bean,definition,get,bean,class,name,conflicts,with,existing,non,compatible,bean,definition,of,same,name,and,class,existing,def,get,bean,class,name
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1328020251;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1356735495;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1368068203;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1372363092;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1377720968;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1407505146;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1407511029;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1411599760;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1461047077;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1467730834;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1482842304;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults);1496263893;Set the defaults to use for detected beans._@see BeanDefinitionDefaults;public void setBeanDefinitionDefaults(BeanDefinitionDefaults beanDefinitionDefaults) {_		this.beanDefinitionDefaults =_				(beanDefinitionDefaults != null ? beanDefinitionDefaults : new BeanDefinitionDefaults())__	};set,the,defaults,to,use,for,detected,beans,see,bean,definition,defaults;public,void,set,bean,definition,defaults,bean,definition,defaults,bean,definition,defaults,this,bean,definition,defaults,bean,definition,defaults,null,bean,definition,defaults,new,bean,definition,defaults
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1328020251;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation simply considers them as compatible_when the bean class name matches._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,simply,considers,them,as,compatible,when,the,bean,class,name,matches,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1356735495;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation simply considers them as compatible_when the bean class name matches._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,simply,considers,them,as,compatible,when,the,bean,class,name,matches,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1368068203;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation simply considers them as compatible_when the bean class name matches._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,simply,considers,them,as,compatible,when,the,bean,class,name,matches,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1372363092;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation simply considers them as compatible_when the bean class name matches._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,simply,considers,them,as,compatible,when,the,bean,class,name,matches,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1377720968;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1407505146;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1407511029;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1411599760;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1461047077;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1467730834;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1482842304;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1496263893;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				newDefinition.getSource().equals(existingDefinition.getSource()) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1496837955;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				(newDefinition.getSource() != null && newDefinition.getSource().equals(existingDefinition.getSource())) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,null,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1498780456;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				(newDefinition.getSource() != null && newDefinition.getSource().equals(existingDefinition.getSource())) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,null,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition);1502974979;Determine whether the given new bean definition is compatible with_the given existing bean definition._<p>The default implementation considers them as compatible when the existing_bean definition comes from the same source or from a non-scanning source._@param newDefinition the new bean definition, originated from scanning_@param existingDefinition the existing bean definition, potentially an_explicitly defined one or a previously generated one from scanning_@return whether the definitions are considered as compatible, with the_new definition to be skipped in favor of the existing definition;protected boolean isCompatible(BeanDefinition newDefinition, BeanDefinition existingDefinition) {_		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  _				(newDefinition.getSource() != null && newDefinition.getSource().equals(existingDefinition.getSource())) ||  _				newDefinition.equals(existingDefinition))_  _	};determine,whether,the,given,new,bean,definition,is,compatible,with,the,given,existing,bean,definition,p,the,default,implementation,considers,them,as,compatible,when,the,existing,bean,definition,comes,from,the,same,source,or,from,a,non,scanning,source,param,new,definition,the,new,bean,definition,originated,from,scanning,param,existing,definition,the,existing,bean,definition,potentially,an,explicitly,defined,one,or,a,previously,generated,one,from,scanning,return,whether,the,definitions,are,considered,as,compatible,with,the,new,definition,to,be,skipped,in,favor,of,the,existing,definition;protected,boolean,is,compatible,bean,definition,new,definition,bean,definition,existing,definition,return,existing,definition,instanceof,scanned,generic,bean,definition,new,definition,get,source,null,new,definition,get,source,equals,existing,definition,get,source,new,definition,equals,existing,definition
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment, ResourceLoader resourceLoader);1482842304;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@param resourceLoader the {@link ResourceLoader} to use_@since 4.3.6;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment, ResourceLoader resourceLoader) {__		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		if (useDefaultFilters) {_			registerDefaultFilters()__		}_		setEnvironment(environment)__		setResourceLoader(resourceLoader)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,param,resource,loader,the,link,resource,loader,to,use,since,4,3,6;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,resource,loader,resource,loader,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,use,default,filters,register,default,filters,set,environment,environment,set,resource,loader,resource,loader
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment, ResourceLoader resourceLoader);1496263893;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@param resourceLoader the {@link ResourceLoader} to use_@since 4.3.6;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment, ResourceLoader resourceLoader) {__		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		if (useDefaultFilters) {_			registerDefaultFilters()__		}_		setEnvironment(environment)__		setResourceLoader(resourceLoader)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,param,resource,loader,the,link,resource,loader,to,use,since,4,3,6;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,resource,loader,resource,loader,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,use,default,filters,register,default,filters,set,environment,environment,set,resource,loader,resource,loader
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1328020251;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1356735495;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1368068203;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1372363092;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1377720968;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1407505146;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1407511029;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1411599760;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1461047077;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1467730834;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1482842304;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1496263893;Set the BeanNameGenerator to use for detected bean classes._<p>Default is a {@link AnnotationBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,detected,bean,classes,p,default,is,a,link,annotation,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,annotation,bean,name,generator
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1328020251;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1356735495;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1368068203;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1372363092;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1377720968;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1407505146;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1407511029;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1411599760;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1461047077;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1467730834;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1482842304;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1496263893;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1496837955;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1498780456;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters);1502974979;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory._<p>If the passed-in bean factory does not only implement the_{@code BeanDefinitionRegistry} interface but also the {@code ResourceLoader}_interface, it will be used as default {@code ResourceLoader} as well. This will_usually be the case for {@link org.springframework.context.ApplicationContext}_implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link org.springframework.core.env.StandardEnvironment}. All_{@code ApplicationContext} implementations are {@code EnvironmentCapable}, while_normal {@code BeanFactory} implementations are not._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@see #setResourceLoader_@see #setEnvironment;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) {_		this(registry, useDefaultFilters, getOrCreateEnvironment(registry))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,code,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,org,springframework,core,env,standard,environment,all,code,application,context,implementations,are,code,environment,capable,while,normal,code,bean,factory,implementations,are,not,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,see,set,resource,loader,see,set,environment;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,this,registry,use,default,filters,get,or,create,environment,registry
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns);1328020251;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns);1356735495;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns);1368068203;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns);1372363092;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns);1377720968;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns);1407505146;Set the name-matching patterns for determining autowire candidates._@param autowireCandidatePatterns the patterns to match against;public void setAutowireCandidatePatterns(String[] autowireCandidatePatterns) {_		this.autowireCandidatePatterns = autowireCandidatePatterns__	};set,the,name,matching,patterns,for,determining,autowire,candidates,param,autowire,candidate,patterns,the,patterns,to,match,against;public,void,set,autowire,candidate,patterns,string,autowire,candidate,patterns,this,autowire,candidate,patterns,autowire,candidate,patterns
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1328020251;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1356735495;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1368068203;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1372363092;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1377720968;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1407505146;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1407511029;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1411599760;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1461047077;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1467730834;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1482842304;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1496263893;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1496837955;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1498780456;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry);1502974979;Register the specified bean with the given registry._<p>Can be overridden in subclasses, e.g. to adapt the registration_process or to register further bean definitions for each scanned bean._@param definitionHolder the bean definition plus bean name for the bean_@param registry the BeanDefinitionRegistry to register the bean with;protected void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry)__	};register,the,specified,bean,with,the,given,registry,p,can,be,overridden,in,subclasses,e,g,to,adapt,the,registration,process,or,to,register,further,bean,definitions,for,each,scanned,bean,param,definition,holder,the,bean,definition,plus,bean,name,for,the,bean,param,registry,the,bean,definition,registry,to,register,the,bean,with;protected,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,bean,definition,reader,utils,register,bean,definition,definition,holder,registry
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1328020251;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1356735495;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1368068203;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1372363092;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1377720968;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1407505146;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1407511029;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1411599760;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1461047077;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1467730834;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1482842304;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1496263893;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1496837955;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1498780456;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> public void setIncludeAnnotationConfig(boolean includeAnnotationConfig);1502974979;Specify whether to register annotation config post-processors._<p>The default is to register the post-processors. Turn this off_to be able to ignore the annotations or to process them differently.;public void setIncludeAnnotationConfig(boolean includeAnnotationConfig) {_		this.includeAnnotationConfig = includeAnnotationConfig__	};specify,whether,to,register,annotation,config,post,processors,p,the,default,is,to,register,the,post,processors,turn,this,off,to,be,able,to,ignore,the,annotations,or,to,process,them,differently;public,void,set,include,annotation,config,boolean,include,annotation,config,this,include,annotation,config,include,annotation,config
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1328020251;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1356735495;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1368068203;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1372363092;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1377720968;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1407505146;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1407511029;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1411599760;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1461047077;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1467730834;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1482842304;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1496263893;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1496837955;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1498780456;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry);1502974979;Get the Environment from the given registry if possible, otherwise return a new_StandardEnvironment.;private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		if (registry instanceof EnvironmentCapable) {_			return ((EnvironmentCapable) registry).getEnvironment()__		}_		return new StandardEnvironment()__	};get,the,environment,from,the,given,registry,if,possible,otherwise,return,a,new,standard,environment;private,static,environment,get,or,create,environment,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,if,registry,instanceof,environment,capable,return,environment,capable,registry,get,environment,return,new,standard,environment
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1328020251;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata._{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1356735495;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata._{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1368068203;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata._{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1372363092;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata._{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1377720968;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata._{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1407505146;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata._{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1407511029;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata._{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype_annotations._@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1411599760;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1461047077;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment);1467730834;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment) {_		super(useDefaultFilters, environment)___		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			setResourceLoader((ResourceLoader) this.registry)__		}_	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,super,use,default,filters,environment,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,set,resource,loader,resource,loader,this,registry
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1328020251;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1356735495;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1368068203;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1372363092;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1377720968;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1407505146;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1407511029;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1411599760;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1461047077;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1467730834;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1482842304;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver =_				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1496263893;Set the ScopeMetadataResolver to use for detected bean classes._Note that this will override any custom "scopedProxyMode" setting._<p>The default is an {@link AnnotationScopeMetadataResolver}._@see #setScopedProxyMode;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver =_				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver())__	};set,the,scope,metadata,resolver,to,use,for,detected,bean,classes,note,that,this,will,override,any,custom,scoped,proxy,mode,setting,p,the,default,is,an,link,annotation,scope,metadata,resolver,see,set,scoped,proxy,mode;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver,null,scope,metadata,resolver,new,annotation,scope,metadata,resolver
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1328020251;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}						_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1356735495;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1368068203;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1372363092;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1377720968;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1407505146;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1407511029;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1411599760;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1461047077;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,bean,definition,holder,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1467730834;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1482842304;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder =_							AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1496263893;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder =_							AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1496837955;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder =_							AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1498780456;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder =_							AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> protected Set<BeanDefinitionHolder> doScan(String... basePackages);1502974979;Perform a scan within the specified base packages,_returning the registered bean definitions._<p>This method does <i>not</i> register an annotation config processor_but rather leaves this up to the caller._@param basePackages the packages to check for annotated classes_@return set of beans registered if any for tooling registration purposes (never {@code null});protected Set<BeanDefinitionHolder> doScan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<>()__		for (String basePackage : basePackages) {_			Set<BeanDefinition> candidates = findCandidateComponents(basePackage)__			for (BeanDefinition candidate : candidates) {_				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)__				candidate.setScope(scopeMetadata.getScopeName())__				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry)__				if (candidate instanceof AbstractBeanDefinition) {_					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName)__				}_				if (candidate instanceof AnnotatedBeanDefinition) {_					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)__				}_				if (checkCandidate(beanName, candidate)) {_					BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName)__					definitionHolder =_							AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__					beanDefinitions.add(definitionHolder)__					registerBeanDefinition(definitionHolder, this.registry)__				}_			}_		}_		return beanDefinitions__	};perform,a,scan,within,the,specified,base,packages,returning,the,registered,bean,definitions,p,this,method,does,i,not,i,register,an,annotation,config,processor,but,rather,leaves,this,up,to,the,caller,param,base,packages,the,packages,to,check,for,annotated,classes,return,set,of,beans,registered,if,any,for,tooling,registration,purposes,never,code,null;protected,set,bean,definition,holder,do,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,set,bean,definition,holder,bean,definitions,new,linked,hash,set,for,string,base,package,base,packages,set,bean,definition,candidates,find,candidate,components,base,package,for,bean,definition,candidate,candidates,scope,metadata,scope,metadata,this,scope,metadata,resolver,resolve,scope,metadata,candidate,candidate,set,scope,scope,metadata,get,scope,name,string,bean,name,this,bean,name,generator,generate,bean,name,candidate,this,registry,if,candidate,instanceof,abstract,bean,definition,post,process,bean,definition,abstract,bean,definition,candidate,bean,name,if,candidate,instanceof,annotated,bean,definition,annotation,config,utils,process,common,definition,annotations,annotated,bean,definition,candidate,if,check,candidate,bean,name,candidate,bean,definition,holder,definition,holder,new,bean,definition,holder,candidate,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,bean,definitions,add,definition,holder,register,bean,definition,definition,holder,this,registry,return,bean,definitions
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment, @Nullable ResourceLoader resourceLoader);1496837955;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@param resourceLoader the {@link ResourceLoader} to use_@since 4.3.6;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment, @Nullable ResourceLoader resourceLoader) {__		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		if (useDefaultFilters) {_			registerDefaultFilters()__		}_		setEnvironment(environment)__		setResourceLoader(resourceLoader)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,param,resource,loader,the,link,resource,loader,to,use,since,4,3,6;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,nullable,resource,loader,resource,loader,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,use,default,filters,register,default,filters,set,environment,environment,set,resource,loader,resource,loader
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment, @Nullable ResourceLoader resourceLoader);1498780456;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@param resourceLoader the {@link ResourceLoader} to use_@since 4.3.6;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment, @Nullable ResourceLoader resourceLoader) {__		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		if (useDefaultFilters) {_			registerDefaultFilters()__		}_		setEnvironment(environment)__		setResourceLoader(resourceLoader)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,param,resource,loader,the,link,resource,loader,to,use,since,4,3,6;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,nullable,resource,loader,resource,loader,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,use,default,filters,register,default,filters,set,environment,environment,set,resource,loader,resource,loader
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment, @Nullable ResourceLoader resourceLoader);1502974979;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@param resourceLoader the {@link ResourceLoader} to use_@since 4.3.6;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment, @Nullable ResourceLoader resourceLoader) {__		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		if (useDefaultFilters) {_			registerDefaultFilters()__		}_		setEnvironment(environment)__		setResourceLoader(resourceLoader)__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,param,resource,loader,the,link,resource,loader,to,use,since,4,3,6;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,nullable,resource,loader,resource,loader,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,use,default,filters,register,default,filters,set,environment,environment,set,resource,loader,resource,loader
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1328020251;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1356735495;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1368068203;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1372363092;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1377720968;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1407505146;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1407511029;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1411599760;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1461047077;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1467730834;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1482842304;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1496263893;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1496837955;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1498780456;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public void setScopedProxyMode(ScopedProxyMode scopedProxyMode);1502974979;Specify the proxy behavior for non-singleton scoped beans._Note that this will override any custom "scopeMetadataResolver" setting._<p>The default is {@link ScopedProxyMode#NO}._@see #setScopeMetadataResolver;public void setScopedProxyMode(ScopedProxyMode scopedProxyMode) {_		this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(scopedProxyMode)__	};specify,the,proxy,behavior,for,non,singleton,scoped,beans,note,that,this,will,override,any,custom,scope,metadata,resolver,setting,p,the,default,is,link,scoped,proxy,mode,no,see,set,scope,metadata,resolver;public,void,set,scoped,proxy,mode,scoped,proxy,mode,scoped,proxy,mode,this,scope,metadata,resolver,new,annotation,scope,metadata,resolver,scoped,proxy,mode
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment);1482842304;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment) {__		this(registry, useDefaultFilters, environment,_				(registry instanceof ResourceLoader ? (ResourceLoader) registry : null))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,this,registry,use,default,filters,environment,registry,instanceof,resource,loader,resource,loader,registry,null
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment);1496263893;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment) {__		this(registry, useDefaultFilters, environment,_				(registry instanceof ResourceLoader ? (ResourceLoader) registry : null))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,this,registry,use,default,filters,environment,registry,instanceof,resource,loader,resource,loader,registry,null
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment);1496837955;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment) {__		this(registry, useDefaultFilters, environment,_				(registry instanceof ResourceLoader ? (ResourceLoader) registry : null))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,this,registry,use,default,filters,environment,registry,instanceof,resource,loader,resource,loader,registry,null
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment);1498780456;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment) {__		this(registry, useDefaultFilters, environment,_				(registry instanceof ResourceLoader ? (ResourceLoader) registry : null))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,this,registry,use,default,filters,environment,registry,instanceof,resource,loader,resource,loader,registry,null
ClassPathBeanDefinitionScanner -> public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, 			Environment environment);1502974979;Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and_using the given {@link Environment} when evaluating bean definition profile metadata._<p>If the passed-in bean factory does not only implement the {@code_BeanDefinitionRegistry} interface but also the {@link ResourceLoader} interface, it_will be used as default {@code ResourceLoader} as well. This will usually be the_case for {@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain {@code BeanDefinitionRegistry}, the default {@code ResourceLoader}_will be a {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._@param registry the {@code BeanFactory} to load bean definitions into, in the form_of a {@code BeanDefinitionRegistry}_@param useDefaultFilters whether to include the default filters for the_{@link org.springframework.stereotype.Component @Component},_{@link org.springframework.stereotype.Repository @Repository},_{@link org.springframework.stereotype.Service @Service}, and_{@link org.springframework.stereotype.Controller @Controller} stereotype annotations_@param environment the Spring {@link Environment} to use when evaluating bean_definition profile metadata_@since 3.1_@see #setResourceLoader;public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,_			Environment environment) {__		this(registry, useDefaultFilters, environment,_				(registry instanceof ResourceLoader ? (ResourceLoader) registry : null))__	};create,a,new,code,class,path,bean,definition,scanner,for,the,given,bean,factory,and,using,the,given,link,environment,when,evaluating,bean,definition,profile,metadata,p,if,the,passed,in,bean,factory,does,not,only,implement,the,code,bean,definition,registry,interface,but,also,the,link,resource,loader,interface,it,will,be,used,as,default,code,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,code,bean,definition,registry,the,default,code,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,param,registry,the,code,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,code,bean,definition,registry,param,use,default,filters,whether,to,include,the,default,filters,for,the,link,org,springframework,stereotype,component,component,link,org,springframework,stereotype,repository,repository,link,org,springframework,stereotype,service,service,and,link,org,springframework,stereotype,controller,controller,stereotype,annotations,param,environment,the,spring,link,environment,to,use,when,evaluating,bean,definition,profile,metadata,since,3,1,see,set,resource,loader;public,class,path,bean,definition,scanner,bean,definition,registry,registry,boolean,use,default,filters,environment,environment,this,registry,use,default,filters,environment,registry,instanceof,resource,loader,resource,loader,registry,null
