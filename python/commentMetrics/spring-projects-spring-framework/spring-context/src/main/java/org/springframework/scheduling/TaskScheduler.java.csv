# id;timestamp;commentText;codeText;commentWords;codeWords
TaskScheduler -> ScheduledFuture<?> schedule(Runnable task, Date startTime)_;1385412762;Schedule the given {@link Runnable}, invoking it at the specified execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> schedule(Runnable task, Date startTime)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,runnable,task,date,start,time
TaskScheduler -> ScheduledFuture<?> schedule(Runnable task, Date startTime)_;1481218440;Schedule the given {@link Runnable}, invoking it at the specified execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> schedule(Runnable task, Date startTime)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,runnable,task,date,start,time
TaskScheduler -> ScheduledFuture<?> schedule(Runnable task, Date startTime)_;1495868221;Schedule the given {@link Runnable}, invoking it at the specified execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> schedule(Runnable task, Date startTime)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,runnable,task,date,start,time
TaskScheduler -> ScheduledFuture scheduleAtFixedRate(Runnable task, long period)_;1328020251;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture scheduleAtFixedRate(Runnable task, long period)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,long,period
TaskScheduler -> ScheduledFuture scheduleAtFixedRate(Runnable task, long period)_;1356735495;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture scheduleAtFixedRate(Runnable task, long period)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,long,period
TaskScheduler -> default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Duration period);1481218440;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param period the interval between successive executions of the task_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #scheduleAtFixedRate(Runnable, long);default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Duration period) {_		return scheduleAtFixedRate(task, period.toMillis())__	};schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,period,the,interval,between,successive,executions,of,the,task,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,at,fixed,rate,runnable,long;default,scheduled,future,schedule,at,fixed,rate,runnable,task,duration,period,return,schedule,at,fixed,rate,task,period,to,millis
TaskScheduler -> default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Duration period);1495868221;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param period the interval between successive executions of the task_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #scheduleAtFixedRate(Runnable, long);default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Duration period) {_		return scheduleAtFixedRate(task, period.toMillis())__	};schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,period,the,interval,between,successive,executions,of,the,task,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,at,fixed,rate,runnable,long;default,scheduled,future,schedule,at,fixed,rate,runnable,task,duration,period,return,schedule,at,fixed,rate,task,period,to,millis
TaskScheduler -> default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Duration delay);1481218440;Schedule the given {@link Runnable}, starting as soon as possible and invoking it with_the given delay between the completion of one execution and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param delay the delay between the completion of one execution and the start of the next_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #scheduleWithFixedDelay(Runnable, long);default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Duration delay) {_		return scheduleWithFixedDelay(task, delay.toMillis())__	};schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,with,fixed,delay,runnable,long;default,scheduled,future,schedule,with,fixed,delay,runnable,task,duration,delay,return,schedule,with,fixed,delay,task,delay,to,millis
TaskScheduler -> default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Duration delay);1495868221;Schedule the given {@link Runnable}, starting as soon as possible and invoking it with_the given delay between the completion of one execution and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param delay the delay between the completion of one execution and the start of the next_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #scheduleWithFixedDelay(Runnable, long);default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Duration delay) {_		return scheduleWithFixedDelay(task, delay.toMillis())__	};schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,with,fixed,delay,runnable,long;default,scheduled,future,schedule,with,fixed,delay,runnable,task,duration,delay,return,schedule,with,fixed,delay,task,delay,to,millis
TaskScheduler -> ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay)_;1385412762;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param delay the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,delay,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,long,delay
TaskScheduler -> ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay)_;1481218440;Schedule the given {@link Runnable}, starting as soon as possible and invoking it with_the given delay between the completion of one execution and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param delay the delay between the completion of one execution and the start of the next_(in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,long,delay
TaskScheduler -> ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay)_;1495868221;Schedule the given {@link Runnable}, starting as soon as possible and invoking it with_the given delay between the completion of one execution and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param delay the delay between the completion of one execution and the start of the next_(in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,long,delay
TaskScheduler -> ScheduledFuture scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;1328020251;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param delay the delay between the completion of one execution and the start_of the next (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,date,start,time,long,delay
TaskScheduler -> ScheduledFuture scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;1356735495;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param delay the delay between the completion of one execution and the start_of the next (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,date,start,time,long,delay
TaskScheduler -> ScheduledFuture scheduleWithFixedDelay(Runnable task, long delay)_;1328020251;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param delay the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture scheduleWithFixedDelay(Runnable task, long delay)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,delay,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,long,delay
TaskScheduler -> ScheduledFuture scheduleWithFixedDelay(Runnable task, long delay)_;1356735495;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param delay the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture scheduleWithFixedDelay(Runnable task, long delay)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,delay,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,long,delay
TaskScheduler -> ScheduledFuture scheduleAtFixedRate(Runnable task, Date startTime, long period)_;1328020251;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture scheduleAtFixedRate(Runnable task, Date startTime, long period)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,date,start,time,long,period
TaskScheduler -> ScheduledFuture scheduleAtFixedRate(Runnable task, Date startTime, long period)_;1356735495;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture scheduleAtFixedRate(Runnable task, Date startTime, long period)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,date,start,time,long,period
TaskScheduler -> ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period)_;1385412762;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,long,period
TaskScheduler -> ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period)_;1481218440;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,long,period
TaskScheduler -> ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period)_;1495868221;Schedule the given {@link Runnable}, starting as soon as possible and_invoking it with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period)_;schedule,the,given,link,runnable,starting,as,soon,as,possible,and,invoking,it,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,long,period
TaskScheduler -> ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period)_;1385412762;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,date,start,time,long,period
TaskScheduler -> ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period)_;1481218440;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if  the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,date,start,time,long,period
TaskScheduler -> ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period)_;1495868221;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param period the interval between successive executions of the task (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if  the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,period,the,interval,between,successive,executions,of,the,task,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,at,fixed,rate,runnable,task,date,start,time,long,period
TaskScheduler -> ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;1385412762;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param delay the delay between the completion of one execution and the start_of the next (in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,date,start,time,long,delay
TaskScheduler -> ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;1481218440;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param delay the delay between the completion of one execution and the start of the next_(in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,date,start,time,long,delay
TaskScheduler -> ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;1495868221;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param delay the delay between the completion of one execution and the start of the next_(in milliseconds)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,in,milliseconds,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,with,fixed,delay,runnable,task,date,start,time,long,delay
TaskScheduler -> default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Instant startTime, Duration delay);1481218440;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param delay the delay between the completion of one execution and the start of the next_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #scheduleWithFixedDelay(Runnable, Date, long);default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Instant startTime, Duration delay) {_		return scheduleWithFixedDelay(task, Date.from(startTime), delay.toMillis())__	};schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,with,fixed,delay,runnable,date,long;default,scheduled,future,schedule,with,fixed,delay,runnable,task,instant,start,time,duration,delay,return,schedule,with,fixed,delay,task,date,from,start,time,delay,to,millis
TaskScheduler -> default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Instant startTime, Duration delay);1495868221;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given delay between the completion of one execution_and the start of the next._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param delay the delay between the completion of one execution and the start of the next_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #scheduleWithFixedDelay(Runnable, Date, long);default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Instant startTime, Duration delay) {_		return scheduleWithFixedDelay(task, Date.from(startTime), delay.toMillis())__	};schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,delay,the,delay,between,the,completion,of,one,execution,and,the,start,of,the,next,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,with,fixed,delay,runnable,date,long;default,scheduled,future,schedule,with,fixed,delay,runnable,task,instant,start,time,duration,delay,return,schedule,with,fixed,delay,task,date,from,start,time,delay,to,millis
TaskScheduler -> ScheduledFuture schedule(Runnable task, Date startTime)_;1328020251;Schedule the given {@link Runnable}, invoking it at the specified execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture schedule(Runnable task, Date startTime)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,runnable,task,date,start,time
TaskScheduler -> ScheduledFuture schedule(Runnable task, Date startTime)_;1356735495;Schedule the given {@link Runnable}, invoking it at the specified execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress);ScheduledFuture schedule(Runnable task, Date startTime)_;schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress;scheduled,future,schedule,runnable,task,date,start,time
TaskScheduler -> default ScheduledFuture<?> schedule(Runnable task, Instant startTime);1481218440;Schedule the given {@link Runnable}, invoking it at the specified execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #schedule(Runnable, Date);default ScheduledFuture<?> schedule(Runnable task, Instant startTime) {_		return schedule(task, Date.from(startTime))__	};schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,runnable,date;default,scheduled,future,schedule,runnable,task,instant,start,time,return,schedule,task,date,from,start,time
TaskScheduler -> default ScheduledFuture<?> schedule(Runnable task, Instant startTime);1495868221;Schedule the given {@link Runnable}, invoking it at the specified execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #schedule(Runnable, Date);default ScheduledFuture<?> schedule(Runnable task, Instant startTime) {_		return schedule(task, Date.from(startTime))__	};schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,runnable,date;default,scheduled,future,schedule,runnable,task,instant,start,time,return,schedule,task,date,from,start,time
TaskScheduler -> ScheduledFuture schedule(Runnable task, Trigger trigger)_;1328020251;Schedule the given {@link Runnable}, invoking it whenever the trigger_indicates a next execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param trigger an implementation of the {@link Trigger} interface,_e.g. a {@link org.springframework.scheduling.support.CronTrigger} object_wrapping a cron expression_@return a {@link ScheduledFuture} representing pending completion of the task,_or <code>null</code> if the given Trigger object never fires (i.e. returns_<code>null</code> from {@link Trigger#nextExecutionTime})_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@see org.springframework.scheduling.support.CronTrigger;ScheduledFuture schedule(Runnable task, Trigger trigger)_;schedule,the,given,link,runnable,invoking,it,whenever,the,trigger,indicates,a,next,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,trigger,an,implementation,of,the,link,trigger,interface,e,g,a,link,org,springframework,scheduling,support,cron,trigger,object,wrapping,a,cron,expression,return,a,link,scheduled,future,representing,pending,completion,of,the,task,or,code,null,code,if,the,given,trigger,object,never,fires,i,e,returns,code,null,code,from,link,trigger,next,execution,time,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,see,org,springframework,scheduling,support,cron,trigger;scheduled,future,schedule,runnable,task,trigger,trigger
TaskScheduler -> ScheduledFuture schedule(Runnable task, Trigger trigger)_;1356735495;Schedule the given {@link Runnable}, invoking it whenever the trigger_indicates a next execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param trigger an implementation of the {@link Trigger} interface,_e.g. a {@link org.springframework.scheduling.support.CronTrigger} object_wrapping a cron expression_@return a {@link ScheduledFuture} representing pending completion of the task,_or {@code null} if the given Trigger object never fires (i.e. returns_{@code null} from {@link Trigger#nextExecutionTime})_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@see org.springframework.scheduling.support.CronTrigger;ScheduledFuture schedule(Runnable task, Trigger trigger)_;schedule,the,given,link,runnable,invoking,it,whenever,the,trigger,indicates,a,next,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,trigger,an,implementation,of,the,link,trigger,interface,e,g,a,link,org,springframework,scheduling,support,cron,trigger,object,wrapping,a,cron,expression,return,a,link,scheduled,future,representing,pending,completion,of,the,task,or,code,null,if,the,given,trigger,object,never,fires,i,e,returns,code,null,from,link,trigger,next,execution,time,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,see,org,springframework,scheduling,support,cron,trigger;scheduled,future,schedule,runnable,task,trigger,trigger
TaskScheduler -> default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Instant startTime, Duration period);1481218440;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param period the interval between successive executions of the task_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if  the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #scheduleAtFixedRate(Runnable, Date, long);default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Instant startTime, Duration period) {_		return scheduleAtFixedRate(task, Date.from(startTime), period.toMillis())__	};schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,period,the,interval,between,successive,executions,of,the,task,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,at,fixed,rate,runnable,date,long;default,scheduled,future,schedule,at,fixed,rate,runnable,task,instant,start,time,duration,period,return,schedule,at,fixed,rate,task,date,from,start,time,period,to,millis
TaskScheduler -> default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Instant startTime, Duration period);1495868221;Schedule the given {@link Runnable}, invoking it at the specified execution time_and subsequently with the given period._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param startTime the desired first execution time for the task_(if this is in the past, the task will be executed immediately, i.e. as soon as possible)_@param period the interval between successive executions of the task_@return a {@link ScheduledFuture} representing pending completion of the task_@throws org.springframework.core.task.TaskRejectedException if  the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@since 5.0_@see #scheduleAtFixedRate(Runnable, Date, long);default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Instant startTime, Duration period) {_		return scheduleAtFixedRate(task, Date.from(startTime), period.toMillis())__	};schedule,the,given,link,runnable,invoking,it,at,the,specified,execution,time,and,subsequently,with,the,given,period,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,start,time,the,desired,first,execution,time,for,the,task,if,this,is,in,the,past,the,task,will,be,executed,immediately,i,e,as,soon,as,possible,param,period,the,interval,between,successive,executions,of,the,task,return,a,link,scheduled,future,representing,pending,completion,of,the,task,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,since,5,0,see,schedule,at,fixed,rate,runnable,date,long;default,scheduled,future,schedule,at,fixed,rate,runnable,task,instant,start,time,duration,period,return,schedule,at,fixed,rate,task,date,from,start,time,period,to,millis
TaskScheduler -> ScheduledFuture<?> schedule(Runnable task, Trigger trigger)_;1385412762;Schedule the given {@link Runnable}, invoking it whenever the trigger_indicates a next execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param trigger an implementation of the {@link Trigger} interface,_e.g. a {@link org.springframework.scheduling.support.CronTrigger} object_wrapping a cron expression_@return a {@link ScheduledFuture} representing pending completion of the task,_or {@code null} if the given Trigger object never fires (i.e. returns_{@code null} from {@link Trigger#nextExecutionTime})_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@see org.springframework.scheduling.support.CronTrigger;ScheduledFuture<?> schedule(Runnable task, Trigger trigger)_;schedule,the,given,link,runnable,invoking,it,whenever,the,trigger,indicates,a,next,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,trigger,an,implementation,of,the,link,trigger,interface,e,g,a,link,org,springframework,scheduling,support,cron,trigger,object,wrapping,a,cron,expression,return,a,link,scheduled,future,representing,pending,completion,of,the,task,or,code,null,if,the,given,trigger,object,never,fires,i,e,returns,code,null,from,link,trigger,next,execution,time,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,see,org,springframework,scheduling,support,cron,trigger;scheduled,future,schedule,runnable,task,trigger,trigger
TaskScheduler -> ScheduledFuture<?> schedule(Runnable task, Trigger trigger)_;1481218440;Schedule the given {@link Runnable}, invoking it whenever the trigger_indicates a next execution time._<p>Execution will end once the scheduler shuts down or the returned_{@link ScheduledFuture} gets cancelled._@param task the Runnable to execute whenever the trigger fires_@param trigger an implementation of the {@link Trigger} interface,_e.g. a {@link org.springframework.scheduling.support.CronTrigger} object_wrapping a cron expression_@return a {@link ScheduledFuture} representing pending completion of the task,_or {@code null} if the given Trigger object never fires (i.e. returns_{@code null} from {@link Trigger#nextExecutionTime})_@throws org.springframework.core.task.TaskRejectedException if the given task was not accepted_for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)_@see org.springframework.scheduling.support.CronTrigger;ScheduledFuture<?> schedule(Runnable task, Trigger trigger)_;schedule,the,given,link,runnable,invoking,it,whenever,the,trigger,indicates,a,next,execution,time,p,execution,will,end,once,the,scheduler,shuts,down,or,the,returned,link,scheduled,future,gets,cancelled,param,task,the,runnable,to,execute,whenever,the,trigger,fires,param,trigger,an,implementation,of,the,link,trigger,interface,e,g,a,link,org,springframework,scheduling,support,cron,trigger,object,wrapping,a,cron,expression,return,a,link,scheduled,future,representing,pending,completion,of,the,task,or,code,null,if,the,given,trigger,object,never,fires,i,e,returns,code,null,from,link,trigger,next,execution,time,throws,org,springframework,core,task,task,rejected,exception,if,the,given,task,was,not,accepted,for,internal,reasons,e,g,a,pool,overload,handling,policy,or,a,pool,shutdown,in,progress,see,org,springframework,scheduling,support,cron,trigger;scheduled,future,schedule,runnable,task,trigger,trigger
