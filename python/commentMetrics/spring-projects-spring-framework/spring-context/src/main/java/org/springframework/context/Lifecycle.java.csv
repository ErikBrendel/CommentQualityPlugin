# id;timestamp;commentText;codeText;commentWords;codeWords
Lifecycle -> boolean isRunning()_;1328020251;Check whether this component is currently running._<p>In the case of a container, this will return <code>true</code>_only if <i>all</i> components that apply are currently running._@return whether the component is currently running;boolean isRunning()_;check,whether,this,component,is,currently,running,p,in,the,case,of,a,container,this,will,return,code,true,code,only,if,i,all,i,components,that,apply,are,currently,running,return,whether,the,component,is,currently,running;boolean,is,running
Lifecycle -> boolean isRunning()_;1356735495;Check whether this component is currently running._<p>In the case of a container, this will return {@code true}_only if <i>all</i> components that apply are currently running._@return whether the component is currently running;boolean isRunning()_;check,whether,this,component,is,currently,running,p,in,the,case,of,a,container,this,will,return,code,true,only,if,i,all,i,components,that,apply,are,currently,running,return,whether,the,component,is,currently,running;boolean,is,running
Lifecycle -> boolean isRunning()_;1427742372;Check whether this component is currently running._<p>In the case of a container, this will return {@code true}_only if <i>all</i> components that apply are currently running._@return whether the component is currently running;boolean isRunning()_;check,whether,this,component,is,currently,running,p,in,the,case,of,a,container,this,will,return,code,true,only,if,i,all,i,components,that,apply,are,currently,running,return,whether,the,component,is,currently,running;boolean,is,running
Lifecycle -> boolean isRunning()_;1436280566;Check whether this component is currently running._<p>In the case of a container, this will return {@code true} only if <i>all</i>_components that apply are currently running._@return whether the component is currently running;boolean isRunning()_;check,whether,this,component,is,currently,running,p,in,the,case,of,a,container,this,will,return,code,true,only,if,i,all,i,components,that,apply,are,currently,running,return,whether,the,component,is,currently,running;boolean,is,running
Lifecycle -> boolean isRunning()_;1534414082;Check whether this component is currently running._<p>In the case of a container, this will return {@code true} only if <i>all</i>_components that apply are currently running._@return whether the component is currently running;boolean isRunning()_;check,whether,this,component,is,currently,running,p,in,the,case,of,a,container,this,will,return,code,true,only,if,i,all,i,components,that,apply,are,currently,running,return,whether,the,component,is,currently,running;boolean,is,running
Lifecycle -> void start()_;1328020251;Start this component._Should not throw an exception if the component is already running._<p>In the case of a container, this will propagate the start signal_to all components that apply.;void start()_;start,this,component,should,not,throw,an,exception,if,the,component,is,already,running,p,in,the,case,of,a,container,this,will,propagate,the,start,signal,to,all,components,that,apply;void,start
Lifecycle -> void start()_;1356735495;Start this component._Should not throw an exception if the component is already running._<p>In the case of a container, this will propagate the start signal_to all components that apply.;void start()_;start,this,component,should,not,throw,an,exception,if,the,component,is,already,running,p,in,the,case,of,a,container,this,will,propagate,the,start,signal,to,all,components,that,apply;void,start
Lifecycle -> void start()_;1427742372;Start this component._Should not throw an exception if the component is already running._<p>In the case of a container, this will propagate the start signal_to all components that apply._@see SmartLifecycle#isAutoStartup();void start()_;start,this,component,should,not,throw,an,exception,if,the,component,is,already,running,p,in,the,case,of,a,container,this,will,propagate,the,start,signal,to,all,components,that,apply,see,smart,lifecycle,is,auto,startup;void,start
Lifecycle -> void start()_;1436280566;Start this component._<p>Should not throw an exception if the component is already running._<p>In the case of a container, this will propagate the start signal to all_components that apply._@see SmartLifecycle#isAutoStartup();void start()_;start,this,component,p,should,not,throw,an,exception,if,the,component,is,already,running,p,in,the,case,of,a,container,this,will,propagate,the,start,signal,to,all,components,that,apply,see,smart,lifecycle,is,auto,startup;void,start
Lifecycle -> void start()_;1534414082;Start this component._<p>Should not throw an exception if the component is already running._<p>In the case of a container, this will propagate the start signal to all_components that apply._@see SmartLifecycle#isAutoStartup();void start()_;start,this,component,p,should,not,throw,an,exception,if,the,component,is,already,running,p,in,the,case,of,a,container,this,will,propagate,the,start,signal,to,all,components,that,apply,see,smart,lifecycle,is,auto,startup;void,start
Lifecycle -> void stop()_;1328020251;Stop this component, typically in a synchronous fashion, such that_the component is fully stopped upon return of this method. Consider_implementing {@link SmartLifecycle} and its {@code stop(Runnable)}_variant in cases where asynchronous stop behavior is necessary._<p>Should not throw an exception if the component isn't started yet._<p>In the case of a container, this will propagate the stop signal_to all components that apply._@see SmartLifecycle#stop(Runnable);void stop()_;stop,this,component,typically,in,a,synchronous,fashion,such,that,the,component,is,fully,stopped,upon,return,of,this,method,consider,implementing,link,smart,lifecycle,and,its,code,stop,runnable,variant,in,cases,where,asynchronous,stop,behavior,is,necessary,p,should,not,throw,an,exception,if,the,component,isn,t,started,yet,p,in,the,case,of,a,container,this,will,propagate,the,stop,signal,to,all,components,that,apply,see,smart,lifecycle,stop,runnable;void,stop
Lifecycle -> void stop()_;1356735495;Stop this component, typically in a synchronous fashion, such that_the component is fully stopped upon return of this method. Consider_implementing {@link SmartLifecycle} and its {@code stop(Runnable)}_variant in cases where asynchronous stop behavior is necessary._<p>Should not throw an exception if the component isn't started yet._<p>In the case of a container, this will propagate the stop signal_to all components that apply._@see SmartLifecycle#stop(Runnable);void stop()_;stop,this,component,typically,in,a,synchronous,fashion,such,that,the,component,is,fully,stopped,upon,return,of,this,method,consider,implementing,link,smart,lifecycle,and,its,code,stop,runnable,variant,in,cases,where,asynchronous,stop,behavior,is,necessary,p,should,not,throw,an,exception,if,the,component,isn,t,started,yet,p,in,the,case,of,a,container,this,will,propagate,the,stop,signal,to,all,components,that,apply,see,smart,lifecycle,stop,runnable;void,stop
Lifecycle -> void stop()_;1427742372;Stop this component, typically in a synchronous fashion, such that_the component is fully stopped upon return of this method. Consider_implementing {@link SmartLifecycle} and its {@code stop(Runnable)}_variant in cases where asynchronous stop behavior is necessary._<p>Should not throw an exception if the component isn't started yet._<p>In the case of a container, this will propagate the stop signal_to all components that apply._@see SmartLifecycle#stop(Runnable);void stop()_;stop,this,component,typically,in,a,synchronous,fashion,such,that,the,component,is,fully,stopped,upon,return,of,this,method,consider,implementing,link,smart,lifecycle,and,its,code,stop,runnable,variant,in,cases,where,asynchronous,stop,behavior,is,necessary,p,should,not,throw,an,exception,if,the,component,isn,t,started,yet,p,in,the,case,of,a,container,this,will,propagate,the,stop,signal,to,all,components,that,apply,see,smart,lifecycle,stop,runnable;void,stop
Lifecycle -> void stop()_;1436280566;Stop this component, typically in a synchronous fashion, such that the component is_fully stopped upon return of this method. Consider implementing {@link SmartLifecycle}_and its {@code stop(Runnable)} variant when asynchronous stop behavior is necessary._<p>Note that this stop notification is not guaranteed to come before destruction: On_regular shutdown, {@code Lifecycle} beans will first receive a stop notification before_the general destruction callbacks are being propagated_ however, on hot refresh during a_context's lifetime or on aborted refresh attempts, only destroy methods will be called._<p>Should not throw an exception if the component isn't started yet._<p>In the case of a container, this will propagate the stop signal to all components_that apply._@see SmartLifecycle#stop(Runnable)_@see org.springframework.beans.factory.DisposableBean#destroy();void stop()_;stop,this,component,typically,in,a,synchronous,fashion,such,that,the,component,is,fully,stopped,upon,return,of,this,method,consider,implementing,link,smart,lifecycle,and,its,code,stop,runnable,variant,when,asynchronous,stop,behavior,is,necessary,p,note,that,this,stop,notification,is,not,guaranteed,to,come,before,destruction,on,regular,shutdown,code,lifecycle,beans,will,first,receive,a,stop,notification,before,the,general,destruction,callbacks,are,being,propagated,however,on,hot,refresh,during,a,context,s,lifetime,or,on,aborted,refresh,attempts,only,destroy,methods,will,be,called,p,should,not,throw,an,exception,if,the,component,isn,t,started,yet,p,in,the,case,of,a,container,this,will,propagate,the,stop,signal,to,all,components,that,apply,see,smart,lifecycle,stop,runnable,see,org,springframework,beans,factory,disposable,bean,destroy;void,stop
Lifecycle -> void stop()_;1534414082;Stop this component, typically in a synchronous fashion, such that the component is_fully stopped upon return of this method. Consider implementing {@link SmartLifecycle}_and its {@code stop(Runnable)} variant when asynchronous stop behavior is necessary._<p>Note that this stop notification is not guaranteed to come before destruction:_On regular shutdown, {@code Lifecycle} beans will first receive a stop notification_before the general destruction callbacks are being propagated_ however, on hot_refresh during a context's lifetime or on aborted refresh attempts, a given bean's_destroy method will be called without any consideration of stop signals upfront._<p>Should not throw an exception if the component is not running (not started yet)._<p>In the case of a container, this will propagate the stop signal to all components_that apply._@see SmartLifecycle#stop(Runnable)_@see org.springframework.beans.factory.DisposableBean#destroy();void stop()_;stop,this,component,typically,in,a,synchronous,fashion,such,that,the,component,is,fully,stopped,upon,return,of,this,method,consider,implementing,link,smart,lifecycle,and,its,code,stop,runnable,variant,when,asynchronous,stop,behavior,is,necessary,p,note,that,this,stop,notification,is,not,guaranteed,to,come,before,destruction,on,regular,shutdown,code,lifecycle,beans,will,first,receive,a,stop,notification,before,the,general,destruction,callbacks,are,being,propagated,however,on,hot,refresh,during,a,context,s,lifetime,or,on,aborted,refresh,attempts,a,given,bean,s,destroy,method,will,be,called,without,any,consideration,of,stop,signals,upfront,p,should,not,throw,an,exception,if,the,component,is,not,running,not,started,yet,p,in,the,case,of,a,container,this,will,propagate,the,stop,signal,to,all,components,that,apply,see,smart,lifecycle,stop,runnable,see,org,springframework,beans,factory,disposable,bean,destroy;void,stop
