# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(@Nullable Class<?> businessInterface);1500448076;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(@Nullable Class<?> businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,nullable,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(@Nullable Class<?> businessInterface);1502974979;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(@Nullable Class<?> businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,nullable,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(@Nullable Class<?> businessInterface);1530174524;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(@Nullable Class<?> businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,nullable,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> @Nullable 	public Class<?> getBusinessInterface();1498780456;Return the business interface of the EJB we're proxying.;@Nullable_	public Class<?> getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;nullable,public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> @Nullable 	public Class<?> getBusinessInterface();1500448076;Return the business interface of the EJB we're proxying.;@Nullable_	public Class<?> getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;nullable,public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> @Nullable 	public Class<?> getBusinessInterface();1502974979;Return the business interface of the EJB we're proxying.;@Nullable_	public Class<?> getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;nullable,public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> @Nullable 	public Class<?> getBusinessInterface();1530174524;Return the business interface of the EJB we're proxying.;@Nullable_	public Class<?> getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;nullable,public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class<?> businessInterface);1385412762;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class<?> businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class<?> businessInterface);1496242568;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class<?> businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class<?> businessInterface);1496837955;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class<?> businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class<?> businessInterface);1497341594;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class<?> businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class<?> businessInterface);1498780456;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class<?> businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class businessInterface);1328020251;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class businessInterface);1356735495;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class businessInterface);1357119239;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public void setBusinessInterface(Class businessInterface);1368482696;Set the business interface of the EJB we're proxying._This will normally be a super-interface of the EJB remote component interface._Using a business methods interface is a best practice when implementing EJBs._<p>You can also specify a matching non-RMI business interface, i.e. an interface_that mirrors the EJB business methods but does not declare RemoteExceptions._In this case, RemoteExceptions thrown by the EJB stub will automatically get_converted to Spring's generic RemoteAccessException._@param businessInterface the business interface of the EJB;public void setBusinessInterface(Class businessInterface) {_		this.businessInterface = businessInterface__	};set,the,business,interface,of,the,ejb,we,re,proxying,this,will,normally,be,a,super,interface,of,the,ejb,remote,component,interface,using,a,business,methods,interface,is,a,best,practice,when,implementing,ejbs,p,you,can,also,specify,a,matching,non,rmi,business,interface,i,e,an,interface,that,mirrors,the,ejb,business,methods,but,does,not,declare,remote,exceptions,in,this,case,remote,exceptions,thrown,by,the,ejb,stub,will,automatically,get,converted,to,spring,s,generic,remote,access,exception,param,business,interface,the,business,interface,of,the,ejb;public,void,set,business,interface,class,business,interface,this,business,interface,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public Class getBusinessInterface();1328020251;Return the business interface of the EJB we're proxying.;public Class getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public Class getBusinessInterface();1356735495;Return the business interface of the EJB we're proxying.;public Class getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public Class getBusinessInterface();1357119239;Return the business interface of the EJB we're proxying.;public Class getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public Class getBusinessInterface();1368482696;Return the business interface of the EJB we're proxying.;public Class getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public Class<?> getBusinessInterface();1385412762;Return the business interface of the EJB we're proxying.;public Class<?> getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public Class<?> getBusinessInterface();1496242568;Return the business interface of the EJB we're proxying.;public Class<?> getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public Class<?> getBusinessInterface();1496837955;Return the business interface of the EJB we're proxying.;public Class<?> getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;public,class,get,business,interface,return,this,business,interface
SimpleRemoteStatelessSessionProxyFactoryBean -> public Class<?> getBusinessInterface();1497341594;Return the business interface of the EJB we're proxying.;public Class<?> getBusinessInterface() {_		return this.businessInterface__	};return,the,business,interface,of,the,ejb,we,re,proxying;public,class,get,business,interface,return,this,business,interface
