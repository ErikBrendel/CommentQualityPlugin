commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the business interface of the EJB we're proxying.  * This will normally be a super-interface of the EJB remote component interface.  * Using a business methods interface is a best practice when implementing EJBs.  * <p>You can also specify a matching non-RMI business interface, i.e. an interface  * that mirrors the EJB business methods but does not declare RemoteExceptions.  * In this case, RemoteExceptions thrown by the EJB stub will automatically get  * converted to Spring's generic RemoteAccessException.  * @param businessInterface the business interface of the EJB  */ ;/**  * Set the business interface of the EJB we're proxying.  * This will normally be a super-interface of the EJB remote component interface.  * Using a business methods interface is a best practice when implementing EJBs.  * <p>You can also specify a matching non-RMI business interface, i.e. an interface  * that mirrors the EJB business methods but does not declare RemoteExceptions.  * In this case, RemoteExceptions thrown by the EJB stub will automatically get  * converted to Spring's generic RemoteAccessException.  * @param businessInterface the business interface of the EJB  */ public void setBusinessInterface(@Nullable Class<?> businessInterface) {     this.businessInterface = businessInterface. }
true;public;0;4;/**  * Return the business interface of the EJB we're proxying.  */ ;/**  * Return the business interface of the EJB we're proxying.  */ @Nullable public Class<?> getBusinessInterface() {     return this.businessInterface. }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;public;0;8;;@Override public void afterPropertiesSet() throws NamingException {     super.afterPropertiesSet().     if (this.businessInterface == null) {         throw new IllegalArgumentException("businessInterface is required").     }     this.proxy = new ProxyFactory(this.businessInterface, this).getProxy(this.beanClassLoader). }
false;public;0;5;;@Override @Nullable public Object getObject() {     return this.proxy. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return this.businessInterface. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
