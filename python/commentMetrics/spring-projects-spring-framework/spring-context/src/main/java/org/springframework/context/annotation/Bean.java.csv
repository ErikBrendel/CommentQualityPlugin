# id;timestamp;commentText;codeText;commentWords;codeWords
Bean -> Autowire autowire() default Autowire.NO_;1328020251;Are dependencies to be injected via autowiring?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,autowiring;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1337107001;Are dependencies to be injected via autowiring?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,autowiring;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1337202486;Are dependencies to be injected via autowiring?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,autowiring;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1337207556;Are dependencies to be injected via autowiring?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,autowiring;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1337208427;Are dependencies to be injected via autowiring?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,autowiring;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1337378729;Are dependencies to be injected via autowiring?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,autowiring;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1353966428;Are dependencies to be injected via autowiring?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,autowiring;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1356735495;Are dependencies to be injected via autowiring?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,autowiring;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1362408075;Are dependencies to be injected via convention-based autowiring by name or type?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1397163142;Are dependencies to be injected via convention-based autowiring by name or type?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1460400578;Are dependencies to be injected via convention-based autowiring by name or type?;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1464520749;Are dependencies to be injected via convention-based autowiring by name or type?_<p>Note that this autowire mode is just about externally driven autowiring based_on bean property setter methods by convention, analogous to XML bean definitions._<p>The default mode does allow for annotation-driven autowiring. "no" refers to_externally driven autowiring only, not affecting any autowiring demands that the_bean class itself expresses through annotations._@see Autowire#BY_NAME_@see Autowire#BY_TYPE;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type,p,note,that,this,autowire,mode,is,just,about,externally,driven,autowiring,based,on,bean,property,setter,methods,by,convention,analogous,to,xml,bean,definitions,p,the,default,mode,does,allow,for,annotation,driven,autowiring,no,refers,to,externally,driven,autowiring,only,not,affecting,any,autowiring,demands,that,the,bean,class,itself,expresses,through,annotations,see,autowire,see,autowire;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1474121766;Are dependencies to be injected via convention-based autowiring by name or type?_<p>Note that this autowire mode is just about externally driven autowiring based_on bean property setter methods by convention, analogous to XML bean definitions._<p>The default mode does allow for annotation-driven autowiring. "no" refers to_externally driven autowiring only, not affecting any autowiring demands that the_bean class itself expresses through annotations._@see Autowire#BY_NAME_@see Autowire#BY_TYPE;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type,p,note,that,this,autowire,mode,is,just,about,externally,driven,autowiring,based,on,bean,property,setter,methods,by,convention,analogous,to,xml,bean,definitions,p,the,default,mode,does,allow,for,annotation,driven,autowiring,no,refers,to,externally,driven,autowiring,only,not,affecting,any,autowiring,demands,that,the,bean,class,itself,expresses,through,annotations,see,autowire,see,autowire;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1474227238;Are dependencies to be injected via convention-based autowiring by name or type?_<p>Note that this autowire mode is just about externally driven autowiring based_on bean property setter methods by convention, analogous to XML bean definitions._<p>The default mode does allow for annotation-driven autowiring. "no" refers to_externally driven autowiring only, not affecting any autowiring demands that the_bean class itself expresses through annotations._@see Autowire#BY_NAME_@see Autowire#BY_TYPE;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type,p,note,that,this,autowire,mode,is,just,about,externally,driven,autowiring,based,on,bean,property,setter,methods,by,convention,analogous,to,xml,bean,definitions,p,the,default,mode,does,allow,for,annotation,driven,autowiring,no,refers,to,externally,driven,autowiring,only,not,affecting,any,autowiring,demands,that,the,bean,class,itself,expresses,through,annotations,see,autowire,see,autowire;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1490722023;Are dependencies to be injected via convention-based autowiring by name or type?_<p>Note that this autowire mode is just about externally driven autowiring based_on bean property setter methods by convention, analogous to XML bean definitions._<p>The default mode does allow for annotation-driven autowiring. "no" refers to_externally driven autowiring only, not affecting any autowiring demands that the_bean class itself expresses through annotations._@see Autowire#BY_NAME_@see Autowire#BY_TYPE;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type,p,note,that,this,autowire,mode,is,just,about,externally,driven,autowiring,based,on,bean,property,setter,methods,by,convention,analogous,to,xml,bean,definitions,p,the,default,mode,does,allow,for,annotation,driven,autowiring,no,refers,to,externally,driven,autowiring,only,not,affecting,any,autowiring,demands,that,the,bean,class,itself,expresses,through,annotations,see,autowire,see,autowire;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1508190782;Are dependencies to be injected via convention-based autowiring by name or type?_<p>Note that this autowire mode is just about externally driven autowiring based_on bean property setter methods by convention, analogous to XML bean definitions._<p>The default mode does allow for annotation-driven autowiring. "no" refers to_externally driven autowiring only, not affecting any autowiring demands that the_bean class itself expresses through annotations._@see Autowire#BY_NAME_@see Autowire#BY_TYPE;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type,p,note,that,this,autowire,mode,is,just,about,externally,driven,autowiring,based,on,bean,property,setter,methods,by,convention,analogous,to,xml,bean,definitions,p,the,default,mode,does,allow,for,annotation,driven,autowiring,no,refers,to,externally,driven,autowiring,only,not,affecting,any,autowiring,demands,that,the,bean,class,itself,expresses,through,annotations,see,autowire,see,autowire;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1511178817;Are dependencies to be injected via convention-based autowiring by name or type?_<p>Note that this autowire mode is just about externally driven autowiring based_on bean property setter methods by convention, analogous to XML bean definitions._<p>The default mode does allow for annotation-driven autowiring. "no" refers to_externally driven autowiring only, not affecting any autowiring demands that the_bean class itself expresses through annotations._@see Autowire#BY_NAME_@see Autowire#BY_TYPE;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type,p,note,that,this,autowire,mode,is,just,about,externally,driven,autowiring,based,on,bean,property,setter,methods,by,convention,analogous,to,xml,bean,definitions,p,the,default,mode,does,allow,for,annotation,driven,autowiring,no,refers,to,externally,driven,autowiring,only,not,affecting,any,autowiring,demands,that,the,bean,class,itself,expresses,through,annotations,see,autowire,see,autowire;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1511874681;Are dependencies to be injected via convention-based autowiring by name or type?_<p>Note that this autowire mode is just about externally driven autowiring based_on bean property setter methods by convention, analogous to XML bean definitions._<p>The default mode does allow for annotation-driven autowiring. "no" refers to_externally driven autowiring only, not affecting any autowiring demands that the_bean class itself expresses through annotations._@see Autowire#BY_NAME_@see Autowire#BY_TYPE;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type,p,note,that,this,autowire,mode,is,just,about,externally,driven,autowiring,based,on,bean,property,setter,methods,by,convention,analogous,to,xml,bean,definitions,p,the,default,mode,does,allow,for,annotation,driven,autowiring,no,refers,to,externally,driven,autowiring,only,not,affecting,any,autowiring,demands,that,the,bean,class,itself,expresses,through,annotations,see,autowire,see,autowire;autowire,autowire,default,autowire,no
Bean -> Autowire autowire() default Autowire.NO_;1530736865;Are dependencies to be injected via convention-based autowiring by name or type?_<p>Note that this autowire mode is just about externally driven autowiring based_on bean property setter methods by convention, analogous to XML bean definitions._<p>The default mode does allow for annotation-driven autowiring. "no" refers to_externally driven autowiring only, not affecting any autowiring demands that the_bean class itself expresses through annotations._@see Autowire#BY_NAME_@see Autowire#BY_TYPE;Autowire autowire() default Autowire.NO_;are,dependencies,to,be,injected,via,convention,based,autowiring,by,name,or,type,p,note,that,this,autowire,mode,is,just,about,externally,driven,autowiring,based,on,bean,property,setter,methods,by,convention,analogous,to,xml,bean,definitions,p,the,default,mode,does,allow,for,annotation,driven,autowiring,no,refers,to,externally,driven,autowiring,only,not,affecting,any,autowiring,demands,that,the,bean,class,itself,expresses,through,annotations,see,autowire,see,autowire;autowire,autowire,default,autowire,no
Bean -> String initMethod() default ""_;1328020251;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1337107001;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1337202486;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1337207556;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1337208427;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1337378729;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1353966428;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1356735495;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1362408075;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method. Default value is {@code ""}, indicating_that no init method should be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,default,value,is,code,indicating,that,no,init,method,should,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1397163142;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1460400578;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1464520749;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1474121766;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1474227238;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1490722023;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called.;String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called;string,init,method,default
Bean -> String initMethod() default ""_;1508190782;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called._@see org.springframework.beans.factory.InitializingBean_@see org.springframework.context.ConfigurableApplicationContext#refresh();String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called,see,org,springframework,beans,factory,initializing,bean,see,org,springframework,context,configurable,application,context,refresh;string,init,method,default
Bean -> String initMethod() default ""_;1511178817;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called._@see org.springframework.beans.factory.InitializingBean_@see org.springframework.context.ConfigurableApplicationContext#refresh();String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called,see,org,springframework,beans,factory,initializing,bean,see,org,springframework,context,configurable,application,context,refresh;string,init,method,default
Bean -> String initMethod() default ""_;1511874681;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called._@see org.springframework.beans.factory.InitializingBean_@see org.springframework.context.ConfigurableApplicationContext#refresh();String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called,see,org,springframework,beans,factory,initializing,bean,see,org,springframework,context,configurable,application,context,refresh;string,init,method,default
Bean -> String initMethod() default ""_;1530736865;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called._@see org.springframework.beans.factory.InitializingBean_@see org.springframework.context.ConfigurableApplicationContext#refresh();String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called,see,org,springframework,beans,factory,initializing,bean,see,org,springframework,context,configurable,application,context,refresh;string,init,method,default
Bean -> String initMethod() default ""_;1537204161;The optional name of a method to call on the bean instance during initialization._Not commonly used, given that the method may be called programmatically directly_within the body of a Bean-annotated method._<p>The default value is {@code ""}, indicating no init method to be called._@see org.springframework.beans.factory.InitializingBean_@see org.springframework.context.ConfigurableApplicationContext#refresh();String initMethod() default ""_;the,optional,name,of,a,method,to,call,on,the,bean,instance,during,initialization,not,commonly,used,given,that,the,method,may,be,called,programmatically,directly,within,the,body,of,a,bean,annotated,method,p,the,default,value,is,code,indicating,no,init,method,to,be,called,see,org,springframework,beans,factory,initializing,bean,see,org,springframework,context,configurable,application,context,refresh;string,init,method,default
Bean -> boolean autowireCandidate() default true_;1530736865;Is this bean a candidate for getting autowired into some other bean?_<p>Default is {@code true}_ set this to {@code false} for internal delegates_that are not meant to get in the way of beans of the same type in other places._@since 5.1;boolean autowireCandidate() default true_;is,this,bean,a,candidate,for,getting,autowired,into,some,other,bean,p,default,is,code,true,set,this,to,code,false,for,internal,delegates,that,are,not,meant,to,get,in,the,way,of,beans,of,the,same,type,in,other,places,since,5,1;boolean,autowire,candidate,default,true
Bean -> boolean autowireCandidate() default true_;1537204161;Is this bean a candidate for getting autowired into some other bean?_<p>Default is {@code true}_ set this to {@code false} for internal delegates_that are not meant to get in the way of beans of the same type in other places._@since 5.1;boolean autowireCandidate() default true_;is,this,bean,a,candidate,for,getting,autowired,into,some,other,bean,p,default,is,code,true,set,this,to,code,false,for,internal,delegates,that,are,not,meant,to,get,in,the,way,of,beans,of,the,same,type,in,other,places,since,5,1;boolean,autowire,candidate,default,true
Bean -> @AliasFor("name") 	String[] value() default {}_;1474121766;Alias for {@link #name}._<p>Intended to be used when no other attributes are needed, for example:_{@code @Bean("customBeanName")}._@since 5.0_@see #name;@AliasFor("name")_	String[] value() default {}_;alias,for,link,name,p,intended,to,be,used,when,no,other,attributes,are,needed,for,example,code,bean,custom,bean,name,since,5,0,see,name;alias,for,name,string,value,default
Bean -> @AliasFor("name") 	String[] value() default {}_;1474227238;Alias for {@link #name}._<p>Intended to be used when no other attributes are needed, for example:_{@code @Bean("customBeanName")}._@since 4.3.3_@see #name;@AliasFor("name")_	String[] value() default {}_;alias,for,link,name,p,intended,to,be,used,when,no,other,attributes,are,needed,for,example,code,bean,custom,bean,name,since,4,3,3,see,name;alias,for,name,string,value,default
Bean -> @AliasFor("name") 	String[] value() default {}_;1490722023;Alias for {@link #name}._<p>Intended to be used when no other attributes are needed, for example:_{@code @Bean("customBeanName")}._@since 4.3.3_@see #name;@AliasFor("name")_	String[] value() default {}_;alias,for,link,name,p,intended,to,be,used,when,no,other,attributes,are,needed,for,example,code,bean,custom,bean,name,since,4,3,3,see,name;alias,for,name,string,value,default
Bean -> @AliasFor("name") 	String[] value() default {}_;1508190782;Alias for {@link #name}._<p>Intended to be used when no other attributes are needed, for example:_{@code @Bean("customBeanName")}._@since 4.3.3_@see #name;@AliasFor("name")_	String[] value() default {}_;alias,for,link,name,p,intended,to,be,used,when,no,other,attributes,are,needed,for,example,code,bean,custom,bean,name,since,4,3,3,see,name;alias,for,name,string,value,default
Bean -> @AliasFor("name") 	String[] value() default {}_;1511178817;Alias for {@link #name}._<p>Intended to be used when no other attributes are needed, for example:_{@code @Bean("customBeanName")}._@since 4.3.3_@see #name;@AliasFor("name")_	String[] value() default {}_;alias,for,link,name,p,intended,to,be,used,when,no,other,attributes,are,needed,for,example,code,bean,custom,bean,name,since,4,3,3,see,name;alias,for,name,string,value,default
Bean -> @AliasFor("name") 	String[] value() default {}_;1511874681;Alias for {@link #name}._<p>Intended to be used when no other attributes are needed, for example:_{@code @Bean("customBeanName")}._@since 4.3.3_@see #name;@AliasFor("name")_	String[] value() default {}_;alias,for,link,name,p,intended,to,be,used,when,no,other,attributes,are,needed,for,example,code,bean,custom,bean,name,since,4,3,3,see,name;alias,for,name,string,value,default
Bean -> @AliasFor("name") 	String[] value() default {}_;1530736865;Alias for {@link #name}._<p>Intended to be used when no other attributes are needed, for example:_{@code @Bean("customBeanName")}._@since 4.3.3_@see #name;@AliasFor("name")_	String[] value() default {}_;alias,for,link,name,p,intended,to,be,used,when,no,other,attributes,are,needed,for,example,code,bean,custom,bean,name,since,4,3,3,see,name;alias,for,name,string,value,default
Bean -> @AliasFor("name") 	String[] value() default {}_;1537204161;Alias for {@link #name}._<p>Intended to be used when no other attributes are needed, for example:_{@code @Bean("customBeanName")}._@since 4.3.3_@see #name;@AliasFor("name")_	String[] value() default {}_;alias,for,link,name,p,intended,to,be,used,when,no,other,attributes,are,needed,for,example,code,bean,custom,bean,name,since,4,3,3,see,name;alias,for,name,string,value,default
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1328020251;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy, and_will be detected regardless of the return type of the {@code @Bean} method, i.e._detection occurs reflectively against the bean instance itself at creation time._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed_for any other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1337107001;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy, and_will be detected regardless of the return type of the {@code @Bean} method, i.e._detection occurs reflectively against the bean instance itself at creation time._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed_for any other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1337202486;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception.__<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy and_will be detected regardless of the return type of the {@code @Bean} method (i.e.,_detection occurs reflectively against the bean instance itself at creation time).__<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}.__<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope.__@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1337207556;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception.__<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy and_will be detected regardless of the return type of the {@code @Bean} method (i.e.,_detection occurs reflectively against the bean instance itself at creation time).__<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}.__<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope.__@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1337208427;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception.__<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy and_will be detected regardless of the return type of the {@code @Bean} method (i.e.,_detection occurs reflectively against the bean instance itself at creation time).__<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}.__<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope.__@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1337378729;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception.__<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy and_will be detected regardless of the return type of the {@code @Bean} method (i.e.,_detection occurs reflectively against the bean instance itself at creation time).__<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}.__<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope.__@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1353966428;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy and_will be detected regardless of the return type of the {@code @Bean} method (i.e.,_detection occurs reflectively against the bean instance itself at creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1356735495;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy and_will be detected regardless of the return type of the {@code @Bean} method (i.e.,_detection occurs reflectively against the bean instance itself at creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1362408075;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC {@code_DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given a_{@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource}, the_container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close'. The method may be declared at any level of the inheritance hierarchy and_will be detected regardless of the return type of the {@code @Bean} method (i.e.,_detection occurs reflectively against the bean instance itself at creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,a,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1397163142;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1460400578;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1464520749;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1474121766;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1474227238;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1490722023;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} and the_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} interfaces will_nevertheless get detected and the corresponding destroy/close method invoked._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,and,the,link,java,io,closeable,link,java,lang,auto,closeable,interfaces,will,nevertheless,get,detected,and,the,corresponding,destroy,close,method,invoked,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1508190782;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} callback interface will_nevertheless get detected and the corresponding destroy method invoked: In other_words, {@code destroyMethod=""} only affects custom close/shutdown methods and_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} declared close methods._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.beans.factory.DisposableBean_@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,callback,interface,will,nevertheless,get,detected,and,the,corresponding,destroy,method,invoked,in,other,words,code,destroy,method,only,affects,custom,close,shutdown,methods,and,link,java,io,closeable,link,java,lang,auto,closeable,declared,close,methods,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1511178817;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} callback interface will_nevertheless get detected and the corresponding destroy method invoked: In other_words, {@code destroyMethod=""} only affects custom close/shutdown methods and_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} declared close methods._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.beans.factory.DisposableBean_@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,callback,interface,will,nevertheless,get,detected,and,the,corresponding,destroy,method,invoked,in,other,words,code,destroy,method,only,affects,custom,close,shutdown,methods,and,link,java,io,closeable,link,java,lang,auto,closeable,declared,close,methods,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1511874681;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} callback interface will_nevertheless get detected and the corresponding destroy method invoked: In other_words, {@code destroyMethod=""} only affects custom close/shutdown methods and_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} declared close methods._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.beans.factory.DisposableBean_@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,callback,interface,will,nevertheless,get,detected,and,the,corresponding,destroy,method,invoked,in,other,words,code,destroy,method,only,affects,custom,close,shutdown,methods,and,link,java,io,closeable,link,java,lang,auto,closeable,declared,close,methods,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1530736865;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} callback interface will_nevertheless get detected and the corresponding destroy method invoked: In other_words, {@code destroyMethod=""} only affects custom close/shutdown methods and_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} declared close methods._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.beans.factory.DisposableBean_@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,callback,interface,will,nevertheless,get,detected,and,the,corresponding,destroy,method,invoked,in,other,words,code,destroy,method,only,affects,custom,close,shutdown,methods,and,link,java,io,closeable,link,java,lang,auto,closeable,declared,close,methods,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;1537204161;The optional name of a method to call on the bean instance upon closing the_application context, for example a {@code close()} method on a JDBC_{@code DataSource} implementation, or a Hibernate {@code SessionFactory} object._The method must have no arguments but may throw any exception._<p>As a convenience to the user, the container will attempt to infer a destroy_method against an object returned from the {@code @Bean} method. For example, given_an {@code @Bean} method returning an Apache Commons DBCP {@code BasicDataSource},_the container will notice the {@code close()} method available on that object and_automatically register it as the {@code destroyMethod}. This 'destroy method_inference' is currently limited to detecting only public, no-arg methods named_'close' or 'shutdown'. The method may be declared at any level of the inheritance_hierarchy and will be detected regardless of the return type of the {@code @Bean}_method (i.e., detection occurs reflectively against the bean instance itself at_creation time)._<p>To disable destroy method inference for a particular {@code @Bean}, specify an_empty string as the value, e.g. {@code @Bean(destroyMethod="")}. Note that the_{@link org.springframework.beans.factory.DisposableBean} callback interface will_nevertheless get detected and the corresponding destroy method invoked: In other_words, {@code destroyMethod=""} only affects custom close/shutdown methods and_{@link java.io.Closeable}/{@link java.lang.AutoCloseable} declared close methods._<p>Note: Only invoked on beans whose lifecycle is under the full control of the_factory, which is always the case for singletons but not guaranteed for any_other scope._@see org.springframework.beans.factory.DisposableBean_@see org.springframework.context.ConfigurableApplicationContext#close();String destroyMethod() default AbstractBeanDefinition.INFER_METHOD_;the,optional,name,of,a,method,to,call,on,the,bean,instance,upon,closing,the,application,context,for,example,a,code,close,method,on,a,jdbc,code,data,source,implementation,or,a,hibernate,code,session,factory,object,the,method,must,have,no,arguments,but,may,throw,any,exception,p,as,a,convenience,to,the,user,the,container,will,attempt,to,infer,a,destroy,method,against,an,object,returned,from,the,code,bean,method,for,example,given,an,code,bean,method,returning,an,apache,commons,dbcp,code,basic,data,source,the,container,will,notice,the,code,close,method,available,on,that,object,and,automatically,register,it,as,the,code,destroy,method,this,destroy,method,inference,is,currently,limited,to,detecting,only,public,no,arg,methods,named,close,or,shutdown,the,method,may,be,declared,at,any,level,of,the,inheritance,hierarchy,and,will,be,detected,regardless,of,the,return,type,of,the,code,bean,method,i,e,detection,occurs,reflectively,against,the,bean,instance,itself,at,creation,time,p,to,disable,destroy,method,inference,for,a,particular,code,bean,specify,an,empty,string,as,the,value,e,g,code,bean,destroy,method,note,that,the,link,org,springframework,beans,factory,disposable,bean,callback,interface,will,nevertheless,get,detected,and,the,corresponding,destroy,method,invoked,in,other,words,code,destroy,method,only,affects,custom,close,shutdown,methods,and,link,java,io,closeable,link,java,lang,auto,closeable,declared,close,methods,p,note,only,invoked,on,beans,whose,lifecycle,is,under,the,full,control,of,the,factory,which,is,always,the,case,for,singletons,but,not,guaranteed,for,any,other,scope,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,context,configurable,application,context,close;string,destroy,method,default,abstract,bean,definition
Bean -> @AliasFor("value") 	String[] name() default {}_;1474121766;The name of this bean, or if plural, aliases for this bean._<p>If left unspecified the name of the bean is the name of the annotated method._If specified, the method name is ignored._<p>The bean name and aliases may also be configured via the {@link #value}_attribute if no other attributes are declared._@see #value;@AliasFor("value")_	String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,p,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored,p,the,bean,name,and,aliases,may,also,be,configured,via,the,link,value,attribute,if,no,other,attributes,are,declared,see,value;alias,for,value,string,name,default
Bean -> @AliasFor("value") 	String[] name() default {}_;1474227238;The name of this bean, or if several names, a primary bean name plus aliases._<p>If left unspecified, the name of the bean is the name of the annotated method._If specified, the method name is ignored._<p>The bean name and aliases may also be configured via the {@link #value}_attribute if no other attributes are declared._@see #value;@AliasFor("value")_	String[] name() default {}_;the,name,of,this,bean,or,if,several,names,a,primary,bean,name,plus,aliases,p,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored,p,the,bean,name,and,aliases,may,also,be,configured,via,the,link,value,attribute,if,no,other,attributes,are,declared,see,value;alias,for,value,string,name,default
Bean -> @AliasFor("value") 	String[] name() default {}_;1490722023;The name of this bean, or if several names, a primary bean name plus aliases._<p>If left unspecified, the name of the bean is the name of the annotated method._If specified, the method name is ignored._<p>The bean name and aliases may also be configured via the {@link #value}_attribute if no other attributes are declared._@see #value;@AliasFor("value")_	String[] name() default {}_;the,name,of,this,bean,or,if,several,names,a,primary,bean,name,plus,aliases,p,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored,p,the,bean,name,and,aliases,may,also,be,configured,via,the,link,value,attribute,if,no,other,attributes,are,declared,see,value;alias,for,value,string,name,default
Bean -> @AliasFor("value") 	String[] name() default {}_;1508190782;The name of this bean, or if several names, a primary bean name plus aliases._<p>If left unspecified, the name of the bean is the name of the annotated method._If specified, the method name is ignored._<p>The bean name and aliases may also be configured via the {@link #value}_attribute if no other attributes are declared._@see #value;@AliasFor("value")_	String[] name() default {}_;the,name,of,this,bean,or,if,several,names,a,primary,bean,name,plus,aliases,p,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored,p,the,bean,name,and,aliases,may,also,be,configured,via,the,link,value,attribute,if,no,other,attributes,are,declared,see,value;alias,for,value,string,name,default
Bean -> @AliasFor("value") 	String[] name() default {}_;1511178817;The name of this bean, or if several names, a primary bean name plus aliases._<p>If left unspecified, the name of the bean is the name of the annotated method._If specified, the method name is ignored._<p>The bean name and aliases may also be configured via the {@link #value}_attribute if no other attributes are declared._@see #value;@AliasFor("value")_	String[] name() default {}_;the,name,of,this,bean,or,if,several,names,a,primary,bean,name,plus,aliases,p,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored,p,the,bean,name,and,aliases,may,also,be,configured,via,the,link,value,attribute,if,no,other,attributes,are,declared,see,value;alias,for,value,string,name,default
Bean -> @AliasFor("value") 	String[] name() default {}_;1511874681;The name of this bean, or if several names, a primary bean name plus aliases._<p>If left unspecified, the name of the bean is the name of the annotated method._If specified, the method name is ignored._<p>The bean name and aliases may also be configured via the {@link #value}_attribute if no other attributes are declared._@see #value;@AliasFor("value")_	String[] name() default {}_;the,name,of,this,bean,or,if,several,names,a,primary,bean,name,plus,aliases,p,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored,p,the,bean,name,and,aliases,may,also,be,configured,via,the,link,value,attribute,if,no,other,attributes,are,declared,see,value;alias,for,value,string,name,default
Bean -> @AliasFor("value") 	String[] name() default {}_;1530736865;The name of this bean, or if several names, a primary bean name plus aliases._<p>If left unspecified, the name of the bean is the name of the annotated method._If specified, the method name is ignored._<p>The bean name and aliases may also be configured via the {@link #value}_attribute if no other attributes are declared._@see #value;@AliasFor("value")_	String[] name() default {}_;the,name,of,this,bean,or,if,several,names,a,primary,bean,name,plus,aliases,p,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored,p,the,bean,name,and,aliases,may,also,be,configured,via,the,link,value,attribute,if,no,other,attributes,are,declared,see,value;alias,for,value,string,name,default
Bean -> @AliasFor("value") 	String[] name() default {}_;1537204161;The name of this bean, or if several names, a primary bean name plus aliases._<p>If left unspecified, the name of the bean is the name of the annotated method._If specified, the method name is ignored._<p>The bean name and aliases may also be configured via the {@link #value}_attribute if no other attributes are declared._@see #value;@AliasFor("value")_	String[] name() default {}_;the,name,of,this,bean,or,if,several,names,a,primary,bean,name,plus,aliases,p,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored,p,the,bean,name,and,aliases,may,also,be,configured,via,the,link,value,attribute,if,no,other,attributes,are,declared,see,value;alias,for,value,string,name,default
Bean -> String[] name() default {}_;1328020251;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1337107001;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1337202486;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1337207556;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1337208427;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1337378729;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1353966428;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1356735495;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1362408075;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1397163142;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1460400578;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
Bean -> String[] name() default {}_;1464520749;The name of this bean, or if plural, aliases for this bean. If left unspecified_the name of the bean is the name of the annotated method. If specified, the method_name is ignored.;String[] name() default {}_;the,name,of,this,bean,or,if,plural,aliases,for,this,bean,if,left,unspecified,the,name,of,the,bean,is,the,name,of,the,annotated,method,if,specified,the,method,name,is,ignored;string,name,default
