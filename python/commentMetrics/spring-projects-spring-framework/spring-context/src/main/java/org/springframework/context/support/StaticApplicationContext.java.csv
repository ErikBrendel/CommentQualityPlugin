commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * Overridden to turn it into a no-op, to be more lenient towards test cases.  */ ;/**  * Overridden to turn it into a no-op, to be more lenient towards test cases.  */ @Override protected void assertBeanFactoryActive() { }
true;public,final;0;3;/**  * Return the internal StaticMessageSource used by this context.  * Can be used to register messages on it.  * @see #addMessage  */ ;/**  * Return the internal StaticMessageSource used by this context.  * Can be used to register messages on it.  * @see #addMessage  */ public final StaticMessageSource getStaticMessageSource() {     return this.staticMessageSource. }
true;public;2;5;/**  * Register a singleton bean with the underlying bean factory.  * <p>For more advanced needs, register with the underlying BeanFactory directly.  * @see #getDefaultListableBeanFactory  */ ;/**  * Register a singleton bean with the underlying bean factory.  * <p>For more advanced needs, register with the underlying BeanFactory directly.  * @see #getDefaultListableBeanFactory  */ public void registerSingleton(String name, Class<?> clazz) throws BeansException {     GenericBeanDefinition bd = new GenericBeanDefinition().     bd.setBeanClass(clazz).     getDefaultListableBeanFactory().registerBeanDefinition(name, bd). }
true;public;3;6;/**  * Register a singleton bean with the underlying bean factory.  * <p>For more advanced needs, register with the underlying BeanFactory directly.  * @see #getDefaultListableBeanFactory  */ ;/**  * Register a singleton bean with the underlying bean factory.  * <p>For more advanced needs, register with the underlying BeanFactory directly.  * @see #getDefaultListableBeanFactory  */ public void registerSingleton(String name, Class<?> clazz, MutablePropertyValues pvs) throws BeansException {     GenericBeanDefinition bd = new GenericBeanDefinition().     bd.setBeanClass(clazz).     bd.setPropertyValues(pvs).     getDefaultListableBeanFactory().registerBeanDefinition(name, bd). }
true;public;2;6;/**  * Register a prototype bean with the underlying bean factory.  * <p>For more advanced needs, register with the underlying BeanFactory directly.  * @see #getDefaultListableBeanFactory  */ ;/**  * Register a prototype bean with the underlying bean factory.  * <p>For more advanced needs, register with the underlying BeanFactory directly.  * @see #getDefaultListableBeanFactory  */ public void registerPrototype(String name, Class<?> clazz) throws BeansException {     GenericBeanDefinition bd = new GenericBeanDefinition().     bd.setScope(GenericBeanDefinition.SCOPE_PROTOTYPE).     bd.setBeanClass(clazz).     getDefaultListableBeanFactory().registerBeanDefinition(name, bd). }
true;public;3;7;/**  * Register a prototype bean with the underlying bean factory.  * <p>For more advanced needs, register with the underlying BeanFactory directly.  * @see #getDefaultListableBeanFactory  */ ;/**  * Register a prototype bean with the underlying bean factory.  * <p>For more advanced needs, register with the underlying BeanFactory directly.  * @see #getDefaultListableBeanFactory  */ public void registerPrototype(String name, Class<?> clazz, MutablePropertyValues pvs) throws BeansException {     GenericBeanDefinition bd = new GenericBeanDefinition().     bd.setScope(GenericBeanDefinition.SCOPE_PROTOTYPE).     bd.setBeanClass(clazz).     bd.setPropertyValues(pvs).     getDefaultListableBeanFactory().registerBeanDefinition(name, bd). }
true;public;3;3;/**  * Associate the given message with the given code.  * @param code lookup code  * @param locale locale message should be found within  * @param defaultMessage message associated with this lookup code  * @see #getStaticMessageSource  */ ;/**  * Associate the given message with the given code.  * @param code lookup code  * @param locale locale message should be found within  * @param defaultMessage message associated with this lookup code  * @see #getStaticMessageSource  */ public void addMessage(String code, Locale locale, String defaultMessage) {     getStaticMessageSource().addMessage(code, locale, defaultMessage). }
