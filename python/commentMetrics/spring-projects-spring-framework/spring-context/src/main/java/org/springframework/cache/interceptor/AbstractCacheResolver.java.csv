commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link CacheManager} that this instance should use.  */ ;/**  * Set the {@link CacheManager} that this instance should use.  */ public void setCacheManager(CacheManager cacheManager) {     this.cacheManager = cacheManager. }
true;public;0;4;/**  * Return the {@link CacheManager} that this instance uses.  */ ;/**  * Return the {@link CacheManager} that this instance uses.  */ public CacheManager getCacheManager() {     Assert.state(this.cacheManager != null, "No CacheManager set").     return this.cacheManager. }
false;public;0;4;;@Override public void afterPropertiesSet() {     Assert.notNull(this.cacheManager, "CacheManager is required"). }
false;public;1;17;;@Override public Collection<? extends Cache> resolveCaches(CacheOperationInvocationContext<?> context) {     Collection<String> cacheNames = getCacheNames(context).     if (cacheNames == null) {         return Collections.emptyList().     }     Collection<Cache> result = new ArrayList<>(cacheNames.size()).     for (String cacheName : cacheNames) {         Cache cache = getCacheManager().getCache(cacheName).         if (cache == null) {             throw new IllegalArgumentException("Cannot find cache named '" + cacheName + "' for " + context.getOperation()).         }         result.add(cache).     }     return result. }
true;protected,abstract;1;2;/**  * Provide the name of the cache(s) to resolve against the current cache manager.  * <p>It is acceptable to return {@code null} to indicate that no cache could  * be resolved for this invocation.  * @param context the context of the particular invocation  * @return the cache name(s) to resolve, or {@code null} if no cache should be resolved  */ ;/**  * Provide the name of the cache(s) to resolve against the current cache manager.  * <p>It is acceptable to return {@code null} to indicate that no cache could  * be resolved for this invocation.  * @param context the context of the particular invocation  * @return the cache name(s) to resolve, or {@code null} if no cache should be resolved  */ @Nullable protected abstract Collection<String> getCacheNames(CacheOperationInvocationContext<?> context).
