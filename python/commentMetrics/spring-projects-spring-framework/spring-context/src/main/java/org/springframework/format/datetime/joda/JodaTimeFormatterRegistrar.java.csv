commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Set whether standard ISO formatting should be applied to all date/time types.  * Default is "false" (no).  * <p>If set to "true", the "dateStyle", "timeStyle" and "dateTimeStyle"  * properties are effectively ignored.  */ ;/**  * Set whether standard ISO formatting should be applied to all date/time types.  * Default is "false" (no).  * <p>If set to "true", the "dateStyle", "timeStyle" and "dateTimeStyle"  * properties are effectively ignored.  */ public void setUseIsoFormat(boolean useIsoFormat) {     this.factories.get(Type.DATE).setIso(useIsoFormat ? ISO.DATE : ISO.NONE).     this.factories.get(Type.TIME).setIso(useIsoFormat ? ISO.TIME : ISO.NONE).     this.factories.get(Type.DATE_TIME).setIso(useIsoFormat ? ISO.DATE_TIME : ISO.NONE). }
true;public;1;3;/**  * Set the default format style of Joda {@link LocalDate} objects.  * Default is {@link DateTimeFormat#shortDate()}.  */ ;/**  * Set the default format style of Joda {@link LocalDate} objects.  * Default is {@link DateTimeFormat#shortDate()}.  */ public void setDateStyle(String dateStyle) {     this.factories.get(Type.DATE).setStyle(dateStyle + "-"). }
true;public;1;3;/**  * Set the default format style of Joda {@link LocalTime} objects.  * Default is {@link DateTimeFormat#shortTime()}.  */ ;/**  * Set the default format style of Joda {@link LocalTime} objects.  * Default is {@link DateTimeFormat#shortTime()}.  */ public void setTimeStyle(String timeStyle) {     this.factories.get(Type.TIME).setStyle("-" + timeStyle). }
true;public;1;3;/**  * Set the default format style of Joda {@link LocalDateTime} and {@link DateTime} objects,  * as well as JDK {@link Date} and {@link Calendar} objects.  * Default is {@link DateTimeFormat#shortDateTime()}.  */ ;/**  * Set the default format style of Joda {@link LocalDateTime} and {@link DateTime} objects,  * as well as JDK {@link Date} and {@link Calendar} objects.  * Default is {@link DateTimeFormat#shortDateTime()}.  */ public void setDateTimeStyle(String dateTimeStyle) {     this.factories.get(Type.DATE_TIME).setStyle(dateTimeStyle). }
true;public;1;3;/**  * Set the formatter that will be used for objects representing date values.  * <p>This formatter will be used for the {@link LocalDate} type. When specified  * the {@link #setDateStyle(String) dateStyle} and  * {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.  * @param formatter the formatter to use  * @since 3.2  * @see #setTimeFormatter  * @see #setDateTimeFormatter  */ ;/**  * Set the formatter that will be used for objects representing date values.  * <p>This formatter will be used for the {@link LocalDate} type. When specified  * the {@link #setDateStyle(String) dateStyle} and  * {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.  * @param formatter the formatter to use  * @since 3.2  * @see #setTimeFormatter  * @see #setDateTimeFormatter  */ public void setDateFormatter(DateTimeFormatter formatter) {     this.formatters.put(Type.DATE, formatter). }
true;public;1;3;/**  * Set the formatter that will be used for objects representing time values.  * <p>This formatter will be used for the {@link LocalTime} type. When specified  * the {@link #setTimeStyle(String) timeStyle} and  * {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.  * @param formatter the formatter to use  * @since 3.2  * @see #setDateFormatter  * @see #setDateTimeFormatter  */ ;/**  * Set the formatter that will be used for objects representing time values.  * <p>This formatter will be used for the {@link LocalTime} type. When specified  * the {@link #setTimeStyle(String) timeStyle} and  * {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.  * @param formatter the formatter to use  * @since 3.2  * @see #setDateFormatter  * @see #setDateTimeFormatter  */ public void setTimeFormatter(DateTimeFormatter formatter) {     this.formatters.put(Type.TIME, formatter). }
true;public;1;3;/**  * Set the formatter that will be used for objects representing date and time values.  * <p>This formatter will be used for {@link LocalDateTime}, {@link ReadableInstant},  * {@link Date} and {@link Calendar} types. When specified  * the {@link #setDateTimeStyle(String) dateTimeStyle} and  * {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.  * @param formatter the formatter to use  * @since 3.2  * @see #setDateFormatter  * @see #setTimeFormatter  */ ;/**  * Set the formatter that will be used for objects representing date and time values.  * <p>This formatter will be used for {@link LocalDateTime}, {@link ReadableInstant},  * {@link Date} and {@link Calendar} types. When specified  * the {@link #setDateTimeStyle(String) dateTimeStyle} and  * {@link #setUseIsoFormat(boolean) useIsoFormat} properties will be ignored.  * @param formatter the formatter to use  * @since 3.2  * @see #setDateFormatter  * @see #setTimeFormatter  */ public void setDateTimeFormatter(DateTimeFormatter formatter) {     this.formatters.put(Type.DATE_TIME, formatter). }
false;public;1;44;;@Override public void registerFormatters(FormatterRegistry registry) {     JodaTimeConverters.registerConverters(registry).     DateTimeFormatter dateFormatter = getFormatter(Type.DATE).     DateTimeFormatter timeFormatter = getFormatter(Type.TIME).     DateTimeFormatter dateTimeFormatter = getFormatter(Type.DATE_TIME).     addFormatterForFields(registry, new ReadablePartialPrinter(dateFormatter), new LocalDateParser(dateFormatter), LocalDate.class).     addFormatterForFields(registry, new ReadablePartialPrinter(timeFormatter), new LocalTimeParser(timeFormatter), LocalTime.class).     addFormatterForFields(registry, new ReadablePartialPrinter(dateTimeFormatter), new LocalDateTimeParser(dateTimeFormatter), LocalDateTime.class).     addFormatterForFields(registry, new ReadableInstantPrinter(dateTimeFormatter), new DateTimeParser(dateTimeFormatter), ReadableInstant.class).     // types when a user defined formatter is specified (see SPR-10105)     if (this.formatters.containsKey(Type.DATE_TIME)) {         addFormatterForFields(registry, new ReadableInstantPrinter(dateTimeFormatter), new DateTimeParser(dateTimeFormatter), Date.class, Calendar.class).     }     registry.addFormatterForFieldType(Period.class, new PeriodFormatter()).     registry.addFormatterForFieldType(Duration.class, new DurationFormatter()).     registry.addFormatterForFieldType(YearMonth.class, new YearMonthFormatter()).     registry.addFormatterForFieldType(MonthDay.class, new MonthDayFormatter()).     registry.addFormatterForFieldAnnotation(new JodaDateTimeFormatAnnotationFormatterFactory()). }
false;private;1;8;;private DateTimeFormatter getFormatter(Type type) {     DateTimeFormatter formatter = this.formatters.get(type).     if (formatter != null) {         return formatter.     }     DateTimeFormatter fallbackFormatter = getFallbackFormatter(type).     return this.factories.get(type).createDateTimeFormatter(fallbackFormatter). }
false;private;1;7;;private DateTimeFormatter getFallbackFormatter(Type type) {     switch(type) {         case DATE:             return DateTimeFormat.shortDate().         case TIME:             return DateTimeFormat.shortTime().         default:             return DateTimeFormat.shortDateTime().     } }
false;private;4;7;;private void addFormatterForFields(FormatterRegistry registry, Printer<?> printer, Parser<?> parser, Class<?>... fieldTypes) {     for (Class<?> fieldType : fieldTypes) {         registry.addFormatterForFieldType(fieldType, printer, parser).     } }
