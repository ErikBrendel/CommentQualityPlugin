commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public AnnotationMetadata getMetadata() {     return this.metadata. }
false;public;0;3;;public Resource getResource() {     return this.resource. }
false;public;0;3;;public String getSimpleName() {     return ClassUtils.getShortName(getMetadata().getClassName()). }
false;public;1;3;;public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;4;;@Nullable public String getBeanName() {     return this.beanName. }
true;public;0;3;/**  * Return whether this configuration class was registered via @{@link Import} or  * automatically registered due to being nested within another configuration class.  * @since 3.1.1  * @see #getImportedBy()  */ ;/**  * Return whether this configuration class was registered via @{@link Import} or  * automatically registered due to being nested within another configuration class.  * @since 3.1.1  * @see #getImportedBy()  */ public boolean isImported() {     return !this.importedBy.isEmpty(). }
true;public;1;3;/**  * Merge the imported-by declarations from the given configuration class into this one.  * @since 4.0.5  */ ;/**  * Merge the imported-by declarations from the given configuration class into this one.  * @since 4.0.5  */ public void mergeImportedBy(ConfigurationClass otherConfigClass) {     this.importedBy.addAll(otherConfigClass.importedBy). }
true;public;0;3;/**  * Return the configuration classes that imported this class,  * or an empty Set if this configuration was not imported.  * @since 4.0.5  * @see #isImported()  */ ;/**  * Return the configuration classes that imported this class,  * or an empty Set if this configuration was not imported.  * @since 4.0.5  * @see #isImported()  */ public Set<ConfigurationClass> getImportedBy() {     return this.importedBy. }
false;public;1;3;;public void addBeanMethod(BeanMethod method) {     this.beanMethods.add(method). }
false;public;0;3;;public Set<BeanMethod> getBeanMethods() {     return this.beanMethods. }
false;public;2;3;;public void addImportedResource(String importedResource, Class<? extends BeanDefinitionReader> readerClass) {     this.importedResources.put(importedResource, readerClass). }
false;public;2;3;;public void addImportBeanDefinitionRegistrar(ImportBeanDefinitionRegistrar registrar, AnnotationMetadata importingClassMetadata) {     this.importBeanDefinitionRegistrars.put(registrar, importingClassMetadata). }
false;public;0;3;;public Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> getImportBeanDefinitionRegistrars() {     return this.importBeanDefinitionRegistrars. }
false;public;0;3;;public Map<String, Class<? extends BeanDefinitionReader>> getImportedResources() {     return this.importedResources. }
false;public;1;12;;public void validate(ProblemReporter problemReporter) {     // A configuration class may not be final (CGLIB limitation)     if (getMetadata().isAnnotated(Configuration.class.getName())) {         if (getMetadata().isFinal()) {             problemReporter.error(new FinalConfigurationProblem()).         }     }     for (BeanMethod beanMethod : this.beanMethods) {         beanMethod.validate(problemReporter).     } }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof ConfigurationClass && getMetadata().getClassName().equals(((ConfigurationClass) other).getMetadata().getClassName()))). }
false;public;0;4;;@Override public int hashCode() {     return getMetadata().getClassName().hashCode(). }
false;public;0;4;;@Override public String toString() {     return "ConfigurationClass: beanName '" + this.beanName + "', " + this.resource. }
