# id;timestamp;commentText;codeText;commentWords;codeWords
RmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1328020251;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
RmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1356735495;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
RmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1357119239;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
RmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1362408075;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
RmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1368482696;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
RmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1495868221;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
RmiClientInterceptor -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1328020251;Set a custom RMI client socket factory to use for accessing the RMI registry._@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.registry.LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,accessing,the,rmi,registry,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,registry,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiClientInterceptor -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1356735495;Set a custom RMI client socket factory to use for accessing the RMI registry._@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.registry.LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,accessing,the,rmi,registry,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,registry,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiClientInterceptor -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1357119239;Set a custom RMI client socket factory to use for accessing the RMI registry._@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.registry.LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,accessing,the,rmi,registry,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,registry,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiClientInterceptor -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1362408075;Set a custom RMI client socket factory to use for accessing the RMI registry._@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.registry.LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,accessing,the,rmi,registry,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,registry,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiClientInterceptor -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1368482696;Set a custom RMI client socket factory to use for accessing the RMI registry._@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.registry.LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,accessing,the,rmi,registry,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,registry,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiClientInterceptor -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1495868221;Set a custom RMI client socket factory to use for accessing the RMI registry._@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.registry.LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,accessing,the,rmi,registry,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,registry,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 	    throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1328020251;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_	    throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getServiceUrl() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,service,url,return,invocation,handler,invoke,create,remote,invocation,method,invocation
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 	    throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1356735495;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_	    throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getServiceUrl() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,service,url,return,invocation,handler,invoke,create,remote,invocation,method,invocation
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 	    throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1357119239;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_	    throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getServiceUrl() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,service,url,return,invocation,handler,invoke,create,remote,invocation,method,invocation
RmiClientInterceptor -> protected Remote getStub() throws RemoteLookupFailureException;1328020251;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws RemoteLookupFailureException if RMI stub creation failed_@see #lookupStub;protected Remote getStub() throws RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,lookup,stub;protected,remote,get,stub,throws,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
RmiClientInterceptor -> protected Remote getStub() throws RemoteLookupFailureException;1356735495;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws RemoteLookupFailureException if RMI stub creation failed_@see #lookupStub;protected Remote getStub() throws RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,lookup,stub;protected,remote,get,stub,throws,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
RmiClientInterceptor -> protected Remote getStub() throws RemoteLookupFailureException;1357119239;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws RemoteLookupFailureException if RMI stub creation failed_@see #lookupStub;protected Remote getStub() throws RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,lookup,stub;protected,remote,get,stub,throws,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
RmiClientInterceptor -> protected Remote getStub() throws RemoteLookupFailureException;1362408075;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws RemoteLookupFailureException if RMI stub creation failed_@see #lookupStub;protected Remote getStub() throws RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,lookup,stub;protected,remote,get,stub,throws,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
RmiClientInterceptor -> protected Remote getStub() throws RemoteLookupFailureException;1368482696;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws RemoteLookupFailureException if RMI stub creation failed_@see #lookupStub;protected Remote getStub() throws RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,lookup,stub;protected,remote,get,stub,throws,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
RmiClientInterceptor -> protected Remote getStub() throws RemoteLookupFailureException;1495868221;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws RemoteLookupFailureException if RMI stub creation failed_@see #lookupStub;protected Remote getStub() throws RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,lookup,stub;protected,remote,get,stub,throws,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
RmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1328020251;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
RmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1356735495;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
RmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1357119239;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
RmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1362408075;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
RmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1368482696;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
RmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1495868221;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable;1328020251;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw RmiClientInterceptorUtils.convertRmiAccessException(_				    invocation.getMethod(), ex, isConnectFailure(ex), getServiceUrl())__			}_			catch (InvocationTargetException ex) {_				Throwable exToThrow = ex.getTargetException()__				RemoteInvocationUtils.fillInClientStackTraceIfPossible(exToThrow)__				throw exToThrow__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getServiceUrl() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					RemoteException rex = (RemoteException) targetEx__					throw RmiClientInterceptorUtils.convertRmiAccessException(_							invocation.getMethod(), rex, isConnectFailure(rex), getServiceUrl())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,remote,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,ex,is,connect,failure,ex,get,service,url,catch,invocation,target,exception,ex,throwable,ex,to,throw,ex,get,target,exception,remote,invocation,utils,fill,in,client,stack,trace,if,possible,ex,to,throw,throw,ex,to,throw,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,service,url,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,remote,exception,rex,remote,exception,target,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,rex,is,connect,failure,rex,get,service,url,else,throw,target,ex
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable;1356735495;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw RmiClientInterceptorUtils.convertRmiAccessException(_				    invocation.getMethod(), ex, isConnectFailure(ex), getServiceUrl())__			}_			catch (InvocationTargetException ex) {_				Throwable exToThrow = ex.getTargetException()__				RemoteInvocationUtils.fillInClientStackTraceIfPossible(exToThrow)__				throw exToThrow__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getServiceUrl() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					RemoteException rex = (RemoteException) targetEx__					throw RmiClientInterceptorUtils.convertRmiAccessException(_							invocation.getMethod(), rex, isConnectFailure(rex), getServiceUrl())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,remote,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,ex,is,connect,failure,ex,get,service,url,catch,invocation,target,exception,ex,throwable,ex,to,throw,ex,get,target,exception,remote,invocation,utils,fill,in,client,stack,trace,if,possible,ex,to,throw,throw,ex,to,throw,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,service,url,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,remote,exception,rex,remote,exception,target,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,rex,is,connect,failure,rex,get,service,url,else,throw,target,ex
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable;1357119239;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw RmiClientInterceptorUtils.convertRmiAccessException(_				    invocation.getMethod(), ex, isConnectFailure(ex), getServiceUrl())__			}_			catch (InvocationTargetException ex) {_				Throwable exToThrow = ex.getTargetException()__				RemoteInvocationUtils.fillInClientStackTraceIfPossible(exToThrow)__				throw exToThrow__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getServiceUrl() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					RemoteException rex = (RemoteException) targetEx__					throw RmiClientInterceptorUtils.convertRmiAccessException(_							invocation.getMethod(), rex, isConnectFailure(rex), getServiceUrl())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,remote,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,ex,is,connect,failure,ex,get,service,url,catch,invocation,target,exception,ex,throwable,ex,to,throw,ex,get,target,exception,remote,invocation,utils,fill,in,client,stack,trace,if,possible,ex,to,throw,throw,ex,to,throw,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,service,url,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,remote,exception,rex,remote,exception,target,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,rex,is,connect,failure,rex,get,service,url,else,throw,target,ex
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable;1362408075;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw RmiClientInterceptorUtils.convertRmiAccessException(_					invocation.getMethod(), ex, isConnectFailure(ex), getServiceUrl())__			}_			catch (InvocationTargetException ex) {_				Throwable exToThrow = ex.getTargetException()__				RemoteInvocationUtils.fillInClientStackTraceIfPossible(exToThrow)__				throw exToThrow__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getServiceUrl() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					RemoteException rex = (RemoteException) targetEx__					throw RmiClientInterceptorUtils.convertRmiAccessException(_							invocation.getMethod(), rex, isConnectFailure(rex), getServiceUrl())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,remote,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,ex,is,connect,failure,ex,get,service,url,catch,invocation,target,exception,ex,throwable,ex,to,throw,ex,get,target,exception,remote,invocation,utils,fill,in,client,stack,trace,if,possible,ex,to,throw,throw,ex,to,throw,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,service,url,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,remote,exception,rex,remote,exception,target,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,rex,is,connect,failure,rex,get,service,url,else,throw,target,ex
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable;1368482696;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Remote stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw RmiClientInterceptorUtils.convertRmiAccessException(_					invocation.getMethod(), ex, isConnectFailure(ex), getServiceUrl())__			}_			catch (InvocationTargetException ex) {_				Throwable exToThrow = ex.getTargetException()__				RemoteInvocationUtils.fillInClientStackTraceIfPossible(exToThrow)__				throw exToThrow__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getServiceUrl() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					RemoteException rex = (RemoteException) targetEx__					throw RmiClientInterceptorUtils.convertRmiAccessException(_							invocation.getMethod(), rex, isConnectFailure(rex), getServiceUrl())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,remote,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,ex,is,connect,failure,ex,get,service,url,catch,invocation,target,exception,ex,throwable,ex,to,throw,ex,get,target,exception,remote,invocation,utils,fill,in,client,stack,trace,if,possible,ex,to,throw,throw,ex,to,throw,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,service,url,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,remote,exception,rex,remote,exception,target,ex,throw,rmi,client,interceptor,utils,convert,rmi,access,exception,invocation,get,method,rex,is,connect,failure,rex,get,service,url,else,throw,target,ex
RmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1356735495;Fetches an RMI stub and delegates to {@code doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke(MethodInvocation, Remote)_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Remote stub = getStub()__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,code,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,method,invocation,remote,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,remote,stub,get,stub,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
RmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1368482696;Fetches an RMI stub and delegates to {@code doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke(MethodInvocation, Remote)_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Remote stub = getStub()__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,code,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,method,invocation,remote,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,remote,stub,get,stub,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
RmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1495868221;Fetches an RMI stub and delegates to {@code doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke(MethodInvocation, Remote)_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Remote stub = getStub()__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,code,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,method,invocation,remote,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,remote,stub,get,stub,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
RmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1328020251;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshStubOnConnectFailure_@see #doInvoke;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			String msg = "Could not connect to RMI service [" + getServiceUrl() + "] - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,stub,on,connect,failure,see,do,invoke;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,string,msg,could,not,connect,to,rmi,service,get,service,url,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,return,refresh,and,retry,invocation,else,throw,ex
RmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1356735495;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshStubOnConnectFailure_@see #doInvoke;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			String msg = "Could not connect to RMI service [" + getServiceUrl() + "] - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,stub,on,connect,failure,see,do,invoke;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,string,msg,could,not,connect,to,rmi,service,get,service,url,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,return,refresh,and,retry,invocation,else,throw,ex
RmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1357119239;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshStubOnConnectFailure_@see #doInvoke;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			String msg = "Could not connect to RMI service [" + getServiceUrl() + "] - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,stub,on,connect,failure,see,do,invoke;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,string,msg,could,not,connect,to,rmi,service,get,service,url,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,return,refresh,and,retry,invocation,else,throw,ex
RmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1362408075;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshStubOnConnectFailure_@see #doInvoke;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			String msg = "Could not connect to RMI service [" + getServiceUrl() + "] - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,stub,on,connect,failure,see,do,invoke;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,string,msg,could,not,connect,to,rmi,service,get,service,url,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,return,refresh,and,retry,invocation,else,throw,ex
RmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1368482696;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation,_if it failed as well_@see #setRefreshStubOnConnectFailure_@see #doInvoke;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			String msg = "Could not connect to RMI service [" + getServiceUrl() + "] - retrying"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn(msg)__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,it,failed,as,well,see,set,refresh,stub,on,connect,failure,see,do,invoke;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,string,msg,could,not,connect,to,rmi,service,get,service,url,retrying,if,logger,is,debug,enabled,logger,warn,msg,ex,else,if,logger,is,warn,enabled,logger,warn,msg,return,refresh,and,retry,invocation,else,throw,ex
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1362408075;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getServiceUrl() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,service,url,return,invocation,handler,invoke,create,remote,invocation,method,invocation
RmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1368482696;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getServiceUrl() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,service,url,return,invocation,handler,invoke,create,remote,invocation,method,invocation
RmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1328020251;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
RmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1356735495;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
RmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1357119239;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
RmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1362408075;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
RmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1368482696;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
RmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1495868221;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
RmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1328020251;Fetches RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Remote remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("RMI stub [" + getServiceUrl() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_					    "] for RMI stub [" + getServiceUrl() + "] - " +_					    (!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,remote,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,rmi,stub,get,service,url,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,rmi,stub,get,service,url,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
RmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1356735495;Fetches RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Remote remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("RMI stub [" + getServiceUrl() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_						"] for RMI stub [" + getServiceUrl() + "] - " +_						(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,remote,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,rmi,stub,get,service,url,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,rmi,stub,get,service,url,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
RmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1357119239;Fetches RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Remote remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("RMI stub [" + getServiceUrl() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_						"] for RMI stub [" + getServiceUrl() + "] - " +_						(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,remote,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,rmi,stub,get,service,url,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,rmi,stub,get,service,url,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
RmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1362408075;Fetches RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Remote remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("RMI stub [" + getServiceUrl() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_						"] for RMI stub [" + getServiceUrl() + "] - " +_						(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,remote,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,rmi,stub,get,service,url,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,rmi,stub,get,service,url,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
RmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1368482696;Fetches RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Remote remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("RMI stub [" + getServiceUrl() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_						"] for RMI stub [" + getServiceUrl() + "] - " +_						(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,remote,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,rmi,stub,get,service,url,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,rmi,stub,get,service,url,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
RmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1495868221;Fetches RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Remote remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("RMI stub [" + getServiceUrl() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_						"] for RMI stub [" + getServiceUrl() + "] - " +_						(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,remote,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,rmi,stub,get,service,url,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,rmi,stub,get,service,url,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
RmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1328020251;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
RmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1356735495;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
RmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1357119239;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
RmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1362408075;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
RmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1368482696;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
RmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1495868221;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
RmiClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1328020251;Fetches an RMI stub and delegates to <code>doInvoke</code>._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke(MethodInvocation, Remote)_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public Object invoke(MethodInvocation invocation) throws Throwable {_		Remote stub = getStub()__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,code,do,invoke,code,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,method,invocation,remote,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,object,invoke,method,invocation,invocation,throws,throwable,remote,stub,get,stub,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
RmiClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1357119239;Fetches an RMI stub and delegates to {@code doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke(MethodInvocation, Remote)_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public Object invoke(MethodInvocation invocation) throws Throwable {_		Remote stub = getStub()__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,code,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,method,invocation,remote,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,object,invoke,method,invocation,invocation,throws,throwable,remote,stub,get,stub,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
RmiClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1362408075;Fetches an RMI stub and delegates to {@code doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke(MethodInvocation, Remote)_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public Object invoke(MethodInvocation invocation) throws Throwable {_		Remote stub = getStub()__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,code,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,method,invocation,remote,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,object,invoke,method,invocation,invocation,throws,throwable,remote,stub,get,stub,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
RmiClientInterceptor -> protected Remote lookupStub() throws RemoteLookupFailureException;1328020251;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation looks up the service URL via_<code>java.rmi.Naming</code>. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see java.rmi.Naming#lookup;protected Remote lookupStub() throws RemoteLookupFailureException {_		try {_			Remote stub = null__			if (this.registryClientSocketFactory != null) {_				_				_				_				_				URL url = new URL(null, getServiceUrl(), new DummyURLStreamHandler())__				String protocol = url.getProtocol()__				if (protocol != null && !"rmi".equals(protocol)) {_					throw new MalformedURLException("Invalid URL scheme '" + protocol + "'")__				}_				String host = url.getHost()__				int port = url.getPort()__				String name = url.getPath()__				if (name != null && name.startsWith("/")) {_					name = name.substring(1)__				}_				Registry registry = LocateRegistry.getRegistry(host, port, this.registryClientSocketFactory)__				stub = registry.lookup(name)__			}_			else {_				_				stub = Naming.lookup(getServiceUrl())__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Located RMI stub with URL [" + getServiceUrl() + "]")__			}_			return stub__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_		catch (NotBoundException ex) {_			throw new RemoteLookupFailureException(_					"Could not find RMI service [" + getServiceUrl() + "] in RMI registry", ex)__		}_		catch (RemoteException ex) {_			throw new RemoteLookupFailureException("Lookup of RMI stub failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,looks,up,the,service,url,via,code,java,rmi,naming,code,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,java,rmi,naming,lookup;protected,remote,lookup,stub,throws,remote,lookup,failure,exception,try,remote,stub,null,if,this,registry,client,socket,factory,null,url,url,new,url,null,get,service,url,new,dummy,urlstream,handler,string,protocol,url,get,protocol,if,protocol,null,rmi,equals,protocol,throw,new,malformed,urlexception,invalid,url,scheme,protocol,string,host,url,get,host,int,port,url,get,port,string,name,url,get,path,if,name,null,name,starts,with,name,name,substring,1,registry,registry,locate,registry,get,registry,host,port,this,registry,client,socket,factory,stub,registry,lookup,name,else,stub,naming,lookup,get,service,url,if,logger,is,debug,enabled,logger,debug,located,rmi,stub,with,url,get,service,url,return,stub,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex,catch,not,bound,exception,ex,throw,new,remote,lookup,failure,exception,could,not,find,rmi,service,get,service,url,in,rmi,registry,ex,catch,remote,exception,ex,throw,new,remote,lookup,failure,exception,lookup,of,rmi,stub,failed,ex
RmiClientInterceptor -> protected Remote lookupStub() throws RemoteLookupFailureException;1356735495;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation looks up the service URL via_{@code java.rmi.Naming}. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see java.rmi.Naming#lookup;protected Remote lookupStub() throws RemoteLookupFailureException {_		try {_			Remote stub = null__			if (this.registryClientSocketFactory != null) {_				_				_				_				_				URL url = new URL(null, getServiceUrl(), new DummyURLStreamHandler())__				String protocol = url.getProtocol()__				if (protocol != null && !"rmi".equals(protocol)) {_					throw new MalformedURLException("Invalid URL scheme '" + protocol + "'")__				}_				String host = url.getHost()__				int port = url.getPort()__				String name = url.getPath()__				if (name != null && name.startsWith("/")) {_					name = name.substring(1)__				}_				Registry registry = LocateRegistry.getRegistry(host, port, this.registryClientSocketFactory)__				stub = registry.lookup(name)__			}_			else {_				_				stub = Naming.lookup(getServiceUrl())__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Located RMI stub with URL [" + getServiceUrl() + "]")__			}_			return stub__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_		catch (NotBoundException ex) {_			throw new RemoteLookupFailureException(_					"Could not find RMI service [" + getServiceUrl() + "] in RMI registry", ex)__		}_		catch (RemoteException ex) {_			throw new RemoteLookupFailureException("Lookup of RMI stub failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,looks,up,the,service,url,via,code,java,rmi,naming,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,java,rmi,naming,lookup;protected,remote,lookup,stub,throws,remote,lookup,failure,exception,try,remote,stub,null,if,this,registry,client,socket,factory,null,url,url,new,url,null,get,service,url,new,dummy,urlstream,handler,string,protocol,url,get,protocol,if,protocol,null,rmi,equals,protocol,throw,new,malformed,urlexception,invalid,url,scheme,protocol,string,host,url,get,host,int,port,url,get,port,string,name,url,get,path,if,name,null,name,starts,with,name,name,substring,1,registry,registry,locate,registry,get,registry,host,port,this,registry,client,socket,factory,stub,registry,lookup,name,else,stub,naming,lookup,get,service,url,if,logger,is,debug,enabled,logger,debug,located,rmi,stub,with,url,get,service,url,return,stub,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex,catch,not,bound,exception,ex,throw,new,remote,lookup,failure,exception,could,not,find,rmi,service,get,service,url,in,rmi,registry,ex,catch,remote,exception,ex,throw,new,remote,lookup,failure,exception,lookup,of,rmi,stub,failed,ex
RmiClientInterceptor -> protected Remote lookupStub() throws RemoteLookupFailureException;1357119239;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation looks up the service URL via_{@code java.rmi.Naming}. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see java.rmi.Naming#lookup;protected Remote lookupStub() throws RemoteLookupFailureException {_		try {_			Remote stub = null__			if (this.registryClientSocketFactory != null) {_				_				_				_				_				URL url = new URL(null, getServiceUrl(), new DummyURLStreamHandler())__				String protocol = url.getProtocol()__				if (protocol != null && !"rmi".equals(protocol)) {_					throw new MalformedURLException("Invalid URL scheme '" + protocol + "'")__				}_				String host = url.getHost()__				int port = url.getPort()__				String name = url.getPath()__				if (name != null && name.startsWith("/")) {_					name = name.substring(1)__				}_				Registry registry = LocateRegistry.getRegistry(host, port, this.registryClientSocketFactory)__				stub = registry.lookup(name)__			}_			else {_				_				stub = Naming.lookup(getServiceUrl())__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Located RMI stub with URL [" + getServiceUrl() + "]")__			}_			return stub__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_		catch (NotBoundException ex) {_			throw new RemoteLookupFailureException(_					"Could not find RMI service [" + getServiceUrl() + "] in RMI registry", ex)__		}_		catch (RemoteException ex) {_			throw new RemoteLookupFailureException("Lookup of RMI stub failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,looks,up,the,service,url,via,code,java,rmi,naming,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,java,rmi,naming,lookup;protected,remote,lookup,stub,throws,remote,lookup,failure,exception,try,remote,stub,null,if,this,registry,client,socket,factory,null,url,url,new,url,null,get,service,url,new,dummy,urlstream,handler,string,protocol,url,get,protocol,if,protocol,null,rmi,equals,protocol,throw,new,malformed,urlexception,invalid,url,scheme,protocol,string,host,url,get,host,int,port,url,get,port,string,name,url,get,path,if,name,null,name,starts,with,name,name,substring,1,registry,registry,locate,registry,get,registry,host,port,this,registry,client,socket,factory,stub,registry,lookup,name,else,stub,naming,lookup,get,service,url,if,logger,is,debug,enabled,logger,debug,located,rmi,stub,with,url,get,service,url,return,stub,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex,catch,not,bound,exception,ex,throw,new,remote,lookup,failure,exception,could,not,find,rmi,service,get,service,url,in,rmi,registry,ex,catch,remote,exception,ex,throw,new,remote,lookup,failure,exception,lookup,of,rmi,stub,failed,ex
RmiClientInterceptor -> protected Remote lookupStub() throws RemoteLookupFailureException;1362408075;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation looks up the service URL via_{@code java.rmi.Naming}. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see java.rmi.Naming#lookup;protected Remote lookupStub() throws RemoteLookupFailureException {_		try {_			Remote stub = null__			if (this.registryClientSocketFactory != null) {_				_				_				_				_				URL url = new URL(null, getServiceUrl(), new DummyURLStreamHandler())__				String protocol = url.getProtocol()__				if (protocol != null && !"rmi".equals(protocol)) {_					throw new MalformedURLException("Invalid URL scheme '" + protocol + "'")__				}_				String host = url.getHost()__				int port = url.getPort()__				String name = url.getPath()__				if (name != null && name.startsWith("/")) {_					name = name.substring(1)__				}_				Registry registry = LocateRegistry.getRegistry(host, port, this.registryClientSocketFactory)__				stub = registry.lookup(name)__			}_			else {_				_				stub = Naming.lookup(getServiceUrl())__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Located RMI stub with URL [" + getServiceUrl() + "]")__			}_			return stub__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_		catch (NotBoundException ex) {_			throw new RemoteLookupFailureException(_					"Could not find RMI service [" + getServiceUrl() + "] in RMI registry", ex)__		}_		catch (RemoteException ex) {_			throw new RemoteLookupFailureException("Lookup of RMI stub failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,looks,up,the,service,url,via,code,java,rmi,naming,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,java,rmi,naming,lookup;protected,remote,lookup,stub,throws,remote,lookup,failure,exception,try,remote,stub,null,if,this,registry,client,socket,factory,null,url,url,new,url,null,get,service,url,new,dummy,urlstream,handler,string,protocol,url,get,protocol,if,protocol,null,rmi,equals,protocol,throw,new,malformed,urlexception,invalid,url,scheme,protocol,string,host,url,get,host,int,port,url,get,port,string,name,url,get,path,if,name,null,name,starts,with,name,name,substring,1,registry,registry,locate,registry,get,registry,host,port,this,registry,client,socket,factory,stub,registry,lookup,name,else,stub,naming,lookup,get,service,url,if,logger,is,debug,enabled,logger,debug,located,rmi,stub,with,url,get,service,url,return,stub,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex,catch,not,bound,exception,ex,throw,new,remote,lookup,failure,exception,could,not,find,rmi,service,get,service,url,in,rmi,registry,ex,catch,remote,exception,ex,throw,new,remote,lookup,failure,exception,lookup,of,rmi,stub,failed,ex
RmiClientInterceptor -> protected Remote lookupStub() throws RemoteLookupFailureException;1368482696;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation looks up the service URL via_{@code java.rmi.Naming}. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see java.rmi.Naming#lookup;protected Remote lookupStub() throws RemoteLookupFailureException {_		try {_			Remote stub = null__			if (this.registryClientSocketFactory != null) {_				_				_				_				_				URL url = new URL(null, getServiceUrl(), new DummyURLStreamHandler())__				String protocol = url.getProtocol()__				if (protocol != null && !"rmi".equals(protocol)) {_					throw new MalformedURLException("Invalid URL scheme '" + protocol + "'")__				}_				String host = url.getHost()__				int port = url.getPort()__				String name = url.getPath()__				if (name != null && name.startsWith("/")) {_					name = name.substring(1)__				}_				Registry registry = LocateRegistry.getRegistry(host, port, this.registryClientSocketFactory)__				stub = registry.lookup(name)__			}_			else {_				_				stub = Naming.lookup(getServiceUrl())__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Located RMI stub with URL [" + getServiceUrl() + "]")__			}_			return stub__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_		catch (NotBoundException ex) {_			throw new RemoteLookupFailureException(_					"Could not find RMI service [" + getServiceUrl() + "] in RMI registry", ex)__		}_		catch (RemoteException ex) {_			throw new RemoteLookupFailureException("Lookup of RMI stub failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,looks,up,the,service,url,via,code,java,rmi,naming,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,java,rmi,naming,lookup;protected,remote,lookup,stub,throws,remote,lookup,failure,exception,try,remote,stub,null,if,this,registry,client,socket,factory,null,url,url,new,url,null,get,service,url,new,dummy,urlstream,handler,string,protocol,url,get,protocol,if,protocol,null,rmi,equals,protocol,throw,new,malformed,urlexception,invalid,url,scheme,protocol,string,host,url,get,host,int,port,url,get,port,string,name,url,get,path,if,name,null,name,starts,with,name,name,substring,1,registry,registry,locate,registry,get,registry,host,port,this,registry,client,socket,factory,stub,registry,lookup,name,else,stub,naming,lookup,get,service,url,if,logger,is,debug,enabled,logger,debug,located,rmi,stub,with,url,get,service,url,return,stub,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex,catch,not,bound,exception,ex,throw,new,remote,lookup,failure,exception,could,not,find,rmi,service,get,service,url,in,rmi,registry,ex,catch,remote,exception,ex,throw,new,remote,lookup,failure,exception,lookup,of,rmi,stub,failed,ex
RmiClientInterceptor -> protected Remote lookupStub() throws RemoteLookupFailureException;1495868221;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation looks up the service URL via_{@code java.rmi.Naming}. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see java.rmi.Naming#lookup;protected Remote lookupStub() throws RemoteLookupFailureException {_		try {_			Remote stub = null__			if (this.registryClientSocketFactory != null) {_				_				_				_				_				URL url = new URL(null, getServiceUrl(), new DummyURLStreamHandler())__				String protocol = url.getProtocol()__				if (protocol != null && !"rmi".equals(protocol)) {_					throw new MalformedURLException("Invalid URL scheme '" + protocol + "'")__				}_				String host = url.getHost()__				int port = url.getPort()__				String name = url.getPath()__				if (name != null && name.startsWith("/")) {_					name = name.substring(1)__				}_				Registry registry = LocateRegistry.getRegistry(host, port, this.registryClientSocketFactory)__				stub = registry.lookup(name)__			}_			else {_				_				stub = Naming.lookup(getServiceUrl())__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Located RMI stub with URL [" + getServiceUrl() + "]")__			}_			return stub__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_		catch (NotBoundException ex) {_			throw new RemoteLookupFailureException(_					"Could not find RMI service [" + getServiceUrl() + "] in RMI registry", ex)__		}_		catch (RemoteException ex) {_			throw new RemoteLookupFailureException("Lookup of RMI stub failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,looks,up,the,service,url,via,code,java,rmi,naming,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,java,rmi,naming,lookup;protected,remote,lookup,stub,throws,remote,lookup,failure,exception,try,remote,stub,null,if,this,registry,client,socket,factory,null,url,url,new,url,null,get,service,url,new,dummy,urlstream,handler,string,protocol,url,get,protocol,if,protocol,null,rmi,equals,protocol,throw,new,malformed,urlexception,invalid,url,scheme,protocol,string,host,url,get,host,int,port,url,get,port,string,name,url,get,path,if,name,null,name,starts,with,name,name,substring,1,registry,registry,locate,registry,get,registry,host,port,this,registry,client,socket,factory,stub,registry,lookup,name,else,stub,naming,lookup,get,service,url,if,logger,is,debug,enabled,logger,debug,located,rmi,stub,with,url,get,service,url,return,stub,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex,catch,not,bound,exception,ex,throw,new,remote,lookup,failure,exception,could,not,find,rmi,service,get,service,url,in,rmi,registry,ex,catch,remote,exception,ex,throw,new,remote,lookup,failure,exception,lookup,of,rmi,stub,failed,ex
RmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1328020251;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Remote freshStub = null__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,remote,fresh,stub,null,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
RmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1356735495;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Remote freshStub = null__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,remote,fresh,stub,null,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
RmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1357119239;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Remote freshStub = null__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,remote,fresh,stub,null,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
RmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1362408075;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Remote freshStub = null__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,remote,fresh,stub,null,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
RmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1368482696;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Remote freshStub = null__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,remote,fresh,stub,null,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
