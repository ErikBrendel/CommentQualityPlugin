# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1329393628;Set the {@link BeanNameGenerator} to be used when registering imported and nested_{@link Configuration} classes. The default is {@link AnnotationBeanNameGenerator}._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@param beanNameGenerator the strategy to use when generating configuration class_bean names_@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.beanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,registering,imported,and,nested,link,configuration,classes,the,default,is,link,annotation,bean,name,generator,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,param,bean,name,generator,the,strategy,to,use,when,generating,configuration,class,bean,names,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1344552803;Set the {@link BeanNameGenerator} to be used when registering imported and nested_{@link Configuration} classes. The default is {@link AnnotationBeanNameGenerator}._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@param beanNameGenerator the strategy to use when generating configuration class_bean names_@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.beanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,registering,imported,and,nested,link,configuration,classes,the,default,is,link,annotation,bean,name,generator,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,param,bean,name,generator,the,strategy,to,use,when,generating,configuration,class,bean,names,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1347311780;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1348478807;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1355279384;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1356735495;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1357119239;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1368068203;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1368137140;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1368482696;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1372363092;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1377640854;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1377686993;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1382465750;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1383605087;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1385158940;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1385991737;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1397058189;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1403696775;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1407857001;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1408653788;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1409716050;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1409741991;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1411423547;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1417457791;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1426267101;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1438078134;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1448383082;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1462195145;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1467730834;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1473796052;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1482232576;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1482842304;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1483047576;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1492434334;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1496242568;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1496259743;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1496263893;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1496837955;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1497341397;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1498780456;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1520529117;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1521222552;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1530174524;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1530188116;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1531994380;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1532091916;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1532706365;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1551080576;Set the {@link BeanNameGenerator} to be used when triggering component scanning_from {@link Configuration} classes and when registering {@link Import}'ed_configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}_for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})_and a variant thereof for imported configuration classes (using unique fully-qualified_class names instead of standard component overriding)._<p>Note that this strategy does <em>not</em> apply to {@link Bean} methods._<p>This setter is typically only appropriate when configuring the post-processor as_a standalone bean definition in XML, e.g. not using the dedicated_{@code AnnotationConfig*} application contexts or the {@code_<context:annotation-config>} element. Any bean name generator specified against_the application context will take precedence over any value set here._@since 3.1.1_@see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator)_@see AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		Assert.notNull(beanNameGenerator, "BeanNameGenerator must not be null")__		this.localBeanNameGeneratorSet = true__		this.componentScanBeanNameGenerator = beanNameGenerator__		this.importBeanNameGenerator = beanNameGenerator__	};set,the,link,bean,name,generator,to,be,used,when,triggering,component,scanning,from,link,configuration,classes,and,when,registering,link,import,ed,configuration,classes,the,default,is,a,standard,link,annotation,bean,name,generator,for,scanned,components,compatible,with,the,default,in,link,class,path,bean,definition,scanner,and,a,variant,thereof,for,imported,configuration,classes,using,unique,fully,qualified,class,names,instead,of,standard,component,overriding,p,note,that,this,strategy,does,em,not,em,apply,to,link,bean,methods,p,this,setter,is,typically,only,appropriate,when,configuring,the,post,processor,as,a,standalone,bean,definition,in,xml,e,g,not,using,the,dedicated,code,annotation,config,application,contexts,or,the,code,context,annotation,config,element,any,bean,name,generator,specified,against,the,application,context,will,take,precedence,over,any,value,set,here,since,3,1,1,see,annotation,config,application,context,set,bean,name,generator,bean,name,generator,see,annotation,config,utils;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,assert,not,null,bean,name,generator,bean,name,generator,must,not,be,null,this,local,bean,name,generator,set,true,this,component,scan,bean,name,generator,bean,name,generator,this,import,bean,name,generator,bean,name,generator
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1328020251;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1329142650;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1329393628;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1344552803;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1347311780;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1348478807;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1355279384;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1357119239;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1368068203;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1368137140;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1356735495;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1368482696;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1372363092;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1377640854;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1377686993;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1382465750;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1383605087;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1385158940;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add((factoryId))__		if (!this.registriesPostProcessed.contains((factoryId))) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1385991737;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1397058189;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1403696775;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1407857001;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1408653788;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1409716050;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1409741991;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1411423547;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1417457791;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1426267101;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1438078134;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1448383082;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1462195145;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1467730834;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1473796052;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}_		enhanceConfigurationClasses(beanFactory)__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1482232576;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1482842304;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1483047576;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1492434334;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1496242568;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1496259743;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1496263893;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1496837955;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1497341397;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1498780456;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1520529117;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1521222552;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1530174524;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1530188116;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1531994380;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1532091916;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1532706365;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);1551080576;Prepare the Configuration classes for servicing bean requests at runtime_by replacing them with CGLIB-enhanced subclasses.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {_		int factoryId = System.identityHashCode(beanFactory)__		if (this.factoriesPostProcessed.contains(factoryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + beanFactory)__		}_		this.factoriesPostProcessed.add(factoryId)__		if (!this.registriesPostProcessed.contains(factoryId)) {_			_			_			processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory)__		}__		enhanceConfigurationClasses(beanFactory)__		beanFactory.addBeanPostProcessor(new ImportAwareBeanPostProcessor(beanFactory))__	};prepare,the,configuration,classes,for,servicing,bean,requests,at,runtime,by,replacing,them,with,cglib,enhanced,subclasses;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,int,factory,id,system,identity,hash,code,bean,factory,if,this,factories,post,processed,contains,factory,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,bean,factory,this,factories,post,processed,add,factory,id,if,this,registries,post,processed,contains,factory,id,process,config,bean,definitions,bean,definition,registry,bean,factory,enhance,configuration,classes,bean,factory,bean,factory,add,bean,post,processor,new,import,aware,bean,post,processor,bean,factory
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1496837955;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1497341397;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1498780456;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1520529117;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1521222552;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1530174524;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1530188116;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1531994380;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1532091916;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1532706365;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor);1551080576;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(@Nullable SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,nullable,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1328020251;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment, this.resourceLoader, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		this.getConfigurationClassBeanDefinitionReader(registry).loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (registry instanceof SingletonBeanRegistry) {_			if (!((SingletonBeanRegistry) registry).containsSingleton("importRegistry")) {_				((SingletonBeanRegistry) registry).registerSingleton("importRegistry", parser.getImportRegistry())__			}_		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,this,get,configuration,class,bean,definition,reader,registry,load,bean,definitions,parser,get,configuration,classes,if,registry,instanceof,singleton,bean,registry,if,singleton,bean,registry,registry,contains,singleton,import,registry,singleton,bean,registry,registry,register,singleton,import,registry,parser,get,import,registry
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1329142650;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment, this.resourceLoader, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		this.getConfigurationClassBeanDefinitionReader(registry).loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (registry instanceof SingletonBeanRegistry) {_			if (!((SingletonBeanRegistry) registry).containsSingleton("importRegistry")) {_				((SingletonBeanRegistry) registry).registerSingleton("importRegistry", parser.getImportRegistry())__			}_		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,this,get,configuration,class,bean,definition,reader,registry,load,bean,definitions,parser,get,configuration,classes,if,registry,instanceof,singleton,bean,registry,if,singleton,bean,registry,registry,contains,singleton,import,registry,singleton,bean,registry,registry,register,singleton,import,registry,parser,get,import,registry
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1329393628;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				this.beanNameGenerator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.beanNameGenerator, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter,_					this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.beanNameGenerator)__		}_		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton("importRegistry")) {_				singletonRegistry.registerSingleton("importRegistry", parser.getImportRegistry())__			}_		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,singleton,registry,contains,singleton,this,bean,name,generator,bean,name,generator,singleton,registry,get,singleton,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,bean,name,generator,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,import,registry,singleton,registry,register,singleton,import,registry,parser,get,import,registry
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1344552803;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				this.beanNameGenerator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.beanNameGenerator, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter,_					this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.beanNameGenerator)__		}_		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton("importRegistry")) {_				singletonRegistry.registerSingleton("importRegistry", parser.getImportRegistry())__			}_		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,singleton,registry,contains,singleton,this,bean,name,generator,bean,name,generator,singleton,registry,get,singleton,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,bean,name,generator,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,import,registry,singleton,registry,register,singleton,import,registry,parser,get,import,registry
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1347311780;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}_		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1348478807;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}_		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1355279384;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}_		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1356735495;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}_		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1357119239;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		for (BeanDefinitionHolder holder : configCandidates) {_			BeanDefinition bd = holder.getBeanDefinition()__			try {_				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {_					parser.parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName())__				}_				else {_					parser.parse(bd.getBeanClassName(), holder.getBeanName())__				}_			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex)__			}_		}_		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}_		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,for,bean,definition,holder,holder,config,candidates,bean,definition,bd,holder,get,bean,definition,try,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,bd,has,bean,class,parser,parse,abstract,bean,definition,bd,get,bean,class,holder,get,bean,name,else,parser,parse,bd,get,bean,class,name,holder,get,bean,name,catch,ioexception,ex,throw,new,bean,definition,store,exception,failed,to,load,bean,class,bd,get,bean,class,name,ex,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1368068203;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}_		for (ConfigurationClass configurationClass : parser.getConfigurationClasses()) {_			if (!ConditionalAnnotationHelper.shouldSkip(configurationClass, registry,_					this.environment, this.importBeanNameGenerator)) {_				reader.loadBeanDefinitionsForConfigurationClass(configurationClass)__			}_		}__		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,for,configuration,class,configuration,class,parser,get,configuration,classes,if,conditional,annotation,helper,should,skip,configuration,class,registry,this,environment,this,import,bean,name,generator,reader,load,bean,definitions,for,configuration,class,configuration,class,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1368137140;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}_		for (ConfigurationClass configurationClass : parser.getConfigurationClasses()) {_			if (!ConditionalAnnotationHelper.shouldSkip(configurationClass, registry,_					this.environment, this.importBeanNameGenerator)) {_				reader.loadBeanDefinitionsForConfigurationClass(configurationClass)__			}_		}__		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,for,configuration,class,configuration,class,parser,get,configuration,classes,if,conditional,annotation,helper,should,skip,configuration,class,registry,this,environment,this,import,bean,name,generator,reader,load,bean,definitions,for,configuration,class,configuration,class,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1368482696;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}_		for (ConfigurationClass configurationClass : parser.getConfigurationClasses()) {_			if (!ConditionalAnnotationHelper.shouldSkip(configurationClass, registry,_					this.environment, this.importBeanNameGenerator)) {_				reader.loadBeanDefinitionsForConfigurationClass(configurationClass)__			}_		}__		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,for,configuration,class,configuration,class,parser,get,configuration,classes,if,conditional,annotation,helper,should,skip,configuration,class,registry,this,environment,this,import,bean,name,generator,reader,load,bean,definitions,for,configuration,class,configuration,class,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1372363092;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry,_				this.applicationContext)__		parser.parse(configCandidates)__		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(_					registry, this.applicationContext, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory,_					this.resourceLoader, this.environment, this.importBeanNameGenerator)__		}__		reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,this,application,context,parser,parse,config,candidates,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,application,context,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1377640854;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.importBeanNameGenerator)__		}__		reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1377686993;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				while (!parsedPropertySources.isEmpty()) {_					envPropertySources.addLast(parsedPropertySources.pop())__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.importBeanNameGenerator)__		}__		reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,stack,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,while,parsed,property,sources,is,empty,env,property,sources,add,last,parsed,property,sources,pop,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1382465750;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		List<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				for (PropertySource<?> propertySource : parsedPropertySources) {_					envPropertySources.addLast(propertySource)__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.importBeanNameGenerator)__		}__		reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,list,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,for,property,source,property,source,parsed,property,sources,env,property,sources,add,last,property,source,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1383605087;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		List<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				for (PropertySource<?> propertySource : parsedPropertySources) {_					envPropertySources.addLast(propertySource)__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.importBeanNameGenerator)__		}__		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,list,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,for,property,source,property,source,parsed,property,sources,env,property,sources,add,last,property,source,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1385158940;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		List<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				for (PropertySource<?> propertySource : parsedPropertySources) {_					envPropertySources.addLast(propertySource)__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.importBeanNameGenerator)__		}__		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,list,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,for,property,source,property,source,parsed,property,sources,env,property,sources,add,last,property,source,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1385991737;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		List<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources()__				for (PropertySource<?> propertySource : parsedPropertySources) {_					envPropertySources.addLast(propertySource)__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.importBeanNameGenerator)__		}__		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,list,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,for,property,source,property,source,parsed,property,sources,env,property,sources,add,last,property,source,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1397058189;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		List<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment) this.environment).getPropertySources()__				for (PropertySource<?> propertySource : parsedPropertySources) {_					envPropertySources.addLast(propertySource)__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.importBeanNameGenerator)__		}__		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,list,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,for,property,source,property,source,parsed,property,sources,env,property,sources,add,last,property,source,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1403696775;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		for (String beanName : registry.getBeanDefinitionNames()) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)__		parser.parse(configCandidates)__		parser.validate()___		_		List<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__		if (!parsedPropertySources.isEmpty()) {_			if (!(this.environment instanceof ConfigurableEnvironment)) {_				logger.warn("Ignoring @PropertySource annotations. " +_						"Reason: Environment must implement ConfigurableEnvironment")__			}_			else {_				MutablePropertySources envPropertySources = ((ConfigurableEnvironment) this.environment).getPropertySources()__				for (PropertySource<?> propertySource : parsedPropertySources) {_					envPropertySources.addLast(propertySource)__				}_			}_		}__		_		if (this.reader == null) {_			this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_					this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_					this.importBeanNameGenerator)__		}__		this.reader.loadBeanDefinitions(parser.getConfigurationClasses())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,for,string,bean,name,registry,get,bean,definition,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,parser,parse,config,candidates,parser,validate,list,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,for,property,source,property,source,parsed,property,sources,env,property,sources,add,last,property,source,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,parser,get,configuration,classes,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1407857001;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		int propertySourceCount = 0__		do {_			parser.parse(configCandidates)__			parser.validate()___			_			if (parser.getPropertySourceCount() > propertySourceCount) {_				List<PropertySource<?>> parsedPropertySources = parser.getPropertySources()__				if (!parsedPropertySources.isEmpty()) {_					if (!(this.environment instanceof ConfigurableEnvironment)) {_						logger.warn("Ignoring @PropertySource annotations. " +_								"Reason: Environment must implement ConfigurableEnvironment")__					}_					else {_						MutablePropertySources envPropertySources = ((ConfigurableEnvironment) this.environment).getPropertySources()__						for (PropertySource<?> propertySource : parsedPropertySources) {_							envPropertySources.addLast(propertySource)__						}_					}_				}_				propertySourceCount = parser.getPropertySourceCount()__			}__			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_						this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_						this.importBeanNameGenerator)__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			configCandidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_							configCandidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!configCandidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,int,property,source,count,0,do,parser,parse,config,candidates,parser,validate,if,parser,get,property,source,count,property,source,count,list,property,source,parsed,property,sources,parser,get,property,sources,if,parsed,property,sources,is,empty,if,this,environment,instanceof,configurable,environment,logger,warn,ignoring,property,source,annotations,reason,environment,must,implement,configurable,environment,else,mutable,property,sources,env,property,sources,configurable,environment,this,environment,get,property,sources,for,property,source,property,source,parsed,property,sources,env,property,sources,add,last,property,source,property,source,count,parser,get,property,source,count,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,config,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,config,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1408653788;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(configCandidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_						this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_						this.importBeanNameGenerator)__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			configCandidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_							configCandidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!configCandidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,config,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,config,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,config,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1409716050;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(configCandidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_						this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			configCandidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_							configCandidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!configCandidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,config,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,config,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,config,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1409741991;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(configCandidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_						this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			configCandidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_							configCandidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!configCandidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,config,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,config,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,config,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1411423547;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(configCandidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_						this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			configCandidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<String>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)_								&& !alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							configCandidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!configCandidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,config,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,config,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,string,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,config,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,config,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1417457791;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		Set<BeanDefinitionHolder> configCandidates = new LinkedHashSet<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(configCandidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_						this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			configCandidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<String>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							configCandidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!configCandidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,set,bean,definition,holder,config,candidates,new,linked,hash,set,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,config,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,config,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,string,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,config,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,config,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1426267101;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<BeanDefinitionHolder>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor,_						this.problemReporter, this.metadataReaderFactory, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<String>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,bean,definition,holder,config,candidates,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,problem,reporter,this,metadata,reader,factory,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,string,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1438078134;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<BeanDefinitionHolder>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<String>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,bean,definition,holder,config,candidates,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,string,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1448383082;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<BeanDefinitionHolder>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<String>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,bean,definition,holder,config,candidates,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,string,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1462195145;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<BeanDefinitionHolder>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<BeanDefinitionHolder>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<ConfigurationClass>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<ConfigurationClass>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<String>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<String>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,bean,definition,holder,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,bean,definition,holder,config,candidates,set,configuration,class,already,parsed,new,hash,set,configuration,class,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,configuration,class,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,string,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,string,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1467730834;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1473796052;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1482232576;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1482842304;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1483047576;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry singletonRegistry = null__		if (registry instanceof SingletonBeanRegistry) {_			singletonRegistry = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition beanDef = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(beanDef, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (singletonRegistry != null) {_			if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,singleton,registry,null,if,registry,instanceof,singleton,bean,registry,singleton,registry,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,singleton,registry,contains,singleton,bean,name,generator,generator,bean,name,generator,singleton,registry,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bean,def,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,already,parsed,classes,contains,bean,def,get,bean,class,name,candidates,add,new,bean,definition,holder,bean,def,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,singleton,registry,null,if,singleton,registry,contains,singleton,singleton,registry,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1492434334;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && sbr.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null) {_			if (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,sbr,contains,singleton,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,if,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1496242568;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && sbr.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null) {_			if (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,sbr,contains,singleton,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,if,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1496259743;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && sbr.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null) {_			if (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,sbr,contains,singleton,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,if,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1496263893;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet && sbr.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				this.componentScanBeanNameGenerator = generator__				this.importBeanNameGenerator = generator__			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null) {_			if (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,sbr,contains,singleton,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,if,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1496837955;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {_			@Override_			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {_				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__			}_		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null) {_			if (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,collections,sort,config,candidates,new,comparator,bean,definition,holder,override,public,int,compare,bean,definition,holder,bd1,bean,definition,holder,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,if,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1497341397;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null) {_			if (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,if,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1498780456;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null) {_			if (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_				sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__			}_		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,if,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1520529117;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_			sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,i1,i2,1,i1,i2,1,0,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1521222552;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return Integer.compare(i1, i2)__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_			sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,integer,compare,i1,i2,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1530174524;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return Integer.compare(i1, i2)__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_			sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,integer,compare,i1,i2,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1530188116;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return Integer.compare(i1, i2)__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_			sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,integer,compare,i1,i2,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1531994380;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return Integer.compare(i1, i2)__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_			sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,integer,compare,i1,i2,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1532091916;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return Integer.compare(i1, i2)__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_			sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,integer,compare,i1,i2,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1532706365;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return Integer.compare(i1, i2)__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_			sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,integer,compare,i1,i2,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void processConfigBeanDefinitions(BeanDefinitionRegistry registry);1551080576;Build and validate a configuration model based on the registry of_{@link Configuration} classes.;public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {_		List<BeanDefinitionHolder> configCandidates = new ArrayList<>()__		String[] candidateNames = registry.getBeanDefinitionNames()___		for (String beanName : candidateNames) {_			BeanDefinition beanDef = registry.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||_					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef)__				}_			}_			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {_				configCandidates.add(new BeanDefinitionHolder(beanDef, beanName))__			}_		}__		_		if (configCandidates.isEmpty()) {_			return__		}__		_		configCandidates.sort((bd1, bd2) -> {_			int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition())__			int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition())__			return Integer.compare(i1, i2)__		})___		_		SingletonBeanRegistry sbr = null__		if (registry instanceof SingletonBeanRegistry) {_			sbr = (SingletonBeanRegistry) registry__			if (!this.localBeanNameGeneratorSet) {_				BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)__				if (generator != null) {_					this.componentScanBeanNameGenerator = generator__					this.importBeanNameGenerator = generator__				}_			}_		}__		if (this.environment == null) {_			this.environment = new StandardEnvironment()__		}__		_		ConfigurationClassParser parser = new ConfigurationClassParser(_				this.metadataReaderFactory, this.problemReporter, this.environment,_				this.resourceLoader, this.componentScanBeanNameGenerator, registry)___		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates)__		Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size())__		do {_			parser.parse(candidates)__			parser.validate()___			Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses())__			configClasses.removeAll(alreadyParsed)___			_			if (this.reader == null) {_				this.reader = new ConfigurationClassBeanDefinitionReader(_						registry, this.sourceExtractor, this.resourceLoader, this.environment,_						this.importBeanNameGenerator, parser.getImportRegistry())__			}_			this.reader.loadBeanDefinitions(configClasses)__			alreadyParsed.addAll(configClasses)___			candidates.clear()__			if (registry.getBeanDefinitionCount() > candidateNames.length) {_				String[] newCandidateNames = registry.getBeanDefinitionNames()__				Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames))__				Set<String> alreadyParsedClasses = new HashSet<>()__				for (ConfigurationClass configurationClass : alreadyParsed) {_					alreadyParsedClasses.add(configurationClass.getMetadata().getClassName())__				}_				for (String candidateName : newCandidateNames) {_					if (!oldCandidateNames.contains(candidateName)) {_						BeanDefinition bd = registry.getBeanDefinition(candidateName)__						if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&_								!alreadyParsedClasses.contains(bd.getBeanClassName())) {_							candidates.add(new BeanDefinitionHolder(bd, candidateName))__						}_					}_				}_				candidateNames = newCandidateNames__			}_		}_		while (!candidates.isEmpty())___		_		if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {_			sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry())__		}__		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {_			_			_			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache()__		}_	};build,and,validate,a,configuration,model,based,on,the,registry,of,link,configuration,classes;public,void,process,config,bean,definitions,bean,definition,registry,registry,list,bean,definition,holder,config,candidates,new,array,list,string,candidate,names,registry,get,bean,definition,names,for,string,bean,name,candidate,names,bean,definition,bean,def,registry,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,configuration,class,utils,is,lite,configuration,class,bean,def,if,logger,is,debug,enabled,logger,debug,bean,definition,has,already,been,processed,as,a,configuration,class,bean,def,else,if,configuration,class,utils,check,configuration,class,candidate,bean,def,this,metadata,reader,factory,config,candidates,add,new,bean,definition,holder,bean,def,bean,name,if,config,candidates,is,empty,return,config,candidates,sort,bd1,bd2,int,i1,configuration,class,utils,get,order,bd1,get,bean,definition,int,i2,configuration,class,utils,get,order,bd2,get,bean,definition,return,integer,compare,i1,i2,singleton,bean,registry,sbr,null,if,registry,instanceof,singleton,bean,registry,sbr,singleton,bean,registry,registry,if,this,local,bean,name,generator,set,bean,name,generator,generator,bean,name,generator,sbr,get,singleton,if,generator,null,this,component,scan,bean,name,generator,generator,this,import,bean,name,generator,generator,if,this,environment,null,this,environment,new,standard,environment,configuration,class,parser,parser,new,configuration,class,parser,this,metadata,reader,factory,this,problem,reporter,this,environment,this,resource,loader,this,component,scan,bean,name,generator,registry,set,bean,definition,holder,candidates,new,linked,hash,set,config,candidates,set,configuration,class,already,parsed,new,hash,set,config,candidates,size,do,parser,parse,candidates,parser,validate,set,configuration,class,config,classes,new,linked,hash,set,parser,get,configuration,classes,config,classes,remove,all,already,parsed,if,this,reader,null,this,reader,new,configuration,class,bean,definition,reader,registry,this,source,extractor,this,resource,loader,this,environment,this,import,bean,name,generator,parser,get,import,registry,this,reader,load,bean,definitions,config,classes,already,parsed,add,all,config,classes,candidates,clear,if,registry,get,bean,definition,count,candidate,names,length,string,new,candidate,names,registry,get,bean,definition,names,set,string,old,candidate,names,new,hash,set,arrays,as,list,candidate,names,set,string,already,parsed,classes,new,hash,set,for,configuration,class,configuration,class,already,parsed,already,parsed,classes,add,configuration,class,get,metadata,get,class,name,for,string,candidate,name,new,candidate,names,if,old,candidate,names,contains,candidate,name,bean,definition,bd,registry,get,bean,definition,candidate,name,if,configuration,class,utils,check,configuration,class,candidate,bd,this,metadata,reader,factory,already,parsed,classes,contains,bd,get,bean,class,name,candidates,add,new,bean,definition,holder,bd,candidate,name,candidate,names,new,candidate,names,while,candidates,is,empty,if,sbr,null,sbr,contains,singleton,sbr,register,singleton,parser,get,import,registry,if,this,metadata,reader,factory,instanceof,caching,metadata,reader,factory,caching,metadata,reader,factory,this,metadata,reader,factory,clear,cache
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1328020251;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerWithGeneratedName(new RootBeanDefinition(ImportAwareBeanPostProcessor.class), registry)__		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)__		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,bean,definition,reader,utils,register,with,generated,name,new,root,bean,definition,import,aware,bean,post,processor,class,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1329142650;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerWithGeneratedName(new RootBeanDefinition(ImportAwareBeanPostProcessor.class), registry)__		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)__		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,bean,definition,reader,utils,register,with,generated,name,new,root,bean,definition,import,aware,bean,post,processor,class,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1329393628;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerWithGeneratedName(new RootBeanDefinition(ImportAwareBeanPostProcessor.class), registry)__		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)__		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,bean,definition,reader,utils,register,with,generated,name,new,root,bean,definition,import,aware,bean,post,processor,class,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1344552803;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		BeanDefinitionReaderUtils.registerWithGeneratedName(new RootBeanDefinition(ImportAwareBeanPostProcessor.class), registry)__		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)__		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,bean,definition,reader,utils,register,with,generated,name,new,root,bean,definition,import,aware,bean,post,processor,class,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1347311780;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME,_				new RootBeanDefinition(ImportAwareBeanPostProcessor.class))__		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)__		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,registry,register,bean,definition,new,root,bean,definition,import,aware,bean,post,processor,class,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1348478807;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1355279384;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1357119239;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1368068203;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1368137140;Derive further bean definitions from the configuration classes in the registry.;public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1328020251;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1329142650;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1329393628;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1344552803;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1347311780;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1348478807;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1355279384;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1356735495;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1357119239;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1368068203;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1368137140;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1368482696;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1372363092;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1377640854;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1377686993;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1382465750;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1383605087;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1385158940;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1385991737;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1397058189;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1403696775;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1407857001;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1408653788;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1409716050;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1409741991;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1411423547;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1417457791;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1426267101;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1438078134;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1448383082;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1462195145;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1467730834;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1473796052;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1482232576;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1482842304;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1483047576;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1492434334;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1496242568;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1496259743;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setSourceExtractor(SourceExtractor sourceExtractor);1496263893;Set the {@link SourceExtractor} to use for generated bean definitions_that correspond to {@link Bean} factory methods.;public void setSourceExtractor(SourceExtractor sourceExtractor) {_		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor())__	};set,the,link,source,extractor,to,use,for,generated,bean,definitions,that,correspond,to,link,bean,factory,methods;public,void,set,source,extractor,source,extractor,source,extractor,this,source,extractor,source,extractor,null,source,extractor,new,pass,through,source,extractor
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1328020251;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1329142650;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1329393628;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1344552803;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1347311780;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1348478807;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1355279384;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1356735495;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1357119239;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1368068203;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1368137140;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1368482696;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1372363092;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1377640854;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1377686993;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1382465750;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1383605087;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1385158940;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1385991737;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1397058189;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1403696775;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1407857001;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1408653788;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1409716050;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1409741991;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1411423547;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1417457791;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1426267101;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1438078134;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1448383082;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1462195145;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1467730834;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1473796052;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1482232576;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1482842304;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1483047576;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1492434334;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1496242568;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1496259743;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1496263893;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1496837955;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1497341397;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1498780456;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1520529117;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1521222552;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1530174524;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1530188116;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1531994380;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1532091916;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1532706365;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory);1551080576;Set the {@link MetadataReaderFactory} to use._<p>Default is a {@link CachingMetadataReaderFactory} for the specified_{@linkplain #setBeanClassLoader bean class loader}.;public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {_		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null")__		this.metadataReaderFactory = metadataReaderFactory__		this.setMetadataReaderFactoryCalled = true__	};set,the,link,metadata,reader,factory,to,use,p,default,is,a,link,caching,metadata,reader,factory,for,the,specified,linkplain,set,bean,class,loader,bean,class,loader;public,void,set,metadata,reader,factory,metadata,reader,factory,metadata,reader,factory,assert,not,null,metadata,reader,factory,metadata,reader,factory,must,not,be,null,this,metadata,reader,factory,metadata,reader,factory,this,set,metadata,reader,factory,called,true
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1356735495;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1368482696;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1372363092;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1377640854;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1377686993;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1382465750;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1383605087;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1385158940;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1385991737;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1397058189;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1403696775;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1407857001;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1408653788;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1409716050;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1409741991;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1411423547;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called for this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,for,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,for,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1417457791;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1426267101;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1438078134;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1448383082;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1462195145;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1467730834;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1473796052;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		RootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class)__		iabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp)___		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class)__		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp)___		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,root,bean,definition,iabpp,new,root,bean,definition,import,aware,bean,post,processor,class,iabpp,set,role,bean,definition,registry,register,bean,definition,iabpp,root,bean,definition,ecbpp,new,root,bean,definition,enhanced,configuration,bean,post,processor,class,ecbpp,set,role,bean,definition,registry,register,bean,definition,ecbpp,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1482232576;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1482842304;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1483047576;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1492434334;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1496242568;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1496259743;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1496263893;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1496837955;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1497341397;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1498780456;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1520529117;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1521222552;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1530174524;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1530188116;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1531994380;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1532091916;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1532706365;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> @Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);1551080576;Derive further bean definitions from the configuration classes in the registry.;@Override_	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {_		int registryId = System.identityHashCode(registry)__		if (this.registriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry)__		}_		if (this.factoriesPostProcessed.contains(registryId)) {_			throw new IllegalStateException(_					"postProcessBeanFactory already called on this post-processor against " + registry)__		}_		this.registriesPostProcessed.add(registryId)___		processConfigBeanDefinitions(registry)__	};derive,further,bean,definitions,from,the,configuration,classes,in,the,registry;override,public,void,post,process,bean,definition,registry,bean,definition,registry,registry,int,registry,id,system,identity,hash,code,registry,if,this,registries,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,definition,registry,already,called,on,this,post,processor,against,registry,if,this,factories,post,processed,contains,registry,id,throw,new,illegal,state,exception,post,process,bean,factory,already,called,on,this,post,processor,against,registry,this,registries,post,processed,add,registry,id,process,config,bean,definitions,registry
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1328020251;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1329142650;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1329393628;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1344552803;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1347311780;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1348478807;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1355279384;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1356735495;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1357119239;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1368068203;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1368137140;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1368482696;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1372363092;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1377640854;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1377686993;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1382465750;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1383605087;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1385158940;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1385991737;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1397058189;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1403696775;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1407857001;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1408653788;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1409716050;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1409741991;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1411423547;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1417457791;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1426267101;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1438078134;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1448383082;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1462195145;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1467730834;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1473796052;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1482232576;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1482842304;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1483047576;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1492434334;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1496242568;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1496259743;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(ProblemReporter problemReporter);1496263893;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1328020251;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		if (!cglibAvailable) {_			throw new IllegalStateException("CGLIB is required to process @Configuration classes. " +_					"Either add CGLIB to the classpath or remove the following @Configuration bean definitions: " +_					configBeanDefs.keySet())__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,if,cglib,available,throw,new,illegal,state,exception,cglib,is,required,to,process,configuration,classes,either,add,cglib,to,the,classpath,or,remove,the,following,configuration,bean,definitions,config,bean,defs,key,set,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1329142650;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		if (!cglibAvailable) {_			throw new IllegalStateException("CGLIB is required to process @Configuration classes. " +_					"Either add CGLIB to the classpath or remove the following @Configuration bean definitions: " +_					configBeanDefs.keySet())__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,if,cglib,available,throw,new,illegal,state,exception,cglib,is,required,to,process,configuration,classes,either,add,cglib,to,the,classpath,or,remove,the,following,configuration,bean,definitions,config,bean,defs,key,set,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1329393628;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		if (!cglibAvailable) {_			throw new IllegalStateException("CGLIB is required to process @Configuration classes. " +_					"Either add CGLIB to the classpath or remove the following @Configuration bean definitions: " +_					configBeanDefs.keySet())__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,if,cglib,available,throw,new,illegal,state,exception,cglib,is,required,to,process,configuration,classes,either,add,cglib,to,the,classpath,or,remove,the,following,configuration,bean,definitions,config,bean,defs,key,set,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1344552803;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1347311780;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1348478807;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1355279384;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1356735495;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1357119239;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1368068203;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer(beanFactory)__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,bean,factory,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1368137140;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1368482696;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1372363092;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1377640854;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1377686993;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1382465750;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1383605087;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1385158940;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			try {_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1385991737;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1397058189;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1403696775;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1407857001;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1408653788;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1409716050;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1409741991;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1411423547;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1417457791;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1426267101;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1438078134;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " +_								"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,name,s,with,enhanced,class,name,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1448383082;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1462195145;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,string,abstract,bean,definition,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1467730834;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1473796052;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1482232576;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1482842304;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1483047576;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1492434334;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1496242568;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1496259743;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1496263893;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}_		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__				if (configClass != enhancedClass) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_								"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__					}_					beanDef.setBeanClass(enhancedClass)__				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1496837955;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1497341397;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1498780456;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1520529117;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1521222552;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1530174524;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1530188116;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1531994380;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,warn,enabled,bean,factory,contains,singleton,bean,name,logger,warn,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1532091916;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isInfoEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.info("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isDebugEnabled()) {_							logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,info,enabled,bean,factory,contains,singleton,bean,name,logger,info,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,debug,enabled,logger,debug,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1532706365;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isInfoEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.info("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isTraceEnabled()) {_							logger.trace(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,info,enabled,bean,factory,contains,singleton,bean,name,logger,info,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,trace,enabled,logger,trace,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory);1551080576;Post-processes a BeanFactory in search of Configuration class BeanDefinitions__any candidates are then enhanced by a {@link ConfigurationClassEnhancer}._Candidate status is determined by BeanDefinition attribute metadata._@see ConfigurationClassEnhancer;public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {_		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<>()__		for (String beanName : beanFactory.getBeanDefinitionNames()) {_			BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName)__			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {_				if (!(beanDef instanceof AbstractBeanDefinition)) {_					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +_							beanName + "' since it is not stored in an AbstractBeanDefinition subclass")__				}_				else if (logger.isInfoEnabled() && beanFactory.containsSingleton(beanName)) {_					logger.info("Cannot enhance @Configuration bean definition '" + beanName +_							"' since its singleton instance has been created too early. The typical cause " +_							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +_							"return type: Consider declaring such methods as 'static'.")__				}_				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef)__			}_		}_		if (configBeanDefs.isEmpty()) {_			_			return__		}__		ConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer()__		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {_			AbstractBeanDefinition beanDef = entry.getValue()__			_			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			try {_				_				Class<?> configClass = beanDef.resolveBeanClass(this.beanClassLoader)__				if (configClass != null) {_					Class<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader)__					if (configClass != enhancedClass) {_						if (logger.isTraceEnabled()) {_							logger.trace(String.format("Replacing bean definition '%s' existing class '%s' with " +_									"enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()))__						}_						beanDef.setBeanClass(enhancedClass)__					}_				}_			}_			catch (Throwable ex) {_				throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(), ex)__			}_		}_	};post,processes,a,bean,factory,in,search,of,configuration,class,bean,definitions,any,candidates,are,then,enhanced,by,a,link,configuration,class,enhancer,candidate,status,is,determined,by,bean,definition,attribute,metadata,see,configuration,class,enhancer;public,void,enhance,configuration,classes,configurable,listable,bean,factory,bean,factory,map,string,abstract,bean,definition,config,bean,defs,new,linked,hash,map,for,string,bean,name,bean,factory,get,bean,definition,names,bean,definition,bean,def,bean,factory,get,bean,definition,bean,name,if,configuration,class,utils,is,full,configuration,class,bean,def,if,bean,def,instanceof,abstract,bean,definition,throw,new,bean,definition,store,exception,cannot,enhance,configuration,bean,definition,bean,name,since,it,is,not,stored,in,an,abstract,bean,definition,subclass,else,if,logger,is,info,enabled,bean,factory,contains,singleton,bean,name,logger,info,cannot,enhance,configuration,bean,definition,bean,name,since,its,singleton,instance,has,been,created,too,early,the,typical,cause,is,a,non,static,bean,method,with,a,bean,definition,registry,post,processor,return,type,consider,declaring,such,methods,as,static,config,bean,defs,put,bean,name,abstract,bean,definition,bean,def,if,config,bean,defs,is,empty,return,configuration,class,enhancer,enhancer,new,configuration,class,enhancer,for,map,entry,string,abstract,bean,definition,entry,config,bean,defs,entry,set,abstract,bean,definition,bean,def,entry,get,value,bean,def,set,attribute,auto,proxy,utils,boolean,true,try,class,config,class,bean,def,resolve,bean,class,this,bean,class,loader,if,config,class,null,class,enhanced,class,enhancer,enhance,config,class,this,bean,class,loader,if,config,class,enhanced,class,if,logger,is,trace,enabled,logger,trace,string,format,replacing,bean,definition,s,existing,class,s,with,enhanced,class,s,entry,get,key,config,class,get,name,enhanced,class,get,name,bean,def,set,bean,class,enhanced,class,catch,throwable,ex,throw,new,illegal,state,exception,cannot,load,configuration,class,bean,def,get,bean,class,name,ex
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1496837955;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1497341397;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1498780456;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1520529117;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1521222552;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1530174524;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1530188116;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1531994380;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1532091916;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1532706365;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
ConfigurationClassPostProcessor -> public void setProblemReporter(@Nullable ProblemReporter problemReporter);1551080576;Set the {@link ProblemReporter} to use._<p>Used to register any problems detected with {@link Configuration} or {@link Bean}_declarations. For instance, an @Bean method marked as {@code final} is illegal_and would be reported as a problem. Defaults to {@link FailFastProblemReporter}.;public void setProblemReporter(@Nullable ProblemReporter problemReporter) {_		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter())__	};set,the,link,problem,reporter,to,use,p,used,to,register,any,problems,detected,with,link,configuration,or,link,bean,declarations,for,instance,an,bean,method,marked,as,code,final,is,illegal,and,would,be,reported,as,a,problem,defaults,to,link,fail,fast,problem,reporter;public,void,set,problem,reporter,nullable,problem,reporter,problem,reporter,this,problem,reporter,problem,reporter,null,problem,reporter,new,fail,fast,problem,reporter
