commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the {@link org.springframework.core.io.Resource} to load the  * script from.  */ ;/**  * Return the {@link org.springframework.core.io.Resource} to load the  * script from.  */ public final Resource getResource() {     return this.resource.getResource(). }
true;public;1;3;/**  * Set the encoding used for reading the script resource.  * <p>The default value for regular Resources is "UTF-8".  * A {@code null} value implies the platform default.  */ ;/**  * Set the encoding used for reading the script resource.  * <p>The default value for regular Resources is "UTF-8".  * A {@code null} value implies the platform default.  */ public void setEncoding(@Nullable String encoding) {     this.resource = new EncodedResource(this.resource.getResource(), encoding). }
false;public;0;8;;@Override public String getScriptAsString() throws IOException {     synchronized (this.lastModifiedMonitor) {         this.lastModified = retrieveLastModifiedTime().     }     Reader reader = this.resource.getReader().     return FileCopyUtils.copyToString(reader). }
false;public;0;6;;@Override public boolean isModified() {     synchronized (this.lastModifiedMonitor) {         return (this.lastModified < 0 || retrieveLastModifiedTime() > this.lastModified).     } }
true;protected;0;12;/**  * Retrieve the current last-modified timestamp of the underlying resource.  * @return the current timestamp, or 0 if not determinable  */ ;/**  * Retrieve the current last-modified timestamp of the underlying resource.  * @return the current timestamp, or 0 if not determinable  */ protected long retrieveLastModifiedTime() {     try {         return getResource().lastModified().     } catch (IOException ex) {         if (logger.isDebugEnabled()) {             logger.debug(getResource() + " could not be resolved in the file system - " + "current timestamp not available for script modification check", ex).         }         return 0.     } }
false;public;0;6;;@Override @Nullable public String suggestedClassName() {     String filename = getResource().getFilename().     return (filename != null ? StringUtils.stripFilenameExtension(filename) : null). }
false;public;0;4;;@Override public String toString() {     return this.resource.toString(). }
