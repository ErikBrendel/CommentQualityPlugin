commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;protected;1;4;;@Override protected Class<?> resolveClassName(String className) throws ClassNotFoundException {     return ClassUtils.forName(className, this.beanClassLoader). }
false;public;0;4;;@Override public void afterPropertiesSet() throws ClassNotFoundException, NoSuchMethodException {     prepare(). }
false;public;0;14;;@Override public void run() {     try {         invoke().     } catch (InvocationTargetException ex) {         logger.error(getInvocationFailureMessage(), ex.getTargetException()).     // Do not throw exception, else the main loop of the scheduler might stop!     } catch (Throwable ex) {         logger.error(getInvocationFailureMessage(), ex).     // Do not throw exception, else the main loop of the scheduler might stop!     } }
true;protected;0;4;/**  * Build a message for an invocation failure exception.  * @return the error message, including the target method name etc  */ ;/**  * Build a message for an invocation failure exception.  * @return the error message, including the target method name etc  */ protected String getInvocationFailureMessage() {     return "Invocation of method '" + getTargetMethod() + "' on target class [" + getTargetClass() + "] failed". }
