# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteExporter -> public Object getService();1328020251;Return the service to export.;public Object getService() {_		return this.service__	};return,the,service,to,export;public,object,get,service,return,this,service
RemoteExporter -> public Object getService();1356735495;Return the service to export.;public Object getService() {_		return this.service__	};return,the,service,to,export;public,object,get,service,return,this,service
RemoteExporter -> public Object getService();1385412762;Return the service to export.;public Object getService() {_		return this.service__	};return,the,service,to,export;public,object,get,service,return,this,service
RemoteExporter -> public Object getService();1497970235;Return the service to export.;public Object getService() {_		return this.service__	};return,the,service,to,export;public,object,get,service,return,this,service
RemoteExporter -> protected Object getProxyForService();1328020251;Get a proxy for the given service object, implementing the specified_service interface._<p>Used to export a proxy that does not expose any internals but just_a specific interface intended for remote access. Furthermore, a_{@link RemoteInvocationTraceInterceptor} will be registered (by default)._@return the proxy_@see #setServiceInterface_@see #setRegisterTraceInterceptor_@see RemoteInvocationTraceInterceptor;protected Object getProxyForService() {_		checkService()__		checkServiceInterface()__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.addInterface(getServiceInterface())__		if (this.registerTraceInterceptor != null ?_				this.registerTraceInterceptor.booleanValue() : this.interceptors == null) {_			proxyFactory.addAdvice(new RemoteInvocationTraceInterceptor(getExporterName()))__		}_		if (this.interceptors != null) {_			AdvisorAdapterRegistry adapterRegistry = GlobalAdvisorAdapterRegistry.getInstance()__			for (int i = 0_ i < this.interceptors.length_ i++) {_				proxyFactory.addAdvisor(adapterRegistry.wrap(this.interceptors[i]))__			}_		}_		proxyFactory.setTarget(getService())__		proxyFactory.setOpaque(true)__		return proxyFactory.getProxy(getBeanClassLoader())__	};get,a,proxy,for,the,given,service,object,implementing,the,specified,service,interface,p,used,to,export,a,proxy,that,does,not,expose,any,internals,but,just,a,specific,interface,intended,for,remote,access,furthermore,a,link,remote,invocation,trace,interceptor,will,be,registered,by,default,return,the,proxy,see,set,service,interface,see,set,register,trace,interceptor,see,remote,invocation,trace,interceptor;protected,object,get,proxy,for,service,check,service,check,service,interface,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,add,interface,get,service,interface,if,this,register,trace,interceptor,null,this,register,trace,interceptor,boolean,value,this,interceptors,null,proxy,factory,add,advice,new,remote,invocation,trace,interceptor,get,exporter,name,if,this,interceptors,null,advisor,adapter,registry,adapter,registry,global,advisor,adapter,registry,get,instance,for,int,i,0,i,this,interceptors,length,i,proxy,factory,add,advisor,adapter,registry,wrap,this,interceptors,i,proxy,factory,set,target,get,service,proxy,factory,set,opaque,true,return,proxy,factory,get,proxy,get,bean,class,loader
RemoteExporter -> protected Object getProxyForService();1356735495;Get a proxy for the given service object, implementing the specified_service interface._<p>Used to export a proxy that does not expose any internals but just_a specific interface intended for remote access. Furthermore, a_{@link RemoteInvocationTraceInterceptor} will be registered (by default)._@return the proxy_@see #setServiceInterface_@see #setRegisterTraceInterceptor_@see RemoteInvocationTraceInterceptor;protected Object getProxyForService() {_		checkService()__		checkServiceInterface()__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.addInterface(getServiceInterface())__		if (this.registerTraceInterceptor != null ?_				this.registerTraceInterceptor.booleanValue() : this.interceptors == null) {_			proxyFactory.addAdvice(new RemoteInvocationTraceInterceptor(getExporterName()))__		}_		if (this.interceptors != null) {_			AdvisorAdapterRegistry adapterRegistry = GlobalAdvisorAdapterRegistry.getInstance()__			for (int i = 0_ i < this.interceptors.length_ i++) {_				proxyFactory.addAdvisor(adapterRegistry.wrap(this.interceptors[i]))__			}_		}_		proxyFactory.setTarget(getService())__		proxyFactory.setOpaque(true)__		return proxyFactory.getProxy(getBeanClassLoader())__	};get,a,proxy,for,the,given,service,object,implementing,the,specified,service,interface,p,used,to,export,a,proxy,that,does,not,expose,any,internals,but,just,a,specific,interface,intended,for,remote,access,furthermore,a,link,remote,invocation,trace,interceptor,will,be,registered,by,default,return,the,proxy,see,set,service,interface,see,set,register,trace,interceptor,see,remote,invocation,trace,interceptor;protected,object,get,proxy,for,service,check,service,check,service,interface,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,add,interface,get,service,interface,if,this,register,trace,interceptor,null,this,register,trace,interceptor,boolean,value,this,interceptors,null,proxy,factory,add,advice,new,remote,invocation,trace,interceptor,get,exporter,name,if,this,interceptors,null,advisor,adapter,registry,adapter,registry,global,advisor,adapter,registry,get,instance,for,int,i,0,i,this,interceptors,length,i,proxy,factory,add,advisor,adapter,registry,wrap,this,interceptors,i,proxy,factory,set,target,get,service,proxy,factory,set,opaque,true,return,proxy,factory,get,proxy,get,bean,class,loader
RemoteExporter -> protected Object getProxyForService();1385412762;Get a proxy for the given service object, implementing the specified_service interface._<p>Used to export a proxy that does not expose any internals but just_a specific interface intended for remote access. Furthermore, a_{@link RemoteInvocationTraceInterceptor} will be registered (by default)._@return the proxy_@see #setServiceInterface_@see #setRegisterTraceInterceptor_@see RemoteInvocationTraceInterceptor;protected Object getProxyForService() {_		checkService()__		checkServiceInterface()__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.addInterface(getServiceInterface())__		if (this.registerTraceInterceptor != null ?_				this.registerTraceInterceptor.booleanValue() : this.interceptors == null) {_			proxyFactory.addAdvice(new RemoteInvocationTraceInterceptor(getExporterName()))__		}_		if (this.interceptors != null) {_			AdvisorAdapterRegistry adapterRegistry = GlobalAdvisorAdapterRegistry.getInstance()__			for (int i = 0_ i < this.interceptors.length_ i++) {_				proxyFactory.addAdvisor(adapterRegistry.wrap(this.interceptors[i]))__			}_		}_		proxyFactory.setTarget(getService())__		proxyFactory.setOpaque(true)__		return proxyFactory.getProxy(getBeanClassLoader())__	};get,a,proxy,for,the,given,service,object,implementing,the,specified,service,interface,p,used,to,export,a,proxy,that,does,not,expose,any,internals,but,just,a,specific,interface,intended,for,remote,access,furthermore,a,link,remote,invocation,trace,interceptor,will,be,registered,by,default,return,the,proxy,see,set,service,interface,see,set,register,trace,interceptor,see,remote,invocation,trace,interceptor;protected,object,get,proxy,for,service,check,service,check,service,interface,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,add,interface,get,service,interface,if,this,register,trace,interceptor,null,this,register,trace,interceptor,boolean,value,this,interceptors,null,proxy,factory,add,advice,new,remote,invocation,trace,interceptor,get,exporter,name,if,this,interceptors,null,advisor,adapter,registry,adapter,registry,global,advisor,adapter,registry,get,instance,for,int,i,0,i,this,interceptors,length,i,proxy,factory,add,advisor,adapter,registry,wrap,this,interceptors,i,proxy,factory,set,target,get,service,proxy,factory,set,opaque,true,return,proxy,factory,get,proxy,get,bean,class,loader
RemoteExporter -> protected Object getProxyForService();1497970235;Get a proxy for the given service object, implementing the specified_service interface._<p>Used to export a proxy that does not expose any internals but just_a specific interface intended for remote access. Furthermore, a_{@link RemoteInvocationTraceInterceptor} will be registered (by default)._@return the proxy_@see #setServiceInterface_@see #setRegisterTraceInterceptor_@see RemoteInvocationTraceInterceptor;protected Object getProxyForService() {_		checkService()__		checkServiceInterface()___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.addInterface(getServiceInterface())___		if (this.registerTraceInterceptor != null ? this.registerTraceInterceptor : this.interceptors == null) {_			proxyFactory.addAdvice(new RemoteInvocationTraceInterceptor(getExporterName()))__		}_		if (this.interceptors != null) {_			AdvisorAdapterRegistry adapterRegistry = GlobalAdvisorAdapterRegistry.getInstance()__			for (Object interceptor : this.interceptors) {_				proxyFactory.addAdvisor(adapterRegistry.wrap(interceptor))__			}_		}__		proxyFactory.setTarget(getService())__		proxyFactory.setOpaque(true)___		return proxyFactory.getProxy(getBeanClassLoader())__	};get,a,proxy,for,the,given,service,object,implementing,the,specified,service,interface,p,used,to,export,a,proxy,that,does,not,expose,any,internals,but,just,a,specific,interface,intended,for,remote,access,furthermore,a,link,remote,invocation,trace,interceptor,will,be,registered,by,default,return,the,proxy,see,set,service,interface,see,set,register,trace,interceptor,see,remote,invocation,trace,interceptor;protected,object,get,proxy,for,service,check,service,check,service,interface,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,add,interface,get,service,interface,if,this,register,trace,interceptor,null,this,register,trace,interceptor,this,interceptors,null,proxy,factory,add,advice,new,remote,invocation,trace,interceptor,get,exporter,name,if,this,interceptors,null,advisor,adapter,registry,adapter,registry,global,advisor,adapter,registry,get,instance,for,object,interceptor,this,interceptors,proxy,factory,add,advisor,adapter,registry,wrap,interceptor,proxy,factory,set,target,get,service,proxy,factory,set,opaque,true,return,proxy,factory,get,proxy,get,bean,class,loader
RemoteExporter -> public Class<?> getServiceInterface();1385412762;Return the interface of the service to export.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,export;public,class,get,service,interface,return,this,service,interface
RemoteExporter -> public Class<?> getServiceInterface();1497970235;Return the interface of the service to export.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,export;public,class,get,service,interface,return,this,service,interface
RemoteExporter -> public void setInterceptors(Object[] interceptors);1328020251;Set additional interceptors (or advisors) to be applied before the_remote endpoint, e.g. a PerformanceMonitorInterceptor._<p>You may specify any AOP Alliance MethodInterceptors or other_Spring AOP Advices, as well as Spring AOP Advisors._@see #getProxyForService_@see org.springframework.aop.interceptor.PerformanceMonitorInterceptor;public void setInterceptors(Object[] interceptors) {_		this.interceptors = interceptors__	};set,additional,interceptors,or,advisors,to,be,applied,before,the,remote,endpoint,e,g,a,performance,monitor,interceptor,p,you,may,specify,any,aop,alliance,method,interceptors,or,other,spring,aop,advices,as,well,as,spring,aop,advisors,see,get,proxy,for,service,see,org,springframework,aop,interceptor,performance,monitor,interceptor;public,void,set,interceptors,object,interceptors,this,interceptors,interceptors
RemoteExporter -> public void setInterceptors(Object[] interceptors);1356735495;Set additional interceptors (or advisors) to be applied before the_remote endpoint, e.g. a PerformanceMonitorInterceptor._<p>You may specify any AOP Alliance MethodInterceptors or other_Spring AOP Advices, as well as Spring AOP Advisors._@see #getProxyForService_@see org.springframework.aop.interceptor.PerformanceMonitorInterceptor;public void setInterceptors(Object[] interceptors) {_		this.interceptors = interceptors__	};set,additional,interceptors,or,advisors,to,be,applied,before,the,remote,endpoint,e,g,a,performance,monitor,interceptor,p,you,may,specify,any,aop,alliance,method,interceptors,or,other,spring,aop,advices,as,well,as,spring,aop,advisors,see,get,proxy,for,service,see,org,springframework,aop,interceptor,performance,monitor,interceptor;public,void,set,interceptors,object,interceptors,this,interceptors,interceptors
RemoteExporter -> public void setInterceptors(Object[] interceptors);1385412762;Set additional interceptors (or advisors) to be applied before the_remote endpoint, e.g. a PerformanceMonitorInterceptor._<p>You may specify any AOP Alliance MethodInterceptors or other_Spring AOP Advices, as well as Spring AOP Advisors._@see #getProxyForService_@see org.springframework.aop.interceptor.PerformanceMonitorInterceptor;public void setInterceptors(Object[] interceptors) {_		this.interceptors = interceptors__	};set,additional,interceptors,or,advisors,to,be,applied,before,the,remote,endpoint,e,g,a,performance,monitor,interceptor,p,you,may,specify,any,aop,alliance,method,interceptors,or,other,spring,aop,advices,as,well,as,spring,aop,advisors,see,get,proxy,for,service,see,org,springframework,aop,interceptor,performance,monitor,interceptor;public,void,set,interceptors,object,interceptors,this,interceptors,interceptors
RemoteExporter -> public void setInterceptors(Object[] interceptors);1497970235;Set additional interceptors (or advisors) to be applied before the_remote endpoint, e.g. a PerformanceMonitorInterceptor._<p>You may specify any AOP Alliance MethodInterceptors or other_Spring AOP Advices, as well as Spring AOP Advisors._@see #getProxyForService_@see org.springframework.aop.interceptor.PerformanceMonitorInterceptor;public void setInterceptors(Object[] interceptors) {_		this.interceptors = interceptors__	};set,additional,interceptors,or,advisors,to,be,applied,before,the,remote,endpoint,e,g,a,performance,monitor,interceptor,p,you,may,specify,any,aop,alliance,method,interceptors,or,other,spring,aop,advices,as,well,as,spring,aop,advisors,see,get,proxy,for,service,see,org,springframework,aop,interceptor,performance,monitor,interceptor;public,void,set,interceptors,object,interceptors,this,interceptors,interceptors
RemoteExporter -> public void setServiceInterface(Class serviceInterface);1328020251;Set the interface of the service to export._The interface must be suitable for the particular service and remoting strategy.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,export,the,interface,must,be,suitable,for,the,particular,service,and,remoting,strategy;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
RemoteExporter -> public void setServiceInterface(Class serviceInterface);1356735495;Set the interface of the service to export._The interface must be suitable for the particular service and remoting strategy.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,export,the,interface,must,be,suitable,for,the,particular,service,and,remoting,strategy;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
RemoteExporter -> public void setService(Object service);1328020251;Set the service to export._Typically populated via a bean reference.;public void setService(Object service) {_		this.service = service__	};set,the,service,to,export,typically,populated,via,a,bean,reference;public,void,set,service,object,service,this,service,service
RemoteExporter -> public void setService(Object service);1356735495;Set the service to export._Typically populated via a bean reference.;public void setService(Object service) {_		this.service = service__	};set,the,service,to,export,typically,populated,via,a,bean,reference;public,void,set,service,object,service,this,service,service
RemoteExporter -> public void setService(Object service);1385412762;Set the service to export._Typically populated via a bean reference.;public void setService(Object service) {_		this.service = service__	};set,the,service,to,export,typically,populated,via,a,bean,reference;public,void,set,service,object,service,this,service,service
RemoteExporter -> public void setService(Object service);1497970235;Set the service to export._Typically populated via a bean reference.;public void setService(Object service) {_		this.service = service__	};set,the,service,to,export,typically,populated,via,a,bean,reference;public,void,set,service,object,service,this,service,service
RemoteExporter -> public Class getServiceInterface();1328020251;Return the interface of the service to export.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,export;public,class,get,service,interface,return,this,service,interface
RemoteExporter -> public Class getServiceInterface();1356735495;Return the interface of the service to export.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,export;public,class,get,service,interface,return,this,service,interface
RemoteExporter -> public void setRegisterTraceInterceptor(boolean registerTraceInterceptor);1328020251;Set whether to register a RemoteInvocationTraceInterceptor for exported_services. Only applied when a subclass uses <code>getProxyForService</code>_for creating the proxy to expose._<p>Default is "true". RemoteInvocationTraceInterceptor's most important value_is that it logs exception stacktraces on the server, before propagating an_exception to the client. Note that RemoteInvocationTraceInterceptor will <i>not</i>_be registered by default if the "interceptors" property has been specified._@see #setInterceptors_@see #getProxyForService_@see RemoteInvocationTraceInterceptor;public void setRegisterTraceInterceptor(boolean registerTraceInterceptor) {_		this.registerTraceInterceptor = Boolean.valueOf(registerTraceInterceptor)__	};set,whether,to,register,a,remote,invocation,trace,interceptor,for,exported,services,only,applied,when,a,subclass,uses,code,get,proxy,for,service,code,for,creating,the,proxy,to,expose,p,default,is,true,remote,invocation,trace,interceptor,s,most,important,value,is,that,it,logs,exception,stacktraces,on,the,server,before,propagating,an,exception,to,the,client,note,that,remote,invocation,trace,interceptor,will,i,not,i,be,registered,by,default,if,the,interceptors,property,has,been,specified,see,set,interceptors,see,get,proxy,for,service,see,remote,invocation,trace,interceptor;public,void,set,register,trace,interceptor,boolean,register,trace,interceptor,this,register,trace,interceptor,boolean,value,of,register,trace,interceptor
RemoteExporter -> public void setRegisterTraceInterceptor(boolean registerTraceInterceptor);1356735495;Set whether to register a RemoteInvocationTraceInterceptor for exported_services. Only applied when a subclass uses {@code getProxyForService}_for creating the proxy to expose._<p>Default is "true". RemoteInvocationTraceInterceptor's most important value_is that it logs exception stacktraces on the server, before propagating an_exception to the client. Note that RemoteInvocationTraceInterceptor will <i>not</i>_be registered by default if the "interceptors" property has been specified._@see #setInterceptors_@see #getProxyForService_@see RemoteInvocationTraceInterceptor;public void setRegisterTraceInterceptor(boolean registerTraceInterceptor) {_		this.registerTraceInterceptor = Boolean.valueOf(registerTraceInterceptor)__	};set,whether,to,register,a,remote,invocation,trace,interceptor,for,exported,services,only,applied,when,a,subclass,uses,code,get,proxy,for,service,for,creating,the,proxy,to,expose,p,default,is,true,remote,invocation,trace,interceptor,s,most,important,value,is,that,it,logs,exception,stacktraces,on,the,server,before,propagating,an,exception,to,the,client,note,that,remote,invocation,trace,interceptor,will,i,not,i,be,registered,by,default,if,the,interceptors,property,has,been,specified,see,set,interceptors,see,get,proxy,for,service,see,remote,invocation,trace,interceptor;public,void,set,register,trace,interceptor,boolean,register,trace,interceptor,this,register,trace,interceptor,boolean,value,of,register,trace,interceptor
RemoteExporter -> public void setRegisterTraceInterceptor(boolean registerTraceInterceptor);1385412762;Set whether to register a RemoteInvocationTraceInterceptor for exported_services. Only applied when a subclass uses {@code getProxyForService}_for creating the proxy to expose._<p>Default is "true". RemoteInvocationTraceInterceptor's most important value_is that it logs exception stacktraces on the server, before propagating an_exception to the client. Note that RemoteInvocationTraceInterceptor will <i>not</i>_be registered by default if the "interceptors" property has been specified._@see #setInterceptors_@see #getProxyForService_@see RemoteInvocationTraceInterceptor;public void setRegisterTraceInterceptor(boolean registerTraceInterceptor) {_		this.registerTraceInterceptor = Boolean.valueOf(registerTraceInterceptor)__	};set,whether,to,register,a,remote,invocation,trace,interceptor,for,exported,services,only,applied,when,a,subclass,uses,code,get,proxy,for,service,for,creating,the,proxy,to,expose,p,default,is,true,remote,invocation,trace,interceptor,s,most,important,value,is,that,it,logs,exception,stacktraces,on,the,server,before,propagating,an,exception,to,the,client,note,that,remote,invocation,trace,interceptor,will,i,not,i,be,registered,by,default,if,the,interceptors,property,has,been,specified,see,set,interceptors,see,get,proxy,for,service,see,remote,invocation,trace,interceptor;public,void,set,register,trace,interceptor,boolean,register,trace,interceptor,this,register,trace,interceptor,boolean,value,of,register,trace,interceptor
RemoteExporter -> public void setRegisterTraceInterceptor(boolean registerTraceInterceptor);1497970235;Set whether to register a RemoteInvocationTraceInterceptor for exported_services. Only applied when a subclass uses {@code getProxyForService}_for creating the proxy to expose._<p>Default is "true". RemoteInvocationTraceInterceptor's most important value_is that it logs exception stacktraces on the server, before propagating an_exception to the client. Note that RemoteInvocationTraceInterceptor will <i>not</i>_be registered by default if the "interceptors" property has been specified._@see #setInterceptors_@see #getProxyForService_@see RemoteInvocationTraceInterceptor;public void setRegisterTraceInterceptor(boolean registerTraceInterceptor) {_		this.registerTraceInterceptor = registerTraceInterceptor__	};set,whether,to,register,a,remote,invocation,trace,interceptor,for,exported,services,only,applied,when,a,subclass,uses,code,get,proxy,for,service,for,creating,the,proxy,to,expose,p,default,is,true,remote,invocation,trace,interceptor,s,most,important,value,is,that,it,logs,exception,stacktraces,on,the,server,before,propagating,an,exception,to,the,client,note,that,remote,invocation,trace,interceptor,will,i,not,i,be,registered,by,default,if,the,interceptors,property,has,been,specified,see,set,interceptors,see,get,proxy,for,service,see,remote,invocation,trace,interceptor;public,void,set,register,trace,interceptor,boolean,register,trace,interceptor,this,register,trace,interceptor,register,trace,interceptor
RemoteExporter -> protected String getExporterName();1328020251;Return a short name for this exporter._Used for tracing of remote invocations._<p>Default is the unqualified class name (without package)._Can be overridden in subclasses._@see #getProxyForService_@see RemoteInvocationTraceInterceptor_@see org.springframework.util.ClassUtils#getShortName;protected String getExporterName() {_		return ClassUtils.getShortName(getClass())__	};return,a,short,name,for,this,exporter,used,for,tracing,of,remote,invocations,p,default,is,the,unqualified,class,name,without,package,can,be,overridden,in,subclasses,see,get,proxy,for,service,see,remote,invocation,trace,interceptor,see,org,springframework,util,class,utils,get,short,name;protected,string,get,exporter,name,return,class,utils,get,short,name,get,class
RemoteExporter -> protected String getExporterName();1356735495;Return a short name for this exporter._Used for tracing of remote invocations._<p>Default is the unqualified class name (without package)._Can be overridden in subclasses._@see #getProxyForService_@see RemoteInvocationTraceInterceptor_@see org.springframework.util.ClassUtils#getShortName;protected String getExporterName() {_		return ClassUtils.getShortName(getClass())__	};return,a,short,name,for,this,exporter,used,for,tracing,of,remote,invocations,p,default,is,the,unqualified,class,name,without,package,can,be,overridden,in,subclasses,see,get,proxy,for,service,see,remote,invocation,trace,interceptor,see,org,springframework,util,class,utils,get,short,name;protected,string,get,exporter,name,return,class,utils,get,short,name,get,class
RemoteExporter -> protected String getExporterName();1385412762;Return a short name for this exporter._Used for tracing of remote invocations._<p>Default is the unqualified class name (without package)._Can be overridden in subclasses._@see #getProxyForService_@see RemoteInvocationTraceInterceptor_@see org.springframework.util.ClassUtils#getShortName;protected String getExporterName() {_		return ClassUtils.getShortName(getClass())__	};return,a,short,name,for,this,exporter,used,for,tracing,of,remote,invocations,p,default,is,the,unqualified,class,name,without,package,can,be,overridden,in,subclasses,see,get,proxy,for,service,see,remote,invocation,trace,interceptor,see,org,springframework,util,class,utils,get,short,name;protected,string,get,exporter,name,return,class,utils,get,short,name,get,class
RemoteExporter -> protected String getExporterName();1497970235;Return a short name for this exporter._Used for tracing of remote invocations._<p>Default is the unqualified class name (without package)._Can be overridden in subclasses._@see #getProxyForService_@see RemoteInvocationTraceInterceptor_@see org.springframework.util.ClassUtils#getShortName;protected String getExporterName() {_		return ClassUtils.getShortName(getClass())__	};return,a,short,name,for,this,exporter,used,for,tracing,of,remote,invocations,p,default,is,the,unqualified,class,name,without,package,can,be,overridden,in,subclasses,see,get,proxy,for,service,see,remote,invocation,trace,interceptor,see,org,springframework,util,class,utils,get,short,name;protected,string,get,exporter,name,return,class,utils,get,short,name,get,class
RemoteExporter -> public void setServiceInterface(Class<?> serviceInterface);1385412762;Set the interface of the service to export._The interface must be suitable for the particular service and remoting strategy.;public void setServiceInterface(Class<?> serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,export,the,interface,must,be,suitable,for,the,particular,service,and,remoting,strategy;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
RemoteExporter -> public void setServiceInterface(Class<?> serviceInterface);1497970235;Set the interface of the service to export._The interface must be suitable for the particular service and remoting strategy.;public void setServiceInterface(Class<?> serviceInterface) {_		Assert.notNull(serviceInterface, "'serviceInterface' must not be null")__		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface")__		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,export,the,interface,must,be,suitable,for,the,particular,service,and,remoting,strategy;public,void,set,service,interface,class,service,interface,assert,not,null,service,interface,service,interface,must,not,be,null,assert,is,true,service,interface,is,interface,service,interface,must,be,an,interface,this,service,interface,service,interface
RemoteExporter -> protected void checkServiceInterface() throws IllegalArgumentException;1328020251;Check whether a service reference has been set,_and whether it matches the specified service._@see #setServiceInterface_@see #setService;protected void checkServiceInterface() throws IllegalArgumentException {_		Class serviceInterface = getServiceInterface()__		Object service = getService()__		if (serviceInterface == null) {_			throw new IllegalArgumentException("Property 'serviceInterface' is required")__		}_		if (service instanceof String) {_			throw new IllegalArgumentException("Service [" + service + "] is a String " +_					"rather than an actual service reference: Have you accidentally specified " +_					"the service bean name as value instead of as reference?")__		}_		if (!serviceInterface.isInstance(service)) {_			throw new IllegalArgumentException("Service interface [" + serviceInterface.getName() +_					"] needs to be implemented by service [" + service + "] of class [" +_					service.getClass().getName() + "]")__		}_	};check,whether,a,service,reference,has,been,set,and,whether,it,matches,the,specified,service,see,set,service,interface,see,set,service;protected,void,check,service,interface,throws,illegal,argument,exception,class,service,interface,get,service,interface,object,service,get,service,if,service,interface,null,throw,new,illegal,argument,exception,property,service,interface,is,required,if,service,instanceof,string,throw,new,illegal,argument,exception,service,service,is,a,string,rather,than,an,actual,service,reference,have,you,accidentally,specified,the,service,bean,name,as,value,instead,of,as,reference,if,service,interface,is,instance,service,throw,new,illegal,argument,exception,service,interface,service,interface,get,name,needs,to,be,implemented,by,service,service,of,class,service,get,class,get,name
RemoteExporter -> protected void checkServiceInterface() throws IllegalArgumentException;1356735495;Check whether a service reference has been set,_and whether it matches the specified service._@see #setServiceInterface_@see #setService;protected void checkServiceInterface() throws IllegalArgumentException {_		Class serviceInterface = getServiceInterface()__		Object service = getService()__		if (serviceInterface == null) {_			throw new IllegalArgumentException("Property 'serviceInterface' is required")__		}_		if (service instanceof String) {_			throw new IllegalArgumentException("Service [" + service + "] is a String " +_					"rather than an actual service reference: Have you accidentally specified " +_					"the service bean name as value instead of as reference?")__		}_		if (!serviceInterface.isInstance(service)) {_			throw new IllegalArgumentException("Service interface [" + serviceInterface.getName() +_					"] needs to be implemented by service [" + service + "] of class [" +_					service.getClass().getName() + "]")__		}_	};check,whether,a,service,reference,has,been,set,and,whether,it,matches,the,specified,service,see,set,service,interface,see,set,service;protected,void,check,service,interface,throws,illegal,argument,exception,class,service,interface,get,service,interface,object,service,get,service,if,service,interface,null,throw,new,illegal,argument,exception,property,service,interface,is,required,if,service,instanceof,string,throw,new,illegal,argument,exception,service,service,is,a,string,rather,than,an,actual,service,reference,have,you,accidentally,specified,the,service,bean,name,as,value,instead,of,as,reference,if,service,interface,is,instance,service,throw,new,illegal,argument,exception,service,interface,service,interface,get,name,needs,to,be,implemented,by,service,service,of,class,service,get,class,get,name
RemoteExporter -> protected void checkServiceInterface() throws IllegalArgumentException;1385412762;Check whether a service reference has been set,_and whether it matches the specified service._@see #setServiceInterface_@see #setService;protected void checkServiceInterface() throws IllegalArgumentException {_		Class<?> serviceInterface = getServiceInterface()__		Object service = getService()__		if (serviceInterface == null) {_			throw new IllegalArgumentException("Property 'serviceInterface' is required")__		}_		if (service instanceof String) {_			throw new IllegalArgumentException("Service [" + service + "] is a String " +_					"rather than an actual service reference: Have you accidentally specified " +_					"the service bean name as value instead of as reference?")__		}_		if (!serviceInterface.isInstance(service)) {_			throw new IllegalArgumentException("Service interface [" + serviceInterface.getName() +_					"] needs to be implemented by service [" + service + "] of class [" +_					service.getClass().getName() + "]")__		}_	};check,whether,a,service,reference,has,been,set,and,whether,it,matches,the,specified,service,see,set,service,interface,see,set,service;protected,void,check,service,interface,throws,illegal,argument,exception,class,service,interface,get,service,interface,object,service,get,service,if,service,interface,null,throw,new,illegal,argument,exception,property,service,interface,is,required,if,service,instanceof,string,throw,new,illegal,argument,exception,service,service,is,a,string,rather,than,an,actual,service,reference,have,you,accidentally,specified,the,service,bean,name,as,value,instead,of,as,reference,if,service,interface,is,instance,service,throw,new,illegal,argument,exception,service,interface,service,interface,get,name,needs,to,be,implemented,by,service,service,of,class,service,get,class,get,name
RemoteExporter -> protected void checkServiceInterface() throws IllegalArgumentException;1497970235;Check whether a service reference has been set,_and whether it matches the specified service._@see #setServiceInterface_@see #setService;protected void checkServiceInterface() throws IllegalArgumentException {_		Class<?> serviceInterface = getServiceInterface()__		Assert.notNull(serviceInterface, "Property 'serviceInterface' is required")___		Object service = getService()__		if (service instanceof String) {_			throw new IllegalArgumentException("Service [" + service + "] is a String " +_					"rather than an actual service reference: Have you accidentally specified " +_					"the service bean name as value instead of as reference?")__		}_		if (!serviceInterface.isInstance(service)) {_			throw new IllegalArgumentException("Service interface [" + serviceInterface.getName() +_					"] needs to be implemented by service [" + service + "] of class [" +_					service.getClass().getName() + "]")__		}_	};check,whether,a,service,reference,has,been,set,and,whether,it,matches,the,specified,service,see,set,service,interface,see,set,service;protected,void,check,service,interface,throws,illegal,argument,exception,class,service,interface,get,service,interface,assert,not,null,service,interface,property,service,interface,is,required,object,service,get,service,if,service,instanceof,string,throw,new,illegal,argument,exception,service,service,is,a,string,rather,than,an,actual,service,reference,have,you,accidentally,specified,the,service,bean,name,as,value,instead,of,as,reference,if,service,interface,is,instance,service,throw,new,illegal,argument,exception,service,interface,service,interface,get,name,needs,to,be,implemented,by,service,service,of,class,service,get,class,get,name
RemoteExporter -> protected void checkService() throws IllegalArgumentException;1328020251;Check whether the service reference has been set._@see #setService;protected void checkService() throws IllegalArgumentException {_		if (getService() == null) {_			throw new IllegalArgumentException("Property 'service' is required")__		}_	};check,whether,the,service,reference,has,been,set,see,set,service;protected,void,check,service,throws,illegal,argument,exception,if,get,service,null,throw,new,illegal,argument,exception,property,service,is,required
RemoteExporter -> protected void checkService() throws IllegalArgumentException;1356735495;Check whether the service reference has been set._@see #setService;protected void checkService() throws IllegalArgumentException {_		if (getService() == null) {_			throw new IllegalArgumentException("Property 'service' is required")__		}_	};check,whether,the,service,reference,has,been,set,see,set,service;protected,void,check,service,throws,illegal,argument,exception,if,get,service,null,throw,new,illegal,argument,exception,property,service,is,required
RemoteExporter -> protected void checkService() throws IllegalArgumentException;1385412762;Check whether the service reference has been set._@see #setService;protected void checkService() throws IllegalArgumentException {_		if (getService() == null) {_			throw new IllegalArgumentException("Property 'service' is required")__		}_	};check,whether,the,service,reference,has,been,set,see,set,service;protected,void,check,service,throws,illegal,argument,exception,if,get,service,null,throw,new,illegal,argument,exception,property,service,is,required
RemoteExporter -> protected void checkService() throws IllegalArgumentException;1497970235;Check whether the service reference has been set._@see #setService;protected void checkService() throws IllegalArgumentException {_		Assert.notNull(getService(), "Property 'service' is required")__	};check,whether,the,service,reference,has,been,set,see,set,service;protected,void,check,service,throws,illegal,argument,exception,assert,not,null,get,service,property,service,is,required
