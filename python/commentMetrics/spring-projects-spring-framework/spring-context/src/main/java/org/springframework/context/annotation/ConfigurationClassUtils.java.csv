# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1381881107;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1399664617;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1403696775;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1414616928;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1426267101;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1433247480;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1433381472;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1446723018;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1467730834;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1491319023;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1496263893;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1496837955;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1501581926;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1506097334;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1525267242;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1527623273;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1530174524;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata);1536753765;Check the given metadata for a full configuration class candidate_(i.e. a class annotated with {@code @Configuration})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a full_configuration class, including cross-method call interception;public static boolean isFullConfigurationCandidate(AnnotationMetadata metadata) {_		return metadata.isAnnotated(Configuration.class.getName())__	};check,the,given,metadata,for,a,full,configuration,class,candidate,i,e,a,class,annotated,with,code,configuration,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,full,configuration,class,including,cross,method,call,interception;public,static,boolean,is,full,configuration,candidate,annotation,metadata,metadata,return,metadata,is,annotated,configuration,class,get,name
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1426267101;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1433247480;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1433381472;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1446723018;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1467730834;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1491319023;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1496263893;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1496837955;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1501581926;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1506097334;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1525267242;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1527623273;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1530174524;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link Order @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static int getOrder(BeanDefinition beanDef);1536753765;Determine the order for the given configuration class bean definition,_as set by {@link #checkConfigurationClassCandidate}._@param beanDef the bean definition to check_@return the {@link Order @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 4.2;public static int getOrder(BeanDefinition beanDef) {_		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,for,the,given,configuration,class,bean,definition,as,set,by,link,check,configuration,class,candidate,param,bean,def,the,bean,definition,to,check,return,the,link,order,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,4,2;public,static,int,get,order,bean,definition,bean,def,integer,order,integer,bean,def,get,attribute,return,order,null,order,ordered
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1381881107;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1399664617;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1403696775;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1414616928;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1426267101;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1433247480;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1433381472;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1446723018;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1467730834;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1491319023;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1496263893;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1496837955;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1501581926;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1506097334;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1525267242;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1527623273;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1530174524;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> public static boolean isConfigurationCandidate(AnnotationMetadata metadata);1536753765;Check the given metadata for a configuration class candidate_(or nested component class declared within a configuration/component class)._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be registered as a_reflection-detected bean definition_ {@code false} otherwise;public static boolean isConfigurationCandidate(AnnotationMetadata metadata) {_		return (isFullConfigurationCandidate(metadata) || isLiteConfigurationCandidate(metadata))__	};check,the,given,metadata,for,a,configuration,class,candidate,or,nested,component,class,declared,within,a,configuration,component,class,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,registered,as,a,reflection,detected,bean,definition,code,false,otherwise;public,static,boolean,is,configuration,candidate,annotation,metadata,metadata,return,is,full,configuration,candidate,metadata,is,lite,configuration,candidate,metadata
ConfigurationClassUtils -> private static boolean hasNestedConfigurationClass( 			AnnotationMetadata metadata, MetadataReaderFactory metadataReaderFactory);1527623273;Check whether the specified class declares a nested configuration class.;private static boolean hasNestedConfigurationClass(_			AnnotationMetadata metadata, MetadataReaderFactory metadataReaderFactory) {__		_		if (metadata instanceof StandardAnnotationMetadata) {_			Class<?> beanClass = ((StandardAnnotationMetadata) metadata).getIntrospectedClass()__			for (Class<?> memberClass : beanClass.getDeclaredClasses()) {_				if (isConfigurationCandidate(new StandardAnnotationMetadata(memberClass))) {_					return true__				}_			}_		}_		else {_			for (String memberName : metadata.getMemberClassNames()) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(memberName)__					if (isConfigurationCandidate(metadataReader.getAnnotationMetadata())) {_						return true__					}_				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting configuration annotations: " +_								memberName, ex)__					}_				}_			}_		}_		return false__	};check,whether,the,specified,class,declares,a,nested,configuration,class;private,static,boolean,has,nested,configuration,class,annotation,metadata,metadata,metadata,reader,factory,metadata,reader,factory,if,metadata,instanceof,standard,annotation,metadata,class,bean,class,standard,annotation,metadata,metadata,get,introspected,class,for,class,member,class,bean,class,get,declared,classes,if,is,configuration,candidate,new,standard,annotation,metadata,member,class,return,true,else,for,string,member,name,metadata,get,member,class,names,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,member,name,if,is,configuration,candidate,metadata,reader,get,annotation,metadata,return,true,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,member,name,ex,return,false
ConfigurationClassUtils -> private static boolean hasNestedConfigurationClass( 			AnnotationMetadata metadata, MetadataReaderFactory metadataReaderFactory);1530174524;Check whether the specified class declares a nested configuration class.;private static boolean hasNestedConfigurationClass(_			AnnotationMetadata metadata, MetadataReaderFactory metadataReaderFactory) {__		_		if (metadata instanceof StandardAnnotationMetadata) {_			Class<?> beanClass = ((StandardAnnotationMetadata) metadata).getIntrospectedClass()__			for (Class<?> memberClass : beanClass.getDeclaredClasses()) {_				if (isConfigurationCandidate(new StandardAnnotationMetadata(memberClass))) {_					return true__				}_			}_		}_		else {_			for (String memberName : metadata.getMemberClassNames()) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(memberName)__					if (isConfigurationCandidate(metadataReader.getAnnotationMetadata())) {_						return true__					}_				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting configuration annotations: " +_								memberName, ex)__					}_				}_			}_		}_		return false__	};check,whether,the,specified,class,declares,a,nested,configuration,class;private,static,boolean,has,nested,configuration,class,annotation,metadata,metadata,metadata,reader,factory,metadata,reader,factory,if,metadata,instanceof,standard,annotation,metadata,class,bean,class,standard,annotation,metadata,metadata,get,introspected,class,for,class,member,class,bean,class,get,declared,classes,if,is,configuration,candidate,new,standard,annotation,metadata,member,class,return,true,else,for,string,member,name,metadata,get,member,class,names,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,member,name,if,is,configuration,candidate,metadata,reader,get,annotation,metadata,return,true,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,member,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1403696775;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1414616928;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1426267101;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1433247480;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1433381472;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1446723018;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1467730834;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1491319023;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1496263893;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1496837955;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1501581926;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1506097334;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1525267242;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1527623273;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1530174524;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isLiteConfigurationClass(BeanDefinition beanDef);1536753765;Determine whether the given bean definition indicates a lite {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,lite,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,lite,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate( 			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1527623273;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(_			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {__		String className = beanDef.getBeanClassName()__		if (className == null || beanDef.getFactoryMethodName() != null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " +_							className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return hasNestedConfigurationClass(metadata, metadataReaderFactory)__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,bean,def,get,factory,method,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,has,nested,configuration,class,metadata,metadata,reader,factory,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate( 			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1530174524;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(_			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {__		String className = beanDef.getBeanClassName()__		if (className == null || beanDef.getFactoryMethodName() != null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " +_							className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return hasNestedConfigurationClass(metadata, metadataReaderFactory)__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,bean,def,get,factory,method,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,has,nested,configuration,class,metadata,metadata,reader,factory,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate( 			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1536753765;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(_			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {__		String className = beanDef.getBeanClassName()__		if (className == null || beanDef.getFactoryMethodName() != null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " +_							className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,bean,def,get,factory,method,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1328020251;Determine whether the given bean definition indicates a full @Configuration class.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,configuration,class;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1329142650;Determine whether the given bean definition indicates a full @Configuration class.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,configuration,class;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1367881259;Determine whether the given bean definition indicates a full @Configuration class.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,configuration,class;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1372363092;Determine whether the given bean definition indicates a full @Configuration class.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,configuration,class;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1375216602;Determine whether the given bean definition indicates a full @Configuration class.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,configuration,class;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1381881107;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1399664617;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1403696775;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1414616928;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1426267101;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1433247480;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1433381472;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1446723018;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1467730834;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1491319023;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1496263893;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1496837955;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1501581926;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1506097334;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1525267242;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1527623273;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1530174524;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> public static boolean isFullConfigurationClass(BeanDefinition beanDef);1536753765;Determine whether the given bean definition indicates a full {@code @Configuration}_class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker.;public static boolean isFullConfigurationClass(BeanDefinition beanDef) {_		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE))__	};determine,whether,the,given,bean,definition,indicates,a,full,code,configuration,class,through,checking,link,check,configuration,class,candidate,s,metadata,marker;public,static,boolean,is,full,configuration,class,bean,definition,bean,def,return,equals,bean,def,get,attribute
ConfigurationClassUtils -> @Nullable 	public static Integer getOrder(AnnotationMetadata metadata);1506097334;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 5.0;@Nullable_	public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,5,0;nullable,public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
ConfigurationClassUtils -> @Nullable 	public static Integer getOrder(AnnotationMetadata metadata);1525267242;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 5.0;@Nullable_	public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,5,0;nullable,public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
ConfigurationClassUtils -> @Nullable 	public static Integer getOrder(AnnotationMetadata metadata);1527623273;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 5.0;@Nullable_	public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,5,0;nullable,public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
ConfigurationClassUtils -> @Nullable 	public static Integer getOrder(AnnotationMetadata metadata);1530174524;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@code @Order} annotation value on the configuration class,_or {@code Ordered.LOWEST_PRECEDENCE} if none declared_@since 5.0;@Nullable_	public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,code,order,annotation,value,on,the,configuration,class,or,code,ordered,if,none,declared,since,5,0;nullable,public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
ConfigurationClassUtils -> @Nullable 	public static Integer getOrder(AnnotationMetadata metadata);1536753765;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@code @Order} annotation value on the configuration class,_or {@code Ordered.LOWEST_PRECEDENCE} if none declared_@since 5.0;@Nullable_	public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,code,order,annotation,value,on,the,configuration,class,or,code,ordered,if,none,declared,since,5,0;nullable,public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1328020251;Check whether the given bean definition is a candidate for a configuration class,_and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		AnnotationMetadata metadata = null___		_		_		if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			metadata = new StandardAnnotationMetadata(((AbstractBeanDefinition) beanDef).getBeanClass())__		}_		else {_			String className = beanDef.getBeanClassName()__			if (className != null) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__					metadata = metadataReader.getAnnotationMetadata()__				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting factory methods: " + className, ex)__					}_					return false__				}_			}_		}__		if (metadata != null) {_			if (isFullConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__				return true__			}_			else if (isLiteConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__				return true__			}_		}_		return false__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,annotation,metadata,metadata,null,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,metadata,new,standard,annotation,metadata,abstract,bean,definition,bean,def,get,bean,class,else,string,class,name,bean,def,get,bean,class,name,if,class,name,null,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,factory,methods,class,name,ex,return,false,if,metadata,null,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1329142650;Check whether the given bean definition is a candidate for a configuration class,_and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		AnnotationMetadata metadata = null___		_		_		if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			String className = beanDef.getBeanClassName()__			if (className != null) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__					metadata = metadataReader.getAnnotationMetadata()__				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting factory methods: " + className, ex)__					}_					return false__				}_			}_		}__		if (metadata != null) {_			if (isFullConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__				return true__			}_			else if (isLiteConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__				return true__			}_		}_		return false__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,annotation,metadata,metadata,null,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,string,class,name,bean,def,get,bean,class,name,if,class,name,null,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,factory,methods,class,name,ex,return,false,if,metadata,null,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1367881259;Check whether the given bean definition is a candidate for a configuration class,_and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		AnnotationMetadata metadata = null___		_		_		if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			String className = beanDef.getBeanClassName()__			if (className != null) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__					metadata = metadataReader.getAnnotationMetadata()__				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting factory methods: " + className, ex)__					}_					return false__				}_			}_		}__		if (metadata != null) {_			if (isFullConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__				return true__			}_			else if (isLiteConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__				return true__			}_		}_		return false__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,annotation,metadata,metadata,null,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,string,class,name,bean,def,get,bean,class,name,if,class,name,null,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,factory,methods,class,name,ex,return,false,if,metadata,null,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1372363092;Check whether the given bean definition is a candidate for a configuration class,_and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		AnnotationMetadata metadata = null___		_		_		if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			String className = beanDef.getBeanClassName()__			if (className != null) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__					metadata = metadataReader.getAnnotationMetadata()__				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting factory methods: " + className, ex)__					}_					return false__				}_			}_		}__		if (metadata != null) {_			if (isFullConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__				return true__			}_			else if (isLiteConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__				return true__			}_		}_		return false__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,annotation,metadata,metadata,null,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,string,class,name,bean,def,get,bean,class,name,if,class,name,null,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,factory,methods,class,name,ex,return,false,if,metadata,null,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1375216602;Check whether the given bean definition is a candidate for a configuration class,_and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		AnnotationMetadata metadata = null___		_		_		if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			String className = beanDef.getBeanClassName()__			if (className != null) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__					metadata = metadataReader.getAnnotationMetadata()__				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting factory methods: " + className, ex)__					}_					return false__				}_			}_		}__		if (metadata != null) {_			if (isFullConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__				return true__			}_			else if (isLiteConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__				return true__			}_		}_		return false__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,annotation,metadata,metadata,null,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,string,class,name,bean,def,get,bean,class,name,if,class,name,null,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,factory,methods,class,name,ex,return,false,if,metadata,null,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1381881107;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		AnnotationMetadata metadata = null___		_		_		if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			String className = beanDef.getBeanClassName()__			if (className != null) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__					metadata = metadataReader.getAnnotationMetadata()__				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting factory methods: " + className, ex)__					}_					return false__				}_			}_		}__		if (metadata != null) {_			if (isFullConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__				return true__			}_			else if (isLiteConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__				return true__			}_		}_		return false__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,annotation,metadata,metadata,null,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,string,class,name,bean,def,get,bean,class,name,if,class,name,null,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,factory,methods,class,name,ex,return,false,if,metadata,null,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1399664617;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		AnnotationMetadata metadata = null___		_		_		if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			String className = beanDef.getBeanClassName()__			if (className != null) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__					metadata = metadataReader.getAnnotationMetadata()__				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting factory methods: " + className, ex)__					}_					return false__				}_			}_		}__		if (metadata != null) {_			if (isFullConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__				return true__			}_			else if (isLiteConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__				return true__			}_		}_		return false__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,annotation,metadata,metadata,null,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,string,class,name,bean,def,get,bean,class,name,if,class,name,null,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,factory,methods,class,name,ex,return,false,if,metadata,null,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1403696775;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		AnnotationMetadata metadata = null___		_		_		if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			String className = beanDef.getBeanClassName()__			if (className != null) {_				try {_					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__					metadata = metadataReader.getAnnotationMetadata()__				}_				catch (IOException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not find class file for introspecting factory methods: " + className, ex)__					}_					return false__				}_			}_		}__		if (metadata != null) {_			if (isFullConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__				return true__			}_			else if (isLiteConfigurationCandidate(metadata)) {_				beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__				return true__			}_		}_		return false__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,annotation,metadata,metadata,null,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,string,class,name,bean,def,get,bean,class,name,if,class,name,null,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,factory,methods,class,name,ex,return,false,if,metadata,null,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1414616928;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__			return true__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__			return true__		}_		else {_			return false__		}_	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1426267101;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		if (orderAttributes != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, orderAttributes.get(AnnotationUtils.VALUE))__		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__			return true__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__			return true__		}_		else {_			return false__		}_	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,if,order,attributes,null,bean,def,set,attribute,order,attributes,get,annotation,utils,value,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1433247480;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		if (orderAttributes != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, orderAttributes.get(AnnotationUtils.VALUE))__		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__			return true__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__			return true__		}_		else {_			return false__		}_	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,if,order,attributes,null,bean,def,set,attribute,order,attributes,get,annotation,utils,value,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1433381472;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		if (orderAttributes != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, orderAttributes.get(AnnotationUtils.VALUE))__		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__			return true__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__			return true__		}_		else {_			return false__		}_	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,if,order,attributes,null,bean,def,set,attribute,order,attributes,get,annotation,utils,value,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,return,true,else,return,false
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1446723018;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		if (orderAttributes != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, orderAttributes.get(AnnotationUtils.VALUE))__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,if,order,attributes,null,bean,def,set,attribute,order,attributes,get,annotation,utils,value,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1467730834;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		if (orderAttributes != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, orderAttributes.get(AnnotationUtils.VALUE))__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,if,order,attributes,null,bean,def,set,attribute,order,attributes,get,annotation,utils,value,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1491319023;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1496263893;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1496837955;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1501581926;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null || beanDef.getFactoryMethodName() != null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,bean,def,get,factory,method,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1506097334;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null || beanDef.getFactoryMethodName() != null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,bean,def,get,factory,method,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory);1525267242;Check whether the given bean definition is a candidate for a configuration class_(or a nested component class declared within a configuration/component class,_to be auto-registered as well), and mark it accordingly._@param beanDef the bean definition to check_@param metadataReaderFactory the current factory in use by the caller_@return whether the candidate qualifies as (any kind of) configuration class;public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {_		String className = beanDef.getBeanClassName()__		if (className == null || beanDef.getFactoryMethodName() != null) {_			return false__		}__		AnnotationMetadata metadata__		if (beanDef instanceof AnnotatedBeanDefinition &&_				className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {_			_			metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata()__		}_		else if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {_			_			_			Class<?> beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass()__			metadata = new StandardAnnotationMetadata(beanClass, true)__		}_		else {_			try {_				MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className)__				metadata = metadataReader.getAnnotationMetadata()__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex)__				}_				return false__			}_		}__		if (isFullConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL)__		}_		else if (isLiteConfigurationCandidate(metadata)) {_			beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE)__		}_		else {_			return false__		}__		_		Integer order = getOrder(metadata)__		if (order != null) {_			beanDef.setAttribute(ORDER_ATTRIBUTE, order)__		}__		return true__	};check,whether,the,given,bean,definition,is,a,candidate,for,a,configuration,class,or,a,nested,component,class,declared,within,a,configuration,component,class,to,be,auto,registered,as,well,and,mark,it,accordingly,param,bean,def,the,bean,definition,to,check,param,metadata,reader,factory,the,current,factory,in,use,by,the,caller,return,whether,the,candidate,qualifies,as,any,kind,of,configuration,class;public,static,boolean,check,configuration,class,candidate,bean,definition,bean,def,metadata,reader,factory,metadata,reader,factory,string,class,name,bean,def,get,bean,class,name,if,class,name,null,bean,def,get,factory,method,name,null,return,false,annotation,metadata,metadata,if,bean,def,instanceof,annotated,bean,definition,class,name,equals,annotated,bean,definition,bean,def,get,metadata,get,class,name,metadata,annotated,bean,definition,bean,def,get,metadata,else,if,bean,def,instanceof,abstract,bean,definition,abstract,bean,definition,bean,def,has,bean,class,class,bean,class,abstract,bean,definition,bean,def,get,bean,class,metadata,new,standard,annotation,metadata,bean,class,true,else,try,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,class,name,metadata,metadata,reader,get,annotation,metadata,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,could,not,find,class,file,for,introspecting,configuration,annotations,class,name,ex,return,false,if,is,full,configuration,candidate,metadata,bean,def,set,attribute,else,if,is,lite,configuration,candidate,metadata,bean,def,set,attribute,else,return,false,integer,order,get,order,metadata,if,order,null,bean,def,set,attribute,order,return,true
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1381881107;Check the given metadata for a lite configuration class candidate_(i.e. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		return (!metadata.isInterface() && (metadata.isAnnotated(Component.class.getName()) ||_				metadata.isAnnotated(Import.class.getName()) || metadata.hasAnnotatedMethods(Bean.class.getName())))__	};check,the,given,metadata,for,a,lite,configuration,class,candidate,i,e,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,return,metadata,is,interface,metadata,is,annotated,component,class,get,name,metadata,is,annotated,import,class,get,name,metadata,has,annotated,methods,bean,class,get,name
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1399664617;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}_		return metadata.hasAnnotatedMethods(Bean.class.getName())__	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,return,metadata,has,annotated,methods,bean,class,get,name
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1403696775;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}_		return metadata.hasAnnotatedMethods(Bean.class.getName())__	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,return,metadata,has,annotated,methods,bean,class,get,name
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1414616928;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}_		return metadata.hasAnnotatedMethods(Bean.class.getName())__	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,return,metadata,has,annotated,methods,bean,class,get,name
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1426267101;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}_		return metadata.hasAnnotatedMethods(Bean.class.getName())__	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,return,metadata,has,annotated,methods,bean,class,get,name
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1433247480;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClass() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1433381472;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1446723018;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1467730834;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1491319023;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1496263893;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1496837955;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1501581926;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1506097334;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1525267242;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1527623273;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1530174524;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata);1536753765;Check the given metadata for a lite configuration class candidate_(e.g. a class annotated with {@code @Component} or just having_{@code @Import} declarations or {@code @Bean methods})._@param metadata the metadata of the annotated class_@return {@code true} if the given class is to be processed as a lite_configuration class, just registering it and scanning it for {@code @Bean} methods;public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {_		_		if (metadata.isInterface()) {_			return false__		}__		_		for (String indicator : candidateIndicators) {_			if (metadata.isAnnotated(indicator)) {_				return true__			}_		}__		_		try {_			return metadata.hasAnnotatedMethods(Bean.class.getName())__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex)__			}_			return false__		}_	};check,the,given,metadata,for,a,lite,configuration,class,candidate,e,g,a,class,annotated,with,code,component,or,just,having,code,import,declarations,or,code,bean,methods,param,metadata,the,metadata,of,the,annotated,class,return,code,true,if,the,given,class,is,to,be,processed,as,a,lite,configuration,class,just,registering,it,and,scanning,it,for,code,bean,methods;public,static,boolean,is,lite,configuration,candidate,annotation,metadata,metadata,if,metadata,is,interface,return,false,for,string,indicator,candidate,indicators,if,metadata,is,annotated,indicator,return,true,try,return,metadata,has,annotated,methods,bean,class,get,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failed,to,introspect,bean,methods,on,class,metadata,get,class,name,ex,return,false
ConfigurationClassUtils -> public static Integer getOrder(AnnotationMetadata metadata);1491319023;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 5.0;public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,5,0;public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
ConfigurationClassUtils -> public static Integer getOrder(AnnotationMetadata metadata);1496263893;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 5.0;public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,5,0;public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
ConfigurationClassUtils -> public static Integer getOrder(AnnotationMetadata metadata);1496837955;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 5.0;public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,5,0;public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
ConfigurationClassUtils -> public static Integer getOrder(AnnotationMetadata metadata);1501581926;Determine the order for the given configuration class metadata._@param metadata the metadata of the annotated class_@return the {@link @Order} annotation value on the configuration class,_or {@link Ordered#LOWEST_PRECEDENCE} if none declared_@since 5.0;public static Integer getOrder(AnnotationMetadata metadata) {_		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName())__		return (orderAttributes != null ? ((Integer) orderAttributes.get(AnnotationUtils.VALUE)) : null)__	};determine,the,order,for,the,given,configuration,class,metadata,param,metadata,the,metadata,of,the,annotated,class,return,the,link,order,annotation,value,on,the,configuration,class,or,link,ordered,if,none,declared,since,5,0;public,static,integer,get,order,annotation,metadata,metadata,map,string,object,order,attributes,metadata,get,annotation,attributes,order,class,get,name,return,order,attributes,null,integer,order,attributes,get,annotation,utils,value,null
