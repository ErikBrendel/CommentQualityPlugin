commented;modifiers;parameterAmount;loc;comment;code
true;public;8;19;/**  * Create an {@link EvaluationContext}.  * @param caches the current caches  * @param method the method  * @param args the method arguments  * @param target the target object  * @param targetClass the target class  * @param result the return value (can be {@code null}) or  * {@link #NO_RESULT} if there is no return at this time  * @return the evaluation context  */ ;/**  * Create an {@link EvaluationContext}.  * @param caches the current caches  * @param method the method  * @param args the method arguments  * @param target the target object  * @param targetClass the target class  * @param result the return value (can be {@code null}) or  * {@link #NO_RESULT} if there is no return at this time  * @return the evaluation context  */ public EvaluationContext createEvaluationContext(Collection<? extends Cache> caches, Method method, Object[] args, Object target, Class<?> targetClass, Method targetMethod, @Nullable Object result, @Nullable BeanFactory beanFactory) {     CacheExpressionRootObject rootObject = new CacheExpressionRootObject(caches, method, args, target, targetClass).     CacheEvaluationContext evaluationContext = new CacheEvaluationContext(rootObject, targetMethod, args, getParameterNameDiscoverer()).     if (result == RESULT_UNAVAILABLE) {         evaluationContext.addUnavailableVariable(RESULT_VARIABLE).     } else if (result != NO_RESULT) {         evaluationContext.setVariable(RESULT_VARIABLE, result).     }     if (beanFactory != null) {         evaluationContext.setBeanResolver(new BeanFactoryResolver(beanFactory)).     }     return evaluationContext. }
false;public;3;4;;@Nullable public Object key(String keyExpression, AnnotatedElementKey methodKey, EvaluationContext evalContext) {     return getExpression(this.keyCache, methodKey, keyExpression).getValue(evalContext). }
false;public;3;4;;public boolean condition(String conditionExpression, AnnotatedElementKey methodKey, EvaluationContext evalContext) {     return (Boolean.TRUE.equals(getExpression(this.conditionCache, methodKey, conditionExpression).getValue(evalContext, Boolean.class))). }
false;public;3;4;;public boolean unless(String unlessExpression, AnnotatedElementKey methodKey, EvaluationContext evalContext) {     return (Boolean.TRUE.equals(getExpression(this.unlessCache, methodKey, unlessExpression).getValue(evalContext, Boolean.class))). }
true;;0;5;/**  * Clear all caches.  */ ;/**  * Clear all caches.  */ void clear() {     this.keyCache.clear().     this.conditionCache.clear().     this.unlessCache.clear(). }
