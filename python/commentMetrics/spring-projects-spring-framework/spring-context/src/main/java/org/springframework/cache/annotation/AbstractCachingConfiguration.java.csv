commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void setImportMetadata(AnnotationMetadata importMetadata) {     this.enableCaching = AnnotationAttributes.fromMap(importMetadata.getAnnotationAttributes(EnableCaching.class.getName(), false)).     if (this.enableCaching == null) {         throw new IllegalArgumentException("@EnableCaching is not present on importing class " + importMetadata.getClassName()).     } }
false;;1;14;;@Autowired(required = false) void setConfigurers(Collection<CachingConfigurer> configurers) {     if (CollectionUtils.isEmpty(configurers)) {         return.     }     if (configurers.size() > 1) {         throw new IllegalStateException(configurers.size() + " implementations of " + "CachingConfigurer were found when only 1 was expected. " + "Refactor the configuration such that CachingConfigurer is " + "implemented only once or not at all.").     }     CachingConfigurer configurer = configurers.iterator().next().     useCachingConfigurer(configurer). }
true;protected;1;6;/**  * Extract the configuration from the nominated {@link CachingConfigurer}.  */ ;/**  * Extract the configuration from the nominated {@link CachingConfigurer}.  */ protected void useCachingConfigurer(CachingConfigurer config) {     this.cacheManager = config::cacheManager.     this.cacheResolver = config::cacheResolver.     this.keyGenerator = config::keyGenerator.     this.errorHandler = config::errorHandler. }
