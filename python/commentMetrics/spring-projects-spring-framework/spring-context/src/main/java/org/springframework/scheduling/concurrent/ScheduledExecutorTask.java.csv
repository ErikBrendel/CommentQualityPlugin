# id;timestamp;commentText;codeText;commentWords;codeWords
ScheduledExecutorTask -> public boolean isOneTimeTask();1328020251;Is this task only ever going to execute once?_@return <code>true</code> if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period <= 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,code,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledExecutorTask -> public boolean isOneTimeTask();1356735495;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period <= 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledExecutorTask -> public boolean isOneTimeTask();1383178438;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period <= 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledExecutorTask -> public boolean isOneTimeTask();1496837955;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period <= 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledExecutorTask -> public boolean isOneTimeTask();1500495740;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period <= 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledExecutorTask -> public boolean isOneTimeTask();1533725446;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period <= 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledExecutorTask -> public long getDelay();1328020251;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledExecutorTask -> public long getDelay();1356735495;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledExecutorTask -> public long getDelay();1383178438;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledExecutorTask -> public long getDelay();1496837955;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledExecutorTask -> public long getDelay();1500495740;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledExecutorTask -> public long getDelay();1533725446;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledExecutorTask -> public TimeUnit getTimeUnit();1328020251;Return the time unit for the delay and period values.;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,the,time,unit,for,the,delay,and,period,values;public,time,unit,get,time,unit,return,this,time,unit
ScheduledExecutorTask -> public TimeUnit getTimeUnit();1356735495;Return the time unit for the delay and period values.;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,the,time,unit,for,the,delay,and,period,values;public,time,unit,get,time,unit,return,this,time,unit
ScheduledExecutorTask -> public TimeUnit getTimeUnit();1383178438;Return the time unit for the delay and period values.;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,the,time,unit,for,the,delay,and,period,values;public,time,unit,get,time,unit,return,this,time,unit
ScheduledExecutorTask -> public TimeUnit getTimeUnit();1496837955;Return the time unit for the delay and period values.;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,the,time,unit,for,the,delay,and,period,values;public,time,unit,get,time,unit,return,this,time,unit
ScheduledExecutorTask -> public TimeUnit getTimeUnit();1500495740;Return the time unit for the delay and period values.;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,the,time,unit,for,the,delay,and,period,values;public,time,unit,get,time,unit,return,this,time,unit
ScheduledExecutorTask -> public TimeUnit getTimeUnit();1533725446;Return the time unit for the delay and period values.;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,the,time,unit,for,the,delay,and,period,values;public,time,unit,get,time,unit,return,this,time,unit
ScheduledExecutorTask -> public void setTimeUnit(@Nullable TimeUnit timeUnit);1496837955;Specify the time unit for the delay and period values._Default is milliseconds ({@code TimeUnit.MILLISECONDS})._@see java.util.concurrent.TimeUnit#MILLISECONDS_@see java.util.concurrent.TimeUnit#SECONDS;public void setTimeUnit(@Nullable TimeUnit timeUnit) {_		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__	};specify,the,time,unit,for,the,delay,and,period,values,default,is,milliseconds,code,time,unit,milliseconds,see,java,util,concurrent,time,unit,milliseconds,see,java,util,concurrent,time,unit,seconds;public,void,set,time,unit,nullable,time,unit,time,unit,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds
ScheduledExecutorTask -> public void setTimeUnit(@Nullable TimeUnit timeUnit);1500495740;Specify the time unit for the delay and period values._Default is milliseconds ({@code TimeUnit.MILLISECONDS})._@see java.util.concurrent.TimeUnit#MILLISECONDS_@see java.util.concurrent.TimeUnit#SECONDS;public void setTimeUnit(@Nullable TimeUnit timeUnit) {_		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__	};specify,the,time,unit,for,the,delay,and,period,values,default,is,milliseconds,code,time,unit,milliseconds,see,java,util,concurrent,time,unit,milliseconds,see,java,util,concurrent,time,unit,seconds;public,void,set,time,unit,nullable,time,unit,time,unit,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds
ScheduledExecutorTask -> public void setTimeUnit(@Nullable TimeUnit timeUnit);1533725446;Specify the time unit for the delay and period values._Default is milliseconds ({@code TimeUnit.MILLISECONDS})._@see java.util.concurrent.TimeUnit#MILLISECONDS_@see java.util.concurrent.TimeUnit#SECONDS;public void setTimeUnit(@Nullable TimeUnit timeUnit) {_		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__	};specify,the,time,unit,for,the,delay,and,period,values,default,is,milliseconds,code,time,unit,milliseconds,see,java,util,concurrent,time,unit,milliseconds,see,java,util,concurrent,time,unit,seconds;public,void,set,time,unit,nullable,time,unit,time,unit,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay);1328020251;Create a new ScheduledExecutorTask, with default_one-time execution with the given delay._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledExecutorTask(Runnable executorTask, long delay) {_		this.runnable = executorTask__		this.delay = delay__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,with,the,given,delay,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,executor,task,runnable,executor,task,long,delay,this,runnable,executor,task,this,delay,delay
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay);1356735495;Create a new ScheduledExecutorTask, with default_one-time execution with the given delay._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledExecutorTask(Runnable executorTask, long delay) {_		this.runnable = executorTask__		this.delay = delay__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,with,the,given,delay,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,executor,task,runnable,executor,task,long,delay,this,runnable,executor,task,this,delay,delay
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay);1383178438;Create a new ScheduledExecutorTask, with default_one-time execution with the given delay._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledExecutorTask(Runnable executorTask, long delay) {_		this.runnable = executorTask__		this.delay = delay__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,with,the,given,delay,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,executor,task,runnable,executor,task,long,delay,this,runnable,executor,task,this,delay,delay
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay);1496837955;Create a new ScheduledExecutorTask, with default_one-time execution with the given delay._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledExecutorTask(Runnable executorTask, long delay) {_		this.runnable = executorTask__		this.delay = delay__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,with,the,given,delay,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,executor,task,runnable,executor,task,long,delay,this,runnable,executor,task,this,delay,delay
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay);1500495740;Create a new ScheduledExecutorTask, with default_one-time execution with the given delay._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledExecutorTask(Runnable executorTask, long delay) {_		this.runnable = executorTask__		this.delay = delay__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,with,the,given,delay,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,executor,task,runnable,executor,task,long,delay,this,runnable,executor,task,this,delay,delay
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay);1533725446;Create a new ScheduledExecutorTask, with default_one-time execution with the given delay._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledExecutorTask(Runnable executorTask, long delay) {_		this.runnable = executorTask__		this.delay = delay__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,with,the,given,delay,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,executor,task,runnable,executor,task,long,delay,this,runnable,executor,task,this,delay,delay
ScheduledExecutorTask -> public long getPeriod();1328020251;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledExecutorTask -> public long getPeriod();1356735495;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledExecutorTask -> public long getPeriod();1383178438;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledExecutorTask -> public long getPeriod();1496837955;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledExecutorTask -> public long getPeriod();1500495740;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledExecutorTask -> public long getPeriod();1533725446;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledExecutorTask -> public ScheduledExecutorTask();1328020251;Create a new ScheduledExecutorTask,_to be populated via bean properties._@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledExecutorTask() {_	};create,a,new,scheduled,executor,task,to,be,populated,via,bean,properties,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask();1356735495;Create a new ScheduledExecutorTask,_to be populated via bean properties._@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledExecutorTask() {_	};create,a,new,scheduled,executor,task,to,be,populated,via,bean,properties,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask();1383178438;Create a new ScheduledExecutorTask,_to be populated via bean properties._@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledExecutorTask() {_	};create,a,new,scheduled,executor,task,to,be,populated,via,bean,properties,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask();1496837955;Create a new ScheduledExecutorTask,_to be populated via bean properties._@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledExecutorTask() {_	};create,a,new,scheduled,executor,task,to,be,populated,via,bean,properties,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask();1500495740;Create a new ScheduledExecutorTask,_to be populated via bean properties._@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledExecutorTask() {_	};create,a,new,scheduled,executor,task,to,be,populated,via,bean,properties,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask();1533725446;Create a new ScheduledExecutorTask,_to be populated via bean properties._@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledExecutorTask() {_	};create,a,new,scheduled,executor,task,to,be,populated,via,bean,properties,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,executor,task
ScheduledExecutorTask -> public void setFixedRate(boolean fixedRate);1328020251;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", that is, fixed delay._<p>See ScheduledExecutorService javadoc for details on those execution modes._@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,that,is,fixed,delay,p,see,scheduled,executor,service,javadoc,for,details,on,those,execution,modes,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public void setFixedRate(boolean fixedRate);1356735495;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", that is, fixed delay._<p>See ScheduledExecutorService javadoc for details on those execution modes._@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,that,is,fixed,delay,p,see,scheduled,executor,service,javadoc,for,details,on,those,execution,modes,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public void setFixedRate(boolean fixedRate);1383178438;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", that is, fixed delay._<p>See ScheduledExecutorService javadoc for details on those execution modes._@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,that,is,fixed,delay,p,see,scheduled,executor,service,javadoc,for,details,on,those,execution,modes,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public void setFixedRate(boolean fixedRate);1496837955;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", that is, fixed delay._<p>See ScheduledExecutorService javadoc for details on those execution modes._@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,that,is,fixed,delay,p,see,scheduled,executor,service,javadoc,for,details,on,those,execution,modes,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public void setFixedRate(boolean fixedRate);1500495740;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", that is, fixed delay._<p>See ScheduledExecutorService javadoc for details on those execution modes._@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,that,is,fixed,delay,p,see,scheduled,executor,service,javadoc,for,details,on,those,execution,modes,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public void setFixedRate(boolean fixedRate);1533725446;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", that is, fixed delay._<p>See ScheduledExecutorService javadoc for details on those execution modes._@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)_@see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,that,is,fixed,delay,p,see,scheduled,executor,service,javadoc,for,details,on,those,execution,modes,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit,see,java,util,concurrent,scheduled,executor,service,schedule,at,fixed,rate,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate);1328020251;Create a new ScheduledExecutorTask._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate) {_		this.runnable = executorTask__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,executor,task,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,executor,task,runnable,executor,task,long,delay,long,period,boolean,fixed,rate,this,runnable,executor,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate);1356735495;Create a new ScheduledExecutorTask._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate) {_		this.runnable = executorTask__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,executor,task,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,executor,task,runnable,executor,task,long,delay,long,period,boolean,fixed,rate,this,runnable,executor,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate);1383178438;Create a new ScheduledExecutorTask._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate) {_		this.runnable = executorTask__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,executor,task,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,executor,task,runnable,executor,task,long,delay,long,period,boolean,fixed,rate,this,runnable,executor,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate);1496837955;Create a new ScheduledExecutorTask._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate) {_		this.runnable = executorTask__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,executor,task,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,executor,task,runnable,executor,task,long,delay,long,period,boolean,fixed,rate,this,runnable,executor,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate);1500495740;Create a new ScheduledExecutorTask._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate) {_		this.runnable = executorTask__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,executor,task,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,executor,task,runnable,executor,task,long,delay,long,period,boolean,fixed,rate,this,runnable,executor,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate);1533725446;Create a new ScheduledExecutorTask._@param executorTask the Runnable to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledExecutorTask(Runnable executorTask, long delay, long period, boolean fixedRate) {_		this.runnable = executorTask__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,executor,task,param,executor,task,the,runnable,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,executor,task,runnable,executor,task,long,delay,long,period,boolean,fixed,rate,this,runnable,executor,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledExecutorTask -> public void setRunnable(Runnable executorTask);1328020251;Set the Runnable to schedule as executor task.;public void setRunnable(Runnable executorTask) {_		this.runnable = executorTask__	};set,the,runnable,to,schedule,as,executor,task;public,void,set,runnable,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public void setRunnable(Runnable executorTask);1356735495;Set the Runnable to schedule as executor task.;public void setRunnable(Runnable executorTask) {_		this.runnable = executorTask__	};set,the,runnable,to,schedule,as,executor,task;public,void,set,runnable,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public void setRunnable(Runnable executorTask);1383178438;Set the Runnable to schedule as executor task.;public void setRunnable(Runnable executorTask) {_		this.runnable = executorTask__	};set,the,runnable,to,schedule,as,executor,task;public,void,set,runnable,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public void setRunnable(Runnable executorTask);1496837955;Set the Runnable to schedule as executor task.;public void setRunnable(Runnable executorTask) {_		this.runnable = executorTask__	};set,the,runnable,to,schedule,as,executor,task;public,void,set,runnable,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public void setRunnable(Runnable executorTask);1500495740;Set the Runnable to schedule as executor task.;public void setRunnable(Runnable executorTask) {_		this.runnable = executorTask__	};set,the,runnable,to,schedule,as,executor,task;public,void,set,runnable,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public void setRunnable(Runnable executorTask);1533725446;Set the Runnable to schedule as executor task.;public void setRunnable(Runnable executorTask) {_		this.runnable = executorTask__	};set,the,runnable,to,schedule,as,executor,task;public,void,set,runnable,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask);1328020251;Create a new ScheduledExecutorTask, with default_one-time execution without delay._@param executorTask the Runnable to schedule;public ScheduledExecutorTask(Runnable executorTask) {_		this.runnable = executorTask__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,without,delay,param,executor,task,the,runnable,to,schedule;public,scheduled,executor,task,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask);1356735495;Create a new ScheduledExecutorTask, with default_one-time execution without delay._@param executorTask the Runnable to schedule;public ScheduledExecutorTask(Runnable executorTask) {_		this.runnable = executorTask__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,without,delay,param,executor,task,the,runnable,to,schedule;public,scheduled,executor,task,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask);1383178438;Create a new ScheduledExecutorTask, with default_one-time execution without delay._@param executorTask the Runnable to schedule;public ScheduledExecutorTask(Runnable executorTask) {_		this.runnable = executorTask__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,without,delay,param,executor,task,the,runnable,to,schedule;public,scheduled,executor,task,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask);1496837955;Create a new ScheduledExecutorTask, with default_one-time execution without delay._@param executorTask the Runnable to schedule;public ScheduledExecutorTask(Runnable executorTask) {_		this.runnable = executorTask__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,without,delay,param,executor,task,the,runnable,to,schedule;public,scheduled,executor,task,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask);1500495740;Create a new ScheduledExecutorTask, with default_one-time execution without delay._@param executorTask the Runnable to schedule;public ScheduledExecutorTask(Runnable executorTask) {_		this.runnable = executorTask__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,without,delay,param,executor,task,the,runnable,to,schedule;public,scheduled,executor,task,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public ScheduledExecutorTask(Runnable executorTask);1533725446;Create a new ScheduledExecutorTask, with default_one-time execution without delay._@param executorTask the Runnable to schedule;public ScheduledExecutorTask(Runnable executorTask) {_		this.runnable = executorTask__	};create,a,new,scheduled,executor,task,with,default,one,time,execution,without,delay,param,executor,task,the,runnable,to,schedule;public,scheduled,executor,task,runnable,executor,task,this,runnable,executor,task
ScheduledExecutorTask -> public Runnable getRunnable();1328020251;Return the Runnable to schedule as executor task.;public Runnable getRunnable() {_		return this.runnable__	};return,the,runnable,to,schedule,as,executor,task;public,runnable,get,runnable,return,this,runnable
ScheduledExecutorTask -> public Runnable getRunnable();1356735495;Return the Runnable to schedule as executor task.;public Runnable getRunnable() {_		return this.runnable__	};return,the,runnable,to,schedule,as,executor,task;public,runnable,get,runnable,return,this,runnable
ScheduledExecutorTask -> public Runnable getRunnable();1383178438;Return the Runnable to schedule as executor task.;public Runnable getRunnable() {_		return this.runnable__	};return,the,runnable,to,schedule,as,executor,task;public,runnable,get,runnable,return,this,runnable
ScheduledExecutorTask -> public Runnable getRunnable();1496837955;Return the Runnable to schedule as executor task.;public Runnable getRunnable() {_		return this.runnable__	};return,the,runnable,to,schedule,as,executor,task;public,runnable,get,runnable,return,this,runnable
ScheduledExecutorTask -> public Runnable getRunnable();1500495740;Return the Runnable to schedule as executor task.;public Runnable getRunnable() {_		Assert.state(this.runnable != null, "No Runnable set")__		return this.runnable__	};return,the,runnable,to,schedule,as,executor,task;public,runnable,get,runnable,assert,state,this,runnable,null,no,runnable,set,return,this,runnable
ScheduledExecutorTask -> public Runnable getRunnable();1533725446;Return the Runnable to schedule as executor task.;public Runnable getRunnable() {_		Assert.state(this.runnable != null, "No Runnable set")__		return this.runnable__	};return,the,runnable,to,schedule,as,executor,task;public,runnable,get,runnable,assert,state,this,runnable,null,no,runnable,set,return,this,runnable
ScheduledExecutorTask -> public void setTimeUnit(TimeUnit timeUnit);1328020251;Specify the time unit for the delay and period values._Default is milliseconds (<code>TimeUnit.MILLISECONDS</code>)._@see java.util.concurrent.TimeUnit#MILLISECONDS_@see java.util.concurrent.TimeUnit#SECONDS;public void setTimeUnit(TimeUnit timeUnit) {_		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__	};specify,the,time,unit,for,the,delay,and,period,values,default,is,milliseconds,code,time,unit,milliseconds,code,see,java,util,concurrent,time,unit,milliseconds,see,java,util,concurrent,time,unit,seconds;public,void,set,time,unit,time,unit,time,unit,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds
ScheduledExecutorTask -> public void setTimeUnit(TimeUnit timeUnit);1356735495;Specify the time unit for the delay and period values._Default is milliseconds ({@code TimeUnit.MILLISECONDS})._@see java.util.concurrent.TimeUnit#MILLISECONDS_@see java.util.concurrent.TimeUnit#SECONDS;public void setTimeUnit(TimeUnit timeUnit) {_		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__	};specify,the,time,unit,for,the,delay,and,period,values,default,is,milliseconds,code,time,unit,milliseconds,see,java,util,concurrent,time,unit,milliseconds,see,java,util,concurrent,time,unit,seconds;public,void,set,time,unit,time,unit,time,unit,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds
ScheduledExecutorTask -> public void setTimeUnit(TimeUnit timeUnit);1383178438;Specify the time unit for the delay and period values._Default is milliseconds ({@code TimeUnit.MILLISECONDS})._@see java.util.concurrent.TimeUnit#MILLISECONDS_@see java.util.concurrent.TimeUnit#SECONDS;public void setTimeUnit(TimeUnit timeUnit) {_		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__	};specify,the,time,unit,for,the,delay,and,period,values,default,is,milliseconds,code,time,unit,milliseconds,see,java,util,concurrent,time,unit,milliseconds,see,java,util,concurrent,time,unit,seconds;public,void,set,time,unit,time,unit,time,unit,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds
ScheduledExecutorTask -> public void setDelay(long delay);1328020251;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling;public,void,set,delay,long,delay,this,delay,delay
ScheduledExecutorTask -> public void setDelay(long delay);1356735495;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling;public,void,set,delay,long,delay,this,delay,delay
ScheduledExecutorTask -> public void setDelay(long delay);1383178438;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling;public,void,set,delay,long,delay,this,delay,delay
ScheduledExecutorTask -> public void setDelay(long delay);1496837955;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling;public,void,set,delay,long,delay,this,delay,delay
ScheduledExecutorTask -> public void setDelay(long delay);1500495740;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling;public,void,set,delay,long,delay,this,delay,delay
ScheduledExecutorTask -> public void setDelay(long delay);1533725446;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling;public,void,set,delay,long,delay,this,delay,delay
ScheduledExecutorTask -> public void setPeriod(long period);1328020251;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of a positive value,_the task will be executed repeatedly, with the given interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate and_fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported,_simply because <code>java.util.concurrent.ScheduledExecutorService</code> itself_does not support it. Hence a value of 0 will be treated as one-time execution__however, that value should never be specified explicitly in the first place!_@see #setFixedRate_@see #isOneTimeTask()_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,is,i,not,i,supported,simply,because,code,java,util,concurrent,scheduled,executor,service,code,itself,does,not,support,it,hence,a,value,of,0,will,be,treated,as,one,time,execution,however,that,value,should,never,be,specified,explicitly,in,the,first,place,see,set,fixed,rate,see,is,one,time,task,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,java,lang,runnable,long,long,java,util,concurrent,time,unit;public,void,set,period,long,period,this,period,period
ScheduledExecutorTask -> public void setPeriod(long period);1356735495;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of a positive value,_the task will be executed repeatedly, with the given interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate and_fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported,_simply because {@code java.util.concurrent.ScheduledExecutorService} itself_does not support it. Hence a value of 0 will be treated as one-time execution__however, that value should never be specified explicitly in the first place!_@see #setFixedRate_@see #isOneTimeTask()_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, java.util.concurrent.TimeUnit);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,is,i,not,i,supported,simply,because,code,java,util,concurrent,scheduled,executor,service,itself,does,not,support,it,hence,a,value,of,0,will,be,treated,as,one,time,execution,however,that,value,should,never,be,specified,explicitly,in,the,first,place,see,set,fixed,rate,see,is,one,time,task,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,runnable,long,long,java,util,concurrent,time,unit;public,void,set,period,long,period,this,period,period
ScheduledExecutorTask -> public void setPeriod(long period);1383178438;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of a positive value,_the task will be executed repeatedly, with the given interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate and_fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported,_simply because {@code java.util.concurrent.ScheduledExecutorService} itself_does not support it. Hence a value of 0 will be treated as one-time execution__however, that value should never be specified explicitly in the first place!_@see #setFixedRate_@see #isOneTimeTask()_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, java.util.concurrent.TimeUnit);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,is,i,not,i,supported,simply,because,code,java,util,concurrent,scheduled,executor,service,itself,does,not,support,it,hence,a,value,of,0,will,be,treated,as,one,time,execution,however,that,value,should,never,be,specified,explicitly,in,the,first,place,see,set,fixed,rate,see,is,one,time,task,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,runnable,long,long,java,util,concurrent,time,unit;public,void,set,period,long,period,this,period,period
ScheduledExecutorTask -> public void setPeriod(long period);1496837955;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of a positive value,_the task will be executed repeatedly, with the given interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate and_fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported,_simply because {@code java.util.concurrent.ScheduledExecutorService} itself_does not support it. Hence a value of 0 will be treated as one-time execution__however, that value should never be specified explicitly in the first place!_@see #setFixedRate_@see #isOneTimeTask()_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, java.util.concurrent.TimeUnit);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,is,i,not,i,supported,simply,because,code,java,util,concurrent,scheduled,executor,service,itself,does,not,support,it,hence,a,value,of,0,will,be,treated,as,one,time,execution,however,that,value,should,never,be,specified,explicitly,in,the,first,place,see,set,fixed,rate,see,is,one,time,task,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,runnable,long,long,java,util,concurrent,time,unit;public,void,set,period,long,period,this,period,period
ScheduledExecutorTask -> public void setPeriod(long period);1500495740;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of a positive value,_the task will be executed repeatedly, with the given interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate and_fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported,_simply because {@code java.util.concurrent.ScheduledExecutorService} itself_does not support it. Hence a value of 0 will be treated as one-time execution__however, that value should never be specified explicitly in the first place!_@see #setFixedRate_@see #isOneTimeTask()_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, java.util.concurrent.TimeUnit);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,is,i,not,i,supported,simply,because,code,java,util,concurrent,scheduled,executor,service,itself,does,not,support,it,hence,a,value,of,0,will,be,treated,as,one,time,execution,however,that,value,should,never,be,specified,explicitly,in,the,first,place,see,set,fixed,rate,see,is,one,time,task,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,runnable,long,long,java,util,concurrent,time,unit;public,void,set,period,long,period,this,period,period
ScheduledExecutorTask -> public void setPeriod(long period);1533725446;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of a positive value,_the task will be executed repeatedly, with the given interval in-between executions._<p>Note that the semantics of the period value vary between fixed-rate and_fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported,_simply because {@code java.util.concurrent.ScheduledExecutorService} itself_does not support it. Hence a value of 0 will be treated as one-time execution__however, that value should never be specified explicitly in the first place!_@see #setFixedRate_@see #isOneTimeTask()_@see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, java.util.concurrent.TimeUnit);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,in,between,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,is,i,not,i,supported,simply,because,code,java,util,concurrent,scheduled,executor,service,itself,does,not,support,it,hence,a,value,of,0,will,be,treated,as,one,time,execution,however,that,value,should,never,be,specified,explicitly,in,the,first,place,see,set,fixed,rate,see,is,one,time,task,see,java,util,concurrent,scheduled,executor,service,schedule,with,fixed,delay,runnable,long,long,java,util,concurrent,time,unit;public,void,set,period,long,period,this,period,period
ScheduledExecutorTask -> public boolean isFixedRate();1328020251;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledExecutorTask -> public boolean isFixedRate();1356735495;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledExecutorTask -> public boolean isFixedRate();1383178438;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledExecutorTask -> public boolean isFixedRate();1496837955;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledExecutorTask -> public boolean isFixedRate();1500495740;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledExecutorTask -> public boolean isFixedRate();1533725446;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
