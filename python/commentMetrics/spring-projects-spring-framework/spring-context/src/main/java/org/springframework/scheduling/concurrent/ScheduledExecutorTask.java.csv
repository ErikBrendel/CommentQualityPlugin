commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the Runnable to schedule as executor task.  */ ;/**  * Set the Runnable to schedule as executor task.  */ public void setRunnable(Runnable executorTask) {     this.runnable = executorTask. }
true;public;0;4;/**  * Return the Runnable to schedule as executor task.  */ ;/**  * Return the Runnable to schedule as executor task.  */ public Runnable getRunnable() {     Assert.state(this.runnable != null, "No Runnable set").     return this.runnable. }
true;public;1;3;/**  * Set the delay before starting the task for the first time,  * in milliseconds. Default is 0, immediately starting the  * task after successful scheduling.  */ ;/**  * Set the delay before starting the task for the first time,  * in milliseconds. Default is 0, immediately starting the  * task after successful scheduling.  */ public void setDelay(long delay) {     this.delay = delay. }
true;public;0;3;/**  * Return the delay before starting the job for the first time.  */ ;/**  * Return the delay before starting the job for the first time.  */ public long getDelay() {     return this.delay. }
true;public;1;3;/**  * Set the period between repeated task executions, in milliseconds.  * <p>Default is -1, leading to one-time execution. In case of a positive value,  * the task will be executed repeatedly, with the given interval in-between executions.  * <p>Note that the semantics of the period value vary between fixed-rate and  * fixed-delay execution.  * <p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported,  * simply because {@code java.util.concurrent.ScheduledExecutorService} itself  * does not support it. Hence a value of 0 will be treated as one-time execution.  * however, that value should never be specified explicitly in the first place!  * @see #setFixedRate  * @see #isOneTimeTask()  * @see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, java.util.concurrent.TimeUnit)  */ ;/**  * Set the period between repeated task executions, in milliseconds.  * <p>Default is -1, leading to one-time execution. In case of a positive value,  * the task will be executed repeatedly, with the given interval in-between executions.  * <p>Note that the semantics of the period value vary between fixed-rate and  * fixed-delay execution.  * <p><b>Note:</b> A period of 0 (for example as fixed delay) is <i>not</i> supported,  * simply because {@code java.util.concurrent.ScheduledExecutorService} itself  * does not support it. Hence a value of 0 will be treated as one-time execution.  * however, that value should never be specified explicitly in the first place!  * @see #setFixedRate  * @see #isOneTimeTask()  * @see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, java.util.concurrent.TimeUnit)  */ public void setPeriod(long period) {     this.period = period. }
true;public;0;3;/**  * Return the period between repeated task executions.  */ ;/**  * Return the period between repeated task executions.  */ public long getPeriod() {     return this.period. }
true;public;0;3;/**  * Is this task only ever going to execute once?  * @return {@code true} if this task is only ever going to execute once  * @see #getPeriod()  */ ;/**  * Is this task only ever going to execute once?  * @return {@code true} if this task is only ever going to execute once  * @see #getPeriod()  */ public boolean isOneTimeTask() {     return (this.period <= 0). }
true;public;1;3;/**  * Specify the time unit for the delay and period values.  * Default is milliseconds ({@code TimeUnit.MILLISECONDS}).  * @see java.util.concurrent.TimeUnit#MILLISECONDS  * @see java.util.concurrent.TimeUnit#SECONDS  */ ;/**  * Specify the time unit for the delay and period values.  * Default is milliseconds ({@code TimeUnit.MILLISECONDS}).  * @see java.util.concurrent.TimeUnit#MILLISECONDS  * @see java.util.concurrent.TimeUnit#SECONDS  */ public void setTimeUnit(@Nullable TimeUnit timeUnit) {     this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS). }
true;public;0;3;/**  * Return the time unit for the delay and period values.  */ ;/**  * Return the time unit for the delay and period values.  */ public TimeUnit getTimeUnit() {     return this.timeUnit. }
true;public;1;3;/**  * Set whether to schedule as fixed-rate execution, rather than  * fixed-delay execution. Default is "false", that is, fixed delay.  * <p>See ScheduledExecutorService javadoc for details on those execution modes.  * @see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)  * @see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)  */ ;/**  * Set whether to schedule as fixed-rate execution, rather than  * fixed-delay execution. Default is "false", that is, fixed delay.  * <p>See ScheduledExecutorService javadoc for details on those execution modes.  * @see java.util.concurrent.ScheduledExecutorService#scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)  * @see java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)  */ public void setFixedRate(boolean fixedRate) {     this.fixedRate = fixedRate. }
true;public;0;3;/**  * Return whether to schedule as fixed-rate execution.  */ ;/**  * Return whether to schedule as fixed-rate execution.  */ public boolean isFixedRate() {     return this.fixedRate. }
