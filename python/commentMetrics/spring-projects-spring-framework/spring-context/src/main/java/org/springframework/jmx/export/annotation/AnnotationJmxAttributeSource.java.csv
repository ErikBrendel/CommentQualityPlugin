commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void setBeanFactory(BeanFactory beanFactory) {     if (beanFactory instanceof ConfigurableBeanFactory) {         this.embeddedValueResolver = new EmbeddedValueResolver((ConfigurableBeanFactory) beanFactory).     } }
false;public;1;16;;@Override @Nullable public org.springframework.jmx.export.metadata.ManagedResource getManagedResource(Class<?> beanClass) throws InvalidMetadataException {     ManagedResource ann = AnnotationUtils.findAnnotation(beanClass, ManagedResource.class).     if (ann == null) {         return null.     }     Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(ManagedResource.class, beanClass).     Class<?> target = (declaringClass != null && !declaringClass.isInterface() ? declaringClass : beanClass).     if (!Modifier.isPublic(target.getModifiers())) {         throw new InvalidMetadataException("@ManagedResource class '" + target.getName() + "' must be public").     }     org.springframework.jmx.export.metadata.ManagedResource managedResource = new org.springframework.jmx.export.metadata.ManagedResource().     AnnotationBeanUtils.copyPropertiesToBean(ann, managedResource, this.embeddedValueResolver).     return managedResource. }
false;public;1;14;;@Override @Nullable public org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(Method method) throws InvalidMetadataException {     ManagedAttribute ann = AnnotationUtils.findAnnotation(method, ManagedAttribute.class).     if (ann == null) {         return null.     }     org.springframework.jmx.export.metadata.ManagedAttribute managedAttribute = new org.springframework.jmx.export.metadata.ManagedAttribute().     AnnotationBeanUtils.copyPropertiesToBean(ann, managedAttribute, "defaultValue").     if (ann.defaultValue().length() > 0) {         managedAttribute.setDefaultValue(ann.defaultValue()).     }     return managedAttribute. }
false;public;1;6;;@Override @Nullable public org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(Method method) throws InvalidMetadataException {     ManagedMetric ann = AnnotationUtils.findAnnotation(method, ManagedMetric.class).     return copyPropertiesToBean(ann, org.springframework.jmx.export.metadata.ManagedMetric.class). }
false;public;1;6;;@Override @Nullable public org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(Method method) throws InvalidMetadataException {     ManagedOperation ann = AnnotationUtils.findAnnotation(method, ManagedOperation.class).     return copyPropertiesToBean(ann, org.springframework.jmx.export.metadata.ManagedOperation.class). }
false;public;1;8;;@Override public org.springframework.jmx.export.metadata.ManagedOperationParameter[] getManagedOperationParameters(Method method) throws InvalidMetadataException {     Set<ManagedOperationParameter> anns = AnnotationUtils.getRepeatableAnnotations(method, ManagedOperationParameter.class, ManagedOperationParameters.class).     return copyPropertiesToBeanArray(anns, org.springframework.jmx.export.metadata.ManagedOperationParameter.class). }
false;public;1;8;;@Override public org.springframework.jmx.export.metadata.ManagedNotification[] getManagedNotifications(Class<?> clazz) throws InvalidMetadataException {     Set<ManagedNotification> anns = AnnotationUtils.getRepeatableAnnotations(clazz, ManagedNotification.class, ManagedNotifications.class).     return copyPropertiesToBeanArray(anns, org.springframework.jmx.export.metadata.ManagedNotification.class). }
false;private,static;2;9;;@SuppressWarnings("unchecked") private static <T> T[] copyPropertiesToBeanArray(Collection<? extends Annotation> anns, Class<T> beanClass) {     T[] beans = (T[]) Array.newInstance(beanClass, anns.size()).     int i = 0.     for (Annotation ann : anns) {         beans[i++] = copyPropertiesToBean(ann, beanClass).     }     return beans. }
false;private,static;2;9;;@Nullable private static <T> T copyPropertiesToBean(@Nullable Annotation ann, Class<T> beanClass) {     if (ann == null) {         return null.     }     T bean = BeanUtils.instantiateClass(beanClass).     AnnotationBeanUtils.copyPropertiesToBean(ann, bean).     return bean. }
