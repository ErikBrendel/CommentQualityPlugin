commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;5;;@Override @Nullable public final Object getTarget() {     return this.target. }
true;public,final;0;9;/**  * Returns the DirectFieldAccessor that this instance uses.  * Creates a new one if none existed before.  * @see #createDirectFieldAccessor()  */ ;/**  * Returns the DirectFieldAccessor that this instance uses.  * Creates a new one if none existed before.  * @see #createDirectFieldAccessor()  */ @Override public final ConfigurablePropertyAccessor getPropertyAccessor() {     if (this.directFieldAccessor == null) {         this.directFieldAccessor = createDirectFieldAccessor().         this.directFieldAccessor.setExtractOldValueForEditor(true).         this.directFieldAccessor.setAutoGrowNestedPaths(this.autoGrowNestedPaths).     }     return this.directFieldAccessor. }
true;protected;0;6;/**  * Create a new DirectFieldAccessor for the underlying target object.  * @see #getTarget()  */ ;/**  * Create a new DirectFieldAccessor for the underlying target object.  * @see #getTarget()  */ protected ConfigurablePropertyAccessor createDirectFieldAccessor() {     if (this.target == null) {         throw new IllegalStateException("Cannot access fields on null target instance '" + getObjectName() + "'").     }     return PropertyAccessorFactory.forDirectFieldAccess(this.target). }
