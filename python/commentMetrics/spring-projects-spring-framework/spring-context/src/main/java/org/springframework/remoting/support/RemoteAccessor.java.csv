# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteAccessor -> public Class<?> getServiceInterface();1385412762;Return the interface of the service to access.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
RemoteAccessor -> public Class<?> getServiceInterface();1497970235;Return the interface of the service to access.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
RemoteAccessor -> public Class getServiceInterface();1328020251;Return the interface of the service to access.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
RemoteAccessor -> public Class getServiceInterface();1356735495;Return the interface of the service to access.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
RemoteAccessor -> public void setServiceInterface(Class serviceInterface);1328020251;Set the interface of the service to access._The interface must be suitable for the particular service and remoting strategy._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed proxy.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,strategy,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,proxy;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
RemoteAccessor -> public void setServiceInterface(Class serviceInterface);1356735495;Set the interface of the service to access._The interface must be suitable for the particular service and remoting strategy._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed proxy.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,strategy,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,proxy;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
RemoteAccessor -> public void setServiceInterface(Class<?> serviceInterface);1385412762;Set the interface of the service to access._The interface must be suitable for the particular service and remoting strategy._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed proxy.;public void setServiceInterface(Class<?> serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,strategy,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,proxy;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
RemoteAccessor -> public void setServiceInterface(Class<?> serviceInterface);1497970235;Set the interface of the service to access._The interface must be suitable for the particular service and remoting strategy._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed proxy.;public void setServiceInterface(Class<?> serviceInterface) {_		Assert.notNull(serviceInterface, "'serviceInterface' must not be null")__		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface")__		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,strategy,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,proxy;public,void,set,service,interface,class,service,interface,assert,not,null,service,interface,service,interface,must,not,be,null,assert,is,true,service,interface,is,interface,service,interface,must,be,an,interface,this,service,interface,service,interface
