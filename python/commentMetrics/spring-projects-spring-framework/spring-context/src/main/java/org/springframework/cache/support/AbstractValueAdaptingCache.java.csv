commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return whether {@code null} values are allowed in this cache.  */ ;/**  * Return whether {@code null} values are allowed in this cache.  */ public final boolean isAllowNullValues() {     return this.allowNullValues. }
false;public;1;6;;@Override @Nullable public ValueWrapper get(Object key) {     Object value = lookup(key).     return toValueWrapper(value). }
false;public;2;11;;@Override @SuppressWarnings("unchecked") @Nullable public <T> T get(Object key, @Nullable Class<T> type) {     Object value = fromStoreValue(lookup(key)).     if (value != null && type != null && !type.isInstance(value)) {         throw new IllegalStateException("Cached value is not of required type [" + type.getName() + "]: " + value).     }     return (T) value. }
true;protected,abstract;1;2;/**  * Perform an actual lookup in the underlying store.  * @param key the key whose associated value is to be returned  * @return the raw store value for the key, or {@code null} if none  */ ;/**  * Perform an actual lookup in the underlying store.  * @param key the key whose associated value is to be returned  * @return the raw store value for the key, or {@code null} if none  */ @Nullable protected abstract Object lookup(Object key).
true;protected;1;7;/**  * Convert the given value from the internal store to a user value  * returned from the get method (adapting {@code null}).  * @param storeValue the store value  * @return the value to return to the user  */ ;/**  * Convert the given value from the internal store to a user value  * returned from the get method (adapting {@code null}).  * @param storeValue the store value  * @return the value to return to the user  */ @Nullable protected Object fromStoreValue(@Nullable Object storeValue) {     if (this.allowNullValues && storeValue == NullValue.INSTANCE) {         return null.     }     return storeValue. }
true;protected;1;10;/**  * Convert the given user value, as passed into the put method,  * to a value in the internal store (adapting {@code null}).  * @param userValue the given user value  * @return the value to store  */ ;/**  * Convert the given user value, as passed into the put method,  * to a value in the internal store (adapting {@code null}).  * @param userValue the given user value  * @return the value to store  */ protected Object toStoreValue(@Nullable Object userValue) {     if (userValue == null) {         if (this.allowNullValues) {             return NullValue.INSTANCE.         }         throw new IllegalArgumentException("Cache '" + getName() + "' is configured to not allow null values but null was provided").     }     return userValue. }
true;protected;1;4;/**  * Wrap the given store value with a {@link SimpleValueWrapper}, also going  * through {@link #fromStoreValue} conversion. Useful for {@link #get(Object)}  * and {@link #putIfAbsent(Object, Object)} implementations.  * @param storeValue the original value  * @return the wrapped value  */ ;/**  * Wrap the given store value with a {@link SimpleValueWrapper}, also going  * through {@link #fromStoreValue} conversion. Useful for {@link #get(Object)}  * and {@link #putIfAbsent(Object, Object)} implementations.  * @param storeValue the original value  * @return the wrapped value  */ @Nullable protected Cache.ValueWrapper toValueWrapper(@Nullable Object storeValue) {     return (storeValue != null ? new SimpleValueWrapper(fromStoreValue(storeValue)) : null). }
