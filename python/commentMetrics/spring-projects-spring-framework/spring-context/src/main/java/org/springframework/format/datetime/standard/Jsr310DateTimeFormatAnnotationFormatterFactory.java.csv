commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final Set<Class<?>> getFieldTypes() {     return FIELD_TYPES. }
false;public;2;23;;@Override public Printer<?> getPrinter(DateTimeFormat annotation, Class<?> fieldType) {     DateTimeFormatter formatter = getFormatter(annotation, fieldType).     // Efficient ISO_LOCAL_* variants for printing since they are twice as fast...     if (formatter == DateTimeFormatter.ISO_DATE) {         if (isLocal(fieldType)) {             formatter = DateTimeFormatter.ISO_LOCAL_DATE.         }     } else if (formatter == DateTimeFormatter.ISO_TIME) {         if (isLocal(fieldType)) {             formatter = DateTimeFormatter.ISO_LOCAL_TIME.         }     } else if (formatter == DateTimeFormatter.ISO_DATE_TIME) {         if (isLocal(fieldType)) {             formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME.         }     }     return new TemporalAccessorPrinter(formatter). }
false;public;2;6;;@Override @SuppressWarnings("unchecked") public Parser<?> getParser(DateTimeFormat annotation, Class<?> fieldType) {     DateTimeFormatter formatter = getFormatter(annotation, fieldType).     return new TemporalAccessorParser((Class<? extends TemporalAccessor>) fieldType, formatter). }
true;protected;2;13;/**  * Factory method used to create a {@link DateTimeFormatter}.  * @param annotation the format annotation for the field  * @param fieldType the declared type of the field  * @return a {@link DateTimeFormatter} instance  */ ;/**  * Factory method used to create a {@link DateTimeFormatter}.  * @param annotation the format annotation for the field  * @param fieldType the declared type of the field  * @return a {@link DateTimeFormatter} instance  */ protected DateTimeFormatter getFormatter(DateTimeFormat annotation, Class<?> fieldType) {     DateTimeFormatterFactory factory = new DateTimeFormatterFactory().     String style = resolveEmbeddedValue(annotation.style()).     if (StringUtils.hasLength(style)) {         factory.setStylePattern(style).     }     factory.setIso(annotation.iso()).     String pattern = resolveEmbeddedValue(annotation.pattern()).     if (StringUtils.hasLength(pattern)) {         factory.setPattern(pattern).     }     return factory.createDateTimeFormatter(). }
false;private;1;3;;private boolean isLocal(Class<?> fieldType) {     return fieldType.getSimpleName().startsWith("Local"). }
