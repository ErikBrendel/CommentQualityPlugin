commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link CacheErrorHandler} instance to use to handle errors  * thrown by the cache provider. By default, a {@link SimpleCacheErrorHandler}  * is used who throws any exception as is.  */ ;/**  * Set the {@link CacheErrorHandler} instance to use to handle errors  * thrown by the cache provider. By default, a {@link SimpleCacheErrorHandler}  * is used who throws any exception as is.  */ public void setErrorHandler(CacheErrorHandler errorHandler) {     this.errorHandler = SingletonSupplier.of(errorHandler). }
true;public;0;3;/**  * Return the {@link CacheErrorHandler} to use.  */ ;/**  * Return the {@link CacheErrorHandler} to use.  */ public CacheErrorHandler getErrorHandler() {     return this.errorHandler.obtain(). }
true;protected;2;10;/**  * Execute {@link Cache#get(Object)} on the specified {@link Cache} and  * invoke the error handler if an exception occurs. Return {@code null}  * if the handler does not throw any exception, which simulates a cache  * miss in case of error.  * @see Cache#get(Object)  */ ;/**  * Execute {@link Cache#get(Object)} on the specified {@link Cache} and  * invoke the error handler if an exception occurs. Return {@code null}  * if the handler does not throw any exception, which simulates a cache  * miss in case of error.  * @see Cache#get(Object)  */ @Nullable protected Cache.ValueWrapper doGet(Cache cache, Object key) {     try {         return cache.get(key).     } catch (RuntimeException ex) {         getErrorHandler().handleCacheGetError(ex, cache, key).         // If the exception is handled, return a cache miss         return null.     } }
true;protected;3;8;/**  * Execute {@link Cache#put(Object, Object)} on the specified {@link Cache}  * and invoke the error handler if an exception occurs.  */ ;/**  * Execute {@link Cache#put(Object, Object)} on the specified {@link Cache}  * and invoke the error handler if an exception occurs.  */ protected void doPut(Cache cache, Object key, @Nullable Object result) {     try {         cache.put(key, result).     } catch (RuntimeException ex) {         getErrorHandler().handleCachePutError(ex, cache, key, result).     } }
true;protected;2;8;/**  * Execute {@link Cache#evict(Object)} on the specified {@link Cache} and  * invoke the error handler if an exception occurs.  */ ;/**  * Execute {@link Cache#evict(Object)} on the specified {@link Cache} and  * invoke the error handler if an exception occurs.  */ protected void doEvict(Cache cache, Object key) {     try {         cache.evict(key).     } catch (RuntimeException ex) {         getErrorHandler().handleCacheEvictError(ex, cache, key).     } }
true;protected;1;8;/**  * Execute {@link Cache#clear()} on the specified {@link Cache} and  * invoke the error handler if an exception occurs.  */ ;/**  * Execute {@link Cache#clear()} on the specified {@link Cache} and  * invoke the error handler if an exception occurs.  */ protected void doClear(Cache cache) {     try {         cache.clear().     } catch (RuntimeException ex) {         getErrorHandler().handleCacheClearError(ex, cache).     } }
