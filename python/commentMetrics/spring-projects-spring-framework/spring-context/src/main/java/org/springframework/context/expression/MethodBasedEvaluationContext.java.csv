# id;timestamp;commentText;codeText;commentWords;codeWords
MethodBasedEvaluationContext -> protected void lazyLoadArguments();1423555982;Load the param information only when needed.;protected void lazyLoadArguments() {_		_		if (ObjectUtils.isEmpty(this.args)) {_			return__		}__		_		for (int i = 0_ i < this.args.length_ i++) {_			setVariable("a" + i, this.args[i])__			setVariable("p" + i, this.args[i])__		}__		String[] parameterNames = this.paramDiscoverer.getParameterNames(this.method)__		_		if (parameterNames != null) {_			for (int i = 0_ i < parameterNames.length_ i++) {_				setVariable(parameterNames[i], this.args[i])__			}_		}_	};load,the,param,information,only,when,needed;protected,void,lazy,load,arguments,if,object,utils,is,empty,this,args,return,for,int,i,0,i,this,args,length,i,set,variable,a,i,this,args,i,set,variable,p,i,this,args,i,string,parameter,names,this,param,discoverer,get,parameter,names,this,method,if,parameter,names,null,for,int,i,0,i,parameter,names,length,i,set,variable,parameter,names,i,this,args,i
MethodBasedEvaluationContext -> protected void lazyLoadArguments();1458944925;Load the param information only when needed.;protected void lazyLoadArguments() {_		_		if (ObjectUtils.isEmpty(this.args)) {_			return__		}__		_		for (int i = 0_ i < this.args.length_ i++) {_			setVariable("a" + i, this.args[i])__			setVariable("p" + i, this.args[i])__		}__		String[] parameterNames = this.paramDiscoverer.getParameterNames(this.method)__		_		if (parameterNames != null) {_			for (int i = 0_ i < parameterNames.length_ i++) {_				setVariable(parameterNames[i], this.args[i])__			}_		}_	};load,the,param,information,only,when,needed;protected,void,lazy,load,arguments,if,object,utils,is,empty,this,args,return,for,int,i,0,i,this,args,length,i,set,variable,a,i,this,args,i,set,variable,p,i,this,args,i,string,parameter,names,this,param,discoverer,get,parameter,names,this,method,if,parameter,names,null,for,int,i,0,i,parameter,names,length,i,set,variable,parameter,names,i,this,args,i
MethodBasedEvaluationContext -> protected void lazyLoadArguments();1468486701;Load the param information only when needed.;protected void lazyLoadArguments() {_		_		if (ObjectUtils.isEmpty(this.args)) {_			return__		}__		_		for (int i = 0_ i < this.args.length_ i++) {_			setVariable("a" + i, this.args[i])__			setVariable("p" + i, this.args[i])__		}__		String[] parameterNames = this.paramDiscoverer.getParameterNames(this.method)__		_		if (parameterNames != null) {_			for (int i = 0_ i < args.length_ i++) {_				setVariable(parameterNames[i], this.args[i])__			}_		}_	};load,the,param,information,only,when,needed;protected,void,lazy,load,arguments,if,object,utils,is,empty,this,args,return,for,int,i,0,i,this,args,length,i,set,variable,a,i,this,args,i,set,variable,p,i,this,args,i,string,parameter,names,this,param,discoverer,get,parameter,names,this,method,if,parameter,names,null,for,int,i,0,i,args,length,i,set,variable,parameter,names,i,this,args,i
MethodBasedEvaluationContext -> protected void lazyLoadArguments();1468487526;Load the param information only when needed.;protected void lazyLoadArguments() {_		_		if (ObjectUtils.isEmpty(this.args)) {_			return__		}__		_		for (int i = 0_ i < this.args.length_ i++) {_			setVariable("a" + i, this.args[i])__			setVariable("p" + i, this.args[i])__		}__		String[] parameterNames = this.paramDiscoverer.getParameterNames(this.method)__		_		if (parameterNames != null) {_			for (int i = 0_ i < this.args.length_ i++) {_				setVariable(parameterNames[i], this.args[i])__			}_		}_	};load,the,param,information,only,when,needed;protected,void,lazy,load,arguments,if,object,utils,is,empty,this,args,return,for,int,i,0,i,this,args,length,i,set,variable,a,i,this,args,i,set,variable,p,i,this,args,i,string,parameter,names,this,param,discoverer,get,parameter,names,this,method,if,parameter,names,null,for,int,i,0,i,this,args,length,i,set,variable,parameter,names,i,this,args,i
MethodBasedEvaluationContext -> protected void lazyLoadArguments();1470770678;Load the param information only when needed.;protected void lazyLoadArguments() {_		_		if (ObjectUtils.isEmpty(this.arguments)) {_			return__		}__		_		String[] paramNames = this.parameterNameDiscoverer.getParameterNames(this.method)__		int paramCount = (paramNames != null ? paramNames.length : this.method.getParameterCount())__		int argsCount = this.arguments.length___		for (int i = 0_ i < paramCount_ i++) {_			Object value = null__			if (argsCount > paramCount && i == paramCount - 1) {_				_				value = Arrays.copyOfRange(this.arguments, i, argsCount)__			}_			else if (argsCount > i) {_				_				value = this.arguments[i]__			}_			setVariable("a" + i, value)__			setVariable("p" + i, value)__			if (paramNames != null) {_				setVariable(paramNames[i], value)__			}_		}_	};load,the,param,information,only,when,needed;protected,void,lazy,load,arguments,if,object,utils,is,empty,this,arguments,return,string,param,names,this,parameter,name,discoverer,get,parameter,names,this,method,int,param,count,param,names,null,param,names,length,this,method,get,parameter,count,int,args,count,this,arguments,length,for,int,i,0,i,param,count,i,object,value,null,if,args,count,param,count,i,param,count,1,value,arrays,copy,of,range,this,arguments,i,args,count,else,if,args,count,i,value,this,arguments,i,set,variable,a,i,value,set,variable,p,i,value,if,param,names,null,set,variable,param,names,i,value
MethodBasedEvaluationContext -> protected void lazyLoadArguments();1502974979;Load the param information only when needed.;protected void lazyLoadArguments() {_		_		if (ObjectUtils.isEmpty(this.arguments)) {_			return__		}__		_		String[] paramNames = this.parameterNameDiscoverer.getParameterNames(this.method)__		int paramCount = (paramNames != null ? paramNames.length : this.method.getParameterCount())__		int argsCount = this.arguments.length___		for (int i = 0_ i < paramCount_ i++) {_			Object value = null__			if (argsCount > paramCount && i == paramCount - 1) {_				_				value = Arrays.copyOfRange(this.arguments, i, argsCount)__			}_			else if (argsCount > i) {_				_				value = this.arguments[i]__			}_			setVariable("a" + i, value)__			setVariable("p" + i, value)__			if (paramNames != null) {_				setVariable(paramNames[i], value)__			}_		}_	};load,the,param,information,only,when,needed;protected,void,lazy,load,arguments,if,object,utils,is,empty,this,arguments,return,string,param,names,this,parameter,name,discoverer,get,parameter,names,this,method,int,param,count,param,names,null,param,names,length,this,method,get,parameter,count,int,args,count,this,arguments,length,for,int,i,0,i,param,count,i,object,value,null,if,args,count,param,count,i,param,count,1,value,arrays,copy,of,range,this,arguments,i,args,count,else,if,args,count,i,value,this,arguments,i,set,variable,a,i,value,set,variable,p,i,value,if,param,names,null,set,variable,param,names,i,value
MethodBasedEvaluationContext -> protected void lazyLoadArguments();1544648177;Load the param information only when needed.;protected void lazyLoadArguments() {_		_		if (ObjectUtils.isEmpty(this.arguments)) {_			return__		}__		_		String[] paramNames = this.parameterNameDiscoverer.getParameterNames(this.method)__		int paramCount = (paramNames != null ? paramNames.length : this.method.getParameterCount())__		int argsCount = this.arguments.length___		for (int i = 0_ i < paramCount_ i++) {_			Object value = null__			if (argsCount > paramCount && i == paramCount - 1) {_				_				value = Arrays.copyOfRange(this.arguments, i, argsCount)__			}_			else if (argsCount > i) {_				_				value = this.arguments[i]__			}_			setVariable("a" + i, value)__			setVariable("p" + i, value)__			if (paramNames != null && paramNames[i] != null) {_				setVariable(paramNames[i], value)__			}_		}_	};load,the,param,information,only,when,needed;protected,void,lazy,load,arguments,if,object,utils,is,empty,this,arguments,return,string,param,names,this,parameter,name,discoverer,get,parameter,names,this,method,int,param,count,param,names,null,param,names,length,this,method,get,parameter,count,int,args,count,this,arguments,length,for,int,i,0,i,param,count,i,object,value,null,if,args,count,param,count,i,param,count,1,value,arrays,copy,of,range,this,arguments,i,args,count,else,if,args,count,i,value,this,arguments,i,set,variable,a,i,value,set,variable,p,i,value,if,param,names,null,param,names,i,null,set,variable,param,names,i,value
