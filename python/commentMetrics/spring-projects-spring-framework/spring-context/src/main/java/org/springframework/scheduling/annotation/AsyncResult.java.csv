commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean cancel(boolean mayInterruptIfRunning) {     return false. }
false;public;0;4;;@Override public boolean isCancelled() {     return false. }
false;public;0;4;;@Override public boolean isDone() {     return true. }
false;public;0;10;;@Override @Nullable public V get() throws ExecutionException {     if (this.executionException != null) {         throw (this.executionException instanceof ExecutionException ? (ExecutionException) this.executionException : new ExecutionException(this.executionException)).     }     return this.value. }
false;public;2;5;;@Override @Nullable public V get(long timeout, TimeUnit unit) throws ExecutionException {     return get(). }
false;public;1;4;;@Override public void addCallback(ListenableFutureCallback<? super V> callback) {     addCallback(callback, callback). }
false;public;2;14;;@Override public void addCallback(SuccessCallback<? super V> successCallback, FailureCallback failureCallback) {     try {         if (this.executionException != null) {             failureCallback.onFailure(exposedException(this.executionException)).         } else {             successCallback.onSuccess(this.value).         }     } catch (Throwable ex) {     // Ignore     } }
false;public;0;11;;@Override public CompletableFuture<V> completable() {     if (this.executionException != null) {         CompletableFuture<V> completable = new CompletableFuture<>().         completable.completeExceptionally(exposedException(this.executionException)).         return completable.     } else {         return CompletableFuture.completedFuture(this.value).     } }
true;public,static;1;3;/**  * Create a new async result which exposes the given value from {@link Future#get()}.  * @param value the value to expose  * @since 4.2  * @see Future#get()  */ ;/**  * Create a new async result which exposes the given value from {@link Future#get()}.  * @param value the value to expose  * @since 4.2  * @see Future#get()  */ public static <V> ListenableFuture<V> forValue(V value) {     return new AsyncResult<>(value, null). }
true;public,static;1;3;/**  * Create a new async result which exposes the given exception as an  * {@link ExecutionException} from {@link Future#get()}.  * @param ex the exception to expose (either an pre-built {@link ExecutionException}  * or a cause to be wrapped in an {@link ExecutionException})  * @since 4.2  * @see ExecutionException  */ ;/**  * Create a new async result which exposes the given exception as an  * {@link ExecutionException} from {@link Future#get()}.  * @param ex the exception to expose (either an pre-built {@link ExecutionException}  * or a cause to be wrapped in an {@link ExecutionException})  * @since 4.2  * @see ExecutionException  */ public static <V> ListenableFuture<V> forExecutionException(Throwable ex) {     return new AsyncResult<>(null, ex). }
true;private,static;1;9;/**  * Determine the exposed exception: either the cause of a given  * {@link ExecutionException}, or the original exception as-is.  * @param original the original as given to {@link #forExecutionException}  * @return the exposed exception  */ ;/**  * Determine the exposed exception: either the cause of a given  * {@link ExecutionException}, or the original exception as-is.  * @param original the original as given to {@link #forExecutionException}  * @return the exposed exception  */ private static Throwable exposedException(Throwable original) {     if (original instanceof ExecutionException) {         Throwable cause = original.getCause().         if (cause != null) {             return cause.         }     }     return original. }
