commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the name of the bound root object.  */ ;/**  * Return the name of the bound root object.  */ String getObjectName().
true;;1;1;/**  * Allow context to be changed so that standard validators can validate  * subtrees. Reject calls prepend the given path to the field names.  * <p>For example, an address validator could validate the subobject  * "address" of a customer object.  * @param nestedPath nested path within this object,  * e.g. "address" (defaults to "", {@code null} is also acceptable).  * Can end with a dot: both "address" and "address." are valid.  */ ;/**  * Allow context to be changed so that standard validators can validate  * subtrees. Reject calls prepend the given path to the field names.  * <p>For example, an address validator could validate the subobject  * "address" of a customer object.  * @param nestedPath nested path within this object,  * e.g. "address" (defaults to "", {@code null} is also acceptable).  * Can end with a dot: both "address" and "address." are valid.  */ void setNestedPath(String nestedPath).
true;;0;1;/**  * Return the current nested path of this {@link Errors} object.  * <p>Returns a nested path with a dot, i.e. "address.", for easy  * building of concatenated paths. Default is an empty String.  */ ;/**  * Return the current nested path of this {@link Errors} object.  * <p>Returns a nested path with a dot, i.e. "address.", for easy  * building of concatenated paths. Default is an empty String.  */ String getNestedPath().
true;;1;1;/**  * Push the given sub path onto the nested path stack.  * <p>A {@link #popNestedPath()} call will reset the original  * nested path before the corresponding  * {@code pushNestedPath(String)} call.  * <p>Using the nested path stack allows to set temporary nested paths  * for subobjects without having to worry about a temporary path holder.  * <p>For example: current path "spouse.", pushNestedPath("child") ->  * result path "spouse.child.". popNestedPath() -> "spouse." again.  * @param subPath the sub path to push onto the nested path stack  * @see #popNestedPath  */ ;/**  * Push the given sub path onto the nested path stack.  * <p>A {@link #popNestedPath()} call will reset the original  * nested path before the corresponding  * {@code pushNestedPath(String)} call.  * <p>Using the nested path stack allows to set temporary nested paths  * for subobjects without having to worry about a temporary path holder.  * <p>For example: current path "spouse.", pushNestedPath("child") ->  * result path "spouse.child.". popNestedPath() -> "spouse." again.  * @param subPath the sub path to push onto the nested path stack  * @see #popNestedPath  */ void pushNestedPath(String subPath).
true;;0;1;/**  * Pop the former nested path from the nested path stack.  * @throws IllegalStateException if there is no former nested path on the stack  * @see #pushNestedPath  */ ;/**  * Pop the former nested path from the nested path stack.  * @throws IllegalStateException if there is no former nested path on the stack  * @see #pushNestedPath  */ void popNestedPath() throws IllegalStateException.
true;;1;1;/**  * Register a global error for the entire target object,  * using the given error description.  * @param errorCode error code, interpretable as a message key  */ ;/**  * Register a global error for the entire target object,  * using the given error description.  * @param errorCode error code, interpretable as a message key  */ void reject(String errorCode).
true;;2;1;/**  * Register a global error for the entire target object,  * using the given error description.  * @param errorCode error code, interpretable as a message key  * @param defaultMessage fallback default message  */ ;/**  * Register a global error for the entire target object,  * using the given error description.  * @param errorCode error code, interpretable as a message key  * @param defaultMessage fallback default message  */ void reject(String errorCode, String defaultMessage).
true;;3;1;/**  * Register a global error for the entire target object,  * using the given error description.  * @param errorCode error code, interpretable as a message key  * @param errorArgs error arguments, for argument binding via MessageFormat  * (can be {@code null})  * @param defaultMessage fallback default message  */ ;/**  * Register a global error for the entire target object,  * using the given error description.  * @param errorCode error code, interpretable as a message key  * @param errorArgs error arguments, for argument binding via MessageFormat  * (can be {@code null})  * @param defaultMessage fallback default message  */ void reject(String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage).
true;;2;1;/**  * Register a field error for the specified field of the current object  * (respecting the current nested path, if any), using the given error  * description.  * <p>The field name may be {@code null} or empty String to indicate  * the current object itself rather than a field of it. This may result  * in a corresponding field error within the nested object graph or a  * global error if the current object is the top object.  * @param field the field name (may be {@code null} or empty String)  * @param errorCode error code, interpretable as a message key  * @see #getNestedPath()  */ ;/**  * Register a field error for the specified field of the current object  * (respecting the current nested path, if any), using the given error  * description.  * <p>The field name may be {@code null} or empty String to indicate  * the current object itself rather than a field of it. This may result  * in a corresponding field error within the nested object graph or a  * global error if the current object is the top object.  * @param field the field name (may be {@code null} or empty String)  * @param errorCode error code, interpretable as a message key  * @see #getNestedPath()  */ void rejectValue(@Nullable String field, String errorCode).
true;;3;1;/**  * Register a field error for the specified field of the current object  * (respecting the current nested path, if any), using the given error  * description.  * <p>The field name may be {@code null} or empty String to indicate  * the current object itself rather than a field of it. This may result  * in a corresponding field error within the nested object graph or a  * global error if the current object is the top object.  * @param field the field name (may be {@code null} or empty String)  * @param errorCode error code, interpretable as a message key  * @param defaultMessage fallback default message  * @see #getNestedPath()  */ ;/**  * Register a field error for the specified field of the current object  * (respecting the current nested path, if any), using the given error  * description.  * <p>The field name may be {@code null} or empty String to indicate  * the current object itself rather than a field of it. This may result  * in a corresponding field error within the nested object graph or a  * global error if the current object is the top object.  * @param field the field name (may be {@code null} or empty String)  * @param errorCode error code, interpretable as a message key  * @param defaultMessage fallback default message  * @see #getNestedPath()  */ void rejectValue(@Nullable String field, String errorCode, String defaultMessage).
true;;4;2;/**  * Register a field error for the specified field of the current object  * (respecting the current nested path, if any), using the given error  * description.  * <p>The field name may be {@code null} or empty String to indicate  * the current object itself rather than a field of it. This may result  * in a corresponding field error within the nested object graph or a  * global error if the current object is the top object.  * @param field the field name (may be {@code null} or empty String)  * @param errorCode error code, interpretable as a message key  * @param errorArgs error arguments, for argument binding via MessageFormat  * (can be {@code null})  * @param defaultMessage fallback default message  * @see #getNestedPath()  */ ;/**  * Register a field error for the specified field of the current object  * (respecting the current nested path, if any), using the given error  * description.  * <p>The field name may be {@code null} or empty String to indicate  * the current object itself rather than a field of it. This may result  * in a corresponding field error within the nested object graph or a  * global error if the current object is the top object.  * @param field the field name (may be {@code null} or empty String)  * @param errorCode error code, interpretable as a message key  * @param errorArgs error arguments, for argument binding via MessageFormat  * (can be {@code null})  * @param defaultMessage fallback default message  * @see #getNestedPath()  */ void rejectValue(@Nullable String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage).
true;;1;1;/**  * Add all errors from the given {@code Errors} instance to this  * {@code Errors} instance.  * <p>This is a convenience method to avoid repeated {@code reject(..)}  * calls for merging an {@code Errors} instance into another  * {@code Errors} instance.  * <p>Note that the passed-in {@code Errors} instance is supposed  * to refer to the same target object, or at least contain compatible errors  * that apply to the target object of this {@code Errors} instance.  * @param errors the {@code Errors} instance to merge in  */ ;/**  * Add all errors from the given {@code Errors} instance to this  * {@code Errors} instance.  * <p>This is a convenience method to avoid repeated {@code reject(..)}  * calls for merging an {@code Errors} instance into another  * {@code Errors} instance.  * <p>Note that the passed-in {@code Errors} instance is supposed  * to refer to the same target object, or at least contain compatible errors  * that apply to the target object of this {@code Errors} instance.  * @param errors the {@code Errors} instance to merge in  */ void addAllErrors(Errors errors).
true;;0;1;/**  * Return if there were any errors.  */ ;/**  * Return if there were any errors.  */ boolean hasErrors().
true;;0;1;/**  * Return the total number of errors.  */ ;/**  * Return the total number of errors.  */ int getErrorCount().
true;;0;1;/**  * Get all errors, both global and field ones.  * @return a list of {@link ObjectError} instances  */ ;/**  * Get all errors, both global and field ones.  * @return a list of {@link ObjectError} instances  */ List<ObjectError> getAllErrors().
true;;0;1;/**  * Are there any global errors?  * @return {@code true} if there are any global errors  * @see #hasFieldErrors()  */ ;/**  * Are there any global errors?  * @return {@code true} if there are any global errors  * @see #hasFieldErrors()  */ boolean hasGlobalErrors().
true;;0;1;/**  * Return the number of global errors.  * @return the number of global errors  * @see #getFieldErrorCount()  */ ;/**  * Return the number of global errors.  * @return the number of global errors  * @see #getFieldErrorCount()  */ int getGlobalErrorCount().
true;;0;1;/**  * Get all global errors.  * @return a list of {@link ObjectError} instances  */ ;/**  * Get all global errors.  * @return a list of {@link ObjectError} instances  */ List<ObjectError> getGlobalErrors().
true;;0;2;/**  * Get the <i>first</i> global error, if any.  * @return the global error, or {@code null}  */ ;/**  * Get the <i>first</i> global error, if any.  * @return the global error, or {@code null}  */ @Nullable ObjectError getGlobalError().
true;;0;1;/**  * Are there any field errors?  * @return {@code true} if there are any errors associated with a field  * @see #hasGlobalErrors()  */ ;/**  * Are there any field errors?  * @return {@code true} if there are any errors associated with a field  * @see #hasGlobalErrors()  */ boolean hasFieldErrors().
true;;0;1;/**  * Return the number of errors associated with a field.  * @return the number of errors associated with a field  * @see #getGlobalErrorCount()  */ ;/**  * Return the number of errors associated with a field.  * @return the number of errors associated with a field  * @see #getGlobalErrorCount()  */ int getFieldErrorCount().
true;;0;1;/**  * Get all errors associated with a field.  * @return a List of {@link FieldError} instances  */ ;/**  * Get all errors associated with a field.  * @return a List of {@link FieldError} instances  */ List<FieldError> getFieldErrors().
true;;0;2;/**  * Get the <i>first</i> error associated with a field, if any.  * @return the field-specific error, or {@code null}  */ ;/**  * Get the <i>first</i> error associated with a field, if any.  * @return the field-specific error, or {@code null}  */ @Nullable FieldError getFieldError().
true;;1;1;/**  * Are there any errors associated with the given field?  * @param field the field name  * @return {@code true} if there were any errors associated with the given field  */ ;/**  * Are there any errors associated with the given field?  * @param field the field name  * @return {@code true} if there were any errors associated with the given field  */ boolean hasFieldErrors(String field).
true;;1;1;/**  * Return the number of errors associated with the given field.  * @param field the field name  * @return the number of errors associated with the given field  */ ;/**  * Return the number of errors associated with the given field.  * @param field the field name  * @return the number of errors associated with the given field  */ int getFieldErrorCount(String field).
true;;1;1;/**  * Get all errors associated with the given field.  * <p>Implementations should support not only full field names like  * "name" but also pattern matches like "na*" or "address.*".  * @param field the field name  * @return a List of {@link FieldError} instances  */ ;/**  * Get all errors associated with the given field.  * <p>Implementations should support not only full field names like  * "name" but also pattern matches like "na*" or "address.*".  * @param field the field name  * @return a List of {@link FieldError} instances  */ List<FieldError> getFieldErrors(String field).
true;;1;2;/**  * Get the first error associated with the given field, if any.  * @param field the field name  * @return the field-specific error, or {@code null}  */ ;/**  * Get the first error associated with the given field, if any.  * @param field the field name  * @return the field-specific error, or {@code null}  */ @Nullable FieldError getFieldError(String field).
true;;1;2;/**  * Return the current value of the given field, either the current  * bean property value or a rejected update from the last binding.  * <p>Allows for convenient access to user-specified field values,  * even if there were type mismatches.  * @param field the field name  * @return the current value of the given field  */ ;/**  * Return the current value of the given field, either the current  * bean property value or a rejected update from the last binding.  * <p>Allows for convenient access to user-specified field values,  * even if there were type mismatches.  * @param field the field name  * @return the current value of the given field  */ @Nullable Object getFieldValue(String field).
true;;1;2;/**  * Return the type of a given field.  * <p>Implementations should be able to determine the type even  * when the field value is {@code null}, for example from some  * associated descriptor.  * @param field the field name  * @return the type of the field, or {@code null} if not determinable  */ ;/**  * Return the type of a given field.  * <p>Implementations should be able to determine the type even  * when the field value is {@code null}, for example from some  * associated descriptor.  * @param field the field name  * @return the type of the field, or {@code null} if not determinable  */ @Nullable Class<?> getFieldType(String field).
