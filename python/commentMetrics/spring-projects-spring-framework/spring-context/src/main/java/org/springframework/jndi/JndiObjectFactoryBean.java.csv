# id;timestamp;commentText;codeText;commentWords;codeWords
JndiObjectFactoryBean -> public void setProxyInterface(Class proxyInterface);1328020251;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class proxyInterface) {_		this.proxyInterfaces = new Class[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class proxyInterface);1356735495;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class proxyInterface) {_		this.proxyInterfaces = new Class[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class proxyInterface);1357119239;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class proxyInterface) {_		this.proxyInterfaces = new Class[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class proxyInterface);1368482696;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class proxyInterface) {_		this.proxyInterfaces = new Class[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1328020251;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1356735495;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1357119239;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1368482696;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1383693172;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1432125256;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1461047077;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1496242568;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1496837955;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1497341594;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1498780456;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1502974979;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> public void setExposeAccessContext(boolean exposeAccessContext);1532091916;Set whether to expose the JNDI environment context for all access to the target_object, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each method invocation, as needed by WebLogic_for JNDI-obtained factories (e.g. JDBC DataSource, JMS ConnectionFactory)_with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,object,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,method,invocation,as,needed,by,web,logic,for,jndi,obtained,factories,e,g,jdbc,data,source,jms,connection,factory,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiObjectFactoryBean -> protected Class createCompositeInterface(Class[] interfaces);1328020251;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class createCompositeInterface(Class[] interfaces);1356735495;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class createCompositeInterface(Class[] interfaces);1357119239;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class createCompositeInterface(Class[] interfaces);1368482696;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> @Override 	public Object getObject();1356735495;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public Object getObject();1368482696;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public Object getObject();1383693172;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public Object getObject();1432125256;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public Object getObject();1461047077;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public Object getObject();1496242568;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public Object getObject();1496837955;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public Object getObject();1497341594;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public Object getObject();1498780456;Return the singleton JNDI object.;@Override_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1328020251;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				throw new IllegalArgumentException("Default object [" + this.defaultObject +_						"] of type [" + this.defaultObject.getClass().getName() +_						"] is not of expected type [" + getExpectedType().getName() + "]")__			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1356735495;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				throw new IllegalArgumentException("Default object [" + this.defaultObject +_						"] of type [" + this.defaultObject.getClass().getName() +_						"] is not of expected type [" + getExpectedType().getName() + "]")__			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1357119239;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				throw new IllegalArgumentException("Default object [" + this.defaultObject +_						"] of type [" + this.defaultObject.getClass().getName() +_						"] is not of expected type [" + getExpectedType().getName() + "]")__			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1368482696;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				throw new IllegalArgumentException("Default object [" + this.defaultObject +_						"] of type [" + this.defaultObject.getClass().getName() +_						"] is not of expected type [" + getExpectedType().getName() + "]")__			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1383693172;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1432125256;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1461047077;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1496242568;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1496837955;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1497341594;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1498780456;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1502974979;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	public void afterPropertiesSet() throws IllegalArgumentException, NamingException;1532091916;Look up the JNDI object and store it.;@Override_	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {_		super.afterPropertiesSet()___		if (this.proxyInterfaces != null || !this.lookupOnStartup || !this.cache || this.exposeAccessContext) {_			_			if (this.defaultObject != null) {_				throw new IllegalArgumentException(_						"'defaultObject' is not supported in combination with 'proxyInterface'")__			}_			_			this.jndiObject = JndiObjectProxyFactory.createJndiObjectProxy(this)__		}_		else {_			if (this.defaultObject != null && getExpectedType() != null &&_					!getExpectedType().isInstance(this.defaultObject)) {_				TypeConverter converter = (this.beanFactory != null ?_						this.beanFactory.getTypeConverter() : new SimpleTypeConverter())__				try {_					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType())__				}_				catch (TypeMismatchException ex) {_					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +_							this.defaultObject.getClass().getName() + "] is not of expected type [" +_							getExpectedType().getName() + "] and cannot be converted either", ex)__				}_			}_			_			this.jndiObject = lookupWithFallback()__		}_	};look,up,the,jndi,object,and,store,it;override,public,void,after,properties,set,throws,illegal,argument,exception,naming,exception,super,after,properties,set,if,this,proxy,interfaces,null,this,lookup,on,startup,this,cache,this,expose,access,context,if,this,default,object,null,throw,new,illegal,argument,exception,default,object,is,not,supported,in,combination,with,proxy,interface,this,jndi,object,jndi,object,proxy,factory,create,jndi,object,proxy,this,else,if,this,default,object,null,get,expected,type,null,get,expected,type,is,instance,this,default,object,type,converter,converter,this,bean,factory,null,this,bean,factory,get,type,converter,new,simple,type,converter,try,this,default,object,converter,convert,if,necessary,this,default,object,get,expected,type,catch,type,mismatch,exception,ex,throw,new,illegal,argument,exception,default,object,this,default,object,of,type,this,default,object,get,class,get,name,is,not,of,expected,type,get,expected,type,get,name,and,cannot,be,converted,either,ex,this,jndi,object,lookup,with,fallback
JndiObjectFactoryBean -> @Override 	@Nullable 	public Object getObject();1502974979;Return the singleton JNDI object.;@Override_	@Nullable_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,nullable,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> @Override 	@Nullable 	public Object getObject();1532091916;Return the singleton JNDI object.;@Override_	@Nullable_	public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;override,nullable,public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1328020251;Lookup variant that that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1356735495;Lookup variant that that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1357119239;Lookup variant that that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1368482696;Lookup variant that that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1383693172;Lookup variant that that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1432125256;Lookup variant that that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1461047077;Lookup variant that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1496242568;Lookup variant that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1496837955;Lookup variant that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1497341594;Lookup variant that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1498780456;Lookup variant that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1502974979;Lookup variant that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isInfoEnabled()) {_					logger.info("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,info,enabled,logger,info,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> protected Object lookupWithFallback() throws NamingException;1532091916;Lookup variant that returns the specified "defaultObject"_(if any) in case of lookup failure._@return the located object, or the "defaultObject" as fallback_@throws NamingException in case of lookup failure without fallback_@see #setDefaultObject;protected Object lookupWithFallback() throws NamingException {_		ClassLoader originalClassLoader = ClassUtils.overrideThreadContextClassLoader(this.beanClassLoader)__		try {_			return lookup()__		}_		catch (TypeMismatchNamingException ex) {_			_			_			throw ex__		}_		catch (NamingException ex) {_			if (this.defaultObject != null) {_				if (logger.isTraceEnabled()) {_					logger.trace("JNDI lookup failed - returning specified default object instead", ex)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("JNDI lookup failed - returning specified default object instead: " + ex)__				}_				return this.defaultObject__			}_			throw ex__		}_		finally {_			if (originalClassLoader != null) {_				Thread.currentThread().setContextClassLoader(originalClassLoader)__			}_		}_	};lookup,variant,that,returns,the,specified,default,object,if,any,in,case,of,lookup,failure,return,the,located,object,or,the,default,object,as,fallback,throws,naming,exception,in,case,of,lookup,failure,without,fallback,see,set,default,object;protected,object,lookup,with,fallback,throws,naming,exception,class,loader,original,class,loader,class,utils,override,thread,context,class,loader,this,bean,class,loader,try,return,lookup,catch,type,mismatch,naming,exception,ex,throw,ex,catch,naming,exception,ex,if,this,default,object,null,if,logger,is,trace,enabled,logger,trace,jndi,lookup,failed,returning,specified,default,object,instead,ex,else,if,logger,is,debug,enabled,logger,debug,jndi,lookup,failed,returning,specified,default,object,instead,ex,return,this,default,object,throw,ex,finally,if,original,class,loader,null,thread,current,thread,set,context,class,loader,original,class,loader
JndiObjectFactoryBean -> public void setCache(boolean cache);1328020251;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1356735495;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1357119239;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1368482696;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1383693172;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1432125256;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1461047077;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1496242568;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1496837955;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1497341594;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1498780456;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1502974979;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setCache(boolean cache);1532091916;Set whether to cache the JNDI object once it has been located._Default is "true"._<p>Can be turned off to allow for hot redeployment of JNDI objects._In this case, the JNDI object will be fetched for each invocation._<p>For hot redeployment, a proxy interface needs to be specified._@see #setProxyInterface_@see #setLookupOnStartup;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,the,jndi,object,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,redeployment,of,jndi,objects,in,this,case,the,jndi,object,will,be,fetched,for,each,invocation,p,for,hot,redeployment,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,lookup,on,startup;public,void,set,cache,boolean,cache,this,cache,cache
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1328020251;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._@see #setLookupOnStartup;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,see,set,lookup,on,startup;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1356735495;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._@see #setLookupOnStartup;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,see,set,lookup,on,startup;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1357119239;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._@see #setLookupOnStartup;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,see,set,lookup,on,startup;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1368482696;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._@see #setLookupOnStartup;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,see,set,lookup,on,startup;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1383693172;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1432125256;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1461047077;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1496242568;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1496837955;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1497341594;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1498780456;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1502974979;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setDefaultObject(Object defaultObject);1532091916;Specify a default object to fall back to if the JNDI lookup fails._Default is none._<p>This can be an arbitrary bean reference or literal value._It is typically used for literal values in scenarios where the JNDI environment_might define specific config settings but those are not required to be present._<p>Note: This is only supported for lookup on startup._If specified together with {@link #setExpectedType}, the specified value_needs to be either of that type or convertible to it._@see #setLookupOnStartup_@see ConfigurableBeanFactory#getTypeConverter()_@see SimpleTypeConverter;public void setDefaultObject(Object defaultObject) {_		this.defaultObject = defaultObject__	};specify,a,default,object,to,fall,back,to,if,the,jndi,lookup,fails,default,is,none,p,this,can,be,an,arbitrary,bean,reference,or,literal,value,it,is,typically,used,for,literal,values,in,scenarios,where,the,jndi,environment,might,define,specific,config,settings,but,those,are,not,required,to,be,present,p,note,this,is,only,supported,for,lookup,on,startup,if,specified,together,with,link,set,expected,type,the,specified,value,needs,to,be,either,of,that,type,or,convertible,to,it,see,set,lookup,on,startup,see,configurable,bean,factory,get,type,converter,see,simple,type,converter;public,void,set,default,object,object,default,object,this,default,object,default,object
JndiObjectFactoryBean -> public void setProxyInterfaces(Class[] proxyInterfaces);1328020251;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class[] proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class[] proxyInterfaces);1356735495;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class[] proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class[] proxyInterfaces);1357119239;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class[] proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class[] proxyInterfaces);1368482696;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class[] proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1328020251;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1356735495;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1357119239;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1368482696;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1383693172;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1432125256;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1461047077;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1496242568;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1496837955;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1497341594;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1498780456;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1502974979;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> public void setLookupOnStartup(boolean lookupOnStartup);1532091916;Set whether to look up the JNDI object on startup. Default is "true"._<p>Can be turned off to allow for late availability of the JNDI object._In this case, the JNDI object will be fetched on first access._<p>For a lazy lookup, a proxy interface needs to be specified._@see #setProxyInterface_@see #setCache;public void setLookupOnStartup(boolean lookupOnStartup) {_		this.lookupOnStartup = lookupOnStartup__	};set,whether,to,look,up,the,jndi,object,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,availability,of,the,jndi,object,in,this,case,the,jndi,object,will,be,fetched,on,first,access,p,for,a,lazy,lookup,a,proxy,interface,needs,to,be,specified,see,set,proxy,interface,see,set,cache;public,void,set,lookup,on,startup,boolean,lookup,on,startup,this,lookup,on,startup,lookup,on,startup
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1383693172;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1432125256;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1461047077;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1496242568;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1496837955;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1497341594;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1498780456;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1502974979;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1532091916;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
JndiObjectFactoryBean -> public Object getObject();1328020251;Return the singleton JNDI object.;public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> public Object getObject();1357119239;Return the singleton JNDI object.;public Object getObject() {_		return this.jndiObject__	};return,the,singleton,jndi,object;public,object,get,object,return,this,jndi,object
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1383693172;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1432125256;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1461047077;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1496242568;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1496837955;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1497341594;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1498780456;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1502974979;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterfaces(Class<?>... proxyInterfaces);1532091916;Specify multiple proxy interfaces to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Note that proxy interfaces will be autodetected from a specified "expectedType",_if necessary._@see #setExpectedType_@see #setLookupOnStartup_@see #setCache;public void setProxyInterfaces(Class<?>... proxyInterfaces) {_		this.proxyInterfaces = proxyInterfaces__	};specify,multiple,proxy,interfaces,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,note,that,proxy,interfaces,will,be,autodetected,from,a,specified,expected,type,if,necessary,see,set,expected,type,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interfaces,class,proxy,interfaces,this,proxy,interfaces,proxy,interfaces
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1383693172;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1432125256;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1461047077;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1496242568;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1496837955;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1497341594;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1498780456;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1502974979;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
JndiObjectFactoryBean -> public void setProxyInterface(Class<?> proxyInterface);1532091916;Specify the proxy interface to use for the JNDI object._<p>Typically used in conjunction with "lookupOnStartup"=false and/or "cache"=false._Needs to be specified because the actual JNDI object type is not known_in advance in case of a lazy lookup._@see #setProxyInterfaces_@see #setLookupOnStartup_@see #setCache;public void setProxyInterface(Class<?> proxyInterface) {_		this.proxyInterfaces = new Class<?>[] {proxyInterface}__	};specify,the,proxy,interface,to,use,for,the,jndi,object,p,typically,used,in,conjunction,with,lookup,on,startup,false,and,or,cache,false,needs,to,be,specified,because,the,actual,jndi,object,type,is,not,known,in,advance,in,case,of,a,lazy,lookup,see,set,proxy,interfaces,see,set,lookup,on,startup,see,set,cache;public,void,set,proxy,interface,class,proxy,interface,this,proxy,interfaces,new,class,proxy,interface
