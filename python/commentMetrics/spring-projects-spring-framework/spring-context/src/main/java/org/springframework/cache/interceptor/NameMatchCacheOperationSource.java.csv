# id;timestamp;commentText;codeText;commentWords;codeWords
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1328020251;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1335774711;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1356735495;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1357119239;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1368482696;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1372363092;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1399297545;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1413848647;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1467730834;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1496242568;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1497250713;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1502974979;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> public void addCacheMethod(String methodName, Collection<CacheOperation> ops);1530174524;Add an attribute for a cacheable method._<p>Method names can be exact matches, or of the pattern "xxx*",_"*xxx" or "*xxx*" for matching multiple methods._@param methodName the name of the method_@param ops operation associated with the method;public void addCacheMethod(String methodName, Collection<CacheOperation> ops) {_		if (logger.isDebugEnabled()) {_			logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]")__		}_		this.nameMap.put(methodName, ops)__	};add,an,attribute,for,a,cacheable,method,p,method,names,can,be,exact,matches,or,of,the,pattern,xxx,xxx,or,xxx,for,matching,multiple,methods,param,method,name,the,name,of,the,method,param,ops,operation,associated,with,the,method;public,void,add,cache,method,string,method,name,collection,cache,operation,ops,if,logger,is,debug,enabled,logger,debug,adding,method,method,name,with,cache,operations,ops,this,name,map,put,method,name,ops
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1328020251;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1335774711;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1356735495;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1357119239;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1368482696;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1372363092;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1399297545;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1413848647;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1467730834;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1496242568;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1497250713;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1502974979;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> protected boolean isMatch(String methodName, String mappedName);1530174524;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1328020251;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation_@see CacheOperationEditor;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation,see,cache,operation,editor;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1335774711;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1356735495;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1357119239;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1368482696;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1372363092;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1399297545;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1413848647;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1467730834;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1496242568;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		for (Map.Entry<String, Collection<CacheOperation>> entry : nameMap.entrySet()) {_			addCacheMethod(entry.getKey(), entry.getValue())__		}_	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,for,map,entry,string,collection,cache,operation,entry,name,map,entry,set,add,cache,method,entry,get,key,entry,get,value
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1497250713;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		nameMap.forEach(this::addCacheMethod)__	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,name,map,for,each,this,add,cache,method
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1502974979;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		nameMap.forEach(this::addCacheMethod)__	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,name,map,for,each,this,add,cache,method
NameMatchCacheOperationSource -> public void setNameMap(Map<String, Collection<CacheOperation>> nameMap);1530174524;Set a name/attribute map, consisting of method names_(e.g. "myMethod") and CacheOperation instances_(or Strings to be converted to CacheOperation instances)._@see CacheOperation;public void setNameMap(Map<String, Collection<CacheOperation>> nameMap) {_		nameMap.forEach(this::addCacheMethod)__	};set,a,name,attribute,map,consisting,of,method,names,e,g,my,method,and,cache,operation,instances,or,strings,to,be,converted,to,cache,operation,instances,see,cache,operation;public,void,set,name,map,map,string,collection,cache,operation,name,map,name,map,for,each,this,add,cache,method
