# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteInvocationUtils -> public static void fillInClientStackTraceIfPossible(Throwable ex);1328020251;Fill the current client-side stack trace into the given exception._<p>The given exception is typically thrown on the server and serialized_as-is, with the client wanting it to contain the client-side portion_of the stack trace as well. What we can do here is to update the_<code>StackTraceElement</code> array with the current client-side stack_trace, provided that we run on JDK 1.4+._@param ex the exception to update_@see java.lang.Throwable#getStackTrace()_@see java.lang.Throwable#setStackTrace(StackTraceElement[]);public static void fillInClientStackTraceIfPossible(Throwable ex) {_		if (ex != null) {_			StackTraceElement[] clientStack = new Throwable().getStackTrace()__			Set<Throwable> visitedExceptions = new HashSet<Throwable>()__			Throwable exToUpdate = ex__			while (exToUpdate != null && !visitedExceptions.contains(exToUpdate)) {_				StackTraceElement[] serverStack = exToUpdate.getStackTrace()__				StackTraceElement[] combinedStack = new StackTraceElement[serverStack.length + clientStack.length]__				System.arraycopy(serverStack, 0, combinedStack, 0, serverStack.length)__				System.arraycopy(clientStack, 0, combinedStack, serverStack.length, clientStack.length)__				exToUpdate.setStackTrace(combinedStack)__				visitedExceptions.add(exToUpdate)__				exToUpdate = exToUpdate.getCause()__			}_		}_	};fill,the,current,client,side,stack,trace,into,the,given,exception,p,the,given,exception,is,typically,thrown,on,the,server,and,serialized,as,is,with,the,client,wanting,it,to,contain,the,client,side,portion,of,the,stack,trace,as,well,what,we,can,do,here,is,to,update,the,code,stack,trace,element,code,array,with,the,current,client,side,stack,trace,provided,that,we,run,on,jdk,1,4,param,ex,the,exception,to,update,see,java,lang,throwable,get,stack,trace,see,java,lang,throwable,set,stack,trace,stack,trace,element;public,static,void,fill,in,client,stack,trace,if,possible,throwable,ex,if,ex,null,stack,trace,element,client,stack,new,throwable,get,stack,trace,set,throwable,visited,exceptions,new,hash,set,throwable,throwable,ex,to,update,ex,while,ex,to,update,null,visited,exceptions,contains,ex,to,update,stack,trace,element,server,stack,ex,to,update,get,stack,trace,stack,trace,element,combined,stack,new,stack,trace,element,server,stack,length,client,stack,length,system,arraycopy,server,stack,0,combined,stack,0,server,stack,length,system,arraycopy,client,stack,0,combined,stack,server,stack,length,client,stack,length,ex,to,update,set,stack,trace,combined,stack,visited,exceptions,add,ex,to,update,ex,to,update,ex,to,update,get,cause
RemoteInvocationUtils -> public static void fillInClientStackTraceIfPossible(Throwable ex);1356735495;Fill the current client-side stack trace into the given exception._<p>The given exception is typically thrown on the server and serialized_as-is, with the client wanting it to contain the client-side portion_of the stack trace as well. What we can do here is to update the_{@code StackTraceElement} array with the current client-side stack_trace, provided that we run on JDK 1.4+._@param ex the exception to update_@see Throwable#getStackTrace()_@see Throwable#setStackTrace(StackTraceElement[]);public static void fillInClientStackTraceIfPossible(Throwable ex) {_		if (ex != null) {_			StackTraceElement[] clientStack = new Throwable().getStackTrace()__			Set<Throwable> visitedExceptions = new HashSet<Throwable>()__			Throwable exToUpdate = ex__			while (exToUpdate != null && !visitedExceptions.contains(exToUpdate)) {_				StackTraceElement[] serverStack = exToUpdate.getStackTrace()__				StackTraceElement[] combinedStack = new StackTraceElement[serverStack.length + clientStack.length]__				System.arraycopy(serverStack, 0, combinedStack, 0, serverStack.length)__				System.arraycopy(clientStack, 0, combinedStack, serverStack.length, clientStack.length)__				exToUpdate.setStackTrace(combinedStack)__				visitedExceptions.add(exToUpdate)__				exToUpdate = exToUpdate.getCause()__			}_		}_	};fill,the,current,client,side,stack,trace,into,the,given,exception,p,the,given,exception,is,typically,thrown,on,the,server,and,serialized,as,is,with,the,client,wanting,it,to,contain,the,client,side,portion,of,the,stack,trace,as,well,what,we,can,do,here,is,to,update,the,code,stack,trace,element,array,with,the,current,client,side,stack,trace,provided,that,we,run,on,jdk,1,4,param,ex,the,exception,to,update,see,throwable,get,stack,trace,see,throwable,set,stack,trace,stack,trace,element;public,static,void,fill,in,client,stack,trace,if,possible,throwable,ex,if,ex,null,stack,trace,element,client,stack,new,throwable,get,stack,trace,set,throwable,visited,exceptions,new,hash,set,throwable,throwable,ex,to,update,ex,while,ex,to,update,null,visited,exceptions,contains,ex,to,update,stack,trace,element,server,stack,ex,to,update,get,stack,trace,stack,trace,element,combined,stack,new,stack,trace,element,server,stack,length,client,stack,length,system,arraycopy,server,stack,0,combined,stack,0,server,stack,length,system,arraycopy,client,stack,0,combined,stack,server,stack,length,client,stack,length,ex,to,update,set,stack,trace,combined,stack,visited,exceptions,add,ex,to,update,ex,to,update,ex,to,update,get,cause
RemoteInvocationUtils -> public static void fillInClientStackTraceIfPossible(Throwable ex);1467730834;Fill the current client-side stack trace into the given exception._<p>The given exception is typically thrown on the server and serialized_as-is, with the client wanting it to contain the client-side portion_of the stack trace as well. What we can do here is to update the_{@code StackTraceElement} array with the current client-side stack_trace, provided that we run on JDK 1.4+._@param ex the exception to update_@see Throwable#getStackTrace()_@see Throwable#setStackTrace(StackTraceElement[]);public static void fillInClientStackTraceIfPossible(Throwable ex) {_		if (ex != null) {_			StackTraceElement[] clientStack = new Throwable().getStackTrace()__			Set<Throwable> visitedExceptions = new HashSet<>()__			Throwable exToUpdate = ex__			while (exToUpdate != null && !visitedExceptions.contains(exToUpdate)) {_				StackTraceElement[] serverStack = exToUpdate.getStackTrace()__				StackTraceElement[] combinedStack = new StackTraceElement[serverStack.length + clientStack.length]__				System.arraycopy(serverStack, 0, combinedStack, 0, serverStack.length)__				System.arraycopy(clientStack, 0, combinedStack, serverStack.length, clientStack.length)__				exToUpdate.setStackTrace(combinedStack)__				visitedExceptions.add(exToUpdate)__				exToUpdate = exToUpdate.getCause()__			}_		}_	};fill,the,current,client,side,stack,trace,into,the,given,exception,p,the,given,exception,is,typically,thrown,on,the,server,and,serialized,as,is,with,the,client,wanting,it,to,contain,the,client,side,portion,of,the,stack,trace,as,well,what,we,can,do,here,is,to,update,the,code,stack,trace,element,array,with,the,current,client,side,stack,trace,provided,that,we,run,on,jdk,1,4,param,ex,the,exception,to,update,see,throwable,get,stack,trace,see,throwable,set,stack,trace,stack,trace,element;public,static,void,fill,in,client,stack,trace,if,possible,throwable,ex,if,ex,null,stack,trace,element,client,stack,new,throwable,get,stack,trace,set,throwable,visited,exceptions,new,hash,set,throwable,ex,to,update,ex,while,ex,to,update,null,visited,exceptions,contains,ex,to,update,stack,trace,element,server,stack,ex,to,update,get,stack,trace,stack,trace,element,combined,stack,new,stack,trace,element,server,stack,length,client,stack,length,system,arraycopy,server,stack,0,combined,stack,0,server,stack,length,system,arraycopy,client,stack,0,combined,stack,server,stack,length,client,stack,length,ex,to,update,set,stack,trace,combined,stack,visited,exceptions,add,ex,to,update,ex,to,update,ex,to,update,get,cause
