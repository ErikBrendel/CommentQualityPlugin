# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1495868221;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1496242568;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1496837955;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1502974979;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1520528267;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1522716161;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1533808755;Subclasses need to implement this to return the caching attribute for the_given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method, or {@code null} if none;@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1533908746;Subclasses need to implement this to return the caching attribute for the_given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method, or {@code null} if none;@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1328020251;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			if (cached == NULL_CACHING_ATTRIBUTE) {_				return null__			}_			_			_			return cached__		}_		else {_			_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			_			if (cacheOps == null) {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,return,cached,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,return,cache,ops
AbstractFallbackCacheOperationSource -> public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1355352386;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			if (cached == NULL_CACHING_ATTRIBUTE) {_				return null__			}_			_			_			return cached__		}_		else {_			_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			_			if (cacheOps == null) {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,return,cached,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,return,cache,ops
AbstractFallbackCacheOperationSource -> public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1357119239;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			if (cached == NULL_CACHING_ATTRIBUTE) {_				return null__			}_			_			_			return cached__		}_		else {_			_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			_			if (cacheOps == null) {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,return,cached,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	@Nullable 	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass);1502974979;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	@Nullable_	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,nullable,public,collection,cache,operation,get,cache,operations,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	@Nullable 	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass);1520528267;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	@Nullable_	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,nullable,public,collection,cache,operation,get,cache,operations,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	@Nullable 	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass);1522716161;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	@Nullable_	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,nullable,public,collection,cache,operation,get,cache,operations,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	@Nullable 	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass);1533808755;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	@Nullable_	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,nullable,public,collection,cache,operation,get,cache,operations,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	@Nullable 	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass);1533908746;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	@Nullable_	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isTraceEnabled()) {_					logger.trace("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,nullable,public,collection,cache,operation,get,cache,operations,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,trace,enabled,logger,trace,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1328020251;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1355352386;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1356735495;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1357119239;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1368482696;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1396865240;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1419270367;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1422279854;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1440579854;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1459339984;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1467730834;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1487628012;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1488283735;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1328020251;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1355352386;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1356735495;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1357119239;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1368482696;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1396865240;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1419270367;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1422279854;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1440579854;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1459339984;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1467730834;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1487628012;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;1488283735;Subclasses need to implement this to return the caching attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all caching attribute associated with this method_(or {@code null} if none);protected abstract Collection<CacheOperation> findCacheOperations(Method method)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,collection,cache,operation,find,cache,operations,method,method
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass);1496242568;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass);1496837955;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1328020251;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1355352386;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1356735495;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1357119239;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1368482696;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1396865240;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,cache,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1419270367;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,cache,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1422279854;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new AnnotatedElementKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,annotated,element,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1440579854;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new AnnotatedElementKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,annotated,element,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1459339984;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1467730834;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1487628012;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1488283735;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1328020251;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1355352386;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1356735495;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1357119239;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1368482696;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1396865240;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1419270367;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1422279854;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1440579854;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1459339984;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1467730834;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1487628012;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1488283735;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1495868221;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1496242568;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1496837955;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1502974979;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1520528267;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1522716161;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1533808755;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected boolean allowPublicMethodsOnly();1533908746;Should only public methods be allowed to have caching semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,caching,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1495868221;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1496242568;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1496837955;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1502974979;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1520528267;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1522716161;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1533808755;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1533908746;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1495868221;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1496242568;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1496837955;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1502974979;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1520528267;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1522716161;Subclasses need to implement this to return the caching attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1533808755;Subclasses need to implement this to return the caching attribute for the_given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class, or {@code null} if none;@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> @Nullable 	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;1533908746;Subclasses need to implement this to return the caching attribute for the_given class, if any._@param clazz the class to retrieve the attribute for_@return all caching attribute associated with this class, or {@code null} if none;@Nullable_	protected abstract Collection<CacheOperation> findCacheOperations(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,caching,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,caching,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,collection,cache,operation,find,cache,operations,class,clazz
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1356735495;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			if (cached == NULL_CACHING_ATTRIBUTE) {_				return null__			}_			_			_			return cached__		}_		else {_			_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			_			if (cacheOps == null) {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,return,cached,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1368482696;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			if (cached == NULL_CACHING_ATTRIBUTE) {_				return null__			}_			_			_			return cached__		}_		else {_			_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			_			if (cacheOps == null) {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,return,cached,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1396865240;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			if (cached == NULL_CACHING_ATTRIBUTE) {_				return null__			}_			_			_			return cached__		}_		else {_			_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			_			if (cacheOps == null) {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,return,cached,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1419270367;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			if (cached == NULL_CACHING_ATTRIBUTE) {_				return null__			}_			_			_			return cached__		}_		else {_			_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			_			if (cacheOps == null) {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,return,cached,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1422279854;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			if (cached == NULL_CACHING_ATTRIBUTE) {_				return null__			}_			_			_			return cached__		}_		else {_			_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			_			if (cacheOps == null) {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,return,cached,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1440579854;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1459339984;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1467730834;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1487628012;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1488283735;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
AbstractFallbackCacheOperationSource -> @Override 	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass);1495868221;Determine the caching attribute for this method invocation._<p>Defaults to the class's caching attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return {@link CacheOperation} for this method, or {@code null} if the method_is not cacheable;@Override_	public Collection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		Object cacheKey = getCacheKey(method, targetClass)__		Collection<CacheOperation> cached = this.attributeCache.get(cacheKey)___		if (cached != null) {_			return (cached != NULL_CACHING_ATTRIBUTE ? cached : null)__		}_		else {_			Collection<CacheOperation> cacheOps = computeCacheOperations(method, targetClass)__			if (cacheOps != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps)__				}_				this.attributeCache.put(cacheKey, cacheOps)__			}_			else {_				this.attributeCache.put(cacheKey, NULL_CACHING_ATTRIBUTE)__			}_			return cacheOps__		}_	};determine,the,caching,attribute,for,this,method,invocation,p,defaults,to,the,class,s,caching,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,link,cache,operation,for,this,method,or,code,null,if,the,method,is,not,cacheable;override,public,collection,cache,operation,get,cache,operations,method,method,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,collection,cache,operation,cached,this,attribute,cache,get,cache,key,if,cached,null,return,cached,cached,null,else,collection,cache,operation,cache,ops,compute,cache,operations,method,target,class,if,cache,ops,null,if,logger,is,debug,enabled,logger,debug,adding,cacheable,method,method,get,name,with,attribute,cache,ops,this,attribute,cache,put,cache,key,cache,ops,else,this,attribute,cache,put,cache,key,return,cache,ops
