# id;timestamp;commentText;codeText;commentWords;codeWords
ThreadPoolTaskExecutor -> public int getActiveCount();1328020251;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		return getThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,return,get,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1356735495;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		return getThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,return,get,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1357119239;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		return getThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,return,get,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1368482696;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		return getThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,return,get,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1378149521;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1383178438;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1388782627;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1411601340;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1455724682;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1467730834;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1498780456;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1521420322;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1530294194;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public int getActiveCount();1533213413;Return the number of currently active threads._@see java.util.concurrent.ThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.threadPoolExecutor == null) {_			_			return 0__		}_		return this.threadPoolExecutor.getActiveCount()__	};return,the,number,of,currently,active,threads,see,java,util,concurrent,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,thread,pool,executor,null,return,0,return,this,thread,pool,executor,get,active,count
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1328020251;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is <code>Integer.MAX_VALUE</code>._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,code,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1356735495;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1357119239;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1368482696;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1378149521;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1383178438;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1388782627;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1411601340;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1455724682;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1467730834;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1498780456;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1521420322;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1530294194;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> public void setQueueCapacity(int queueCapacity);1533213413;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public void setQueueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,void,set,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity
ThreadPoolTaskExecutor -> @Override 	protected ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1455724682;Note: This method exposes an {@link ExecutorService} to its base class_but stores the actual {@link ThreadPoolExecutor} handle internally._Do not override this method for replacing the executor, rather just for_decorating its {@code ExecutorService} handle or storing custom state.;@Override_	protected ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		BlockingQueue<Runnable> queue = createQueue(this.queueCapacity)___		ThreadPoolExecutor executor__		if (this.taskDecorator != null) {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler) {_				@Override_				public void execute(Runnable command) {_					super.execute(taskDecorator.decorate(command))__				}_			}__		}_		else {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler)___		}__		if (this.allowCoreThreadTimeOut) {_			executor.allowCoreThreadTimeOut(true)__		}__		this.threadPoolExecutor = executor__		return executor__	};note,this,method,exposes,an,link,executor,service,to,its,base,class,but,stores,the,actual,link,thread,pool,executor,handle,internally,do,not,override,this,method,for,replacing,the,executor,rather,just,for,decorating,its,code,executor,service,handle,or,storing,custom,state;override,protected,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,blocking,queue,runnable,queue,create,queue,this,queue,capacity,thread,pool,executor,executor,if,this,task,decorator,null,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,override,public,void,execute,runnable,command,super,execute,task,decorator,decorate,command,else,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,if,this,allow,core,thread,time,out,executor,allow,core,thread,time,out,true,this,thread,pool,executor,executor,return,executor
ThreadPoolTaskExecutor -> @Override 	protected ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1467730834;Note: This method exposes an {@link ExecutorService} to its base class_but stores the actual {@link ThreadPoolExecutor} handle internally._Do not override this method for replacing the executor, rather just for_decorating its {@code ExecutorService} handle or storing custom state.;@Override_	protected ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		BlockingQueue<Runnable> queue = createQueue(this.queueCapacity)___		ThreadPoolExecutor executor__		if (this.taskDecorator != null) {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler) {_				@Override_				public void execute(Runnable command) {_					super.execute(taskDecorator.decorate(command))__				}_			}__		}_		else {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler)___		}__		if (this.allowCoreThreadTimeOut) {_			executor.allowCoreThreadTimeOut(true)__		}__		this.threadPoolExecutor = executor__		return executor__	};note,this,method,exposes,an,link,executor,service,to,its,base,class,but,stores,the,actual,link,thread,pool,executor,handle,internally,do,not,override,this,method,for,replacing,the,executor,rather,just,for,decorating,its,code,executor,service,handle,or,storing,custom,state;override,protected,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,blocking,queue,runnable,queue,create,queue,this,queue,capacity,thread,pool,executor,executor,if,this,task,decorator,null,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,override,public,void,execute,runnable,command,super,execute,task,decorator,decorate,command,else,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,if,this,allow,core,thread,time,out,executor,allow,core,thread,time,out,true,this,thread,pool,executor,executor,return,executor
ThreadPoolTaskExecutor -> @Override 	protected ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1498780456;Note: This method exposes an {@link ExecutorService} to its base class_but stores the actual {@link ThreadPoolExecutor} handle internally._Do not override this method for replacing the executor, rather just for_decorating its {@code ExecutorService} handle or storing custom state.;@Override_	protected ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		BlockingQueue<Runnable> queue = createQueue(this.queueCapacity)___		ThreadPoolExecutor executor__		if (this.taskDecorator != null) {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler) {_				@Override_				public void execute(Runnable command) {_					super.execute(taskDecorator.decorate(command))__				}_			}__		}_		else {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler)___		}__		if (this.allowCoreThreadTimeOut) {_			executor.allowCoreThreadTimeOut(true)__		}__		this.threadPoolExecutor = executor__		return executor__	};note,this,method,exposes,an,link,executor,service,to,its,base,class,but,stores,the,actual,link,thread,pool,executor,handle,internally,do,not,override,this,method,for,replacing,the,executor,rather,just,for,decorating,its,code,executor,service,handle,or,storing,custom,state;override,protected,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,blocking,queue,runnable,queue,create,queue,this,queue,capacity,thread,pool,executor,executor,if,this,task,decorator,null,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,override,public,void,execute,runnable,command,super,execute,task,decorator,decorate,command,else,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,if,this,allow,core,thread,time,out,executor,allow,core,thread,time,out,true,this,thread,pool,executor,executor,return,executor
ThreadPoolTaskExecutor -> @Override 	protected ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1521420322;Note: This method exposes an {@link ExecutorService} to its base class_but stores the actual {@link ThreadPoolExecutor} handle internally._Do not override this method for replacing the executor, rather just for_decorating its {@code ExecutorService} handle or storing custom state.;@Override_	protected ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		BlockingQueue<Runnable> queue = createQueue(this.queueCapacity)___		ThreadPoolExecutor executor__		if (this.taskDecorator != null) {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler) {_				@Override_				public void execute(Runnable command) {_					Runnable decorated = taskDecorator.decorate(command)__					if (decorated != command) {_						decoratedTaskMap.put(decorated, command)__					}_					super.execute(decorated)__				}_			}__		}_		else {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler)___		}__		if (this.allowCoreThreadTimeOut) {_			executor.allowCoreThreadTimeOut(true)__		}__		this.threadPoolExecutor = executor__		return executor__	};note,this,method,exposes,an,link,executor,service,to,its,base,class,but,stores,the,actual,link,thread,pool,executor,handle,internally,do,not,override,this,method,for,replacing,the,executor,rather,just,for,decorating,its,code,executor,service,handle,or,storing,custom,state;override,protected,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,blocking,queue,runnable,queue,create,queue,this,queue,capacity,thread,pool,executor,executor,if,this,task,decorator,null,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,override,public,void,execute,runnable,command,runnable,decorated,task,decorator,decorate,command,if,decorated,command,decorated,task,map,put,decorated,command,super,execute,decorated,else,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,if,this,allow,core,thread,time,out,executor,allow,core,thread,time,out,true,this,thread,pool,executor,executor,return,executor
ThreadPoolTaskExecutor -> @Override 	protected ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1530294194;Note: This method exposes an {@link ExecutorService} to its base class_but stores the actual {@link ThreadPoolExecutor} handle internally._Do not override this method for replacing the executor, rather just for_decorating its {@code ExecutorService} handle or storing custom state.;@Override_	protected ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		BlockingQueue<Runnable> queue = createQueue(this.queueCapacity)___		ThreadPoolExecutor executor__		if (this.taskDecorator != null) {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler) {_				@Override_				public void execute(Runnable command) {_					Runnable decorated = taskDecorator.decorate(command)__					if (decorated != command) {_						decoratedTaskMap.put(decorated, command)__					}_					super.execute(decorated)__				}_			}__		}_		else {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler)___		}__		if (this.allowCoreThreadTimeOut) {_			executor.allowCoreThreadTimeOut(true)__		}__		this.threadPoolExecutor = executor__		return executor__	};note,this,method,exposes,an,link,executor,service,to,its,base,class,but,stores,the,actual,link,thread,pool,executor,handle,internally,do,not,override,this,method,for,replacing,the,executor,rather,just,for,decorating,its,code,executor,service,handle,or,storing,custom,state;override,protected,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,blocking,queue,runnable,queue,create,queue,this,queue,capacity,thread,pool,executor,executor,if,this,task,decorator,null,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,override,public,void,execute,runnable,command,runnable,decorated,task,decorator,decorate,command,if,decorated,command,decorated,task,map,put,decorated,command,super,execute,decorated,else,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,if,this,allow,core,thread,time,out,executor,allow,core,thread,time,out,true,this,thread,pool,executor,executor,return,executor
ThreadPoolTaskExecutor -> @Override 	protected ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1533213413;Note: This method exposes an {@link ExecutorService} to its base class_but stores the actual {@link ThreadPoolExecutor} handle internally._Do not override this method for replacing the executor, rather just for_decorating its {@code ExecutorService} handle or storing custom state.;@Override_	protected ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		BlockingQueue<Runnable> queue = createQueue(this.queueCapacity)___		ThreadPoolExecutor executor__		if (this.taskDecorator != null) {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler) {_				@Override_				public void execute(Runnable command) {_					Runnable decorated = taskDecorator.decorate(command)__					if (decorated != command) {_						decoratedTaskMap.put(decorated, command)__					}_					super.execute(decorated)__				}_			}__		}_		else {_			executor = new ThreadPoolExecutor(_					this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,_					queue, threadFactory, rejectedExecutionHandler)___		}__		if (this.allowCoreThreadTimeOut) {_			executor.allowCoreThreadTimeOut(true)__		}__		this.threadPoolExecutor = executor__		return executor__	};note,this,method,exposes,an,link,executor,service,to,its,base,class,but,stores,the,actual,link,thread,pool,executor,handle,internally,do,not,override,this,method,for,replacing,the,executor,rather,just,for,decorating,its,code,executor,service,handle,or,storing,custom,state;override,protected,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,blocking,queue,runnable,queue,create,queue,this,queue,capacity,thread,pool,executor,executor,if,this,task,decorator,null,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,override,public,void,execute,runnable,command,runnable,decorated,task,decorator,decorate,command,if,decorated,command,decorated,task,map,put,decorated,command,super,execute,decorated,else,executor,new,thread,pool,executor,this,core,pool,size,this,max,pool,size,this,keep,alive,seconds,time,unit,seconds,queue,thread,factory,rejected,execution,handler,if,this,allow,core,thread,time,out,executor,allow,core,thread,time,out,true,this,thread,pool,executor,executor,return,executor
ThreadPoolTaskExecutor -> public void setTaskDecorator(TaskDecorator taskDecorator);1455724682;Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}_about to be executed._<p>Note that such a decorator is not necessarily being applied to the_user-supplied {@code Runnable}/{@code Callable} but rather to the actual_execution callback (which may be a wrapper around the user-supplied task)._<p>The primary use case is to set some execution context around the task's_invocation, or to provide some monitoring/statistics for task execution._@since 4.3;public void setTaskDecorator(TaskDecorator taskDecorator) {_		this.taskDecorator = taskDecorator__	};specify,a,custom,link,task,decorator,to,be,applied,to,any,link,runnable,about,to,be,executed,p,note,that,such,a,decorator,is,not,necessarily,being,applied,to,the,user,supplied,code,runnable,code,callable,but,rather,to,the,actual,execution,callback,which,may,be,a,wrapper,around,the,user,supplied,task,p,the,primary,use,case,is,to,set,some,execution,context,around,the,task,s,invocation,or,to,provide,some,monitoring,statistics,for,task,execution,since,4,3;public,void,set,task,decorator,task,decorator,task,decorator,this,task,decorator,task,decorator
ThreadPoolTaskExecutor -> public void setTaskDecorator(TaskDecorator taskDecorator);1467730834;Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}_about to be executed._<p>Note that such a decorator is not necessarily being applied to the_user-supplied {@code Runnable}/{@code Callable} but rather to the actual_execution callback (which may be a wrapper around the user-supplied task)._<p>The primary use case is to set some execution context around the task's_invocation, or to provide some monitoring/statistics for task execution._@since 4.3;public void setTaskDecorator(TaskDecorator taskDecorator) {_		this.taskDecorator = taskDecorator__	};specify,a,custom,link,task,decorator,to,be,applied,to,any,link,runnable,about,to,be,executed,p,note,that,such,a,decorator,is,not,necessarily,being,applied,to,the,user,supplied,code,runnable,code,callable,but,rather,to,the,actual,execution,callback,which,may,be,a,wrapper,around,the,user,supplied,task,p,the,primary,use,case,is,to,set,some,execution,context,around,the,task,s,invocation,or,to,provide,some,monitoring,statistics,for,task,execution,since,4,3;public,void,set,task,decorator,task,decorator,task,decorator,this,task,decorator,task,decorator
ThreadPoolTaskExecutor -> public void setTaskDecorator(TaskDecorator taskDecorator);1498780456;Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}_about to be executed._<p>Note that such a decorator is not necessarily being applied to the_user-supplied {@code Runnable}/{@code Callable} but rather to the actual_execution callback (which may be a wrapper around the user-supplied task)._<p>The primary use case is to set some execution context around the task's_invocation, or to provide some monitoring/statistics for task execution._@since 4.3;public void setTaskDecorator(TaskDecorator taskDecorator) {_		this.taskDecorator = taskDecorator__	};specify,a,custom,link,task,decorator,to,be,applied,to,any,link,runnable,about,to,be,executed,p,note,that,such,a,decorator,is,not,necessarily,being,applied,to,the,user,supplied,code,runnable,code,callable,but,rather,to,the,actual,execution,callback,which,may,be,a,wrapper,around,the,user,supplied,task,p,the,primary,use,case,is,to,set,some,execution,context,around,the,task,s,invocation,or,to,provide,some,monitoring,statistics,for,task,execution,since,4,3;public,void,set,task,decorator,task,decorator,task,decorator,this,task,decorator,task,decorator
ThreadPoolTaskExecutor -> public void setTaskDecorator(TaskDecorator taskDecorator);1521420322;Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}_about to be executed._<p>Note that such a decorator is not necessarily being applied to the_user-supplied {@code Runnable}/{@code Callable} but rather to the actual_execution callback (which may be a wrapper around the user-supplied task)._<p>The primary use case is to set some execution context around the task's_invocation, or to provide some monitoring/statistics for task execution._@since 4.3;public void setTaskDecorator(TaskDecorator taskDecorator) {_		this.taskDecorator = taskDecorator__	};specify,a,custom,link,task,decorator,to,be,applied,to,any,link,runnable,about,to,be,executed,p,note,that,such,a,decorator,is,not,necessarily,being,applied,to,the,user,supplied,code,runnable,code,callable,but,rather,to,the,actual,execution,callback,which,may,be,a,wrapper,around,the,user,supplied,task,p,the,primary,use,case,is,to,set,some,execution,context,around,the,task,s,invocation,or,to,provide,some,monitoring,statistics,for,task,execution,since,4,3;public,void,set,task,decorator,task,decorator,task,decorator,this,task,decorator,task,decorator
ThreadPoolTaskExecutor -> public void setTaskDecorator(TaskDecorator taskDecorator);1530294194;Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}_about to be executed._<p>Note that such a decorator is not necessarily being applied to the_user-supplied {@code Runnable}/{@code Callable} but rather to the actual_execution callback (which may be a wrapper around the user-supplied task)._<p>The primary use case is to set some execution context around the task's_invocation, or to provide some monitoring/statistics for task execution._@since 4.3;public void setTaskDecorator(TaskDecorator taskDecorator) {_		this.taskDecorator = taskDecorator__	};specify,a,custom,link,task,decorator,to,be,applied,to,any,link,runnable,about,to,be,executed,p,note,that,such,a,decorator,is,not,necessarily,being,applied,to,the,user,supplied,code,runnable,code,callable,but,rather,to,the,actual,execution,callback,which,may,be,a,wrapper,around,the,user,supplied,task,p,the,primary,use,case,is,to,set,some,execution,context,around,the,task,s,invocation,or,to,provide,some,monitoring,statistics,for,task,execution,since,4,3;public,void,set,task,decorator,task,decorator,task,decorator,this,task,decorator,task,decorator
ThreadPoolTaskExecutor -> public void setTaskDecorator(TaskDecorator taskDecorator);1533213413;Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}_about to be executed._<p>Note that such a decorator is not necessarily being applied to the_user-supplied {@code Runnable}/{@code Callable} but rather to the actual_execution callback (which may be a wrapper around the user-supplied task)._<p>The primary use case is to set some execution context around the task's_invocation, or to provide some monitoring/statistics for task execution._@since 4.3;public void setTaskDecorator(TaskDecorator taskDecorator) {_		this.taskDecorator = taskDecorator__	};specify,a,custom,link,task,decorator,to,be,applied,to,any,link,runnable,about,to,be,executed,p,note,that,such,a,decorator,is,not,necessarily,being,applied,to,the,user,supplied,code,runnable,code,callable,but,rather,to,the,actual,execution,callback,which,may,be,a,wrapper,around,the,user,supplied,task,p,the,primary,use,case,is,to,set,some,execution,context,around,the,task,s,invocation,or,to,provide,some,monitoring,statistics,for,task,execution,since,4,3;public,void,set,task,decorator,task,decorator,task,decorator,this,task,decorator,task,decorator
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1356735495;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1368482696;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1378149521;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1383178438;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1388782627;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1411601340;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1455724682;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1467730834;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1498780456;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1521420322;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> @Override 	public boolean prefersShortLivedTasks();1530294194;This task executor prefers short-lived work units.;@Override_	public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;override,public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> public int getCorePoolSize();1328020251;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1356735495;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1357119239;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1368482696;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1378149521;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1383178438;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1388782627;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1411601340;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1455724682;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1467730834;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1498780456;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1521420322;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1530294194;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public int getCorePoolSize();1533213413;Return the ThreadPoolExecutor's core pool size.;public int getCorePoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.corePoolSize__		}_	};return,the,thread,pool,executor,s,core,pool,size;public,int,get,core,pool,size,synchronized,this,pool,size,monitor,return,this,core,pool,size
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1328020251;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false". Note that this feature is only available on Java 6_or above. On Java 5, consider switching to the backport-concurrent_version of ThreadPoolTaskExecutor which also supports this feature._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,note,that,this,feature,is,only,available,on,java,6,or,above,on,java,5,consider,switching,to,the,backport,concurrent,version,of,thread,pool,task,executor,which,also,supports,this,feature,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1356735495;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false". Note that this feature is only available on Java 6_or above. On Java 5, consider switching to the backport-concurrent_version of ThreadPoolTaskExecutor which also supports this feature._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,note,that,this,feature,is,only,available,on,java,6,or,above,on,java,5,consider,switching,to,the,backport,concurrent,version,of,thread,pool,task,executor,which,also,supports,this,feature,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1357119239;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false". Note that this feature is only available on Java 6_or above. On Java 5, consider switching to the backport-concurrent_version of ThreadPoolTaskExecutor which also supports this feature._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,note,that,this,feature,is,only,available,on,java,6,or,above,on,java,5,consider,switching,to,the,backport,concurrent,version,of,thread,pool,task,executor,which,also,supports,this,feature,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1368482696;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false". Note that this feature is only available on Java 6_or above. On Java 5, consider switching to the backport-concurrent_version of ThreadPoolTaskExecutor which also supports this feature._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,note,that,this,feature,is,only,available,on,java,6,or,above,on,java,5,consider,switching,to,the,backport,concurrent,version,of,thread,pool,task,executor,which,also,supports,this,feature,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1378149521;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1383178438;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1388782627;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1411601340;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1455724682;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1467730834;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1498780456;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1521420322;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1530294194;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1533213413;Specify whether to allow core threads to time out. This enables dynamic_growing and shrinking even in combination with a non-zero queue (since_the max pool size will only grow once the queue is full)._<p>Default is "false"._@see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean);public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut__	};specify,whether,to,allow,core,threads,to,time,out,this,enables,dynamic,growing,and,shrinking,even,in,combination,with,a,non,zero,queue,since,the,max,pool,size,will,only,grow,once,the,queue,is,full,p,default,is,false,see,java,util,concurrent,thread,pool,executor,allow,core,thread,time,out,boolean;public,void,set,allow,core,thread,time,out,boolean,allow,core,thread,time,out,this,allow,core,thread,time,out,allow,core,thread,time,out
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1328020251;Set the ThreadPoolExecutor's maximum pool size._Default is <code>Integer.MAX_VALUE</code>._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,code,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1356735495;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1357119239;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1368482696;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1378149521;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1383178438;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1388782627;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1411601340;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1455724682;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1467730834;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1498780456;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1521420322;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1530294194;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public void setMaxPoolSize(int maxPoolSize);1533213413;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setMaxPoolSize(int maxPoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.maxPoolSize = maxPoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setMaximumPoolSize(maxPoolSize)__			}_		}_	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,max,pool,size,int,max,pool,size,synchronized,this,pool,size,monitor,this,max,pool,size,max,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,maximum,pool,size,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1328020251;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1356735495;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1357119239;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1368482696;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1378149521;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1383178438;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1388782627;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1411601340;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1455724682;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1467730834;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1498780456;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1521420322;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1530294194;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public int getMaxPoolSize();1533213413;Return the ThreadPoolExecutor's maximum pool size.;public int getMaxPoolSize() {_		synchronized (this.poolSizeMonitor) {_			return this.maxPoolSize__		}_	};return,the,thread,pool,executor,s,maximum,pool,size;public,int,get,max,pool,size,synchronized,this,pool,size,monitor,return,this,max,pool,size
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1328020251;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never <code>null</code>)_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,code,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1356735495;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1357119239;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1368482696;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1378149521;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1383178438;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1388782627;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1411601340;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1455724682;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1467730834;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1498780456;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1521420322;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1530294194;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException;1533213413;Return the underlying ThreadPoolExecutor for native access._@return the underlying ThreadPoolExecutor (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet;public ThreadPoolExecutor getThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.threadPoolExecutor != null, "ThreadPoolTaskExecutor not initialized")__		return this.threadPoolExecutor__	};return,the,underlying,thread,pool,executor,for,native,access,return,the,underlying,thread,pool,executor,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,executor,hasn,t,been,initialized,yet;public,thread,pool,executor,get,thread,pool,executor,throws,illegal,state,exception,assert,state,this,thread,pool,executor,null,thread,pool,task,executor,not,initialized,return,this,thread,pool,executor
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1328020251;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1356735495;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1357119239;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1368482696;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1378149521;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1383178438;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1388782627;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1411601340;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1455724682;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<Runnable>(queueCapacity)__		}_		else {_			return new SynchronousQueue<Runnable>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,runnable,queue,capacity,else,return,new,synchronous,queue,runnable
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1467730834;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<>(queueCapacity)__		}_		else {_			return new SynchronousQueue<>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,queue,capacity,else,return,new,synchronous,queue
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1498780456;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<>(queueCapacity)__		}_		else {_			return new SynchronousQueue<>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,queue,capacity,else,return,new,synchronous,queue
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1521420322;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<>(queueCapacity)__		}_		else {_			return new SynchronousQueue<>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,queue,capacity,else,return,new,synchronous,queue
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1530294194;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<>(queueCapacity)__		}_		else {_			return new SynchronousQueue<>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,queue,capacity,else,return,new,synchronous,queue
ThreadPoolTaskExecutor -> protected BlockingQueue<Runnable> createQueue(int queueCapacity);1533213413;Create the BlockingQueue to use for the ThreadPoolExecutor._<p>A LinkedBlockingQueue instance will be created for a positive_capacity value_ a SynchronousQueue else._@param queueCapacity the specified queue capacity_@return the BlockingQueue instance_@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;protected BlockingQueue<Runnable> createQueue(int queueCapacity) {_		if (queueCapacity > 0) {_			return new LinkedBlockingQueue<>(queueCapacity)__		}_		else {_			return new SynchronousQueue<>()__		}_	};create,the,blocking,queue,to,use,for,the,thread,pool,executor,p,a,linked,blocking,queue,instance,will,be,created,for,a,positive,capacity,value,a,synchronous,queue,else,param,queue,capacity,the,specified,queue,capacity,return,the,blocking,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;protected,blocking,queue,runnable,create,queue,int,queue,capacity,if,queue,capacity,0,return,new,linked,blocking,queue,queue,capacity,else,return,new,synchronous,queue
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1328020251;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1356735495;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1357119239;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1368482696;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1378149521;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1383178438;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1388782627;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1411601340;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1455724682;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1467730834;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1498780456;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1521420322;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1530294194;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setCorePoolSize(int corePoolSize);1533213413;Set the ThreadPoolExecutor's core pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setCorePoolSize(int corePoolSize) {_		synchronized (this.poolSizeMonitor) {_			this.corePoolSize = corePoolSize__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setCorePoolSize(corePoolSize)__			}_		}_	};set,the,thread,pool,executor,s,core,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,core,pool,size,int,core,pool,size,synchronized,this,pool,size,monitor,this,core,pool,size,core,pool,size,if,this,thread,pool,executor,null,this,thread,pool,executor,set,core,pool,size,core,pool,size
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1328020251;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1356735495;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1357119239;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1368482696;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1378149521;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1383178438;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1388782627;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1411601340;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1455724682;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1467730834;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1498780456;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1521420322;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1530294194;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public void setKeepAliveSeconds(int keepAliveSeconds);1533213413;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setKeepAliveSeconds(int keepAliveSeconds) {_		synchronized (this.poolSizeMonitor) {_			this.keepAliveSeconds = keepAliveSeconds__			if (this.threadPoolExecutor != null) {_				this.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS)__			}_		}_	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,keep,alive,seconds,int,keep,alive,seconds,synchronized,this,pool,size,monitor,this,keep,alive,seconds,keep,alive,seconds,if,this,thread,pool,executor,null,this,thread,pool,executor,set,keep,alive,time,keep,alive,seconds,time,unit,seconds
ThreadPoolTaskExecutor -> public int getPoolSize();1328020251;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		return getThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,return,get,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1356735495;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		return getThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,return,get,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1357119239;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		return getThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,return,get,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1368482696;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		return getThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,return,get,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1378149521;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1383178438;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1388782627;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1411601340;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1455724682;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1467730834;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1498780456;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1521420322;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1530294194;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getPoolSize();1533213413;Return the current pool size._@see java.util.concurrent.ThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.threadPoolExecutor == null) {_			_			return this.corePoolSize__		}_		return this.threadPoolExecutor.getPoolSize()__	};return,the,current,pool,size,see,java,util,concurrent,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,thread,pool,executor,null,return,this,core,pool,size,return,this,thread,pool,executor,get,pool,size
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1328020251;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1356735495;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1357119239;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1368482696;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1378149521;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1383178438;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1388782627;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1411601340;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1455724682;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1467730834;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1498780456;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1521420322;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1530294194;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public int getKeepAliveSeconds();1533213413;Return the ThreadPoolExecutor's keep-alive seconds.;public int getKeepAliveSeconds() {_		synchronized (this.poolSizeMonitor) {_			return this.keepAliveSeconds__		}_	};return,the,thread,pool,executor,s,keep,alive,seconds;public,int,get,keep,alive,seconds,synchronized,this,pool,size,monitor,return,this,keep,alive,seconds
ThreadPoolTaskExecutor -> public boolean prefersShortLivedTasks();1328020251;This task executor prefers short-lived work units.;public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;public,boolean,prefers,short,lived,tasks,return,true
ThreadPoolTaskExecutor -> public boolean prefersShortLivedTasks();1357119239;This task executor prefers short-lived work units.;public boolean prefersShortLivedTasks() {_		return true__	};this,task,executor,prefers,short,lived,work,units;public,boolean,prefers,short,lived,tasks,return,true
