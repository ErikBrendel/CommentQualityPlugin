commented;modifiers;parameterAmount;loc;comment;code
false;public;3;4;;@Override public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {     this.singletonNames.put(beanName, beanDefinition.isSingleton()). }
false;public;2;4;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) {     return bean. }
false;public;2;22;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     if (bean instanceof ApplicationListener) {         // potentially not detected as a listener by getBeanNamesForType retrieval         Boolean flag = this.singletonNames.get(beanName).         if (Boolean.TRUE.equals(flag)) {             // singleton bean (top-level or inner): register on the fly             this.applicationContext.addApplicationListener((ApplicationListener<?>) bean).         } else if (Boolean.FALSE.equals(flag)) {             if (logger.isWarnEnabled() && !this.applicationContext.containsBean(beanName)) {                 // inner bean with other scope - can't reliably process events                 logger.warn("Inner bean '" + beanName + "' implements ApplicationListener interface " + "but is not reachable for event multicasting by its containing ApplicationContext " + "because it does not have singleton scope. Only top-level listener beans are allowed " + "to be of non-singleton scope.").             }             this.singletonNames.remove(beanName).         }     }     return bean. }
false;public;2;13;;@Override public void postProcessBeforeDestruction(Object bean, String beanName) {     if (bean instanceof ApplicationListener) {         try {             ApplicationEventMulticaster multicaster = this.applicationContext.getApplicationEventMulticaster().             multicaster.removeApplicationListener((ApplicationListener<?>) bean).             multicaster.removeApplicationListenerBean(beanName).         } catch (IllegalStateException ex) {         // ApplicationEventMulticaster not initialized yet - no need to remove a listener         }     } }
false;public;1;4;;@Override public boolean requiresDestruction(Object bean) {     return (bean instanceof ApplicationListener). }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof ApplicationListenerDetector && this.applicationContext == ((ApplicationListenerDetector) other).applicationContext)). }
false;public;0;4;;@Override public int hashCode() {     return ObjectUtils.nullSafeHashCode(this.applicationContext). }
