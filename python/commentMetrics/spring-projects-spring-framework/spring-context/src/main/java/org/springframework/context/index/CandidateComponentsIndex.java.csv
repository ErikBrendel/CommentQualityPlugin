# id;timestamp;commentText;codeText;commentWords;codeWords
CandidateComponentsIndex -> public Set<String> getCandidateTypes(String basePackage, String stereotype);1472736647;Return the candidate types that are associated with the specified stereotype._@param basePackage the package to check for candidates_@param stereotype the stereotype to use_@return the candidate types associated with the specified {@code stereotype}_or an empty set if none has been found for the specified {@code basePackage};public Set<String> getCandidateTypes(String basePackage, String stereotype) {_		List<String> candidates = this.index.get(stereotype)__		if (candidates != null) {_			return candidates.parallelStream()_					.filter(t -> t.startsWith(basePackage))_					.collect(Collectors.toSet())__		}_		return Collections.emptySet()__	};return,the,candidate,types,that,are,associated,with,the,specified,stereotype,param,base,package,the,package,to,check,for,candidates,param,stereotype,the,stereotype,to,use,return,the,candidate,types,associated,with,the,specified,code,stereotype,or,an,empty,set,if,none,has,been,found,for,the,specified,code,base,package;public,set,string,get,candidate,types,string,base,package,string,stereotype,list,string,candidates,this,index,get,stereotype,if,candidates,null,return,candidates,parallel,stream,filter,t,t,starts,with,base,package,collect,collectors,to,set,return,collections,empty,set
CandidateComponentsIndex -> public Set<String> getCandidateTypes(String basePackage, String stereotype);1484653615;Return the candidate types that are associated with the specified stereotype._@param basePackage the package to check for candidates_@param stereotype the stereotype to use_@return the candidate types associated with the specified {@code stereotype}_or an empty set if none has been found for the specified {@code basePackage};public Set<String> getCandidateTypes(String basePackage, String stereotype) {_		List<String> candidates = this.index.get(stereotype)__		if (candidates != null) {_			return candidates.parallelStream()_					.filter(t -> t.startsWith(basePackage))_					.collect(Collectors.toSet())__		}_		return Collections.emptySet()__	};return,the,candidate,types,that,are,associated,with,the,specified,stereotype,param,base,package,the,package,to,check,for,candidates,param,stereotype,the,stereotype,to,use,return,the,candidate,types,associated,with,the,specified,code,stereotype,or,an,empty,set,if,none,has,been,found,for,the,specified,code,base,package;public,set,string,get,candidate,types,string,base,package,string,stereotype,list,string,candidates,this,index,get,stereotype,if,candidates,null,return,candidates,parallel,stream,filter,t,t,starts,with,base,package,collect,collectors,to,set,return,collections,empty,set
CandidateComponentsIndex -> public Set<String> getCandidateTypes(String basePackage, String stereotype);1497250713;Return the candidate types that are associated with the specified stereotype._@param basePackage the package to check for candidates_@param stereotype the stereotype to use_@return the candidate types associated with the specified {@code stereotype}_or an empty set if none has been found for the specified {@code basePackage};public Set<String> getCandidateTypes(String basePackage, String stereotype) {_		List<String> candidates = this.index.get(stereotype)__		if (candidates != null) {_			return candidates.parallelStream()_					.filter(t -> t.startsWith(basePackage))_					.collect(Collectors.toSet())__		}_		return Collections.emptySet()__	};return,the,candidate,types,that,are,associated,with,the,specified,stereotype,param,base,package,the,package,to,check,for,candidates,param,stereotype,the,stereotype,to,use,return,the,candidate,types,associated,with,the,specified,code,stereotype,or,an,empty,set,if,none,has,been,found,for,the,specified,code,base,package;public,set,string,get,candidate,types,string,base,package,string,stereotype,list,string,candidates,this,index,get,stereotype,if,candidates,null,return,candidates,parallel,stream,filter,t,t,starts,with,base,package,collect,collectors,to,set,return,collections,empty,set
CandidateComponentsIndex -> public Set<String> getCandidateTypes(String basePackage, String stereotype);1497341594;Return the candidate types that are associated with the specified stereotype._@param basePackage the package to check for candidates_@param stereotype the stereotype to use_@return the candidate types associated with the specified {@code stereotype}_or an empty set if none has been found for the specified {@code basePackage};public Set<String> getCandidateTypes(String basePackage, String stereotype) {_		List<String> candidates = this.index.get(stereotype)__		if (candidates != null) {_			return candidates.parallelStream()_					.filter(t -> t.startsWith(basePackage))_					.collect(Collectors.toSet())__		}_		return Collections.emptySet()__	};return,the,candidate,types,that,are,associated,with,the,specified,stereotype,param,base,package,the,package,to,check,for,candidates,param,stereotype,the,stereotype,to,use,return,the,candidate,types,associated,with,the,specified,code,stereotype,or,an,empty,set,if,none,has,been,found,for,the,specified,code,base,package;public,set,string,get,candidate,types,string,base,package,string,stereotype,list,string,candidates,this,index,get,stereotype,if,candidates,null,return,candidates,parallel,stream,filter,t,t,starts,with,base,package,collect,collectors,to,set,return,collections,empty,set
CandidateComponentsIndex -> public Set<String> getCandidateTypes(String basePackage, String stereotype);1509977970;Return the candidate types that are associated with the specified stereotype._@param basePackage the package to check for candidates_@param stereotype the stereotype to use_@return the candidate types associated with the specified {@code stereotype}_or an empty set if none has been found for the specified {@code basePackage};public Set<String> getCandidateTypes(String basePackage, String stereotype) {_		List<Entry> candidates = this.index.get(stereotype)__		if (candidates != null) {_			return candidates.parallelStream()_					.filter(t -> t.match(basePackage))_					.map(t -> t.type)_					.collect(Collectors.toSet())__		}_		return Collections.emptySet()__	};return,the,candidate,types,that,are,associated,with,the,specified,stereotype,param,base,package,the,package,to,check,for,candidates,param,stereotype,the,stereotype,to,use,return,the,candidate,types,associated,with,the,specified,code,stereotype,or,an,empty,set,if,none,has,been,found,for,the,specified,code,base,package;public,set,string,get,candidate,types,string,base,package,string,stereotype,list,entry,candidates,this,index,get,stereotype,if,candidates,null,return,candidates,parallel,stream,filter,t,t,match,base,package,map,t,t,type,collect,collectors,to,set,return,collections,empty,set
CandidateComponentsIndex -> public Set<String> getCandidateTypes(String basePackage, String stereotype);1520528267;Return the candidate types that are associated with the specified stereotype._@param basePackage the package to check for candidates_@param stereotype the stereotype to use_@return the candidate types associated with the specified {@code stereotype}_or an empty set if none has been found for the specified {@code basePackage};public Set<String> getCandidateTypes(String basePackage, String stereotype) {_		List<Entry> candidates = this.index.get(stereotype)__		if (candidates != null) {_			return candidates.parallelStream()_					.filter(t -> t.match(basePackage))_					.map(t -> t.type)_					.collect(Collectors.toSet())__		}_		return Collections.emptySet()__	};return,the,candidate,types,that,are,associated,with,the,specified,stereotype,param,base,package,the,package,to,check,for,candidates,param,stereotype,the,stereotype,to,use,return,the,candidate,types,associated,with,the,specified,code,stereotype,or,an,empty,set,if,none,has,been,found,for,the,specified,code,base,package;public,set,string,get,candidate,types,string,base,package,string,stereotype,list,entry,candidates,this,index,get,stereotype,if,candidates,null,return,candidates,parallel,stream,filter,t,t,match,base,package,map,t,t,type,collect,collectors,to,set,return,collections,empty,set
