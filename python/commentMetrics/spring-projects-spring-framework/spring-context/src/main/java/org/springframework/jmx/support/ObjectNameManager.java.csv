commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;10;/**  * Retrieve the {@code ObjectName} instance corresponding to the supplied name.  * @param objectName the {@code ObjectName} in {@code ObjectName} or  * {@code String} format  * @return the {@code ObjectName} instance  * @throws MalformedObjectNameException in case of an invalid object name specification  * @see ObjectName#ObjectName(String)  * @see ObjectName#getInstance(String)  */ ;/**  * Retrieve the {@code ObjectName} instance corresponding to the supplied name.  * @param objectName the {@code ObjectName} in {@code ObjectName} or  * {@code String} format  * @return the {@code ObjectName} instance  * @throws MalformedObjectNameException in case of an invalid object name specification  * @see ObjectName#ObjectName(String)  * @see ObjectName#getInstance(String)  */ public static ObjectName getInstance(Object objectName) throws MalformedObjectNameException {     if (objectName instanceof ObjectName) {         return (ObjectName) objectName.     }     if (!(objectName instanceof String)) {         throw new MalformedObjectNameException("Invalid ObjectName value type [" + objectName.getClass().getName() + "]: only ObjectName and String supported.").     }     return getInstance((String) objectName). }
true;public,static;1;3;/**  * Retrieve the {@code ObjectName} instance corresponding to the supplied name.  * @param objectName the {@code ObjectName} in {@code String} format  * @return the {@code ObjectName} instance  * @throws MalformedObjectNameException in case of an invalid object name specification  * @see ObjectName#ObjectName(String)  * @see ObjectName#getInstance(String)  */ ;/**  * Retrieve the {@code ObjectName} instance corresponding to the supplied name.  * @param objectName the {@code ObjectName} in {@code String} format  * @return the {@code ObjectName} instance  * @throws MalformedObjectNameException in case of an invalid object name specification  * @see ObjectName#ObjectName(String)  * @see ObjectName#getInstance(String)  */ public static ObjectName getInstance(String objectName) throws MalformedObjectNameException {     return ObjectName.getInstance(objectName). }
true;public,static;3;5;/**  * Retrieve an {@code ObjectName} instance for the specified domain and a  * single property with the supplied key and value.  * @param domainName the domain name for the {@code ObjectName}  * @param key the key for the single property in the {@code ObjectName}  * @param value the value for the single property in the {@code ObjectName}  * @return the {@code ObjectName} instance  * @throws MalformedObjectNameException in case of an invalid object name specification  * @see ObjectName#ObjectName(String, String, String)  * @see ObjectName#getInstance(String, String, String)  */ ;/**  * Retrieve an {@code ObjectName} instance for the specified domain and a  * single property with the supplied key and value.  * @param domainName the domain name for the {@code ObjectName}  * @param key the key for the single property in the {@code ObjectName}  * @param value the value for the single property in the {@code ObjectName}  * @return the {@code ObjectName} instance  * @throws MalformedObjectNameException in case of an invalid object name specification  * @see ObjectName#ObjectName(String, String, String)  * @see ObjectName#getInstance(String, String, String)  */ public static ObjectName getInstance(String domainName, String key, String value) throws MalformedObjectNameException {     return ObjectName.getInstance(domainName, key, value). }
true;public,static;2;5;/**  * Retrieve an {@code ObjectName} instance with the specified domain name  * and the supplied key/name properties.  * @param domainName the domain name for the {@code ObjectName}  * @param properties the properties for the {@code ObjectName}  * @return the {@code ObjectName} instance  * @throws MalformedObjectNameException in case of an invalid object name specification  * @see ObjectName#ObjectName(String, java.util.Hashtable)  * @see ObjectName#getInstance(String, java.util.Hashtable)  */ ;/**  * Retrieve an {@code ObjectName} instance with the specified domain name  * and the supplied key/name properties.  * @param domainName the domain name for the {@code ObjectName}  * @param properties the properties for the {@code ObjectName}  * @return the {@code ObjectName} instance  * @throws MalformedObjectNameException in case of an invalid object name specification  * @see ObjectName#ObjectName(String, java.util.Hashtable)  * @see ObjectName#getInstance(String, java.util.Hashtable)  */ public static ObjectName getInstance(String domainName, Hashtable<String, String> properties) throws MalformedObjectNameException {     return ObjectName.getInstance(domainName, properties). }
