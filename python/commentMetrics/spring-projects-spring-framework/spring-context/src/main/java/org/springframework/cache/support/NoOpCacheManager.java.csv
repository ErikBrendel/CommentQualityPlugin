# id;timestamp;commentText;codeText;commentWords;codeWords
NoOpCacheManager -> public Collection<String> getCacheNames();1328020251;{@inheritDoc}__This implementation returns the name of the caches previously requested.;public Collection<String> getCacheNames() {_		return Collections.unmodifiableSet(names)__	};inherit,doc,this,implementation,returns,the,name,of,the,caches,previously,requested;public,collection,string,get,cache,names,return,collections,unmodifiable,set,names
NoOpCacheManager -> public Collection<String> getCacheNames();1355352386;This implementation returns the name of the caches previously requested.;public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> public Collection<String> getCacheNames();1357119239;This implementation returns the name of the caches previously requested.;public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	@Nullable 	public Cache getCache(String name);1502974979;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	@Nullable_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,nullable,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	@Nullable 	public Cache getCache(String name);1533034998;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	@Nullable_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.computeIfAbsent(name, key -> new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,nullable,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,compute,if,absent,name,key,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1356735495;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1368482696;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1383571901;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1396517842;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1450701275;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1467730834;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1468226067;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1477551992;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1502974979;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> @Override 	public Collection<String> getCacheNames();1533034998;This implementation returns the name of the caches previously requested.;@Override_	public Collection<String> getCacheNames() {_		synchronized (this.cacheNames) {_			return Collections.unmodifiableSet(this.cacheNames)__		}_	};this,implementation,returns,the,name,of,the,caches,previously,requested;override,public,collection,string,get,cache,names,synchronized,this,cache,names,return,collections,unmodifiable,set,this,cache,names
NoOpCacheManager -> public Cache getCache(String name);1328020251;{@inheritDoc}__This implementation always returns a {@link Cache} implementation that will not_store items. Additionally, the request cache will be remembered by the manager for consistency.;public Cache getCache(String name) {_		Cache cache = caches.get(name)__		if (cache == null) {_			caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (names) {_				names.add(name)__			}_		}__		return caches.get(name)__	};inherit,doc,this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;public,cache,get,cache,string,name,cache,cache,caches,get,name,if,cache,null,caches,put,if,absent,name,new,no,op,cache,name,synchronized,names,names,add,name,return,caches,get,name
NoOpCacheManager -> public Cache getCache(String name);1355352386;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> public Cache getCache(String name);1357119239;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Cache getCache(String name);1356735495;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Cache getCache(String name);1368482696;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Cache getCache(String name);1383571901;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Cache getCache(String name);1396517842;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Cache getCache(String name);1450701275;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Cache getCache(String name);1467730834;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Cache getCache(String name);1468226067;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
NoOpCacheManager -> @Override 	public Cache getCache(String name);1477551992;This implementation always returns a {@link Cache} implementation that will not store items._Additionally, the request cache will be remembered by the manager for consistency.;@Override_	public Cache getCache(String name) {_		Cache cache = this.caches.get(name)__		if (cache == null) {_			this.caches.putIfAbsent(name, new NoOpCache(name))__			synchronized (this.cacheNames) {_				this.cacheNames.add(name)__			}_		}__		return this.caches.get(name)__	};this,implementation,always,returns,a,link,cache,implementation,that,will,not,store,items,additionally,the,request,cache,will,be,remembered,by,the,manager,for,consistency;override,public,cache,get,cache,string,name,cache,cache,this,caches,get,name,if,cache,null,this,caches,put,if,absent,name,new,no,op,cache,name,synchronized,this,cache,names,this,cache,names,add,name,return,this,caches,get,name
