commented;modifiers;parameterAmount;loc;comment;code
true;public;1;13;/**  * This implementation always returns a {@link Cache} implementation that will not store items.  * Additionally, the request cache will be remembered by the manager for consistency.  */ ;/**  * This implementation always returns a {@link Cache} implementation that will not store items.  * Additionally, the request cache will be remembered by the manager for consistency.  */ @Override @Nullable public Cache getCache(String name) {     Cache cache = this.caches.get(name).     if (cache == null) {         this.caches.computeIfAbsent(name, key -> new NoOpCache(name)).         synchronized (this.cacheNames) {             this.cacheNames.add(name).         }     }     return this.caches.get(name). }
true;public;0;6;/**  * This implementation returns the name of the caches previously requested.  */ ;/**  * This implementation returns the name of the caches previously requested.  */ @Override public Collection<String> getCacheNames() {     synchronized (this.cacheNames) {         return Collections.unmodifiableSet(this.cacheNames).     } }
