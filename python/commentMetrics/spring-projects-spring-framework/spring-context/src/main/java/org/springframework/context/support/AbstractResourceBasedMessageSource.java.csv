# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractResourceBasedMessageSource -> protected String getDefaultEncoding();1454612260;Return the default charset to use for parsing properties files, if any._@since 4.3;protected String getDefaultEncoding() {_		return this.defaultEncoding__	};return,the,default,charset,to,use,for,parsing,properties,files,if,any,since,4,3;protected,string,get,default,encoding,return,this,default,encoding
AbstractResourceBasedMessageSource -> protected String getDefaultEncoding();1454617957;Return the default charset to use for parsing properties files, if any._@since 4.3;protected String getDefaultEncoding() {_		return this.defaultEncoding__	};return,the,default,charset,to,use,for,parsing,properties,files,if,any,since,4,3;protected,string,get,default,encoding,return,this,default,encoding
AbstractResourceBasedMessageSource -> protected String getDefaultEncoding();1467730834;Return the default charset to use for parsing properties files, if any._@since 4.3;protected String getDefaultEncoding() {_		return this.defaultEncoding__	};return,the,default,charset,to,use,for,parsing,properties,files,if,any,since,4,3;protected,string,get,default,encoding,return,this,default,encoding
AbstractResourceBasedMessageSource -> public void setBasename(String basename);1454612260;Set a single basename, following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: .g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._@param basename the single basename_@see #setBasenames_@see org.springframework.core.io.ResourceEditor_@see java.util.ResourceBundle;public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,param,basename,the,single,basename,see,set,basenames,see,org,springframework,core,io,resource,editor,see,java,util,resource,bundle;public,void,set,basename,string,basename,set,basenames,basename
AbstractResourceBasedMessageSource -> public void setBasename(String basename);1454617957;Set a single basename, following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._@param basename the single basename_@see #setBasenames_@see org.springframework.core.io.ResourceEditor_@see java.util.ResourceBundle;public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,param,basename,the,single,basename,see,set,basenames,see,org,springframework,core,io,resource,editor,see,java,util,resource,bundle;public,void,set,basename,string,basename,set,basenames,basename
AbstractResourceBasedMessageSource -> public void setBasename(String basename);1467730834;Set a single basename, following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._@param basename the single basename_@see #setBasenames_@see org.springframework.core.io.ResourceEditor_@see java.util.ResourceBundle;public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,param,basename,the,single,basename,see,set,basenames,see,org,springframework,core,io,resource,editor,see,java,util,resource,bundle;public,void,set,basename,string,basename,set,basenames,basename
AbstractResourceBasedMessageSource -> public void setBasename(String basename);1495868221;Set a single basename, following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._@param basename the single basename_@see #setBasenames_@see org.springframework.core.io.ResourceEditor_@see java.util.ResourceBundle;public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,param,basename,the,single,basename,see,set,basenames,see,org,springframework,core,io,resource,editor,see,java,util,resource,bundle;public,void,set,basename,string,basename,set,basenames,basename
AbstractResourceBasedMessageSource -> public void setBasename(String basename);1500448076;Set a single basename, following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._@param basename the single basename_@see #setBasenames_@see org.springframework.core.io.ResourceEditor_@see java.util.ResourceBundle;public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,param,basename,the,single,basename,see,set,basenames,see,org,springframework,core,io,resource,editor,see,java,util,resource,bundle;public,void,set,basename,string,basename,set,basenames,basename
AbstractResourceBasedMessageSource -> public void setBasename(String basename);1500457438;Set a single basename, following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._@param basename the single basename_@see #setBasenames_@see org.springframework.core.io.ResourceEditor_@see java.util.ResourceBundle;public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,param,basename,the,single,basename,see,set,basenames,see,org,springframework,core,io,resource,editor,see,java,util,resource,bundle;public,void,set,basename,string,basename,set,basenames,basename
AbstractResourceBasedMessageSource -> public void setBasename(String basename);1525211434;Set a single basename, following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._@param basename the single basename_@see #setBasenames_@see org.springframework.core.io.ResourceEditor_@see java.util.ResourceBundle;public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,param,basename,the,single,basename,see,set,basenames,see,org,springframework,core,io,resource,editor,see,java,util,resource,bundle;public,void,set,basename,string,basename,set,basenames,basename
AbstractResourceBasedMessageSource -> public void setCacheMillis(long cacheMillis);1454612260;Set the number of milliseconds to cache loaded properties files._Note that it is common to set seconds instead: {@link #setCacheSeconds}._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of milliseconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_@since 4.3_@see #setCacheSeconds;public void setCacheMillis(long cacheMillis) {_		this.cacheMillis = cacheMillis__	};set,the,number,of,milliseconds,to,cache,loaded,properties,files,note,that,it,is,common,to,set,seconds,instead,link,set,cache,seconds,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,milliseconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,since,4,3,see,set,cache,seconds;public,void,set,cache,millis,long,cache,millis,this,cache,millis,cache,millis
AbstractResourceBasedMessageSource -> public void setCacheMillis(long cacheMillis);1454617957;Set the number of milliseconds to cache loaded properties files._Note that it is common to set seconds instead: {@link #setCacheSeconds}._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of milliseconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_@since 4.3_@see #setCacheSeconds;public void setCacheMillis(long cacheMillis) {_		this.cacheMillis = cacheMillis__	};set,the,number,of,milliseconds,to,cache,loaded,properties,files,note,that,it,is,common,to,set,seconds,instead,link,set,cache,seconds,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,milliseconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,since,4,3,see,set,cache,seconds;public,void,set,cache,millis,long,cache,millis,this,cache,millis,cache,millis
AbstractResourceBasedMessageSource -> public void setCacheMillis(long cacheMillis);1467730834;Set the number of milliseconds to cache loaded properties files._Note that it is common to set seconds instead: {@link #setCacheSeconds}._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of milliseconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_@since 4.3_@see #setCacheSeconds;public void setCacheMillis(long cacheMillis) {_		this.cacheMillis = cacheMillis__	};set,the,number,of,milliseconds,to,cache,loaded,properties,files,note,that,it,is,common,to,set,seconds,instead,link,set,cache,seconds,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,milliseconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,since,4,3,see,set,cache,seconds;public,void,set,cache,millis,long,cache,millis,this,cache,millis,cache,millis
AbstractResourceBasedMessageSource -> public void setCacheMillis(long cacheMillis);1495868221;Set the number of milliseconds to cache loaded properties files._Note that it is common to set seconds instead: {@link #setCacheSeconds}._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of milliseconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_@since 4.3_@see #setCacheSeconds;public void setCacheMillis(long cacheMillis) {_		this.cacheMillis = cacheMillis__	};set,the,number,of,milliseconds,to,cache,loaded,properties,files,note,that,it,is,common,to,set,seconds,instead,link,set,cache,seconds,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,milliseconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,since,4,3,see,set,cache,seconds;public,void,set,cache,millis,long,cache,millis,this,cache,millis,cache,millis
AbstractResourceBasedMessageSource -> public void setCacheMillis(long cacheMillis);1500448076;Set the number of milliseconds to cache loaded properties files._Note that it is common to set seconds instead: {@link #setCacheSeconds}._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of milliseconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_@since 4.3_@see #setCacheSeconds;public void setCacheMillis(long cacheMillis) {_		this.cacheMillis = cacheMillis__	};set,the,number,of,milliseconds,to,cache,loaded,properties,files,note,that,it,is,common,to,set,seconds,instead,link,set,cache,seconds,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,milliseconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,since,4,3,see,set,cache,seconds;public,void,set,cache,millis,long,cache,millis,this,cache,millis,cache,millis
AbstractResourceBasedMessageSource -> public void setCacheMillis(long cacheMillis);1500457438;Set the number of milliseconds to cache loaded properties files._Note that it is common to set seconds instead: {@link #setCacheSeconds}._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of milliseconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_@since 4.3_@see #setCacheSeconds;public void setCacheMillis(long cacheMillis) {_		this.cacheMillis = cacheMillis__	};set,the,number,of,milliseconds,to,cache,loaded,properties,files,note,that,it,is,common,to,set,seconds,instead,link,set,cache,seconds,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,milliseconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,since,4,3,see,set,cache,seconds;public,void,set,cache,millis,long,cache,millis,this,cache,millis,cache,millis
AbstractResourceBasedMessageSource -> public void setCacheMillis(long cacheMillis);1525211434;Set the number of milliseconds to cache loaded properties files._Note that it is common to set seconds instead: {@link #setCacheSeconds}._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of milliseconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_@since 4.3_@see #setCacheSeconds;public void setCacheMillis(long cacheMillis) {_		this.cacheMillis = cacheMillis__	};set,the,number,of,milliseconds,to,cache,loaded,properties,files,note,that,it,is,common,to,set,seconds,instead,link,set,cache,seconds,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,milliseconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,since,4,3,see,set,cache,seconds;public,void,set,cache,millis,long,cache,millis,this,cache,millis,cache,millis
AbstractResourceBasedMessageSource -> public void setBasenames(String... basenames);1454612260;Set an array of basenames, each following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: .g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note: In contrast to {@link #addBasenames}, this replaces existing entries_with the given names and can therefore also be used to reset the configuration._@param basenames an array of basenames_@see #setBasename_@see java.util.ResourceBundle;public void setBasenames(String... basenames) {_		this.basenameSet.clear()__		addBasenames(basenames)__	};set,an,array,of,basenames,each,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,in,contrast,to,link,add,basenames,this,replaces,existing,entries,with,the,given,names,and,can,therefore,also,be,used,to,reset,the,configuration,param,basenames,an,array,of,basenames,see,set,basename,see,java,util,resource,bundle;public,void,set,basenames,string,basenames,this,basename,set,clear,add,basenames,basenames
AbstractResourceBasedMessageSource -> public void setBasenames(String... basenames);1454617957;Set an array of basenames, each following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note: In contrast to {@link #addBasenames}, this replaces existing entries_with the given names and can therefore also be used to reset the configuration._@param basenames an array of basenames_@see #setBasename_@see java.util.ResourceBundle;public void setBasenames(String... basenames) {_		this.basenameSet.clear()__		addBasenames(basenames)__	};set,an,array,of,basenames,each,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,in,contrast,to,link,add,basenames,this,replaces,existing,entries,with,the,given,names,and,can,therefore,also,be,used,to,reset,the,configuration,param,basenames,an,array,of,basenames,see,set,basename,see,java,util,resource,bundle;public,void,set,basenames,string,basenames,this,basename,set,clear,add,basenames,basenames
AbstractResourceBasedMessageSource -> public void setBasenames(String... basenames);1467730834;Set an array of basenames, each following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note: In contrast to {@link #addBasenames}, this replaces existing entries_with the given names and can therefore also be used to reset the configuration._@param basenames an array of basenames_@see #setBasename_@see java.util.ResourceBundle;public void setBasenames(String... basenames) {_		this.basenameSet.clear()__		addBasenames(basenames)__	};set,an,array,of,basenames,each,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,in,contrast,to,link,add,basenames,this,replaces,existing,entries,with,the,given,names,and,can,therefore,also,be,used,to,reset,the,configuration,param,basenames,an,array,of,basenames,see,set,basename,see,java,util,resource,bundle;public,void,set,basenames,string,basenames,this,basename,set,clear,add,basenames,basenames
AbstractResourceBasedMessageSource -> public void setBasenames(String... basenames);1495868221;Set an array of basenames, each following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note: In contrast to {@link #addBasenames}, this replaces existing entries_with the given names and can therefore also be used to reset the configuration._@param basenames an array of basenames_@see #setBasename_@see java.util.ResourceBundle;public void setBasenames(String... basenames) {_		this.basenameSet.clear()__		addBasenames(basenames)__	};set,an,array,of,basenames,each,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,in,contrast,to,link,add,basenames,this,replaces,existing,entries,with,the,given,names,and,can,therefore,also,be,used,to,reset,the,configuration,param,basenames,an,array,of,basenames,see,set,basename,see,java,util,resource,bundle;public,void,set,basenames,string,basenames,this,basename,set,clear,add,basenames,basenames
AbstractResourceBasedMessageSource -> public void setBasenames(String... basenames);1500448076;Set an array of basenames, each following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note: In contrast to {@link #addBasenames}, this replaces existing entries_with the given names and can therefore also be used to reset the configuration._@param basenames an array of basenames_@see #setBasename_@see java.util.ResourceBundle;public void setBasenames(String... basenames) {_		this.basenameSet.clear()__		addBasenames(basenames)__	};set,an,array,of,basenames,each,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,in,contrast,to,link,add,basenames,this,replaces,existing,entries,with,the,given,names,and,can,therefore,also,be,used,to,reset,the,configuration,param,basenames,an,array,of,basenames,see,set,basename,see,java,util,resource,bundle;public,void,set,basenames,string,basenames,this,basename,set,clear,add,basenames,basenames
AbstractResourceBasedMessageSource -> public void setBasenames(String... basenames);1500457438;Set an array of basenames, each following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note: In contrast to {@link #addBasenames}, this replaces existing entries_with the given names and can therefore also be used to reset the configuration._@param basenames an array of basenames_@see #setBasename_@see java.util.ResourceBundle;public void setBasenames(String... basenames) {_		this.basenameSet.clear()__		addBasenames(basenames)__	};set,an,array,of,basenames,each,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,in,contrast,to,link,add,basenames,this,replaces,existing,entries,with,the,given,names,and,can,therefore,also,be,used,to,reset,the,configuration,param,basenames,an,array,of,basenames,see,set,basename,see,java,util,resource,bundle;public,void,set,basenames,string,basenames,this,basename,set,clear,add,basenames,basenames
AbstractResourceBasedMessageSource -> public void setBasenames(String... basenames);1525211434;Set an array of basenames, each following the basic ResourceBundle convention_of not specifying file extension or language codes. The resource location_format is up to the specific {@code MessageSource} implementation._<p>Regular and XMl properties files are supported: e.g. "messages" will find_a "messages.properties", "messages_en.properties" etc arrangement as well_as "messages.xml", "messages_en.xml" etc._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note: In contrast to {@link #addBasenames}, this replaces existing entries_with the given names and can therefore also be used to reset the configuration._@param basenames an array of basenames_@see #setBasename_@see java.util.ResourceBundle;public void setBasenames(String... basenames) {_		this.basenameSet.clear()__		addBasenames(basenames)__	};set,an,array,of,basenames,each,following,the,basic,resource,bundle,convention,of,not,specifying,file,extension,or,language,codes,the,resource,location,format,is,up,to,the,specific,code,message,source,implementation,p,regular,and,xml,properties,files,are,supported,e,g,messages,will,find,a,messages,properties,properties,etc,arrangement,as,well,as,messages,xml,xml,etc,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,in,contrast,to,link,add,basenames,this,replaces,existing,entries,with,the,given,names,and,can,therefore,also,be,used,to,reset,the,configuration,param,basenames,an,array,of,basenames,see,set,basename,see,java,util,resource,bundle;public,void,set,basenames,string,basenames,this,basename,set,clear,add,basenames,basenames
AbstractResourceBasedMessageSource -> public void setCacheSeconds(int cacheSeconds);1454612260;Set the number of seconds to cache loaded properties files._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_<p><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Prefer {@link ReloadableResourceBundleMessageSource} over_{@link ResourceBundleMessageSource} in such a scenario, in combination with_a non-classpath location.;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,properties,files,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,p,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,prefer,link,reloadable,resource,bundle,message,source,over,link,resource,bundle,message,source,in,such,a,scenario,in,combination,with,a,non,classpath,location;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
AbstractResourceBasedMessageSource -> public void setCacheSeconds(int cacheSeconds);1454617957;Set the number of seconds to cache loaded properties files._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_<p><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Prefer {@link ReloadableResourceBundleMessageSource} over_{@link ResourceBundleMessageSource} in such a scenario, in combination with_a non-classpath location.;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,properties,files,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,p,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,prefer,link,reloadable,resource,bundle,message,source,over,link,resource,bundle,message,source,in,such,a,scenario,in,combination,with,a,non,classpath,location;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
AbstractResourceBasedMessageSource -> public void setCacheSeconds(int cacheSeconds);1467730834;Set the number of seconds to cache loaded properties files._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_<p><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Prefer {@link ReloadableResourceBundleMessageSource} over_{@link ResourceBundleMessageSource} in such a scenario, in combination with_a non-classpath location.;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,properties,files,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,p,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,prefer,link,reloadable,resource,bundle,message,source,over,link,resource,bundle,message,source,in,such,a,scenario,in,combination,with,a,non,classpath,location;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
AbstractResourceBasedMessageSource -> public void setCacheSeconds(int cacheSeconds);1495868221;Set the number of seconds to cache loaded properties files._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_<p><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Prefer {@link ReloadableResourceBundleMessageSource} over_{@link ResourceBundleMessageSource} in such a scenario, in combination with_a non-classpath location.;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,properties,files,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,p,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,prefer,link,reloadable,resource,bundle,message,source,over,link,resource,bundle,message,source,in,such,a,scenario,in,combination,with,a,non,classpath,location;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
AbstractResourceBasedMessageSource -> public void setCacheSeconds(int cacheSeconds);1500448076;Set the number of seconds to cache loaded properties files._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_<p><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Prefer {@link ReloadableResourceBundleMessageSource} over_{@link ResourceBundleMessageSource} in such a scenario, in combination with_a non-classpath location.;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,properties,files,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,p,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,prefer,link,reloadable,resource,bundle,message,source,over,link,resource,bundle,message,source,in,such,a,scenario,in,combination,with,a,non,classpath,location;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
AbstractResourceBasedMessageSource -> public void setCacheSeconds(int cacheSeconds);1500457438;Set the number of seconds to cache loaded properties files._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_<p><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Prefer {@link ReloadableResourceBundleMessageSource} over_{@link ResourceBundleMessageSource} in such a scenario, in combination with_a non-classpath location.;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,properties,files,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,p,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,prefer,link,reloadable,resource,bundle,message,source,over,link,resource,bundle,message,source,in,such,a,scenario,in,combination,with,a,non,classpath,location;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
AbstractResourceBasedMessageSource -> public void setCacheSeconds(int cacheSeconds);1525211434;Set the number of seconds to cache loaded properties files._<ul>_<li>Default is "-1", indicating to cache forever (just like_{@code java.util.ResourceBundle})._<li>A positive number will cache loaded properties files for the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_</ul>_<p><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Prefer {@link ReloadableResourceBundleMessageSource} over_{@link ResourceBundleMessageSource} in such a scenario, in combination with_a non-classpath location.;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,properties,files,ul,li,default,is,1,indicating,to,cache,forever,just,like,code,java,util,resource,bundle,li,a,positive,number,will,cache,loaded,properties,files,for,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,ul,p,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,prefer,link,reloadable,resource,bundle,message,source,over,link,resource,bundle,message,source,in,such,a,scenario,in,combination,with,a,non,classpath,location;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
AbstractResourceBasedMessageSource -> public void setDefaultEncoding(String defaultEncoding);1454612260;Set the default charset to use for parsing properties files._Used if no file-specific charset is specified for a file._<p>Default is none, using the {@code java.util.Properties}_default encoding: ISO-8859-1._<p>Only applies to classic properties files, not to XML files._@param defaultEncoding the default charset;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,properties,files,used,if,no,file,specific,charset,is,specified,for,a,file,p,default,is,none,using,the,code,java,util,properties,default,encoding,iso,8859,1,p,only,applies,to,classic,properties,files,not,to,xml,files,param,default,encoding,the,default,charset;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
AbstractResourceBasedMessageSource -> public void setDefaultEncoding(String defaultEncoding);1454617957;Set the default charset to use for parsing properties files._Used if no file-specific charset is specified for a file._<p>Default is none, using the {@code java.util.Properties}_default encoding: ISO-8859-1._<p>Only applies to classic properties files, not to XML files._@param defaultEncoding the default charset;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,properties,files,used,if,no,file,specific,charset,is,specified,for,a,file,p,default,is,none,using,the,code,java,util,properties,default,encoding,iso,8859,1,p,only,applies,to,classic,properties,files,not,to,xml,files,param,default,encoding,the,default,charset;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
AbstractResourceBasedMessageSource -> public void setDefaultEncoding(String defaultEncoding);1467730834;Set the default charset to use for parsing properties files._Used if no file-specific charset is specified for a file._<p>Default is none, using the {@code java.util.Properties}_default encoding: ISO-8859-1._<p>Only applies to classic properties files, not to XML files._@param defaultEncoding the default charset;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,properties,files,used,if,no,file,specific,charset,is,specified,for,a,file,p,default,is,none,using,the,code,java,util,properties,default,encoding,iso,8859,1,p,only,applies,to,classic,properties,files,not,to,xml,files,param,default,encoding,the,default,charset;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
AbstractResourceBasedMessageSource -> public void setDefaultEncoding(String defaultEncoding);1495868221;Set the default charset to use for parsing properties files._Used if no file-specific charset is specified for a file._<p>Default is none, using the {@code java.util.Properties}_default encoding: ISO-8859-1._<p>Only applies to classic properties files, not to XML files._@param defaultEncoding the default charset;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,properties,files,used,if,no,file,specific,charset,is,specified,for,a,file,p,default,is,none,using,the,code,java,util,properties,default,encoding,iso,8859,1,p,only,applies,to,classic,properties,files,not,to,xml,files,param,default,encoding,the,default,charset;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
AbstractResourceBasedMessageSource -> protected long getCacheMillis();1454612260;Return the number of milliseconds to cache loaded properties files._@since 4.3;protected long getCacheMillis() {_		return this.cacheMillis__	};return,the,number,of,milliseconds,to,cache,loaded,properties,files,since,4,3;protected,long,get,cache,millis,return,this,cache,millis
AbstractResourceBasedMessageSource -> protected long getCacheMillis();1454617957;Return the number of milliseconds to cache loaded properties files._@since 4.3;protected long getCacheMillis() {_		return this.cacheMillis__	};return,the,number,of,milliseconds,to,cache,loaded,properties,files,since,4,3;protected,long,get,cache,millis,return,this,cache,millis
AbstractResourceBasedMessageSource -> protected long getCacheMillis();1467730834;Return the number of milliseconds to cache loaded properties files._@since 4.3;protected long getCacheMillis() {_		return this.cacheMillis__	};return,the,number,of,milliseconds,to,cache,loaded,properties,files,since,4,3;protected,long,get,cache,millis,return,this,cache,millis
AbstractResourceBasedMessageSource -> protected long getCacheMillis();1495868221;Return the number of milliseconds to cache loaded properties files._@since 4.3;protected long getCacheMillis() {_		return this.cacheMillis__	};return,the,number,of,milliseconds,to,cache,loaded,properties,files,since,4,3;protected,long,get,cache,millis,return,this,cache,millis
AbstractResourceBasedMessageSource -> protected long getCacheMillis();1500448076;Return the number of milliseconds to cache loaded properties files._@since 4.3;protected long getCacheMillis() {_		return this.cacheMillis__	};return,the,number,of,milliseconds,to,cache,loaded,properties,files,since,4,3;protected,long,get,cache,millis,return,this,cache,millis
AbstractResourceBasedMessageSource -> protected long getCacheMillis();1500457438;Return the number of milliseconds to cache loaded properties files._@since 4.3;protected long getCacheMillis() {_		return this.cacheMillis__	};return,the,number,of,milliseconds,to,cache,loaded,properties,files,since,4,3;protected,long,get,cache,millis,return,this,cache,millis
AbstractResourceBasedMessageSource -> protected long getCacheMillis();1525211434;Return the number of milliseconds to cache loaded properties files._@since 4.3;protected long getCacheMillis() {_		return this.cacheMillis__	};return,the,number,of,milliseconds,to,cache,loaded,properties,files,since,4,3;protected,long,get,cache,millis,return,this,cache,millis
AbstractResourceBasedMessageSource -> @Nullable 	protected String getDefaultEncoding();1495868221;Return the default charset to use for parsing properties files, if any._@since 4.3;@Nullable_	protected String getDefaultEncoding() {_		return this.defaultEncoding__	};return,the,default,charset,to,use,for,parsing,properties,files,if,any,since,4,3;nullable,protected,string,get,default,encoding,return,this,default,encoding
AbstractResourceBasedMessageSource -> @Nullable 	protected String getDefaultEncoding();1500448076;Return the default charset to use for parsing properties files, if any._@since 4.3;@Nullable_	protected String getDefaultEncoding() {_		return this.defaultEncoding__	};return,the,default,charset,to,use,for,parsing,properties,files,if,any,since,4,3;nullable,protected,string,get,default,encoding,return,this,default,encoding
AbstractResourceBasedMessageSource -> @Nullable 	protected String getDefaultEncoding();1500457438;Return the default charset to use for parsing properties files, if any._@since 4.3;@Nullable_	protected String getDefaultEncoding() {_		return this.defaultEncoding__	};return,the,default,charset,to,use,for,parsing,properties,files,if,any,since,4,3;nullable,protected,string,get,default,encoding,return,this,default,encoding
AbstractResourceBasedMessageSource -> @Nullable 	protected String getDefaultEncoding();1525211434;Return the default charset to use for parsing properties files, if any._@since 4.3;@Nullable_	protected String getDefaultEncoding() {_		return this.defaultEncoding__	};return,the,default,charset,to,use,for,parsing,properties,files,if,any,since,4,3;nullable,protected,string,get,default,encoding,return,this,default,encoding
AbstractResourceBasedMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1454612260;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
AbstractResourceBasedMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1454617957;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
AbstractResourceBasedMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1467730834;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
AbstractResourceBasedMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1495868221;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
AbstractResourceBasedMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1500448076;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
AbstractResourceBasedMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1500457438;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
AbstractResourceBasedMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1525211434;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
AbstractResourceBasedMessageSource -> public void setDefaultEncoding(@Nullable String defaultEncoding);1500448076;Set the default charset to use for parsing properties files._Used if no file-specific charset is specified for a file._<p>Default is none, using the {@code java.util.Properties}_default encoding: ISO-8859-1._<p>Only applies to classic properties files, not to XML files._@param defaultEncoding the default charset;public void setDefaultEncoding(@Nullable String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,properties,files,used,if,no,file,specific,charset,is,specified,for,a,file,p,default,is,none,using,the,code,java,util,properties,default,encoding,iso,8859,1,p,only,applies,to,classic,properties,files,not,to,xml,files,param,default,encoding,the,default,charset;public,void,set,default,encoding,nullable,string,default,encoding,this,default,encoding,default,encoding
AbstractResourceBasedMessageSource -> public void setDefaultEncoding(@Nullable String defaultEncoding);1500457438;Set the default charset to use for parsing properties files._Used if no file-specific charset is specified for a file._<p>Default is none, using the {@code java.util.Properties}_default encoding: ISO-8859-1._<p>Only applies to classic properties files, not to XML files._@param defaultEncoding the default charset;public void setDefaultEncoding(@Nullable String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,properties,files,used,if,no,file,specific,charset,is,specified,for,a,file,p,default,is,none,using,the,code,java,util,properties,default,encoding,iso,8859,1,p,only,applies,to,classic,properties,files,not,to,xml,files,param,default,encoding,the,default,charset;public,void,set,default,encoding,nullable,string,default,encoding,this,default,encoding,default,encoding
AbstractResourceBasedMessageSource -> public void setDefaultEncoding(@Nullable String defaultEncoding);1525211434;Set the default charset to use for parsing properties files._Used if no file-specific charset is specified for a file._<p>The effective default is the {@code java.util.Properties}_default encoding: ISO-8859-1. A {@code null} value indicates_the platform default encoding._<p>Only applies to classic properties files, not to XML files._@param defaultEncoding the default charset;public void setDefaultEncoding(@Nullable String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,properties,files,used,if,no,file,specific,charset,is,specified,for,a,file,p,the,effective,default,is,the,code,java,util,properties,default,encoding,iso,8859,1,a,code,null,value,indicates,the,platform,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,param,default,encoding,the,default,charset;public,void,set,default,encoding,nullable,string,default,encoding,this,default,encoding,default,encoding
AbstractResourceBasedMessageSource -> protected boolean isFallbackToSystemLocale();1454612260;Return whether to fall back to the system Locale if no files for a specific_Locale have been found._@since 4.3;protected boolean isFallbackToSystemLocale() {_		return this.fallbackToSystemLocale__	};return,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,since,4,3;protected,boolean,is,fallback,to,system,locale,return,this,fallback,to,system,locale
AbstractResourceBasedMessageSource -> protected boolean isFallbackToSystemLocale();1454617957;Return whether to fall back to the system Locale if no files for a specific_Locale have been found._@since 4.3;protected boolean isFallbackToSystemLocale() {_		return this.fallbackToSystemLocale__	};return,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,since,4,3;protected,boolean,is,fallback,to,system,locale,return,this,fallback,to,system,locale
AbstractResourceBasedMessageSource -> protected boolean isFallbackToSystemLocale();1467730834;Return whether to fall back to the system Locale if no files for a specific_Locale have been found._@since 4.3;protected boolean isFallbackToSystemLocale() {_		return this.fallbackToSystemLocale__	};return,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,since,4,3;protected,boolean,is,fallback,to,system,locale,return,this,fallback,to,system,locale
AbstractResourceBasedMessageSource -> protected boolean isFallbackToSystemLocale();1495868221;Return whether to fall back to the system Locale if no files for a specific_Locale have been found._@since 4.3;protected boolean isFallbackToSystemLocale() {_		return this.fallbackToSystemLocale__	};return,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,since,4,3;protected,boolean,is,fallback,to,system,locale,return,this,fallback,to,system,locale
AbstractResourceBasedMessageSource -> protected boolean isFallbackToSystemLocale();1500448076;Return whether to fall back to the system Locale if no files for a specific_Locale have been found._@since 4.3;protected boolean isFallbackToSystemLocale() {_		return this.fallbackToSystemLocale__	};return,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,since,4,3;protected,boolean,is,fallback,to,system,locale,return,this,fallback,to,system,locale
AbstractResourceBasedMessageSource -> protected boolean isFallbackToSystemLocale();1500457438;Return whether to fall back to the system Locale if no files for a specific_Locale have been found._@since 4.3;protected boolean isFallbackToSystemLocale() {_		return this.fallbackToSystemLocale__	};return,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,since,4,3;protected,boolean,is,fallback,to,system,locale,return,this,fallback,to,system,locale
AbstractResourceBasedMessageSource -> protected boolean isFallbackToSystemLocale();1525211434;Return whether to fall back to the system Locale if no files for a specific_Locale have been found._@since 4.3;protected boolean isFallbackToSystemLocale() {_		return this.fallbackToSystemLocale__	};return,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,since,4,3;protected,boolean,is,fallback,to,system,locale,return,this,fallback,to,system,locale
AbstractResourceBasedMessageSource -> public Set<String> getBasenameSet();1454612260;Return this {@code MessageSource}'s basename set, containing entries_in the order of registration._<p>Calling code may introspect this set as well as add or remove entries._@since 4.3_@see #addBasenames;public Set<String> getBasenameSet() {_		return this.basenameSet__	};return,this,code,message,source,s,basename,set,containing,entries,in,the,order,of,registration,p,calling,code,may,introspect,this,set,as,well,as,add,or,remove,entries,since,4,3,see,add,basenames;public,set,string,get,basename,set,return,this,basename,set
AbstractResourceBasedMessageSource -> public Set<String> getBasenameSet();1454617957;Return this {@code MessageSource}'s basename set, containing entries_in the order of registration._<p>Calling code may introspect this set as well as add or remove entries._@since 4.3_@see #addBasenames;public Set<String> getBasenameSet() {_		return this.basenameSet__	};return,this,code,message,source,s,basename,set,containing,entries,in,the,order,of,registration,p,calling,code,may,introspect,this,set,as,well,as,add,or,remove,entries,since,4,3,see,add,basenames;public,set,string,get,basename,set,return,this,basename,set
AbstractResourceBasedMessageSource -> public Set<String> getBasenameSet();1467730834;Return this {@code MessageSource}'s basename set, containing entries_in the order of registration._<p>Calling code may introspect this set as well as add or remove entries._@since 4.3_@see #addBasenames;public Set<String> getBasenameSet() {_		return this.basenameSet__	};return,this,code,message,source,s,basename,set,containing,entries,in,the,order,of,registration,p,calling,code,may,introspect,this,set,as,well,as,add,or,remove,entries,since,4,3,see,add,basenames;public,set,string,get,basename,set,return,this,basename,set
AbstractResourceBasedMessageSource -> public Set<String> getBasenameSet();1495868221;Return this {@code MessageSource}'s basename set, containing entries_in the order of registration._<p>Calling code may introspect this set as well as add or remove entries._@since 4.3_@see #addBasenames;public Set<String> getBasenameSet() {_		return this.basenameSet__	};return,this,code,message,source,s,basename,set,containing,entries,in,the,order,of,registration,p,calling,code,may,introspect,this,set,as,well,as,add,or,remove,entries,since,4,3,see,add,basenames;public,set,string,get,basename,set,return,this,basename,set
AbstractResourceBasedMessageSource -> public Set<String> getBasenameSet();1500448076;Return this {@code MessageSource}'s basename set, containing entries_in the order of registration._<p>Calling code may introspect this set as well as add or remove entries._@since 4.3_@see #addBasenames;public Set<String> getBasenameSet() {_		return this.basenameSet__	};return,this,code,message,source,s,basename,set,containing,entries,in,the,order,of,registration,p,calling,code,may,introspect,this,set,as,well,as,add,or,remove,entries,since,4,3,see,add,basenames;public,set,string,get,basename,set,return,this,basename,set
AbstractResourceBasedMessageSource -> public Set<String> getBasenameSet();1500457438;Return this {@code MessageSource}'s basename set, containing entries_in the order of registration._<p>Calling code may introspect this set as well as add or remove entries._@since 4.3_@see #addBasenames;public Set<String> getBasenameSet() {_		return this.basenameSet__	};return,this,code,message,source,s,basename,set,containing,entries,in,the,order,of,registration,p,calling,code,may,introspect,this,set,as,well,as,add,or,remove,entries,since,4,3,see,add,basenames;public,set,string,get,basename,set,return,this,basename,set
AbstractResourceBasedMessageSource -> public Set<String> getBasenameSet();1525211434;Return this {@code MessageSource}'s basename set, containing entries_in the order of registration._<p>Calling code may introspect this set as well as add or remove entries._@since 4.3_@see #addBasenames;public Set<String> getBasenameSet() {_		return this.basenameSet__	};return,this,code,message,source,s,basename,set,containing,entries,in,the,order,of,registration,p,calling,code,may,introspect,this,set,as,well,as,add,or,remove,entries,since,4,3,see,add,basenames;public,set,string,get,basename,set,return,this,basename,set
AbstractResourceBasedMessageSource -> public void addBasenames(String... basenames);1454612260;Add the specified basenames to the existing basename configuration._<p>Note: If a given basename already exists, the position of its entry_will remain as in the original set. New entries will be added at the_end of the list, to be searched after existing basenames._@since 4.3_@see #setBasenames_@see java.util.ResourceBundle;public void addBasenames(String... basenames) {_		if (!ObjectUtils.isEmpty(basenames)) {_			for (String basename : basenames) {_				Assert.hasText(basename, "Basename must not be empty")__				this.basenameSet.add(basename.trim())__			}_		}_	};add,the,specified,basenames,to,the,existing,basename,configuration,p,note,if,a,given,basename,already,exists,the,position,of,its,entry,will,remain,as,in,the,original,set,new,entries,will,be,added,at,the,end,of,the,list,to,be,searched,after,existing,basenames,since,4,3,see,set,basenames,see,java,util,resource,bundle;public,void,add,basenames,string,basenames,if,object,utils,is,empty,basenames,for,string,basename,basenames,assert,has,text,basename,basename,must,not,be,empty,this,basename,set,add,basename,trim
AbstractResourceBasedMessageSource -> public void addBasenames(String... basenames);1454617957;Add the specified basenames to the existing basename configuration._<p>Note: If a given basename already exists, the position of its entry_will remain as in the original set. New entries will be added at the_end of the list, to be searched after existing basenames._@since 4.3_@see #setBasenames_@see java.util.ResourceBundle;public void addBasenames(String... basenames) {_		if (!ObjectUtils.isEmpty(basenames)) {_			for (String basename : basenames) {_				Assert.hasText(basename, "Basename must not be empty")__				this.basenameSet.add(basename.trim())__			}_		}_	};add,the,specified,basenames,to,the,existing,basename,configuration,p,note,if,a,given,basename,already,exists,the,position,of,its,entry,will,remain,as,in,the,original,set,new,entries,will,be,added,at,the,end,of,the,list,to,be,searched,after,existing,basenames,since,4,3,see,set,basenames,see,java,util,resource,bundle;public,void,add,basenames,string,basenames,if,object,utils,is,empty,basenames,for,string,basename,basenames,assert,has,text,basename,basename,must,not,be,empty,this,basename,set,add,basename,trim
AbstractResourceBasedMessageSource -> public void addBasenames(String... basenames);1467730834;Add the specified basenames to the existing basename configuration._<p>Note: If a given basename already exists, the position of its entry_will remain as in the original set. New entries will be added at the_end of the list, to be searched after existing basenames._@since 4.3_@see #setBasenames_@see java.util.ResourceBundle;public void addBasenames(String... basenames) {_		if (!ObjectUtils.isEmpty(basenames)) {_			for (String basename : basenames) {_				Assert.hasText(basename, "Basename must not be empty")__				this.basenameSet.add(basename.trim())__			}_		}_	};add,the,specified,basenames,to,the,existing,basename,configuration,p,note,if,a,given,basename,already,exists,the,position,of,its,entry,will,remain,as,in,the,original,set,new,entries,will,be,added,at,the,end,of,the,list,to,be,searched,after,existing,basenames,since,4,3,see,set,basenames,see,java,util,resource,bundle;public,void,add,basenames,string,basenames,if,object,utils,is,empty,basenames,for,string,basename,basenames,assert,has,text,basename,basename,must,not,be,empty,this,basename,set,add,basename,trim
AbstractResourceBasedMessageSource -> public void addBasenames(String... basenames);1495868221;Add the specified basenames to the existing basename configuration._<p>Note: If a given basename already exists, the position of its entry_will remain as in the original set. New entries will be added at the_end of the list, to be searched after existing basenames._@since 4.3_@see #setBasenames_@see java.util.ResourceBundle;public void addBasenames(String... basenames) {_		if (!ObjectUtils.isEmpty(basenames)) {_			for (String basename : basenames) {_				Assert.hasText(basename, "Basename must not be empty")__				this.basenameSet.add(basename.trim())__			}_		}_	};add,the,specified,basenames,to,the,existing,basename,configuration,p,note,if,a,given,basename,already,exists,the,position,of,its,entry,will,remain,as,in,the,original,set,new,entries,will,be,added,at,the,end,of,the,list,to,be,searched,after,existing,basenames,since,4,3,see,set,basenames,see,java,util,resource,bundle;public,void,add,basenames,string,basenames,if,object,utils,is,empty,basenames,for,string,basename,basenames,assert,has,text,basename,basename,must,not,be,empty,this,basename,set,add,basename,trim
AbstractResourceBasedMessageSource -> public void addBasenames(String... basenames);1500448076;Add the specified basenames to the existing basename configuration._<p>Note: If a given basename already exists, the position of its entry_will remain as in the original set. New entries will be added at the_end of the list, to be searched after existing basenames._@since 4.3_@see #setBasenames_@see java.util.ResourceBundle;public void addBasenames(String... basenames) {_		if (!ObjectUtils.isEmpty(basenames)) {_			for (String basename : basenames) {_				Assert.hasText(basename, "Basename must not be empty")__				this.basenameSet.add(basename.trim())__			}_		}_	};add,the,specified,basenames,to,the,existing,basename,configuration,p,note,if,a,given,basename,already,exists,the,position,of,its,entry,will,remain,as,in,the,original,set,new,entries,will,be,added,at,the,end,of,the,list,to,be,searched,after,existing,basenames,since,4,3,see,set,basenames,see,java,util,resource,bundle;public,void,add,basenames,string,basenames,if,object,utils,is,empty,basenames,for,string,basename,basenames,assert,has,text,basename,basename,must,not,be,empty,this,basename,set,add,basename,trim
AbstractResourceBasedMessageSource -> public void addBasenames(String... basenames);1500457438;Add the specified basenames to the existing basename configuration._<p>Note: If a given basename already exists, the position of its entry_will remain as in the original set. New entries will be added at the_end of the list, to be searched after existing basenames._@since 4.3_@see #setBasenames_@see java.util.ResourceBundle;public void addBasenames(String... basenames) {_		if (!ObjectUtils.isEmpty(basenames)) {_			for (String basename : basenames) {_				Assert.hasText(basename, "Basename must not be empty")__				this.basenameSet.add(basename.trim())__			}_		}_	};add,the,specified,basenames,to,the,existing,basename,configuration,p,note,if,a,given,basename,already,exists,the,position,of,its,entry,will,remain,as,in,the,original,set,new,entries,will,be,added,at,the,end,of,the,list,to,be,searched,after,existing,basenames,since,4,3,see,set,basenames,see,java,util,resource,bundle;public,void,add,basenames,string,basenames,if,object,utils,is,empty,basenames,for,string,basename,basenames,assert,has,text,basename,basename,must,not,be,empty,this,basename,set,add,basename,trim
AbstractResourceBasedMessageSource -> public void addBasenames(String... basenames);1525211434;Add the specified basenames to the existing basename configuration._<p>Note: If a given basename already exists, the position of its entry_will remain as in the original set. New entries will be added at the_end of the list, to be searched after existing basenames._@since 4.3_@see #setBasenames_@see java.util.ResourceBundle;public void addBasenames(String... basenames) {_		if (!ObjectUtils.isEmpty(basenames)) {_			for (String basename : basenames) {_				Assert.hasText(basename, "Basename must not be empty")__				this.basenameSet.add(basename.trim())__			}_		}_	};add,the,specified,basenames,to,the,existing,basename,configuration,p,note,if,a,given,basename,already,exists,the,position,of,its,entry,will,remain,as,in,the,original,set,new,entries,will,be,added,at,the,end,of,the,list,to,be,searched,after,existing,basenames,since,4,3,see,set,basenames,see,java,util,resource,bundle;public,void,add,basenames,string,basenames,if,object,utils,is,empty,basenames,for,string,basename,basenames,assert,has,text,basename,basename,must,not,be,empty,this,basename,set,add,basename,trim
