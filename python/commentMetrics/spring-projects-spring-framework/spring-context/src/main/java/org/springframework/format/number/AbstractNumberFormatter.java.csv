commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify whether or not parsing is to be lenient. Default is false.  * <p>With lenient parsing, the parser may allow inputs that do not precisely match the format.  * With strict parsing, inputs must match the format exactly.  */ ;/**  * Specify whether or not parsing is to be lenient. Default is false.  * <p>With lenient parsing, the parser may allow inputs that do not precisely match the format.  * With strict parsing, inputs must match the format exactly.  */ public void setLenient(boolean lenient) {     this.lenient = lenient. }
false;public;2;4;;@Override public String print(Number number, Locale locale) {     return getNumberFormat(locale).format(number). }
false;public;2;16;;@Override public Number parse(String text, Locale locale) throws ParseException {     NumberFormat format = getNumberFormat(locale).     ParsePosition position = new ParsePosition(0).     Number number = format.parse(text, position).     if (position.getErrorIndex() != -1) {         throw new ParseException(text, position.getIndex()).     }     if (!this.lenient) {         if (text.length() != position.getIndex()) {             // indicates a part of the string that was not parsed             throw new ParseException(text, position.getIndex()).         }     }     return number. }
true;protected,abstract;1;1;/**  * Obtain a concrete NumberFormat for the specified locale.  * @param locale the current locale  * @return the NumberFormat instance (never {@code null})  */ ;/**  * Obtain a concrete NumberFormat for the specified locale.  * @param locale the current locale  * @return the NumberFormat instance (never {@code null})  */ protected abstract NumberFormat getNumberFormat(Locale locale).
