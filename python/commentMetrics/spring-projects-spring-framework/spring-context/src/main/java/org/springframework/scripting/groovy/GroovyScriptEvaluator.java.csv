commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set a custom compiler configuration for this evaluator.  * @since 4.3.3  * @see #setCompilationCustomizers  */ ;/**  * Set a custom compiler configuration for this evaluator.  * @since 4.3.3  * @see #setCompilationCustomizers  */ public void setCompilerConfiguration(@Nullable CompilerConfiguration compilerConfiguration) {     this.compilerConfiguration = (compilerConfiguration != null ? compilerConfiguration : new CompilerConfiguration()). }
true;public;0;3;/**  * Return this evaluator's compiler configuration (never {@code null}).  * @since 4.3.3  * @see #setCompilerConfiguration  */ ;/**  * Return this evaluator's compiler configuration (never {@code null}).  * @since 4.3.3  * @see #setCompilerConfiguration  */ public CompilerConfiguration getCompilerConfiguration() {     return this.compilerConfiguration. }
true;public;1;3;/**  * Set one or more customizers to be applied to this evaluator's compiler configuration.  * <p>Note that this modifies the shared compiler configuration held by this evaluator.  * @since 4.3.3  * @see #setCompilerConfiguration  */ ;/**  * Set one or more customizers to be applied to this evaluator's compiler configuration.  * <p>Note that this modifies the shared compiler configuration held by this evaluator.  * @since 4.3.3  * @see #setCompilerConfiguration  */ public void setCompilationCustomizers(CompilationCustomizer... compilationCustomizers) {     this.compilerConfiguration.addCompilationCustomizers(compilationCustomizers). }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.classLoader = classLoader. }
false;public;1;5;;@Override @Nullable public Object evaluate(ScriptSource script) {     return evaluate(script, null). }
false;public;2;22;;@Override @Nullable public Object evaluate(ScriptSource script, @Nullable Map<String, Object> arguments) {     GroovyShell groovyShell = new GroovyShell(this.classLoader, new Binding(arguments), this.compilerConfiguration).     try {         String filename = (script instanceof ResourceScriptSource ? ((ResourceScriptSource) script).getResource().getFilename() : null).         if (filename != null) {             return groovyShell.evaluate(script.getScriptAsString(), filename).         } else {             return groovyShell.evaluate(script.getScriptAsString()).         }     } catch (IOException ex) {         throw new ScriptCompilationException(script, "Cannot access Groovy script", ex).     } catch (GroovyRuntimeException ex) {         throw new ScriptCompilationException(script, ex).     } }
