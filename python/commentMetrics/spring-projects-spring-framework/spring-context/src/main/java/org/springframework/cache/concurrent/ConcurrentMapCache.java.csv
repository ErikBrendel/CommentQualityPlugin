commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return whether this cache stores a copy of each entry ({@code true}) or  * a reference ({@code false}, default). If store by value is enabled, each  * entry in the cache must be serializable.  * @since 4.3  */ ;/**  * Return whether this cache stores a copy of each entry ({@code true}) or  * a reference ({@code false}, default). If store by value is enabled, each  * entry in the cache must be serializable.  * @since 4.3  */ public final boolean isStoreByValue() {     return (this.serialization != null). }
false;public,final;0;4;;@Override public final String getName() {     return this.name. }
false;public,final;0;4;;@Override public final ConcurrentMap<Object, Object> getNativeCache() {     return this.store. }
false;protected;1;5;;@Override @Nullable protected Object lookup(Object key) {     return this.store.get(key). }
false;public;2;13;;@SuppressWarnings("unchecked") @Override @Nullable public <T> T get(Object key, Callable<T> valueLoader) {     return (T) fromStoreValue(this.store.computeIfAbsent(key, r -> {         try {             return toStoreValue(valueLoader.call()).         } catch (Throwable ex) {             throw new ValueRetrievalException(key, valueLoader, ex).         }     })). }
false;public;2;4;;@Override public void put(Object key, @Nullable Object value) {     this.store.put(key, toStoreValue(value)). }
false;public;2;6;;@Override @Nullable public ValueWrapper putIfAbsent(Object key, @Nullable Object value) {     Object existing = this.store.putIfAbsent(key, toStoreValue(value)).     return toValueWrapper(existing). }
false;public;1;4;;@Override public void evict(Object key) {     this.store.remove(key). }
false;public;0;4;;@Override public void clear() {     this.store.clear(). }
false;protected;1;16;;@Override protected Object toStoreValue(@Nullable Object userValue) {     Object storeValue = super.toStoreValue(userValue).     if (this.serialization != null) {         try {             return serializeValue(this.serialization, storeValue).         } catch (Throwable ex) {             throw new IllegalArgumentException("Failed to serialize cache value '" + userValue + "'. Does it implement Serializable?", ex).         }     } else {         return storeValue.     } }
false;private;2;10;;private Object serializeValue(SerializationDelegate serialization, Object storeValue) throws IOException {     ByteArrayOutputStream out = new ByteArrayOutputStream().     try {         serialization.serialize(storeValue, out).         return out.toByteArray().     } finally {         out.close().     } }
false;protected;1;15;;@Override protected Object fromStoreValue(@Nullable Object storeValue) {     if (storeValue != null && this.serialization != null) {         try {             return super.fromStoreValue(deserializeValue(this.serialization, storeValue)).         } catch (Throwable ex) {             throw new IllegalArgumentException("Failed to deserialize cache value '" + storeValue + "'", ex).         }     } else {         return super.fromStoreValue(storeValue).     } }
false;private;2;9;;private Object deserializeValue(SerializationDelegate serialization, Object storeValue) throws IOException {     ByteArrayInputStream in = new ByteArrayInputStream((byte[]) storeValue).     try {         return serialization.deserialize(in).     } finally {         in.close().     } }
