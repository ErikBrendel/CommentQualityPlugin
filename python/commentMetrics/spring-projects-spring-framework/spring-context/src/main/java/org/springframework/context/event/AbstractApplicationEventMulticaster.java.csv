# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1423555692;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.defaultRetriever) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(event, eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(event, eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,default,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1424079686;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.defaultRetriever) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(event, eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(event, eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,default,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1424972106;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1444082751;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1458999130;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1467730834;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1491831405;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1492093025;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1492258228;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1496242568;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1496259743;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1496837955;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1498780456;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1531945062;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1538234153;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1551080576;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners( 			ApplicationEvent event, ResolvableType eventType);1551113869;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@param eventType the event type_@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(_			ApplicationEvent event, ResolvableType eventType) {__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.retrievalMutex) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners =_						retrieveApplicationListeners(eventType, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(eventType, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,param,event,type,the,event,type,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,resolvable,type,event,type,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,retrieval,mutex,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,type,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,type,source,type,null
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, 			ResolvableType eventType, Class<?> sourceType);1423555692;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener,_			ResolvableType eventType, Class<?> sourceType) {__		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, 			ResolvableType eventType, Class<?> sourceType);1424079686;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener,_			ResolvableType eventType, Class<?> sourceType) {__		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1328020251;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1353882772;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1355352386;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1356735495;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1357119239;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1368482696;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1382381986;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1383157818;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType);1384955545;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(_			ApplicationListener listener, Class<? extends ApplicationEvent> eventType, Class sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1424972106;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1444082751;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1458999130;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1467730834;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1491831405;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1492093025;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1492258228;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1496242568;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1385412762;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1393936300;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1395844190;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1419270382;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1419930118;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1423555692;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1424079686;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1424972106;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1444082751;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1458999130;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1467730834;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1491831405;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1492093025;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1492258228;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1496242568;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1496259743;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1496837955;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1498780456;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1531945062;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1538234153;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1551080576;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners();1551113869;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners() {_		synchronized (this.retrievalMutex) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,retrieval,mutex,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType);1496837955;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(_			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType) {__		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,nullable,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType);1498780456;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(_			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType) {__		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,nullable,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType);1531945062;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(_			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType) {__		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,nullable,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType);1538234153;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(_			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType) {__		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,nullable,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType);1551080576;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(_			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType) {__		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,nullable,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent( 			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType);1551113869;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(_			ApplicationListener<?> listener, ResolvableType eventType, @Nullable Class<?> sourceType) {__		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,nullable,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event);1385412762;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__			Set<ApplicationListener<?>> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener<?> listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					try {_						ApplicationListener<?> listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							retriever.applicationListenerBeans.add(listenerBeanName)__							allListeners.add(listener)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_						_					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event);1393936300;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__			Set<ApplicationListener<?>> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener<?> listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					try {_						Class<?> listenerType = beanFactory.getType(listenerBeanName)__						if (listenerType == null || supportsEvent(listenerType, event)) {_							ApplicationListener<?> listener =_									beanFactory.getBean(listenerBeanName, ApplicationListener.class)__							if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_								retriever.applicationListenerBeans.add(listenerBeanName)__								allListeners.add(listener)__							}_						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_						_					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event);1395844190;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__			Set<ApplicationListener<?>> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener<?> listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					try {_						Class<?> listenerType = beanFactory.getType(listenerBeanName)__						if (listenerType == null || supportsEvent(listenerType, event)) {_							ApplicationListener<?> listener =_									beanFactory.getBean(listenerBeanName, ApplicationListener.class)__							if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_								retriever.applicationListenerBeans.add(listenerBeanName)__								allListeners.add(listener)__							}_						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_						_					}_				}_			}_			OrderComparator.sort(allListeners)__			if (this.beanClassLoader == null ||_					(ClassUtils.isCacheSafe(eventType, this.beanClassLoader) &&_							(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_				this.retrieverCache.put(cacheKey, retriever)__			}_			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,order,comparator,sort,all,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,type,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event);1419270382;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event) {_		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(event.getClass(), sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.defaultRetriever) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners = retrieveApplicationListeners(event, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(event, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,get,class,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,default,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event);1419930118;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event) {_		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(event.getClass(), sourceType)___		_		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}__		if (this.beanClassLoader == null ||_				(ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) &&_						(sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {_			_			synchronized (this.defaultRetriever) {_				retriever = this.retrieverCache.get(cacheKey)__				if (retriever != null) {_					return retriever.getApplicationListeners()__				}_				retriever = new ListenerRetriever(true)__				Collection<ApplicationListener<?>> listeners = retrieveApplicationListeners(event, sourceType, retriever)__				this.retrieverCache.put(cacheKey, retriever)__				return listeners__			}_		}_		else {_			_			return retrieveApplicationListeners(event, sourceType, null)__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,get,class,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,if,this,bean,class,loader,null,class,utils,is,cache,safe,event,get,class,this,bean,class,loader,source,type,null,class,utils,is,cache,safe,source,type,this,bean,class,loader,synchronized,this,default,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,retriever,new,listener,retriever,true,collection,application,listener,listeners,retrieve,application,listeners,event,source,type,retriever,this,retriever,cache,put,cache,key,retriever,return,listeners,else,return,retrieve,application,listeners,event,source,type,null
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1328020251;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		return this.defaultRetriever.getApplicationListeners()__	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1353882772;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1355352386;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1356735495;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1357119239;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1368482696;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1382381986;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1383157818;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners();1384955545;Return a Collection containing all ApplicationListeners._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners() {_		synchronized (this.defaultRetriever) {_			return this.defaultRetriever.getApplicationListeners()__		}_	};return,a,collection,containing,all,application,listeners,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,synchronized,this,default,retriever,return,this,default,retriever,get,application,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever);1496837955;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,nullable,class,source,type,nullable,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever);1498780456;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,nullable,class,source,type,nullable,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever);1531945062;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever) {__		List<ApplicationListener<?>> allListeners = new ArrayList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,nullable,class,source,type,nullable,listener,retriever,retriever,list,application,listener,all,listeners,new,array,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever);1538234153;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever) {__		List<ApplicationListener<?>> allListeners = new ArrayList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								if (beanFactory.isSingleton(listenerBeanName)) {_									retriever.applicationListeners.add(listener)__								}_								else {_									retriever.applicationListenerBeans.add(listenerBeanName)__								}_							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		if (retriever != null && retriever.applicationListenerBeans.isEmpty()) {_			retriever.applicationListeners.clear()__			retriever.applicationListeners.addAll(allListeners)__		}_		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,nullable,class,source,type,nullable,listener,retriever,retriever,list,application,listener,all,listeners,new,array,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,if,bean,factory,is,singleton,listener,bean,name,retriever,application,listeners,add,listener,else,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,if,retriever,null,retriever,application,listener,beans,is,empty,retriever,application,listeners,clear,retriever,application,listeners,add,all,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever);1551080576;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever) {__		List<ApplicationListener<?>> allListeners = new ArrayList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								if (beanFactory.isSingleton(listenerBeanName)) {_									retriever.applicationListeners.add(listener)__								}_								else {_									retriever.applicationListenerBeans.add(listenerBeanName)__								}_							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		if (retriever != null && retriever.applicationListenerBeans.isEmpty()) {_			retriever.applicationListeners.clear()__			retriever.applicationListeners.addAll(allListeners)__		}_		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,nullable,class,source,type,nullable,listener,retriever,retriever,list,application,listener,all,listeners,new,array,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,if,bean,factory,is,singleton,listener,bean,name,retriever,application,listeners,add,listener,else,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,if,retriever,null,retriever,application,listener,beans,is,empty,retriever,application,listeners,clear,retriever,application,listeners,add,all,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever);1551113869;Actually retrieve the application listeners for the given event and source type._@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ResolvableType eventType, @Nullable Class<?> sourceType, @Nullable ListenerRetriever retriever) {__		List<ApplicationListener<?>> allListeners = new ArrayList<>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.retrievalMutex) {_			listeners = new LinkedHashSet<>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								if (beanFactory.isSingleton(listenerBeanName)) {_									retriever.applicationListeners.add(listener)__								}_								else {_									retriever.applicationListenerBeans.add(listenerBeanName)__								}_							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		if (retriever != null && retriever.applicationListenerBeans.isEmpty()) {_			retriever.applicationListeners.clear()__			retriever.applicationListeners.addAll(allListeners)__		}_		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,resolvable,type,event,type,nullable,class,source,type,nullable,listener,retriever,retriever,list,application,listener,all,listeners,new,array,list,set,application,listener,listeners,set,string,listener,beans,synchronized,this,retrieval,mutex,listeners,new,linked,hash,set,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,if,bean,factory,is,singleton,listener,bean,name,retriever,application,listeners,add,listener,else,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,if,retriever,null,retriever,application,listener,beans,is,empty,retriever,application,listeners,clear,retriever,application,listeners,add,all,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, 			Class<? extends ApplicationEvent> eventType, Class<?> sourceType);1385412762;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the_candidates for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener,_			Class<? extends ApplicationEvent> eventType, Class<?> sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, 			Class<? extends ApplicationEvent> eventType, Class<?> sourceType);1393936300;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener,_			Class<? extends ApplicationEvent> eventType, Class<?> sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, 			Class<? extends ApplicationEvent> eventType, Class<?> sourceType);1395844190;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener,_			Class<? extends ApplicationEvent> eventType, Class<?> sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, 			Class<? extends ApplicationEvent> eventType, Class<?> sourceType);1419270382;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener,_			Class<? extends ApplicationEvent> eventType, Class<?> sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, 			Class<? extends ApplicationEvent> eventType, Class<?> sourceType);1419930118;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_interface. In case of a standard {@link ApplicationListener}, a_{@link GenericApplicationListenerAdapter} will be used to introspect_the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener,_			Class<? extends ApplicationEvent> eventType, Class<?> sourceType) {__		SmartApplicationListener smartListener = (listener instanceof SmartApplicationListener ?_				(SmartApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,interface,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,class,extends,application,event,event,type,class,source,type,smart,application,listener,smart,listener,listener,instanceof,smart,application,listener,smart,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ApplicationEvent event, Class<?> sourceType, ListenerRetriever retriever);1419270382;Actually retrieve the application listeners for the given event and source type._@param event the application event_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ApplicationEvent event, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.defaultRetriever) {_			listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, event.getClass(), sourceType)) {_				retriever.applicationListeners.add(listener)__				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, event)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, event.getClass(), sourceType)) {_							retriever.applicationListenerBeans.add(listenerBeanName)__							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		OrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,the,application,event,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,application,event,event,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,get,class,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,get,class,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ApplicationEvent event, Class<?> sourceType, ListenerRetriever retriever);1419930118;Actually retrieve the application listeners for the given event and source type._@param event the application event_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ApplicationEvent event, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.defaultRetriever) {_			listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, event.getClass(), sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, event)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, event.getClass(), sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		OrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,the,application,event,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,application,event,event,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,get,class,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,get,class,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1328020251;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Class sourceType = event.getSource().getClass()__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			synchronized (this.defaultRetriever) {_				for (ApplicationListener listener : this.defaultRetriever.applicationListeners) {_					if (supportsEvent(listener, eventType, sourceType)) {_						retriever.applicationListeners.add(listener)__						allListeners.add(listener)__					}_				}_				if (!this.defaultRetriever.applicationListenerBeans.isEmpty()) {_					BeanFactory beanFactory = getBeanFactory()__					for (String listenerBeanName : this.defaultRetriever.applicationListenerBeans) {_						ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							retriever.applicationListenerBeans.add(listenerBeanName)__							allListeners.add(listener)__						}_					}_				}_				OrderComparator.sort(allListeners)__				this.retrieverCache.put(cacheKey, retriever)__			}_			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,class,source,type,event,get,source,get,class,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,synchronized,this,default,retriever,for,application,listener,listener,this,default,retriever,application,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,this,default,retriever,application,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,this,default,retriever,application,listener,beans,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1353882772;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Class sourceType = event.getSource().getClass()__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			Set<ApplicationListener> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__					if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_						retriever.applicationListenerBeans.add(listenerBeanName)__						allListeners.add(listener)__					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,class,source,type,event,get,source,get,class,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1355352386;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Class sourceType = event.getSource().getClass()__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			Set<ApplicationListener> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__					if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_						retriever.applicationListenerBeans.add(listenerBeanName)__						allListeners.add(listener)__					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,class,source,type,event,get,source,get,class,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1356735495;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Class sourceType = event.getSource().getClass()__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			Set<ApplicationListener> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__					if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_						retriever.applicationListenerBeans.add(listenerBeanName)__						allListeners.add(listener)__					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,class,source,type,event,get,source,get,class,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1357119239;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Class sourceType = event.getSource().getClass()__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			Set<ApplicationListener> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__					if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_						retriever.applicationListenerBeans.add(listenerBeanName)__						allListeners.add(listener)__					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,class,source,type,event,get,source,get,class,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1368482696;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Class sourceType = event.getSource().getClass()__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			Set<ApplicationListener> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__					if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_						retriever.applicationListenerBeans.add(listenerBeanName)__						allListeners.add(listener)__					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,class,source,type,event,get,source,get,class,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1382381986;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Object source = event.getSource()__		Class sourceType = (source == null ? null : source.getClass())__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			Set<ApplicationListener> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__					if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_						retriever.applicationListenerBeans.add(listenerBeanName)__						allListeners.add(listener)__					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,object,source,event,get,source,class,source,type,source,null,null,source,get,class,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1383157818;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			Set<ApplicationListener> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__					if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_						retriever.applicationListenerBeans.add(listenerBeanName)__						allListeners.add(listener)__					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event);1384955545;Return a Collection of ApplicationListeners matching the given_event type. Non-matching listeners get excluded early._@param event the event to be propagated. Allows for excluding_non-matching listeners early, based on cached matching information._@return a Collection of ApplicationListeners_@see org.springframework.context.ApplicationListener;protected Collection<ApplicationListener> getApplicationListeners(ApplicationEvent event) {_		Class<? extends ApplicationEvent> eventType = event.getClass()__		Object source = event.getSource()__		Class<?> sourceType = (source != null ? source.getClass() : null)__		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType)__		ListenerRetriever retriever = this.retrieverCache.get(cacheKey)__		if (retriever != null) {_			return retriever.getApplicationListeners()__		}_		else {_			retriever = new ListenerRetriever(true)__			LinkedList<ApplicationListener> allListeners = new LinkedList<ApplicationListener>()__			Set<ApplicationListener> listeners__			Set<String> listenerBeans__			synchronized (this.defaultRetriever) {_				listeners = new LinkedHashSet<ApplicationListener>(this.defaultRetriever.applicationListeners)__				listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__			}_			for (ApplicationListener listener : listeners) {_				if (supportsEvent(listener, eventType, sourceType)) {_					retriever.applicationListeners.add(listener)__					allListeners.add(listener)__				}_			}_			if (!listenerBeans.isEmpty()) {_				BeanFactory beanFactory = getBeanFactory()__				for (String listenerBeanName : listenerBeans) {_					try {_						ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							retriever.applicationListenerBeans.add(listenerBeanName)__							allListeners.add(listener)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_						_					}_				}_			}_			OrderComparator.sort(allListeners)__			this.retrieverCache.put(cacheKey, retriever)__			return allListeners__		}_	};return,a,collection,of,application,listeners,matching,the,given,event,type,non,matching,listeners,get,excluded,early,param,event,the,event,to,be,propagated,allows,for,excluding,non,matching,listeners,early,based,on,cached,matching,information,return,a,collection,of,application,listeners,see,org,springframework,context,application,listener;protected,collection,application,listener,get,application,listeners,application,event,event,class,extends,application,event,event,type,event,get,class,object,source,event,get,source,class,source,type,source,null,source,get,class,null,listener,cache,key,cache,key,new,listener,cache,key,event,type,source,type,listener,retriever,retriever,this,retriever,cache,get,cache,key,if,retriever,null,return,retriever,get,application,listeners,else,retriever,new,listener,retriever,true,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,order,comparator,sort,all,listeners,this,retriever,cache,put,cache,key,retriever,return,all,listeners
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1424972106;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1444082751;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1458999130;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1467730834;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1491831405;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1492093025;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1492258228;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1496242568;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType);1496259743;Determine whether the given listener supports the given event._<p>The default implementation detects the {@link SmartApplicationListener}_and {@link GenericApplicationListener} interfaces. In case of a standard_{@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}_will be used to introspect the generically declared type of the target listener._@param listener the target listener to check_@param eventType the event type to check against_@param sourceType the source type to check against_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {_		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?_				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener))__		return (smartListener.supportsEventType(eventType) && smartListener.supportsSourceType(sourceType))__	};determine,whether,the,given,listener,supports,the,given,event,p,the,default,implementation,detects,the,link,smart,application,listener,and,link,generic,application,listener,interfaces,in,case,of,a,standard,link,application,listener,a,link,generic,application,listener,adapter,will,be,used,to,introspect,the,generically,declared,type,of,the,target,listener,param,listener,the,target,listener,to,check,param,event,type,the,event,type,to,check,against,param,source,type,the,source,type,to,check,against,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,application,listener,listener,resolvable,type,event,type,class,source,type,generic,application,listener,smart,listener,listener,instanceof,generic,application,listener,generic,application,listener,listener,new,generic,application,listener,adapter,listener,return,smart,listener,supports,event,type,event,type,smart,listener,supports,source,type,source,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event);1393936300;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener, Class, Class)} call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param event the event to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event) {_		if (SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		Class<?> declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isInstance(event))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,class,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,the,event,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,application,event,event,if,smart,application,listener,class,is,assignable,from,listener,type,return,true,class,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,instance,event
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event);1395844190;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener, Class, Class)} call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param event the event to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event) {_		if (SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		Class<?> declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isInstance(event))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,class,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,the,event,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,application,event,event,if,smart,application,listener,class,is,assignable,from,listener,type,return,true,class,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,instance,event
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event);1419270382;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener, Class, Class)} call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param event the event to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event) {_		if (SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		Class<?> declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isInstance(event))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,class,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,the,event,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,application,event,event,if,smart,application,listener,class,is,assignable,from,listener,type,return,true,class,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,instance,event
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event);1419930118;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener, Class, Class)} call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param event the event to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event) {_		if (SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		Class<?> declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isInstance(event))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,class,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,the,event,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,application,event,event,if,smart,application,listener,class,is,assignable,from,listener,type,return,true,class,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,instance,event
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1423555692;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType)_				|| SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1424079686;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType)_				|| SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1424972106;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType)_				|| SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1444082751;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType)_				|| SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1458999130;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType)_				|| SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1467730834;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType)_				|| SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1491831405;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1492093025;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1492258228;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1496242568;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1496259743;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1496837955;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1498780456;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1531945062;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1538234153;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1551080576;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener, ResolvableType, Class)}  call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType);1551113869;Filter a listener early through checking its generically declared event_type before trying to instantiate it._<p>If this method returns {@code true} for a given listener as a first pass,_the listener instance will get retrieved and fully evaluated through a_{@link #supportsEvent(ApplicationListener, ResolvableType, Class)} call afterwards._@param listenerType the listener's type as determined by the BeanFactory_@param eventType the event type to check_@return whether the given listener should be included in the candidates_for the given event type;protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {_		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||_				SmartApplicationListener.class.isAssignableFrom(listenerType)) {_			return true__		}_		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType)__		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType))__	};filter,a,listener,early,through,checking,its,generically,declared,event,type,before,trying,to,instantiate,it,p,if,this,method,returns,code,true,for,a,given,listener,as,a,first,pass,the,listener,instance,will,get,retrieved,and,fully,evaluated,through,a,link,supports,event,application,listener,resolvable,type,class,call,afterwards,param,listener,type,the,listener,s,type,as,determined,by,the,bean,factory,param,event,type,the,event,type,to,check,return,whether,the,given,listener,should,be,included,in,the,candidates,for,the,given,event,type;protected,boolean,supports,event,class,listener,type,resolvable,type,event,type,if,generic,application,listener,class,is,assignable,from,listener,type,smart,application,listener,class,is,assignable,from,listener,type,return,true,resolvable,type,declared,event,type,generic,application,listener,adapter,resolve,declared,event,type,listener,type,return,declared,event,type,null,declared,event,type,is,assignable,from,event,type
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ApplicationEvent event, ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1423555692;Actually retrieve the application listeners for the given event and source type._@param event the application event_@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ApplicationEvent event, ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.defaultRetriever) {_			listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		OrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,the,application,event,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,application,event,event,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,order,comparator,sort,all,listeners,return,all,listeners
AbstractApplicationEventMulticaster -> private Collection<ApplicationListener<?>> retrieveApplicationListeners( 			ApplicationEvent event, ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever);1424079686;Actually retrieve the application listeners for the given event and source type._@param event the application event_@param eventType the event type_@param sourceType the event source type_@param retriever the ListenerRetriever, if supposed to populate one (for caching purposes)_@return the pre-filtered list of application listeners for the given event and source type;private Collection<ApplicationListener<?>> retrieveApplicationListeners(_			ApplicationEvent event, ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {__		LinkedList<ApplicationListener<?>> allListeners = new LinkedList<ApplicationListener<?>>()__		Set<ApplicationListener<?>> listeners__		Set<String> listenerBeans__		synchronized (this.defaultRetriever) {_			listeners = new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners)__			listenerBeans = new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans)__		}_		for (ApplicationListener<?> listener : listeners) {_			if (supportsEvent(listener, eventType, sourceType)) {_				if (retriever != null) {_					retriever.applicationListeners.add(listener)__				}_				allListeners.add(listener)__			}_		}_		if (!listenerBeans.isEmpty()) {_			BeanFactory beanFactory = getBeanFactory()__			for (String listenerBeanName : listenerBeans) {_				try {_					Class<?> listenerType = beanFactory.getType(listenerBeanName)__					if (listenerType == null || supportsEvent(listenerType, eventType)) {_						ApplicationListener<?> listener =_								beanFactory.getBean(listenerBeanName, ApplicationListener.class)__						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {_							if (retriever != null) {_								retriever.applicationListenerBeans.add(listenerBeanName)__							}_							allListeners.add(listener)__						}_					}_				}_				catch (NoSuchBeanDefinitionException ex) {_					_					_				}_			}_		}_		AnnotationAwareOrderComparator.sort(allListeners)__		return allListeners__	};actually,retrieve,the,application,listeners,for,the,given,event,and,source,type,param,event,the,application,event,param,event,type,the,event,type,param,source,type,the,event,source,type,param,retriever,the,listener,retriever,if,supposed,to,populate,one,for,caching,purposes,return,the,pre,filtered,list,of,application,listeners,for,the,given,event,and,source,type;private,collection,application,listener,retrieve,application,listeners,application,event,event,resolvable,type,event,type,class,source,type,listener,retriever,retriever,linked,list,application,listener,all,listeners,new,linked,list,application,listener,set,application,listener,listeners,set,string,listener,beans,synchronized,this,default,retriever,listeners,new,linked,hash,set,application,listener,this,default,retriever,application,listeners,listener,beans,new,linked,hash,set,string,this,default,retriever,application,listener,beans,for,application,listener,listener,listeners,if,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listeners,add,listener,all,listeners,add,listener,if,listener,beans,is,empty,bean,factory,bean,factory,get,bean,factory,for,string,listener,bean,name,listener,beans,try,class,listener,type,bean,factory,get,type,listener,bean,name,if,listener,type,null,supports,event,listener,type,event,type,application,listener,listener,bean,factory,get,bean,listener,bean,name,application,listener,class,if,all,listeners,contains,listener,supports,event,listener,event,type,source,type,if,retriever,null,retriever,application,listener,beans,add,listener,bean,name,all,listeners,add,listener,catch,no,such,bean,definition,exception,ex,annotation,aware,order,comparator,sort,all,listeners,return,all,listeners
