# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJAutoProxyRegistrar -> public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1328020251;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		Map<String, Object> enableAJAutoProxy =_			importingClassMetadata.getAnnotationAttributes(EnableAspectJAutoProxy.class.getName())___		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		if ((Boolean)enableAJAutoProxy.get("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,map,string,object,enable,ajauto,proxy,importing,class,metadata,get,annotation,attributes,enable,aspect,jauto,proxy,class,get,name,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,if,boolean,enable,ajauto,proxy,get,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry
AspectJAutoProxyRegistrar -> public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1329142650;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAJAutoProxy =_				attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAJAutoProxy.getBoolean("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,ajauto,proxy,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,ajauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry
AspectJAutoProxyRegistrar -> public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1329393628;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAJAutoProxy =_				attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAJAutoProxy.getBoolean("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,ajauto,proxy,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,ajauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry
AspectJAutoProxyRegistrar -> public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1357119239;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAJAutoProxy =_				attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAJAutoProxy.getBoolean("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,ajauto,proxy,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,ajauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry
AspectJAutoProxyRegistrar -> @Override 	public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1356735495;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;@Override_	public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAJAutoProxy =_				attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAJAutoProxy.getBoolean("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;override,public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,ajauto,proxy,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,ajauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry
AspectJAutoProxyRegistrar -> @Override 	public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1368482696;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;@Override_	public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAJAutoProxy =_				attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAJAutoProxy.getBoolean("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;override,public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,ajauto,proxy,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,ajauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry
AspectJAutoProxyRegistrar -> @Override 	public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1377269365;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;@Override_	public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAJAutoProxy =_				AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAJAutoProxy.getBoolean("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;override,public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,ajauto,proxy,annotation,config,utils,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,ajauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry
AspectJAutoProxyRegistrar -> @Override 	public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1466423404;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;@Override_	public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAspectJAutoProxy =_				AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAspectJAutoProxy.getBoolean("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_		if (enableAspectJAutoProxy.getBoolean("exposeProxy")) {_			AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;override,public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,aspect,jauto,proxy,annotation,config,utils,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,aspect,jauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry,if,enable,aspect,jauto,proxy,get,boolean,expose,proxy,aop,config,utils,force,auto,proxy,creator,to,expose,proxy,registry
AspectJAutoProxyRegistrar -> @Override 	public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1496263893;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;@Override_	public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAspectJAutoProxy =_				AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAspectJAutoProxy.getBoolean("proxyTargetClass")) {_			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__		}_		if (enableAspectJAutoProxy.getBoolean("exposeProxy")) {_			AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry)__		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;override,public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,aspect,jauto,proxy,annotation,config,utils,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,aspect,jauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry,if,enable,aspect,jauto,proxy,get,boolean,expose,proxy,aop,config,utils,force,auto,proxy,creator,to,expose,proxy,registry
AspectJAutoProxyRegistrar -> @Override 	public void registerBeanDefinitions( 			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);1496837955;Register, escalate, and configure the AspectJ auto proxy creator based on the value_of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing_{@code @Configuration} class.;@Override_	public void registerBeanDefinitions(_			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {__		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)___		AnnotationAttributes enableAspectJAutoProxy =_				AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class)__		if (enableAspectJAutoProxy != null) {_			if (enableAspectJAutoProxy.getBoolean("proxyTargetClass")) {_				AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)__			}_			if (enableAspectJAutoProxy.getBoolean("exposeProxy")) {_				AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry)__			}_		}_	};register,escalate,and,configure,the,aspect,j,auto,proxy,creator,based,on,the,value,of,the,link,enable,aspect,jauto,proxy,proxy,target,class,attribute,on,the,importing,code,configuration,class;override,public,void,register,bean,definitions,annotation,metadata,importing,class,metadata,bean,definition,registry,registry,aop,config,utils,register,aspect,jannotation,auto,proxy,creator,if,necessary,registry,annotation,attributes,enable,aspect,jauto,proxy,annotation,config,utils,attributes,for,importing,class,metadata,enable,aspect,jauto,proxy,class,if,enable,aspect,jauto,proxy,null,if,enable,aspect,jauto,proxy,get,boolean,proxy,target,class,aop,config,utils,force,auto,proxy,creator,to,use,class,proxying,registry,if,enable,aspect,jauto,proxy,get,boolean,expose,proxy,aop,config,utils,force,auto,proxy,creator,to,expose,proxy,registry
