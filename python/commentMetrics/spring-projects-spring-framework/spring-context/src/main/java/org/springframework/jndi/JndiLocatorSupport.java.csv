commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether the lookup occurs in a Java EE container, i.e. if the prefix  * "java:comp/env/" needs to be added if the JNDI name doesn't already  * contain it. Default is "false".  * <p>Note: Will only get applied if no other scheme (e.g. "java:") is given.  */ ;/**  * Set whether the lookup occurs in a Java EE container, i.e. if the prefix  * "java:comp/env/" needs to be added if the JNDI name doesn't already  * contain it. Default is "false".  * <p>Note: Will only get applied if no other scheme (e.g. "java:") is given.  */ public void setResourceRef(boolean resourceRef) {     this.resourceRef = resourceRef. }
true;public;0;3;/**  * Return whether the lookup occurs in a Java EE container.  */ ;/**  * Return whether the lookup occurs in a Java EE container.  */ public boolean isResourceRef() {     return this.resourceRef. }
true;protected;1;3;/**  * Perform an actual JNDI lookup for the given name via the JndiTemplate.  * <p>If the name doesn't begin with "java:comp/env/", this prefix is added  * if "resourceRef" is set to "true".  * @param jndiName the JNDI name to look up  * @return the obtained object  * @throws NamingException if the JNDI lookup failed  * @see #setResourceRef  */ ;/**  * Perform an actual JNDI lookup for the given name via the JndiTemplate.  * <p>If the name doesn't begin with "java:comp/env/", this prefix is added  * if "resourceRef" is set to "true".  * @param jndiName the JNDI name to look up  * @return the obtained object  * @throws NamingException if the JNDI lookup failed  * @see #setResourceRef  */ protected Object lookup(String jndiName) throws NamingException {     return lookup(jndiName, null). }
true;protected;2;25;/**  * Perform an actual JNDI lookup for the given name via the JndiTemplate.  * <p>If the name doesn't begin with "java:comp/env/", this prefix is added  * if "resourceRef" is set to "true".  * @param jndiName the JNDI name to look up  * @param requiredType the required type of the object  * @return the obtained object  * @throws NamingException if the JNDI lookup failed  * @see #setResourceRef  */ ;/**  * Perform an actual JNDI lookup for the given name via the JndiTemplate.  * <p>If the name doesn't begin with "java:comp/env/", this prefix is added  * if "resourceRef" is set to "true".  * @param jndiName the JNDI name to look up  * @param requiredType the required type of the object  * @return the obtained object  * @throws NamingException if the JNDI lookup failed  * @see #setResourceRef  */ protected <T> T lookup(String jndiName, @Nullable Class<T> requiredType) throws NamingException {     Assert.notNull(jndiName, "'jndiName' must not be null").     String convertedName = convertJndiName(jndiName).     T jndiObject.     try {         jndiObject = getJndiTemplate().lookup(convertedName, requiredType).     } catch (NamingException ex) {         if (!convertedName.equals(jndiName)) {             // Try fallback to originally specified name...             if (logger.isDebugEnabled()) {                 logger.debug("Converted JNDI name [" + convertedName + "] not found - trying original name [" + jndiName + "]. " + ex).             }             jndiObject = getJndiTemplate().lookup(jndiName, requiredType).         } else {             throw ex.         }     }     if (logger.isDebugEnabled()) {         logger.debug("Located object with JNDI name [" + convertedName + "]").     }     return jndiObject. }
true;protected;1;7;/**  * Convert the given JNDI name into the actual JNDI name to use.  * <p>The default implementation applies the "java:comp/env/" prefix if  * "resourceRef" is "true" and no other scheme (e.g. "java:") is given.  * @param jndiName the original JNDI name  * @return the JNDI name to use  * @see #CONTAINER_PREFIX  * @see #setResourceRef  */ ;/**  * Convert the given JNDI name into the actual JNDI name to use.  * <p>The default implementation applies the "java:comp/env/" prefix if  * "resourceRef" is "true" and no other scheme (e.g. "java:") is given.  * @param jndiName the original JNDI name  * @return the JNDI name to use  * @see #CONTAINER_PREFIX  * @see #setResourceRef  */ protected String convertJndiName(String jndiName) {     // Prepend container prefix if not already specified and no other scheme given.     if (isResourceRef() && !jndiName.startsWith(CONTAINER_PREFIX) && jndiName.indexOf(':') == -1) {         jndiName = CONTAINER_PREFIX + jndiName.     }     return jndiName. }
