# id;timestamp;commentText;codeText;commentWords;codeWords
TypeMismatchNamingException -> public TypeMismatchNamingException(String explanation);1328020251;Construct a new TypeMismatchNamingException._@param explanation the explanation text;public TypeMismatchNamingException(String explanation) {_		super(explanation)__	};construct,a,new,type,mismatch,naming,exception,param,explanation,the,explanation,text;public,type,mismatch,naming,exception,string,explanation,super,explanation
TypeMismatchNamingException -> public TypeMismatchNamingException(String explanation);1356735495;Construct a new TypeMismatchNamingException._@param explanation the explanation text;public TypeMismatchNamingException(String explanation) {_		super(explanation)__	};construct,a,new,type,mismatch,naming,exception,param,explanation,the,explanation,text;public,type,mismatch,naming,exception,string,explanation,super,explanation
TypeMismatchNamingException -> public TypeMismatchNamingException(String explanation);1385412762;Construct a new TypeMismatchNamingException._@param explanation the explanation text;public TypeMismatchNamingException(String explanation) {_		super(explanation)__	};construct,a,new,type,mismatch,naming,exception,param,explanation,the,explanation,text;public,type,mismatch,naming,exception,string,explanation,super,explanation
TypeMismatchNamingException -> public final Class getRequiredType();1328020251;Return the required type for the lookup, if available.;public final Class getRequiredType() {_		return this.requiredType__	};return,the,required,type,for,the,lookup,if,available;public,final,class,get,required,type,return,this,required,type
TypeMismatchNamingException -> public final Class getRequiredType();1356735495;Return the required type for the lookup, if available.;public final Class getRequiredType() {_		return this.requiredType__	};return,the,required,type,for,the,lookup,if,available;public,final,class,get,required,type,return,this,required,type
TypeMismatchNamingException -> public TypeMismatchNamingException(String jndiName, Class requiredType, Class actualType);1328020251;Construct a new TypeMismatchNamingException,_building an explanation text from the given arguments._@param jndiName the JNDI name_@param requiredType the required type for the lookup_@param actualType the actual type that the lookup returned;public TypeMismatchNamingException(String jndiName, Class requiredType, Class actualType) {_		super("Object of type [" + actualType + "] available at JNDI location [" +_				jndiName + "] is not assignable to [" + requiredType.getName() + "]")__		this.requiredType = requiredType__		this.actualType = actualType__	};construct,a,new,type,mismatch,naming,exception,building,an,explanation,text,from,the,given,arguments,param,jndi,name,the,jndi,name,param,required,type,the,required,type,for,the,lookup,param,actual,type,the,actual,type,that,the,lookup,returned;public,type,mismatch,naming,exception,string,jndi,name,class,required,type,class,actual,type,super,object,of,type,actual,type,available,at,jndi,location,jndi,name,is,not,assignable,to,required,type,get,name,this,required,type,required,type,this,actual,type,actual,type
TypeMismatchNamingException -> public TypeMismatchNamingException(String jndiName, Class requiredType, Class actualType);1356735495;Construct a new TypeMismatchNamingException,_building an explanation text from the given arguments._@param jndiName the JNDI name_@param requiredType the required type for the lookup_@param actualType the actual type that the lookup returned;public TypeMismatchNamingException(String jndiName, Class requiredType, Class actualType) {_		super("Object of type [" + actualType + "] available at JNDI location [" +_				jndiName + "] is not assignable to [" + requiredType.getName() + "]")__		this.requiredType = requiredType__		this.actualType = actualType__	};construct,a,new,type,mismatch,naming,exception,building,an,explanation,text,from,the,given,arguments,param,jndi,name,the,jndi,name,param,required,type,the,required,type,for,the,lookup,param,actual,type,the,actual,type,that,the,lookup,returned;public,type,mismatch,naming,exception,string,jndi,name,class,required,type,class,actual,type,super,object,of,type,actual,type,available,at,jndi,location,jndi,name,is,not,assignable,to,required,type,get,name,this,required,type,required,type,this,actual,type,actual,type
TypeMismatchNamingException -> public final Class<?> getRequiredType();1385412762;Return the required type for the lookup, if available.;public final Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,type,for,the,lookup,if,available;public,final,class,get,required,type,return,this,required,type
TypeMismatchNamingException -> public final Class<?> getRequiredType();1500495740;Return the required type for the lookup, if available.;public final Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,type,for,the,lookup,if,available;public,final,class,get,required,type,return,this,required,type
TypeMismatchNamingException -> public final Class getActualType();1328020251;Return the actual type that the lookup returned, if available.;public final Class getActualType() {_		return this.actualType__	};return,the,actual,type,that,the,lookup,returned,if,available;public,final,class,get,actual,type,return,this,actual,type
TypeMismatchNamingException -> public final Class getActualType();1356735495;Return the actual type that the lookup returned, if available.;public final Class getActualType() {_		return this.actualType__	};return,the,actual,type,that,the,lookup,returned,if,available;public,final,class,get,actual,type,return,this,actual,type
TypeMismatchNamingException -> public TypeMismatchNamingException(String jndiName, Class<?> requiredType, Class<?> actualType);1385412762;Construct a new TypeMismatchNamingException,_building an explanation text from the given arguments._@param jndiName the JNDI name_@param requiredType the required type for the lookup_@param actualType the actual type that the lookup returned;public TypeMismatchNamingException(String jndiName, Class<?> requiredType, Class<?> actualType) {_		super("Object of type [" + actualType + "] available at JNDI location [" +_				jndiName + "] is not assignable to [" + requiredType.getName() + "]")__		this.requiredType = requiredType__		this.actualType = actualType__	};construct,a,new,type,mismatch,naming,exception,building,an,explanation,text,from,the,given,arguments,param,jndi,name,the,jndi,name,param,required,type,the,required,type,for,the,lookup,param,actual,type,the,actual,type,that,the,lookup,returned;public,type,mismatch,naming,exception,string,jndi,name,class,required,type,class,actual,type,super,object,of,type,actual,type,available,at,jndi,location,jndi,name,is,not,assignable,to,required,type,get,name,this,required,type,required,type,this,actual,type,actual,type
TypeMismatchNamingException -> public TypeMismatchNamingException(String jndiName, Class<?> requiredType, Class<?> actualType);1500495740;Construct a new TypeMismatchNamingException,_building an explanation text from the given arguments._@param jndiName the JNDI name_@param requiredType the required type for the lookup_@param actualType the actual type that the lookup returned;public TypeMismatchNamingException(String jndiName, Class<?> requiredType, Class<?> actualType) {_		super("Object of type [" + actualType + "] available at JNDI location [" +_				jndiName + "] is not assignable to [" + requiredType.getName() + "]")__		this.requiredType = requiredType__		this.actualType = actualType__	};construct,a,new,type,mismatch,naming,exception,building,an,explanation,text,from,the,given,arguments,param,jndi,name,the,jndi,name,param,required,type,the,required,type,for,the,lookup,param,actual,type,the,actual,type,that,the,lookup,returned;public,type,mismatch,naming,exception,string,jndi,name,class,required,type,class,actual,type,super,object,of,type,actual,type,available,at,jndi,location,jndi,name,is,not,assignable,to,required,type,get,name,this,required,type,required,type,this,actual,type,actual,type
TypeMismatchNamingException -> public final Class<?> getActualType();1385412762;Return the actual type that the lookup returned, if available.;public final Class<?> getActualType() {_		return this.actualType__	};return,the,actual,type,that,the,lookup,returned,if,available;public,final,class,get,actual,type,return,this,actual,type
TypeMismatchNamingException -> public final Class<?> getActualType();1500495740;Return the actual type that the lookup returned, if available.;public final Class<?> getActualType() {_		return this.actualType__	};return,the,actual,type,that,the,lookup,returned,if,available;public,final,class,get,actual,type,return,this,actual,type
