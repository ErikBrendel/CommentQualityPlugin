# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, Object[] args, Locale locale);1495868221;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, Object[] args, Locale locale);1496242568;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, Object[] args, Locale locale);1496259743;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale);1496837955;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,nullable,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale);1498780456;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,nullable,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale);1500448076;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,nullable,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale);1508350872;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				_				String msg = parent.getMessage(code, args, null, locale)__				return ("".equals(msg) ? null : msg)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,nullable,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,string,msg,parent,get,message,code,args,null,locale,return,equals,msg,null,msg,return,null
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale);1509444402;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,nullable,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> @Nullable 	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale);1519295386;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();@Nullable_	protected String getMessageFromParent(String code, @Nullable Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;nullable,protected,string,get,message,from,parent,string,code,nullable,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> protected Properties getCommonMessages();1363208506;Return a Properties object defining locale-independent common messages, if any.;protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> protected Properties getCommonMessages();1368482696;Return a Properties object defining locale-independent common messages, if any.;protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> protected Properties getCommonMessages();1467730834;Return a Properties object defining locale-independent common messages, if any.;protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> protected Properties getCommonMessages();1484252208;Return a Properties object defining locale-independent common messages, if any.;protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> protected String getMessageInternal(String code, Object[] args, Locale locale);1328020251;Resolve the given code and arguments as message in the given Locale,_returning <code>null</code> if not found. Does <i>not</i> fall back to_the code as default message. Invoked by <code>getMessage</code> methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or <code>null</code> if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,code,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,code,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,code,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> protected String getMessageInternal(String code, Object[] args, Locale locale);1356735495;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> protected String getMessageInternal(String code, Object[] args, Locale locale);1357119239;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> protected String getMessageInternal(String code, Object[] args, Locale locale);1363208506;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> protected String getMessageInternal(String code, Object[] args, Locale locale);1368482696;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> protected String getMessageInternal(String code, Object[] args, Locale locale);1467730834;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> protected String getMessageInternal(String code, Object[] args, Locale locale);1484252208;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(String code, Object[] args, Locale locale);1495868221;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(String code, Object[] args, Locale locale);1496242568;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(String code, Object[] args, Locale locale);1496259743;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(String code, Object[] args, Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,string,code,object,args,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale);1496837955;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {_		if (ObjectUtils.isEmpty(args)) {_			return super.resolveArguments(args, locale)__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,nullable,object,args,locale,locale,if,object,utils,is,empty,args,return,super,resolve,arguments,args,locale,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale);1498780456;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {_		if (ObjectUtils.isEmpty(args)) {_			return super.resolveArguments(args, locale)__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,nullable,object,args,locale,locale,if,object,utils,is,empty,args,return,super,resolve,arguments,args,locale,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale);1500448076;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {_		if (ObjectUtils.isEmpty(args)) {_			return super.resolveArguments(args, locale)__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,nullable,object,args,locale,locale,if,object,utils,is,empty,args,return,super,resolve,arguments,args,locale,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale);1508350872;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {_		if (ObjectUtils.isEmpty(args)) {_			return super.resolveArguments(args, locale)__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,nullable,object,args,locale,locale,if,object,utils,is,empty,args,return,super,resolve,arguments,args,locale,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale);1509444402;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {_		if (ObjectUtils.isEmpty(args)) {_			return super.resolveArguments(args, locale)__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,nullable,object,args,locale,locale,if,object,utils,is,empty,args,return,super,resolve,arguments,args,locale,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale);1519295386;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {_		if (ObjectUtils.isEmpty(args)) {_			return super.resolveArguments(args, locale)__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray()__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,nullable,object,args,locale,locale,if,object,utils,is,empty,args,return,super,resolve,arguments,args,locale,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1495868221;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1496242568;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1496259743;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1496837955;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1498780456;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1500448076;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1508350872;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1509444402;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String resolveCodeWithoutArguments(String code, Locale locale);1519295386;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;@Nullable_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;nullable,protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> protected String getDefaultMessage(String code);1328020251;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a NoSuchMessageException from <code>getMessage</code>._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or <code>null</code> if none_@see #setUseCodeAsDefaultMessage;protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,no,such,message,exception,from,code,get,message,code,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,code,if,none,see,set,use,code,as,default,message;protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> protected String getDefaultMessage(String code);1356735495;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a NoSuchMessageException from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> protected String getDefaultMessage(String code);1357119239;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a NoSuchMessageException from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> protected String getDefaultMessage(String code);1363208506;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a NoSuchMessageException from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> protected String getDefaultMessage(String code);1368482696;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a NoSuchMessageException from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> protected String getDefaultMessage(String code);1467730834;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a NoSuchMessageException from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> protected String getDefaultMessage(String code);1484252208;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1328020251;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<Object>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,object,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1356735495;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<Object>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,object,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1357119239;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<Object>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,object,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1363208506;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<Object>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,object,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1368482696;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<Object>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,object,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1467730834;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1484252208;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1495868221;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1496242568;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Override 	protected Object[] resolveArguments(Object[] args, Locale locale);1496259743;Searches through the given array of objects, finds any MessageSourceResolvable_objects and resolves them._<p>Allows for messages to have MessageSourceResolvables as arguments._@param args array of arguments for a message_@param locale the locale to resolve through_@return an array of arguments with any MessageSourceResolvables resolved;@Override_	protected Object[] resolveArguments(Object[] args, Locale locale) {_		if (args == null) {_			return new Object[0]__		}_		List<Object> resolvedArgs = new ArrayList<>(args.length)__		for (Object arg : args) {_			if (arg instanceof MessageSourceResolvable) {_				resolvedArgs.add(getMessage((MessageSourceResolvable) arg, locale))__			}_			else {_				resolvedArgs.add(arg)__			}_		}_		return resolvedArgs.toArray(new Object[resolvedArgs.size()])__	};searches,through,the,given,array,of,objects,finds,any,message,source,resolvable,objects,and,resolves,them,p,allows,for,messages,to,have,message,source,resolvables,as,arguments,param,args,array,of,arguments,for,a,message,param,locale,the,locale,to,resolve,through,return,an,array,of,arguments,with,any,message,source,resolvables,resolved;override,protected,object,resolve,arguments,object,args,locale,locale,if,args,null,return,new,object,0,list,object,resolved,args,new,array,list,args,length,for,object,arg,args,if,arg,instanceof,message,source,resolvable,resolved,args,add,get,message,message,source,resolvable,arg,locale,else,resolved,args,add,arg,return,resolved,args,to,array,new,object,resolved,args,size
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1495868221;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1496242568;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1496259743;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1496837955;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1498780456;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1500448076;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1508350872;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1509444402;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected abstract MessageFormat resolveCode(String code, Locale locale)_;1519295386;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);@Nullable_	protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;nullable,protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale);1496837955;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,nullable,string,code,nullable,object,args,nullable,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale);1498780456;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,nullable,string,code,nullable,object,args,nullable,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale);1500448076;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,nullable,string,code,nullable,object,args,nullable,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale);1508350872;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,nullable,string,code,nullable,object,args,nullable,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale);1509444402;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,nullable,string,code,nullable,object,args,nullable,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> @Nullable 	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale);1519295386;Resolve the given code and arguments as message in the given Locale,_returning {@code null} if not found. Does <i>not</i> fall back to_the code as default message. Invoked by {@code getMessage} methods._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getMessage(String, Object[], String, Locale)_@see #getMessage(String, Object[], Locale)_@see #getMessage(MessageSourceResolvable, Locale)_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getMessageInternal(@Nullable String code, @Nullable Object[] args, @Nullable Locale locale) {_		if (code == null) {_			return null__		}_		if (locale == null) {_			locale = Locale.getDefault()__		}_		Object[] argsToUse = args___		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			_			_			_			_			String message = resolveCodeWithoutArguments(code, locale)__			if (message != null) {_				return message__			}_		}__		else {_			_			_			_			argsToUse = resolveArguments(args, locale)___			MessageFormat messageFormat = resolveCode(code, locale)__			if (messageFormat != null) {_				synchronized (messageFormat) {_					return messageFormat.format(argsToUse)__				}_			}_		}__		_		Properties commonMessages = getCommonMessages()__		if (commonMessages != null) {_			String commonMessage = commonMessages.getProperty(code)__			if (commonMessage != null) {_				return formatMessage(commonMessage, args, locale)__			}_		}__		_		return getMessageFromParent(code, argsToUse, locale)__	};resolve,the,given,code,and,arguments,as,message,in,the,given,locale,returning,code,null,if,not,found,does,i,not,i,fall,back,to,the,code,as,default,message,invoked,by,code,get,message,methods,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,message,string,object,string,locale,see,get,message,string,object,locale,see,get,message,message,source,resolvable,locale,see,set,use,code,as,default,message;nullable,protected,string,get,message,internal,nullable,string,code,nullable,object,args,nullable,locale,locale,if,code,null,return,null,if,locale,null,locale,locale,get,default,object,args,to,use,args,if,is,always,use,message,format,object,utils,is,empty,args,string,message,resolve,code,without,arguments,code,locale,if,message,null,return,message,else,args,to,use,resolve,arguments,args,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,args,to,use,properties,common,messages,get,common,messages,if,common,messages,null,string,common,message,common,messages,get,property,code,if,common,message,null,return,format,message,common,message,args,locale,return,get,message,from,parent,code,args,to,use,locale
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1328020251;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1356735495;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1357119239;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1363208506;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1368482696;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1467730834;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1484252208;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1495868221;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1496242568;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1496259743;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1496837955;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1498780456;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1500448076;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1508350872;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1509444402;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage);1519295386;Set whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Note: In case of a MessageSourceResolvable with multiple codes_(like a FieldError) and a MessageSource that has a parent MessageSource,_do <i>not</i> activate "useCodeAsDefaultMessage" in the <i>parent</i>:_Else, you'll get the first code returned as message by the parent,_without attempts to check further codes._<p>To be able to work with "useCodeAsDefaultMessage" turned on in the parent,_AbstractMessageSource and AbstractApplicationContext contain special checks_to delegate to the internal {@link #getMessageInternal} method if available._In general, it is recommended to just use "useCodeAsDefaultMessage" during_development and not rely on it in production in the first place, though._@see #getMessage(String, Object[], Locale)_@see org.springframework.validation.FieldError;public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {_		this.useCodeAsDefaultMessage = useCodeAsDefaultMessage__	};set,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,note,in,case,of,a,message,source,resolvable,with,multiple,codes,like,a,field,error,and,a,message,source,that,has,a,parent,message,source,do,i,not,i,activate,use,code,as,default,message,in,the,i,parent,i,else,you,ll,get,the,first,code,returned,as,message,by,the,parent,without,attempts,to,check,further,codes,p,to,be,able,to,work,with,use,code,as,default,message,turned,on,in,the,parent,abstract,message,source,and,abstract,application,context,contain,special,checks,to,delegate,to,the,internal,link,get,message,internal,method,if,available,in,general,it,is,recommended,to,just,use,use,code,as,default,message,during,development,and,not,rely,on,it,in,production,in,the,first,place,though,see,get,message,string,object,locale,see,org,springframework,validation,field,error;public,void,set,use,code,as,default,message,boolean,use,code,as,default,message,this,use,code,as,default,message,use,code,as,default,message
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1363208506;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1368482696;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1467730834;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1484252208;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1495868221;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1496242568;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1496259743;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1496837955;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(Properties commonMessages);1498780456;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1495868221;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1496242568;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1496259743;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1496837955;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1498780456;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1500448076;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1508350872;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1509444402;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected Properties getCommonMessages();1519295386;Return a Properties object defining locale-independent common messages, if any.;@Nullable_	protected Properties getCommonMessages() {_		return this.commonMessages__	};return,a,properties,object,defining,locale,independent,common,messages,if,any;nullable,protected,properties,get,common,messages,return,this,common,messages
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1495868221;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1496242568;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1496259743;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1496837955;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1498780456;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1500448076;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1508350872;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1509444402;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(String code);1519295386;Return a fallback default message for the given code, if any._<p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,_or return no fallback else. In case of no fallback, the caller will usually_receive a {@code NoSuchMessageException} from {@code getMessage}._@param code the message code that we couldn't resolve_and that we didn't receive an explicit default message for_@return the default message to use, or {@code null} if none_@see #setUseCodeAsDefaultMessage;@Nullable_	protected String getDefaultMessage(String code) {_		if (isUseCodeAsDefaultMessage()) {_			return code__		}_		return null__	};return,a,fallback,default,message,for,the,given,code,if,any,p,default,is,to,return,the,code,itself,if,use,code,as,default,message,is,activated,or,return,no,fallback,else,in,case,of,no,fallback,the,caller,will,usually,receive,a,code,no,such,message,exception,from,code,get,message,param,code,the,message,code,that,we,couldn,t,resolve,and,that,we,didn,t,receive,an,explicit,default,message,for,return,the,default,message,to,use,or,code,null,if,none,see,set,use,code,as,default,message;nullable,protected,string,get,default,message,string,code,if,is,use,code,as,default,message,return,code,return,null
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1328020251;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1356735495;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1357119239;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1363208506;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1368482696;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1467730834;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1484252208;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1495868221;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1496242568;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1496259743;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1496837955;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1498780456;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1500448076;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1508350872;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1509444402;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected boolean isUseCodeAsDefaultMessage();1519295386;Return whether to use the message code as default message instead of_throwing a NoSuchMessageException. Useful for development and debugging._Default is "false"._<p>Alternatively, consider overriding the {@link #getDefaultMessage}_method to return a custom fallback message for an unresolvable code._@see #getDefaultMessage(String);protected boolean isUseCodeAsDefaultMessage() {_		return this.useCodeAsDefaultMessage__	};return,whether,to,use,the,message,code,as,default,message,instead,of,throwing,a,no,such,message,exception,useful,for,development,and,debugging,default,is,false,p,alternatively,consider,overriding,the,link,get,default,message,method,to,return,a,custom,fallback,message,for,an,unresolvable,code,see,get,default,message,string;protected,boolean,is,use,code,as,default,message,return,this,use,code,as,default,message
AbstractMessageSource -> protected String resolveCodeWithoutArguments(String code, Locale locale);1328020251;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, <code>java.text.MessageFormat</code> is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or <code>null</code> if not found_@see #resolveCode_@see java.text.MessageFormat;protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,code,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,code,if,not,found,see,resolve,code,see,java,text,message,format;protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> protected String resolveCodeWithoutArguments(String code, Locale locale);1356735495;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> protected String resolveCodeWithoutArguments(String code, Locale locale);1357119239;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> protected String resolveCodeWithoutArguments(String code, Locale locale);1363208506;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> protected String resolveCodeWithoutArguments(String code, Locale locale);1368482696;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> protected String resolveCodeWithoutArguments(String code, Locale locale);1467730834;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> protected String resolveCodeWithoutArguments(String code, Locale locale);1484252208;Subclasses can override this method to resolve a message without arguments_in an optimized fashion, i.e. to resolve without involving a MessageFormat._<p>The default implementation <i>does</i> use MessageFormat, through_delegating to the {@link #resolveCode} method. Subclasses are encouraged_to replace this with optimized resolution._<p>Unfortunately, {@code java.text.MessageFormat} is not implemented_in an efficient fashion. In particular, it does not detect that a message_pattern doesn't contain argument placeholders in the first place. Therefore,_it is advisable to circumvent MessageFormat for messages without arguments._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the message String, or {@code null} if not found_@see #resolveCode_@see java.text.MessageFormat;protected String resolveCodeWithoutArguments(String code, Locale locale) {_		MessageFormat messageFormat = resolveCode(code, locale)__		if (messageFormat != null) {_			synchronized (messageFormat) {_				return messageFormat.format(new Object[0])__			}_		}_		return null__	};subclasses,can,override,this,method,to,resolve,a,message,without,arguments,in,an,optimized,fashion,i,e,to,resolve,without,involving,a,message,format,p,the,default,implementation,i,does,i,use,message,format,through,delegating,to,the,link,resolve,code,method,subclasses,are,encouraged,to,replace,this,with,optimized,resolution,p,unfortunately,code,java,text,message,format,is,not,implemented,in,an,efficient,fashion,in,particular,it,does,not,detect,that,a,message,pattern,doesn,t,contain,argument,placeholders,in,the,first,place,therefore,it,is,advisable,to,circumvent,message,format,for,messages,without,arguments,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,string,or,code,null,if,not,found,see,resolve,code,see,java,text,message,format;protected,string,resolve,code,without,arguments,string,code,locale,locale,message,format,message,format,resolve,code,code,locale,if,message,format,null,synchronized,message,format,return,message,format,format,new,object,0,return,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1495868221;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1496242568;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1496259743;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1496837955;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1498780456;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1500448076;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1508350872;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1509444402;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> @Nullable 	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale);1519295386;Get a default message for the given {@code MessageSourceResolvable}._<p>This implementation fully renders the default message if available,_or just returns the plain default message {@code String} if the primary_message code is being used as a default message._@param resolvable the value object to resolve a default message for_@param locale the current locale_@return the default message, or {@code null} if none_@since 4.3.6_@see #renderDefaultMessage(String, Object[], Locale)_@see #getDefaultMessage(String);@Nullable_	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {_		String defaultMessage = resolvable.getDefaultMessage()__		String[] codes = resolvable.getCodes()__		if (defaultMessage != null) {_			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {_				_				return defaultMessage__			}_			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale)__		}_		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null)__	};get,a,default,message,for,the,given,code,message,source,resolvable,p,this,implementation,fully,renders,the,default,message,if,available,or,just,returns,the,plain,default,message,code,string,if,the,primary,message,code,is,being,used,as,a,default,message,param,resolvable,the,value,object,to,resolve,a,default,message,for,param,locale,the,current,locale,return,the,default,message,or,code,null,if,none,since,4,3,6,see,render,default,message,string,object,locale,see,get,default,message,string;nullable,protected,string,get,default,message,message,source,resolvable,resolvable,locale,locale,string,default,message,resolvable,get,default,message,string,codes,resolvable,get,codes,if,default,message,null,if,object,utils,is,empty,codes,default,message,equals,codes,0,return,default,message,return,render,default,message,default,message,resolvable,get,arguments,locale,return,object,utils,is,empty,codes,get,default,message,codes,0,null
AbstractMessageSource -> public void setCommonMessages(@Nullable Properties commonMessages);1500448076;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(@Nullable Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,nullable,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(@Nullable Properties commonMessages);1508350872;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(@Nullable Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,nullable,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(@Nullable Properties commonMessages);1509444402;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(@Nullable Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,nullable,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> public void setCommonMessages(@Nullable Properties commonMessages);1519295386;Specify locale-independent common messages, with the message code as key_and the full message String (may contain argument placeholders) as value._<p>May also link to an externally defined Properties object, e.g. defined_through a {@link org.springframework.beans.factory.config.PropertiesFactoryBean}.;public void setCommonMessages(@Nullable Properties commonMessages) {_		this.commonMessages = commonMessages__	};specify,locale,independent,common,messages,with,the,message,code,as,key,and,the,full,message,string,may,contain,argument,placeholders,as,value,p,may,also,link,to,an,externally,defined,properties,object,e,g,defined,through,a,link,org,springframework,beans,factory,config,properties,factory,bean;public,void,set,common,messages,nullable,properties,common,messages,this,common,messages,common,messages
AbstractMessageSource -> protected abstract MessageFormat resolveCode(String code, Locale locale)_;1328020251;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or <code>null</code> if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,code,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> protected abstract MessageFormat resolveCode(String code, Locale locale)_;1356735495;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> protected abstract MessageFormat resolveCode(String code, Locale locale)_;1357119239;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> protected abstract MessageFormat resolveCode(String code, Locale locale)_;1363208506;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> protected abstract MessageFormat resolveCode(String code, Locale locale)_;1368482696;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> protected abstract MessageFormat resolveCode(String code, Locale locale)_;1467730834;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the Locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> protected abstract MessageFormat resolveCode(String code, Locale locale)_;1484252208;Subclasses must implement this method to resolve a message._<p>Returns a MessageFormat instance rather than a message String,_to allow for appropriate caching of MessageFormats in subclasses._<p><b>Subclasses are encouraged to provide optimized resolution_for messages without arguments, not involving MessageFormat.</b>_See the {@link #resolveCodeWithoutArguments} javadoc for details._@param code the code of the message to resolve_@param locale the locale to resolve the code for_(subclasses are encouraged to support internationalization)_@return the MessageFormat for the message, or {@code null} if not found_@see #resolveCodeWithoutArguments(String, java.util.Locale);protected abstract MessageFormat resolveCode(String code, Locale locale)_;subclasses,must,implement,this,method,to,resolve,a,message,p,returns,a,message,format,instance,rather,than,a,message,string,to,allow,for,appropriate,caching,of,message,formats,in,subclasses,p,b,subclasses,are,encouraged,to,provide,optimized,resolution,for,messages,without,arguments,not,involving,message,format,b,see,the,link,resolve,code,without,arguments,javadoc,for,details,param,code,the,code,of,the,message,to,resolve,param,locale,the,locale,to,resolve,the,code,for,subclasses,are,encouraged,to,support,internationalization,return,the,message,format,for,the,message,or,code,null,if,not,found,see,resolve,code,without,arguments,string,java,util,locale;protected,abstract,message,format,resolve,code,string,code,locale,locale
AbstractMessageSource -> protected String getMessageFromParent(String code, Object[] args, Locale locale);1328020251;Try to retrieve the given message from the parent MessageSource, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or <code>null</code> if not found_@see #getParentMessageSource();protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,code,if,not,found,see,get,parent,message,source;protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> protected String getMessageFromParent(String code, Object[] args, Locale locale);1356735495;Try to retrieve the given message from the parent MessageSource, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> protected String getMessageFromParent(String code, Object[] args, Locale locale);1357119239;Try to retrieve the given message from the parent MessageSource, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> protected String getMessageFromParent(String code, Object[] args, Locale locale);1363208506;Try to retrieve the given message from the parent MessageSource, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> protected String getMessageFromParent(String code, Object[] args, Locale locale);1368482696;Try to retrieve the given message from the parent MessageSource, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> protected String getMessageFromParent(String code, Object[] args, Locale locale);1467730834;Try to retrieve the given message from the parent MessageSource, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the Locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
AbstractMessageSource -> protected String getMessageFromParent(String code, Object[] args, Locale locale);1484252208;Try to retrieve the given message from the parent {@code MessageSource}, if any._@param code the code to lookup up, such as 'calculator.noRateSet'_@param args array of arguments that will be filled in for params_within the message_@param locale the locale in which to do the lookup_@return the resolved message, or {@code null} if not found_@see #getParentMessageSource();protected String getMessageFromParent(String code, Object[] args, Locale locale) {_		MessageSource parent = getParentMessageSource()__		if (parent != null) {_			if (parent instanceof AbstractMessageSource) {_				_				_				return ((AbstractMessageSource) parent).getMessageInternal(code, args, locale)__			}_			else {_				_				return parent.getMessage(code, args, null, locale)__			}_		}_		_		return null__	};try,to,retrieve,the,given,message,from,the,parent,code,message,source,if,any,param,code,the,code,to,lookup,up,such,as,calculator,no,rate,set,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,param,locale,the,locale,in,which,to,do,the,lookup,return,the,resolved,message,or,code,null,if,not,found,see,get,parent,message,source;protected,string,get,message,from,parent,string,code,object,args,locale,locale,message,source,parent,get,parent,message,source,if,parent,null,if,parent,instanceof,abstract,message,source,return,abstract,message,source,parent,get,message,internal,code,args,locale,else,return,parent,get,message,code,args,null,locale,return,null
