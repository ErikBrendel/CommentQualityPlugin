commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to cache the actual session bean object.  * <p>Off by default for standard EJB compliance. Turn this flag  * on to optimize session bean access for servers that are  * known to allow for caching the actual session bean object.  * @see #setCacheHome  */ ;/**  * Set whether to cache the actual session bean object.  * <p>Off by default for standard EJB compliance. Turn this flag  * on to optimize session bean access for servers that are  * known to allow for caching the actual session bean object.  * @see #setCacheHome  */ public void setCacheSessionBean(boolean cacheSessionBean) {     this.cacheSessionBean = cacheSessionBean. }
true;protected;1;30;/**  * This implementation "creates" a new EJB instance for each invocation.  * Can be overridden for custom invocation strategies.  * <p>Alternatively, override {@link #getSessionBeanInstance} and  * {@link #releaseSessionBeanInstance} to change EJB instance creation,  * for example to hold a single shared EJB component instance.  */ ;/**  * This implementation "creates" a new EJB instance for each invocation.  * Can be overridden for custom invocation strategies.  * <p>Alternatively, override {@link #getSessionBeanInstance} and  * {@link #releaseSessionBeanInstance} to change EJB instance creation,  * for example to hold a single shared EJB component instance.  */ @Override @Nullable protected Object doInvoke(MethodInvocation invocation) throws Throwable {     Object ejb = null.     try {         ejb = getSessionBeanInstance().         return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, ejb).     } catch (NamingException ex) {         throw new RemoteLookupFailureException("Failed to locate remote EJB [" + getJndiName() + "]", ex).     } catch (InvocationTargetException ex) {         Throwable targetEx = ex.getTargetException().         if (targetEx instanceof RemoteException) {             RemoteException rex = (RemoteException) targetEx.             throw RmiClientInterceptorUtils.convertRmiAccessException(invocation.getMethod(), rex, isConnectFailure(rex), getJndiName()).         } else if (targetEx instanceof CreateException) {             throw RmiClientInterceptorUtils.convertRmiAccessException(invocation.getMethod(), targetEx, "Could not create remote EJB [" + getJndiName() + "]").         }         throw targetEx.     } finally {         if (ejb instanceof EJBObject) {             releaseSessionBeanInstance((EJBObject) ejb).         }     } }
true;protected;0;13;/**  * Return an EJB component instance to delegate the call to.  * <p>The default implementation delegates to {@link #newSessionBeanInstance}.  * @return the EJB component instance  * @throws NamingException if thrown by JNDI  * @throws InvocationTargetException if thrown by the create method  * @see #newSessionBeanInstance  */ ;/**  * Return an EJB component instance to delegate the call to.  * <p>The default implementation delegates to {@link #newSessionBeanInstance}.  * @return the EJB component instance  * @throws NamingException if thrown by JNDI  * @throws InvocationTargetException if thrown by the create method  * @see #newSessionBeanInstance  */ protected Object getSessionBeanInstance() throws NamingException, InvocationTargetException {     if (this.cacheSessionBean) {         synchronized (this.beanInstanceMonitor) {             if (this.beanInstance == null) {                 this.beanInstance = newSessionBeanInstance().             }             return this.beanInstance.         }     } else {         return newSessionBeanInstance().     } }
true;protected;1;5;/**  * Release the given EJB instance.  * <p>The default implementation delegates to {@link #removeSessionBeanInstance}.  * @param ejb the EJB component instance to release  * @see #removeSessionBeanInstance  */ ;/**  * Release the given EJB instance.  * <p>The default implementation delegates to {@link #removeSessionBeanInstance}.  * @param ejb the EJB component instance to release  * @see #removeSessionBeanInstance  */ protected void releaseSessionBeanInstance(EJBObject ejb) {     if (!this.cacheSessionBean) {         removeSessionBeanInstance(ejb).     } }
true;protected;0;9;/**  * Reset the cached session bean instance, if necessary.  */ ;/**  * Reset the cached session bean instance, if necessary.  */ @Override protected void refreshHome() throws NamingException {     super.refreshHome().     if (this.cacheSessionBean) {         synchronized (this.beanInstanceMonitor) {             this.beanInstance = null.         }     } }
true;public;0;10;/**  * Remove the cached session bean instance, if necessary.  */ ;/**  * Remove the cached session bean instance, if necessary.  */ @Override public void destroy() {     if (this.cacheSessionBean) {         synchronized (this.beanInstanceMonitor) {             if (this.beanInstance instanceof EJBObject) {                 removeSessionBeanInstance((EJBObject) this.beanInstance).             }         }     } }
