# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractCacheManager -> protected final Cache lookupCache(String name);1443105730;Check for a registered cache of the given name._In contrast to {@link #getCache(String)}, this method does not trigger_the lazy creation of missing caches via {@link #getMissingCache(String)}._@param name the cache identifier (must not be {@code null})_@return the associated Cache instance, or {@code null} if none found_@since 4.1_@see #getCache(String)_@see #getMissingCache(String);protected final Cache lookupCache(String name) {_		return this.cacheMap.get(name)__	};check,for,a,registered,cache,of,the,given,name,in,contrast,to,link,get,cache,string,this,method,does,not,trigger,the,lazy,creation,of,missing,caches,via,link,get,missing,cache,string,param,name,the,cache,identifier,must,not,be,code,null,return,the,associated,cache,instance,or,code,null,if,none,found,since,4,1,see,get,cache,string,see,get,missing,cache,string;protected,final,cache,lookup,cache,string,name,return,this,cache,map,get,name
AbstractCacheManager -> protected final Cache lookupCache(String name);1458144786;Check for a registered cache of the given name._In contrast to {@link #getCache(String)}, this method does not trigger_the lazy creation of missing caches via {@link #getMissingCache(String)}._@param name the cache identifier (must not be {@code null})_@return the associated Cache instance, or {@code null} if none found_@since 4.1_@see #getCache(String)_@see #getMissingCache(String);protected final Cache lookupCache(String name) {_		return this.cacheMap.get(name)__	};check,for,a,registered,cache,of,the,given,name,in,contrast,to,link,get,cache,string,this,method,does,not,trigger,the,lazy,creation,of,missing,caches,via,link,get,missing,cache,string,param,name,the,cache,identifier,must,not,be,code,null,return,the,associated,cache,instance,or,code,null,if,none,found,since,4,1,see,get,cache,string,see,get,missing,cache,string;protected,final,cache,lookup,cache,string,name,return,this,cache,map,get,name
AbstractCacheManager -> protected final Cache lookupCache(String name);1458144843;Check for a registered cache of the given name._In contrast to {@link #getCache(String)}, this method does not trigger_the lazy creation of missing caches via {@link #getMissingCache(String)}._@param name the cache identifier (must not be {@code null})_@return the associated Cache instance, or {@code null} if none found_@since 4.1_@see #getCache(String)_@see #getMissingCache(String);protected final Cache lookupCache(String name) {_		return this.cacheMap.get(name)__	};check,for,a,registered,cache,of,the,given,name,in,contrast,to,link,get,cache,string,this,method,does,not,trigger,the,lazy,creation,of,missing,caches,via,link,get,missing,cache,string,param,name,the,cache,identifier,must,not,be,code,null,return,the,associated,cache,instance,or,code,null,if,none,found,since,4,1,see,get,cache,string,see,get,missing,cache,string;protected,final,cache,lookup,cache,string,name,return,this,cache,map,get,name
AbstractCacheManager -> protected final Cache lookupCache(String name);1467726769;Check for a registered cache of the given name._In contrast to {@link #getCache(String)}, this method does not trigger_the lazy creation of missing caches via {@link #getMissingCache(String)}._@param name the cache identifier (must not be {@code null})_@return the associated Cache instance, or {@code null} if none found_@since 4.1_@see #getCache(String)_@see #getMissingCache(String);protected final Cache lookupCache(String name) {_		return this.cacheMap.get(name)__	};check,for,a,registered,cache,of,the,given,name,in,contrast,to,link,get,cache,string,this,method,does,not,trigger,the,lazy,creation,of,missing,caches,via,link,get,missing,cache,string,param,name,the,cache,identifier,must,not,be,code,null,return,the,associated,cache,instance,or,code,null,if,none,found,since,4,1,see,get,cache,string,see,get,missing,cache,string;protected,final,cache,lookup,cache,string,name,return,this,cache,map,get,name
AbstractCacheManager -> protected final Cache lookupCache(String name);1467730834;Check for a registered cache of the given name._In contrast to {@link #getCache(String)}, this method does not trigger_the lazy creation of missing caches via {@link #getMissingCache(String)}._@param name the cache identifier (must not be {@code null})_@return the associated Cache instance, or {@code null} if none found_@since 4.1_@see #getCache(String)_@see #getMissingCache(String);protected final Cache lookupCache(String name) {_		return this.cacheMap.get(name)__	};check,for,a,registered,cache,of,the,given,name,in,contrast,to,link,get,cache,string,this,method,does,not,trigger,the,lazy,creation,of,missing,caches,via,link,get,missing,cache,string,param,name,the,cache,identifier,must,not,be,code,null,return,the,associated,cache,instance,or,code,null,if,none,found,since,4,1,see,get,cache,string,see,get,missing,cache,string;protected,final,cache,lookup,cache,string,name,return,this,cache,map,get,name
AbstractCacheManager -> protected final Cache lookupCache(String name);1469461631;Check for a registered cache of the given name._In contrast to {@link #getCache(String)}, this method does not trigger_the lazy creation of missing caches via {@link #getMissingCache(String)}._@param name the cache identifier (must not be {@code null})_@return the associated Cache instance, or {@code null} if none found_@since 4.1_@see #getCache(String)_@see #getMissingCache(String);protected final Cache lookupCache(String name) {_		return this.cacheMap.get(name)__	};check,for,a,registered,cache,of,the,given,name,in,contrast,to,link,get,cache,string,this,method,does,not,trigger,the,lazy,creation,of,missing,caches,via,link,get,missing,cache,string,param,name,the,cache,identifier,must,not,be,code,null,return,the,associated,cache,instance,or,code,null,if,none,found,since,4,1,see,get,cache,string,see,get,missing,cache,string;protected,final,cache,lookup,cache,string,name,return,this,cache,map,get,name
AbstractCacheManager -> private void updateCacheNames(String name);1443105730;Update the exposed {@link #cacheNames} set with the given name._<p>This will always be called within a full {@link #cacheMap} lock_and effectively behaves like a {@code CopyOnWriteArraySet} with_preserved order but exposed as an unmodifiable reference._@param name the name of the cache to be added;private void updateCacheNames(String name) {_		Set<String> cacheNames = new LinkedHashSet<String>(this.cacheNames.size() + 1)__		cacheNames.addAll(this.cacheNames)__		cacheNames.add(name)__		this.cacheNames = Collections.unmodifiableSet(cacheNames)__	};update,the,exposed,link,cache,names,set,with,the,given,name,p,this,will,always,be,called,within,a,full,link,cache,map,lock,and,effectively,behaves,like,a,code,copy,on,write,array,set,with,preserved,order,but,exposed,as,an,unmodifiable,reference,param,name,the,name,of,the,cache,to,be,added;private,void,update,cache,names,string,name,set,string,cache,names,new,linked,hash,set,string,this,cache,names,size,1,cache,names,add,all,this,cache,names,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> private void updateCacheNames(String name);1458144786;Update the exposed {@link #cacheNames} set with the given name._<p>This will always be called within a full {@link #cacheMap} lock_and effectively behaves like a {@code CopyOnWriteArraySet} with_preserved order but exposed as an unmodifiable reference._@param name the name of the cache to be added;private void updateCacheNames(String name) {_		Set<String> cacheNames = new LinkedHashSet<String>(this.cacheNames.size() + 1)__		cacheNames.addAll(this.cacheNames)__		cacheNames.add(name)__		this.cacheNames = Collections.unmodifiableSet(cacheNames)__	};update,the,exposed,link,cache,names,set,with,the,given,name,p,this,will,always,be,called,within,a,full,link,cache,map,lock,and,effectively,behaves,like,a,code,copy,on,write,array,set,with,preserved,order,but,exposed,as,an,unmodifiable,reference,param,name,the,name,of,the,cache,to,be,added;private,void,update,cache,names,string,name,set,string,cache,names,new,linked,hash,set,string,this,cache,names,size,1,cache,names,add,all,this,cache,names,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> private void updateCacheNames(String name);1458144843;Update the exposed {@link #cacheNames} set with the given name._<p>This will always be called within a full {@link #cacheMap} lock_and effectively behaves like a {@code CopyOnWriteArraySet} with_preserved order but exposed as an unmodifiable reference._@param name the name of the cache to be added;private void updateCacheNames(String name) {_		Set<String> cacheNames = new LinkedHashSet<String>(this.cacheNames.size() + 1)__		cacheNames.addAll(this.cacheNames)__		cacheNames.add(name)__		this.cacheNames = Collections.unmodifiableSet(cacheNames)__	};update,the,exposed,link,cache,names,set,with,the,given,name,p,this,will,always,be,called,within,a,full,link,cache,map,lock,and,effectively,behaves,like,a,code,copy,on,write,array,set,with,preserved,order,but,exposed,as,an,unmodifiable,reference,param,name,the,name,of,the,cache,to,be,added;private,void,update,cache,names,string,name,set,string,cache,names,new,linked,hash,set,string,this,cache,names,size,1,cache,names,add,all,this,cache,names,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> private void updateCacheNames(String name);1467726769;Update the exposed {@link #cacheNames} set with the given name._<p>This will always be called within a full {@link #cacheMap} lock_and effectively behaves like a {@code CopyOnWriteArraySet} with_preserved order but exposed as an unmodifiable reference._@param name the name of the cache to be added;private void updateCacheNames(String name) {_		Set<String> cacheNames = new LinkedHashSet<String>(this.cacheNames.size() + 1)__		cacheNames.addAll(this.cacheNames)__		cacheNames.add(name)__		this.cacheNames = Collections.unmodifiableSet(cacheNames)__	};update,the,exposed,link,cache,names,set,with,the,given,name,p,this,will,always,be,called,within,a,full,link,cache,map,lock,and,effectively,behaves,like,a,code,copy,on,write,array,set,with,preserved,order,but,exposed,as,an,unmodifiable,reference,param,name,the,name,of,the,cache,to,be,added;private,void,update,cache,names,string,name,set,string,cache,names,new,linked,hash,set,string,this,cache,names,size,1,cache,names,add,all,this,cache,names,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> private void updateCacheNames(String name);1467730834;Update the exposed {@link #cacheNames} set with the given name._<p>This will always be called within a full {@link #cacheMap} lock_and effectively behaves like a {@code CopyOnWriteArraySet} with_preserved order but exposed as an unmodifiable reference._@param name the name of the cache to be added;private void updateCacheNames(String name) {_		Set<String> cacheNames = new LinkedHashSet<>(this.cacheNames.size() + 1)__		cacheNames.addAll(this.cacheNames)__		cacheNames.add(name)__		this.cacheNames = Collections.unmodifiableSet(cacheNames)__	};update,the,exposed,link,cache,names,set,with,the,given,name,p,this,will,always,be,called,within,a,full,link,cache,map,lock,and,effectively,behaves,like,a,code,copy,on,write,array,set,with,preserved,order,but,exposed,as,an,unmodifiable,reference,param,name,the,name,of,the,cache,to,be,added;private,void,update,cache,names,string,name,set,string,cache,names,new,linked,hash,set,this,cache,names,size,1,cache,names,add,all,this,cache,names,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> private void updateCacheNames(String name);1469461631;Update the exposed {@link #cacheNames} set with the given name._<p>This will always be called within a full {@link #cacheMap} lock_and effectively behaves like a {@code CopyOnWriteArraySet} with_preserved order but exposed as an unmodifiable reference._@param name the name of the cache to be added;private void updateCacheNames(String name) {_		Set<String> cacheNames = new LinkedHashSet<>(this.cacheNames.size() + 1)__		cacheNames.addAll(this.cacheNames)__		cacheNames.add(name)__		this.cacheNames = Collections.unmodifiableSet(cacheNames)__	};update,the,exposed,link,cache,names,set,with,the,given,name,p,this,will,always,be,called,within,a,full,link,cache,map,lock,and,effectively,behaves,like,a,code,copy,on,write,array,set,with,preserved,order,but,exposed,as,an,unmodifiable,reference,param,name,the,name,of,the,cache,to,be,added;private,void,update,cache,names,string,name,set,string,cache,names,new,linked,hash,set,this,cache,names,size,1,cache,names,add,all,this,cache,names,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> private void updateCacheNames(String name);1495868221;Update the exposed {@link #cacheNames} set with the given name._<p>This will always be called within a full {@link #cacheMap} lock_and effectively behaves like a {@code CopyOnWriteArraySet} with_preserved order but exposed as an unmodifiable reference._@param name the name of the cache to be added;private void updateCacheNames(String name) {_		Set<String> cacheNames = new LinkedHashSet<>(this.cacheNames.size() + 1)__		cacheNames.addAll(this.cacheNames)__		cacheNames.add(name)__		this.cacheNames = Collections.unmodifiableSet(cacheNames)__	};update,the,exposed,link,cache,names,set,with,the,given,name,p,this,will,always,be,called,within,a,full,link,cache,map,lock,and,effectively,behaves,like,a,code,copy,on,write,array,set,with,preserved,order,but,exposed,as,an,unmodifiable,reference,param,name,the,name,of,the,cache,to,be,added;private,void,update,cache,names,string,name,set,string,cache,names,new,linked,hash,set,this,cache,names,size,1,cache,names,add,all,this,cache,names,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> private void updateCacheNames(String name);1502974979;Update the exposed {@link #cacheNames} set with the given name._<p>This will always be called within a full {@link #cacheMap} lock_and effectively behaves like a {@code CopyOnWriteArraySet} with_preserved order but exposed as an unmodifiable reference._@param name the name of the cache to be added;private void updateCacheNames(String name) {_		Set<String> cacheNames = new LinkedHashSet<>(this.cacheNames.size() + 1)__		cacheNames.addAll(this.cacheNames)__		cacheNames.add(name)__		this.cacheNames = Collections.unmodifiableSet(cacheNames)__	};update,the,exposed,link,cache,names,set,with,the,given,name,p,this,will,always,be,called,within,a,full,link,cache,map,lock,and,effectively,behaves,like,a,code,copy,on,write,array,set,with,preserved,order,but,exposed,as,an,unmodifiable,reference,param,name,the,name,of,the,cache,to,be,added;private,void,update,cache,names,string,name,set,string,cache,names,new,linked,hash,set,this,cache,names,size,1,cache,names,add,all,this,cache,names,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1353877115;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1355352386;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1356735495;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1357119239;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1362408075;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1368482696;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1396356515;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1408382828;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1443105730;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1458144786;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1458144843;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1467726769;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1467730834;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1469461631;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1495868221;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> protected Cache decorateCache(Cache cache);1502974979;Decorate the given Cache object if necessary._@param cache the Cache object to be added to this CacheManager_@return the decorated Cache object to be used instead,_or simply the passed-in Cache object by default;protected Cache decorateCache(Cache cache) {_		return cache__	};decorate,the,given,cache,object,if,necessary,param,cache,the,cache,object,to,be,added,to,this,cache,manager,return,the,decorated,cache,object,to,be,used,instead,or,simply,the,passed,in,cache,object,by,default;protected,cache,decorate,cache,cache,cache,return,cache
AbstractCacheManager -> @Nullable 	protected final Cache lookupCache(String name);1495868221;Check for a registered cache of the given name._In contrast to {@link #getCache(String)}, this method does not trigger_the lazy creation of missing caches via {@link #getMissingCache(String)}._@param name the cache identifier (must not be {@code null})_@return the associated Cache instance, or {@code null} if none found_@since 4.1_@see #getCache(String)_@see #getMissingCache(String);@Nullable_	protected final Cache lookupCache(String name) {_		return this.cacheMap.get(name)__	};check,for,a,registered,cache,of,the,given,name,in,contrast,to,link,get,cache,string,this,method,does,not,trigger,the,lazy,creation,of,missing,caches,via,link,get,missing,cache,string,param,name,the,cache,identifier,must,not,be,code,null,return,the,associated,cache,instance,or,code,null,if,none,found,since,4,1,see,get,cache,string,see,get,missing,cache,string;nullable,protected,final,cache,lookup,cache,string,name,return,this,cache,map,get,name
AbstractCacheManager -> @Nullable 	protected final Cache lookupCache(String name);1502974979;Check for a registered cache of the given name._In contrast to {@link #getCache(String)}, this method does not trigger_the lazy creation of missing caches via {@link #getMissingCache(String)}._@param name the cache identifier (must not be {@code null})_@return the associated Cache instance, or {@code null} if none found_@since 4.1_@see #getCache(String)_@see #getMissingCache(String);@Nullable_	protected final Cache lookupCache(String name) {_		return this.cacheMap.get(name)__	};check,for,a,registered,cache,of,the,given,name,in,contrast,to,link,get,cache,string,this,method,does,not,trigger,the,lazy,creation,of,missing,caches,via,link,get,missing,cache,string,param,name,the,cache,identifier,must,not,be,code,null,return,the,associated,cache,instance,or,code,null,if,none,found,since,4,1,see,get,cache,string,see,get,missing,cache,string;nullable,protected,final,cache,lookup,cache,string,name,return,this,cache,map,get,name
AbstractCacheManager -> @Deprecated 	protected final void addCache(Cache cache);1458144786;Dynamically register an additional Cache with this manager._@param cache the Cache to register_@deprecated as of Spring 4.3, in favor of {@link #getMissingCache(String)};@Deprecated_	protected final void addCache(Cache cache) {_		String name = cache.getName()__		synchronized (this.cacheMap) {_			if (this.cacheMap.put(name, decorateCache(cache)) == null) {_				updateCacheNames(name)__			}_		}_	};dynamically,register,an,additional,cache,with,this,manager,param,cache,the,cache,to,register,deprecated,as,of,spring,4,3,in,favor,of,link,get,missing,cache,string;deprecated,protected,final,void,add,cache,cache,cache,string,name,cache,get,name,synchronized,this,cache,map,if,this,cache,map,put,name,decorate,cache,cache,null,update,cache,names,name
AbstractCacheManager -> @Deprecated 	protected final void addCache(Cache cache);1458144843;Dynamically register an additional Cache with this manager._@param cache the Cache to register_@deprecated as of Spring 4.3, in favor of {@link #getMissingCache(String)};@Deprecated_	protected final void addCache(Cache cache) {_		String name = cache.getName()__		synchronized (this.cacheMap) {_			if (this.cacheMap.put(name, decorateCache(cache)) == null) {_				updateCacheNames(name)__			}_		}_	};dynamically,register,an,additional,cache,with,this,manager,param,cache,the,cache,to,register,deprecated,as,of,spring,4,3,in,favor,of,link,get,missing,cache,string;deprecated,protected,final,void,add,cache,cache,cache,string,name,cache,get,name,synchronized,this,cache,map,if,this,cache,map,put,name,decorate,cache,cache,null,update,cache,names,name
AbstractCacheManager -> @Deprecated 	protected final void addCache(Cache cache);1469461631;Dynamically register an additional Cache with this manager._@param cache the Cache to register_@deprecated as of Spring 4.3, in favor of {@link #getMissingCache(String)};@Deprecated_	protected final void addCache(Cache cache) {_		String name = cache.getName()__		synchronized (this.cacheMap) {_			if (this.cacheMap.put(name, decorateCache(cache)) == null) {_				updateCacheNames(name)__			}_		}_	};dynamically,register,an,additional,cache,with,this,manager,param,cache,the,cache,to,register,deprecated,as,of,spring,4,3,in,favor,of,link,get,missing,cache,string;deprecated,protected,final,void,add,cache,cache,cache,string,name,cache,get,name,synchronized,this,cache,map,if,this,cache,map,put,name,decorate,cache,cache,null,update,cache,names,name
AbstractCacheManager -> @Deprecated 	protected final void addCache(Cache cache);1495868221;Dynamically register an additional Cache with this manager._@param cache the Cache to register_@deprecated as of Spring 4.3, in favor of {@link #getMissingCache(String)};@Deprecated_	protected final void addCache(Cache cache) {_		String name = cache.getName()__		synchronized (this.cacheMap) {_			if (this.cacheMap.put(name, decorateCache(cache)) == null) {_				updateCacheNames(name)__			}_		}_	};dynamically,register,an,additional,cache,with,this,manager,param,cache,the,cache,to,register,deprecated,as,of,spring,4,3,in,favor,of,link,get,missing,cache,string;deprecated,protected,final,void,add,cache,cache,cache,string,name,cache,get,name,synchronized,this,cache,map,if,this,cache,map,put,name,decorate,cache,cache,null,update,cache,names,name
AbstractCacheManager -> @Deprecated 	protected final void addCache(Cache cache);1502974979;Dynamically register an additional Cache with this manager._@param cache the Cache to register_@deprecated as of Spring 4.3, in favor of {@link #getMissingCache(String)};@Deprecated_	protected final void addCache(Cache cache) {_		String name = cache.getName()__		synchronized (this.cacheMap) {_			if (this.cacheMap.put(name, decorateCache(cache)) == null) {_				updateCacheNames(name)__			}_		}_	};dynamically,register,an,additional,cache,with,this,manager,param,cache,the,cache,to,register,deprecated,as,of,spring,4,3,in,favor,of,link,get,missing,cache,string;deprecated,protected,final,void,add,cache,cache,cache,string,name,cache,get,name,synchronized,this,cache,map,if,this,cache,map,put,name,decorate,cache,cache,null,update,cache,names,name
AbstractCacheManager -> @Nullable 	protected Cache getMissingCache(String name);1495868221;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime if the native provider supports_it. If a lookup by name does not yield any result, a subclass gets a chance_to register such a cache at runtime. The returned cache will be automatically_added to this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@since 4.1_@see #getCache(String);@Nullable_	protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,if,the,native,provider,supports,it,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,since,4,1,see,get,cache,string;nullable,protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> @Nullable 	protected Cache getMissingCache(String name);1502974979;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime if the native provider supports_it. If a lookup by name does not yield any result, a subclass gets a chance_to register such a cache at runtime. The returned cache will be automatically_added to this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@since 4.1_@see #getCache(String);@Nullable_	protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,if,the,native,provider,supports,it,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,since,4,1,see,get,cache,string;nullable,protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1328020251;Load the caches for this cache manager. Occurs at startup._The returned collection must not be null.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,caches,for,this,cache,manager,occurs,at,startup,the,returned,collection,must,not,be,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1353877115;Load the caches for this cache manager. Occurs at startup._The returned collection must not be null.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,caches,for,this,cache,manager,occurs,at,startup,the,returned,collection,must,not,be,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1355352386;Load the caches for this cache manager. Occurs at startup._The returned collection must not be null.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,caches,for,this,cache,manager,occurs,at,startup,the,returned,collection,must,not,be,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1356735495;Load the caches for this cache manager. Occurs at startup._The returned collection must not be null.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,caches,for,this,cache,manager,occurs,at,startup,the,returned,collection,must,not,be,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1357119239;Load the caches for this cache manager. Occurs at startup._The returned collection must not be null.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,caches,for,this,cache,manager,occurs,at,startup,the,returned,collection,must,not,be,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1362408075;Load the caches for this cache manager. Occurs at startup._The returned collection must not be null.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,caches,for,this,cache,manager,occurs,at,startup,the,returned,collection,must,not,be,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1368482696;Load the caches for this cache manager. Occurs at startup._The returned collection must not be null.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,caches,for,this,cache,manager,occurs,at,startup,the,returned,collection,must,not,be,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1396356515;Load the caches for this cache manager. Occurs at startup._The returned collection must not be null.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,caches,for,this,cache,manager,occurs,at,startup,the,returned,collection,must,not,be,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1408382828;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1443105730;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1458144786;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1458144843;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1467726769;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1467730834;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1469461631;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1495868221;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected abstract Collection<? extends Cache> loadCaches()_;1502974979;Load the initial caches for this cache manager._<p>Called by {@link #afterPropertiesSet()} on startup._The returned collection may be empty but must not be {@code null}.;protected abstract Collection<? extends Cache> loadCaches()_;load,the,initial,caches,for,this,cache,manager,p,called,by,link,after,properties,set,on,startup,the,returned,collection,may,be,empty,but,must,not,be,code,null;protected,abstract,collection,extends,cache,load,caches
AbstractCacheManager -> protected Cache getMissingCache(String name);1396356515;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime in the native provided. If a lookup_by name does not yield any result, a subclass gets a chance to register_such a cache at runtime. The returned cache will be automatically added to_this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@see #getCache(String);protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,in,the,native,provided,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,see,get,cache,string;protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> protected Cache getMissingCache(String name);1408382828;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime in the native provided. If a lookup_by name does not yield any result, a subclass gets a chance to register_such a cache at runtime. The returned cache will be automatically added to_this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@see #getCache(String);protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,in,the,native,provided,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,see,get,cache,string;protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> protected Cache getMissingCache(String name);1443105730;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime in the native provided. If a lookup_by name does not yield any result, a subclass gets a chance to register_such a cache at runtime. The returned cache will be automatically added to_this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@since 4.1_@see #getCache(String);protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,in,the,native,provided,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,since,4,1,see,get,cache,string;protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> protected Cache getMissingCache(String name);1458144786;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime in the native provided. If a lookup_by name does not yield any result, a subclass gets a chance to register_such a cache at runtime. The returned cache will be automatically added to_this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@since 4.1_@see #getCache(String);protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,in,the,native,provided,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,since,4,1,see,get,cache,string;protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> protected Cache getMissingCache(String name);1458144843;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime if the native provider supports_it. If a lookup by name does not yield any result, a subclass gets a chance_to register such a cache at runtime. The returned cache will be automatically_added to this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@since 4.1_@see #getCache(String);protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,if,the,native,provider,supports,it,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,since,4,1,see,get,cache,string;protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> protected Cache getMissingCache(String name);1467726769;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime if the native provider supports_it. If a lookup by name does not yield any result, a subclass gets a chance_to register such a cache at runtime. The returned cache will be automatically_added to this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@since 4.1_@see #getCache(String);protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,if,the,native,provider,supports,it,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,since,4,1,see,get,cache,string;protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> protected Cache getMissingCache(String name);1467730834;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime if the native provider supports_it. If a lookup by name does not yield any result, a subclass gets a chance_to register such a cache at runtime. The returned cache will be automatically_added to this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@since 4.1_@see #getCache(String);protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,if,the,native,provider,supports,it,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,since,4,1,see,get,cache,string;protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> protected Cache getMissingCache(String name);1469461631;Return a missing cache with the specified {@code name} or {@code null} if_such cache does not exist or could not be created on the fly._<p>Some caches may be created at runtime if the native provider supports_it. If a lookup by name does not yield any result, a subclass gets a chance_to register such a cache at runtime. The returned cache will be automatically_added to this instance._@param name the name of the cache to retrieve_@return the missing cache or {@code null} if no such cache exists or could be_created_@since 4.1_@see #getCache(String);protected Cache getMissingCache(String name) {_		return null__	};return,a,missing,cache,with,the,specified,code,name,or,code,null,if,such,cache,does,not,exist,or,could,not,be,created,on,the,fly,p,some,caches,may,be,created,at,runtime,if,the,native,provider,supports,it,if,a,lookup,by,name,does,not,yield,any,result,a,subclass,gets,a,chance,to,register,such,a,cache,at,runtime,the,returned,cache,will,be,automatically,added,to,this,instance,param,name,the,name,of,the,cache,to,retrieve,return,the,missing,cache,or,code,null,if,no,such,cache,exists,or,could,be,created,since,4,1,see,get,cache,string;protected,cache,get,missing,cache,string,name,return,null
AbstractCacheManager -> public void initializeCaches();1443105730;Initialize the static configuration of caches._<p>Triggered on startup through {@link #afterPropertiesSet()}__can also be called to re-initialize at runtime._@since 4.2.2_@see #loadCaches();public void initializeCaches() {_		Collection<? extends Cache> caches = loadCaches()___		synchronized (this.cacheMap) {_			this.cacheNames = Collections.emptySet()__			this.cacheMap.clear()__			Set<String> cacheNames = new LinkedHashSet<String>(caches.size())__			for (Cache cache : caches) {_				String name = cache.getName()__				this.cacheMap.put(name, decorateCache(cache))__				cacheNames.add(name)__			}_			this.cacheNames = Collections.unmodifiableSet(cacheNames)__		}_	};initialize,the,static,configuration,of,caches,p,triggered,on,startup,through,link,after,properties,set,can,also,be,called,to,re,initialize,at,runtime,since,4,2,2,see,load,caches;public,void,initialize,caches,collection,extends,cache,caches,load,caches,synchronized,this,cache,map,this,cache,names,collections,empty,set,this,cache,map,clear,set,string,cache,names,new,linked,hash,set,string,caches,size,for,cache,cache,caches,string,name,cache,get,name,this,cache,map,put,name,decorate,cache,cache,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> public void initializeCaches();1458144786;Initialize the static configuration of caches._<p>Triggered on startup through {@link #afterPropertiesSet()}__can also be called to re-initialize at runtime._@since 4.2.2_@see #loadCaches();public void initializeCaches() {_		Collection<? extends Cache> caches = loadCaches()___		synchronized (this.cacheMap) {_			this.cacheNames = Collections.emptySet()__			this.cacheMap.clear()__			Set<String> cacheNames = new LinkedHashSet<String>(caches.size())__			for (Cache cache : caches) {_				String name = cache.getName()__				this.cacheMap.put(name, decorateCache(cache))__				cacheNames.add(name)__			}_			this.cacheNames = Collections.unmodifiableSet(cacheNames)__		}_	};initialize,the,static,configuration,of,caches,p,triggered,on,startup,through,link,after,properties,set,can,also,be,called,to,re,initialize,at,runtime,since,4,2,2,see,load,caches;public,void,initialize,caches,collection,extends,cache,caches,load,caches,synchronized,this,cache,map,this,cache,names,collections,empty,set,this,cache,map,clear,set,string,cache,names,new,linked,hash,set,string,caches,size,for,cache,cache,caches,string,name,cache,get,name,this,cache,map,put,name,decorate,cache,cache,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> public void initializeCaches();1458144843;Initialize the static configuration of caches._<p>Triggered on startup through {@link #afterPropertiesSet()}__can also be called to re-initialize at runtime._@since 4.2.2_@see #loadCaches();public void initializeCaches() {_		Collection<? extends Cache> caches = loadCaches()___		synchronized (this.cacheMap) {_			this.cacheNames = Collections.emptySet()__			this.cacheMap.clear()__			Set<String> cacheNames = new LinkedHashSet<String>(caches.size())__			for (Cache cache : caches) {_				String name = cache.getName()__				this.cacheMap.put(name, decorateCache(cache))__				cacheNames.add(name)__			}_			this.cacheNames = Collections.unmodifiableSet(cacheNames)__		}_	};initialize,the,static,configuration,of,caches,p,triggered,on,startup,through,link,after,properties,set,can,also,be,called,to,re,initialize,at,runtime,since,4,2,2,see,load,caches;public,void,initialize,caches,collection,extends,cache,caches,load,caches,synchronized,this,cache,map,this,cache,names,collections,empty,set,this,cache,map,clear,set,string,cache,names,new,linked,hash,set,string,caches,size,for,cache,cache,caches,string,name,cache,get,name,this,cache,map,put,name,decorate,cache,cache,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> public void initializeCaches();1467726769;Initialize the static configuration of caches._<p>Triggered on startup through {@link #afterPropertiesSet()}__can also be called to re-initialize at runtime._@since 4.2.2_@see #loadCaches();public void initializeCaches() {_		Collection<? extends Cache> caches = loadCaches()___		synchronized (this.cacheMap) {_			this.cacheNames = Collections.emptySet()__			this.cacheMap.clear()__			Set<String> cacheNames = new LinkedHashSet<String>(caches.size())__			for (Cache cache : caches) {_				String name = cache.getName()__				this.cacheMap.put(name, decorateCache(cache))__				cacheNames.add(name)__			}_			this.cacheNames = Collections.unmodifiableSet(cacheNames)__		}_	};initialize,the,static,configuration,of,caches,p,triggered,on,startup,through,link,after,properties,set,can,also,be,called,to,re,initialize,at,runtime,since,4,2,2,see,load,caches;public,void,initialize,caches,collection,extends,cache,caches,load,caches,synchronized,this,cache,map,this,cache,names,collections,empty,set,this,cache,map,clear,set,string,cache,names,new,linked,hash,set,string,caches,size,for,cache,cache,caches,string,name,cache,get,name,this,cache,map,put,name,decorate,cache,cache,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> public void initializeCaches();1467730834;Initialize the static configuration of caches._<p>Triggered on startup through {@link #afterPropertiesSet()}__can also be called to re-initialize at runtime._@since 4.2.2_@see #loadCaches();public void initializeCaches() {_		Collection<? extends Cache> caches = loadCaches()___		synchronized (this.cacheMap) {_			this.cacheNames = Collections.emptySet()__			this.cacheMap.clear()__			Set<String> cacheNames = new LinkedHashSet<>(caches.size())__			for (Cache cache : caches) {_				String name = cache.getName()__				this.cacheMap.put(name, decorateCache(cache))__				cacheNames.add(name)__			}_			this.cacheNames = Collections.unmodifiableSet(cacheNames)__		}_	};initialize,the,static,configuration,of,caches,p,triggered,on,startup,through,link,after,properties,set,can,also,be,called,to,re,initialize,at,runtime,since,4,2,2,see,load,caches;public,void,initialize,caches,collection,extends,cache,caches,load,caches,synchronized,this,cache,map,this,cache,names,collections,empty,set,this,cache,map,clear,set,string,cache,names,new,linked,hash,set,caches,size,for,cache,cache,caches,string,name,cache,get,name,this,cache,map,put,name,decorate,cache,cache,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> public void initializeCaches();1469461631;Initialize the static configuration of caches._<p>Triggered on startup through {@link #afterPropertiesSet()}__can also be called to re-initialize at runtime._@since 4.2.2_@see #loadCaches();public void initializeCaches() {_		Collection<? extends Cache> caches = loadCaches()___		synchronized (this.cacheMap) {_			this.cacheNames = Collections.emptySet()__			this.cacheMap.clear()__			Set<String> cacheNames = new LinkedHashSet<>(caches.size())__			for (Cache cache : caches) {_				String name = cache.getName()__				this.cacheMap.put(name, decorateCache(cache))__				cacheNames.add(name)__			}_			this.cacheNames = Collections.unmodifiableSet(cacheNames)__		}_	};initialize,the,static,configuration,of,caches,p,triggered,on,startup,through,link,after,properties,set,can,also,be,called,to,re,initialize,at,runtime,since,4,2,2,see,load,caches;public,void,initialize,caches,collection,extends,cache,caches,load,caches,synchronized,this,cache,map,this,cache,names,collections,empty,set,this,cache,map,clear,set,string,cache,names,new,linked,hash,set,caches,size,for,cache,cache,caches,string,name,cache,get,name,this,cache,map,put,name,decorate,cache,cache,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> public void initializeCaches();1495868221;Initialize the static configuration of caches._<p>Triggered on startup through {@link #afterPropertiesSet()}__can also be called to re-initialize at runtime._@since 4.2.2_@see #loadCaches();public void initializeCaches() {_		Collection<? extends Cache> caches = loadCaches()___		synchronized (this.cacheMap) {_			this.cacheNames = Collections.emptySet()__			this.cacheMap.clear()__			Set<String> cacheNames = new LinkedHashSet<>(caches.size())__			for (Cache cache : caches) {_				String name = cache.getName()__				this.cacheMap.put(name, decorateCache(cache))__				cacheNames.add(name)__			}_			this.cacheNames = Collections.unmodifiableSet(cacheNames)__		}_	};initialize,the,static,configuration,of,caches,p,triggered,on,startup,through,link,after,properties,set,can,also,be,called,to,re,initialize,at,runtime,since,4,2,2,see,load,caches;public,void,initialize,caches,collection,extends,cache,caches,load,caches,synchronized,this,cache,map,this,cache,names,collections,empty,set,this,cache,map,clear,set,string,cache,names,new,linked,hash,set,caches,size,for,cache,cache,caches,string,name,cache,get,name,this,cache,map,put,name,decorate,cache,cache,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
AbstractCacheManager -> public void initializeCaches();1502974979;Initialize the static configuration of caches._<p>Triggered on startup through {@link #afterPropertiesSet()}__can also be called to re-initialize at runtime._@since 4.2.2_@see #loadCaches();public void initializeCaches() {_		Collection<? extends Cache> caches = loadCaches()___		synchronized (this.cacheMap) {_			this.cacheNames = Collections.emptySet()__			this.cacheMap.clear()__			Set<String> cacheNames = new LinkedHashSet<>(caches.size())__			for (Cache cache : caches) {_				String name = cache.getName()__				this.cacheMap.put(name, decorateCache(cache))__				cacheNames.add(name)__			}_			this.cacheNames = Collections.unmodifiableSet(cacheNames)__		}_	};initialize,the,static,configuration,of,caches,p,triggered,on,startup,through,link,after,properties,set,can,also,be,called,to,re,initialize,at,runtime,since,4,2,2,see,load,caches;public,void,initialize,caches,collection,extends,cache,caches,load,caches,synchronized,this,cache,map,this,cache,names,collections,empty,set,this,cache,map,clear,set,string,cache,names,new,linked,hash,set,caches,size,for,cache,cache,caches,string,name,cache,get,name,this,cache,map,put,name,decorate,cache,cache,cache,names,add,name,this,cache,names,collections,unmodifiable,set,cache,names
