commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;15;/**  * Determine the object to export: either the service object itself  * or a RmiInvocationWrapper in case of a non-RMI service object.  * @return the RMI object to export  * @see #setService  * @see #setServiceInterface  */ ;/**  * Determine the object to export: either the service object itself  * or a RmiInvocationWrapper in case of a non-RMI service object.  * @return the RMI object to export  * @see #setService  * @see #setServiceInterface  */ protected Remote getObjectToExport() {     // determine remote object     if (getService() instanceof Remote && (getServiceInterface() == null || Remote.class.isAssignableFrom(getServiceInterface()))) {         // conventional RMI service         return (Remote) getService().     } else {         // RMI invoker         if (logger.isDebugEnabled()) {             logger.debug("RMI service [" + getService() + "] is an RMI invoker").         }         return new RmiInvocationWrapper(getProxyForService(), this).     } }
true;protected;2;6;/**  * Redefined here to be visible to RmiInvocationWrapper.  * Simply delegates to the corresponding superclass method.  */ ;/**  * Redefined here to be visible to RmiInvocationWrapper.  * Simply delegates to the corresponding superclass method.  */ @Override protected Object invoke(RemoteInvocation invocation, Object targetObject) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {     return super.invoke(invocation, targetObject). }
