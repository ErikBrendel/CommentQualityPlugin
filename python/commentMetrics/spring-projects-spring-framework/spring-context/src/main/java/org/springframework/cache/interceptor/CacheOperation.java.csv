commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;4;;@Override public Set<String> getCacheNames() {     return this.cacheNames. }
false;public;0;3;;public String getKey() {     return this.key. }
false;public;0;3;;public String getKeyGenerator() {     return this.keyGenerator. }
false;public;0;3;;public String getCacheManager() {     return this.cacheManager. }
false;public;0;3;;public String getCacheResolver() {     return this.cacheResolver. }
false;public;0;3;;public String getCondition() {     return this.condition. }
true;public;1;4;/**  * This implementation compares the {@code toString()} results.  * @see #toString()  */ ;/**  * This implementation compares the {@code toString()} results.  * @see #toString()  */ @Override public boolean equals(Object other) {     return (other instanceof CacheOperation && toString().equals(other.toString())). }
true;public;0;4;/**  * This implementation returns {@code toString()}'s hash code.  * @see #toString()  */ ;/**  * This implementation returns {@code toString()}'s hash code.  * @see #toString()  */ @Override public int hashCode() {     return toString().hashCode(). }
true;public,final;0;4;/**  * Return an identifying description for this cache operation.  * <p>Returned value is produced by calling {@link Builder#getOperationDescription()}  * during object construction. This method is used in {@link #hashCode} and  * {@link #equals}.  * @see Builder#getOperationDescription()  */ ;/**  * Return an identifying description for this cache operation.  * <p>Returned value is produced by calling {@link Builder#getOperationDescription()}  * during object construction. This method is used in {@link #hashCode} and  * {@link #equals}.  * @see Builder#getOperationDescription()  */ @Override public final String toString() {     return this.toString. }
false;public;1;4;;public void setName(String name) {     Assert.hasText(name, "Name must not be empty").     this.name = name. }
false;public;1;4;;public void setCacheName(String cacheName) {     Assert.hasText(cacheName, "Cache name must not be empty").     this.cacheNames = Collections.singleton(cacheName). }
false;public;1;7;;public void setCacheNames(String... cacheNames) {     this.cacheNames = new LinkedHashSet<>(cacheNames.length).     for (String cacheName : cacheNames) {         Assert.hasText(cacheName, "Cache name must be non-empty if specified").         this.cacheNames.add(cacheName).     } }
false;public;0;3;;public Set<String> getCacheNames() {     return this.cacheNames. }
false;public;1;4;;public void setKey(String key) {     Assert.notNull(key, "Key must not be null").     this.key = key. }
false;public;0;3;;public String getKey() {     return this.key. }
false;public;0;3;;public String getKeyGenerator() {     return this.keyGenerator. }
false;public;0;3;;public String getCacheManager() {     return this.cacheManager. }
false;public;0;3;;public String getCacheResolver() {     return this.cacheResolver. }
false;public;1;4;;public void setKeyGenerator(String keyGenerator) {     Assert.notNull(keyGenerator, "KeyGenerator name must not be null").     this.keyGenerator = keyGenerator. }
false;public;1;4;;public void setCacheManager(String cacheManager) {     Assert.notNull(cacheManager, "CacheManager name must not be null").     this.cacheManager = cacheManager. }
false;public;1;4;;public void setCacheResolver(String cacheResolver) {     Assert.notNull(cacheResolver, "CacheResolver name must not be null").     this.cacheResolver = cacheResolver. }
false;public;1;4;;public void setCondition(String condition) {     Assert.notNull(condition, "Condition must not be null").     this.condition = condition. }
true;protected;0;11;/**  * Return an identifying description for this caching operation.  * <p>Available to subclasses, for inclusion in their {@code toString()} result.  */ ;/**  * Return an identifying description for this caching operation.  * <p>Available to subclasses, for inclusion in their {@code toString()} result.  */ protected StringBuilder getOperationDescription() {     StringBuilder result = new StringBuilder(getClass().getSimpleName()).     result.append("[").append(this.name).     result.append("] caches=").append(this.cacheNames).     result.append(" | key='").append(this.key).     result.append("' | keyGenerator='").append(this.keyGenerator).     result.append("' | cacheManager='").append(this.cacheManager).     result.append("' | cacheResolver='").append(this.cacheResolver).     result.append("' | condition='").append(this.condition).append("'").     return result. }
false;public,abstract;0;1;;public abstract CacheOperation build().
