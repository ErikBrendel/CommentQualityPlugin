commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set local properties, containing object name mappings, e.g. via  * the "props" tag in XML bean definitions. These can be considered  * defaults, to be overridden by properties loaded from files.  */ ;/**  * Set local properties, containing object name mappings, e.g. via  * the "props" tag in XML bean definitions. These can be considered  * defaults, to be overridden by properties loaded from files.  */ public void setMappings(Properties mappings) {     this.mappings = mappings. }
true;public;1;3;/**  * Set a location of a properties file to be loaded,  * containing object name mappings.  */ ;/**  * Set a location of a properties file to be loaded,  * containing object name mappings.  */ public void setMappingLocation(Resource location) {     this.mappingLocations = new Resource[] { location }. }
true;public;1;3;/**  * Set location of properties files to be loaded,  * containing object name mappings.  */ ;/**  * Set location of properties files to be loaded,  * containing object name mappings.  */ public void setMappingLocations(Resource... mappingLocations) {     this.mappingLocations = mappingLocations. }
true;public;0;14;/**  * Merges the {@code Properties} configured in the {@code mappings} and  * {@code mappingLocations} into the final {@code Properties} instance  * used for {@code ObjectName} resolution.  */ ;/**  * Merges the {@code Properties} configured in the {@code mappings} and  * {@code mappingLocations} into the final {@code Properties} instance  * used for {@code ObjectName} resolution.  */ @Override public void afterPropertiesSet() throws IOException {     this.mergedMappings = new Properties().     CollectionUtils.mergePropertiesIntoMap(this.mappings, this.mergedMappings).     if (this.mappingLocations != null) {         for (Resource location : this.mappingLocations) {             if (logger.isDebugEnabled()) {                 logger.debug("Loading JMX object name mappings file from " + location).             }             PropertiesLoaderUtils.fillProperties(this.mergedMappings, location).         }     } }
true;public;2;12;/**  * Attempts to retrieve the {@code ObjectName} via the given key, trying to  * find a mapped value in the mappings first.  */ ;/**  * Attempts to retrieve the {@code ObjectName} via the given key, trying to  * find a mapped value in the mappings first.  */ @Override public ObjectName getObjectName(Object managedBean, @Nullable String beanKey) throws MalformedObjectNameException {     Assert.notNull(beanKey, "KeyNamingStrategy requires bean key").     String objectName = null.     if (this.mergedMappings != null) {         objectName = this.mergedMappings.getProperty(beanKey).     }     if (objectName == null) {         objectName = beanKey.     }     return ObjectNameManager.getInstance(objectName). }
