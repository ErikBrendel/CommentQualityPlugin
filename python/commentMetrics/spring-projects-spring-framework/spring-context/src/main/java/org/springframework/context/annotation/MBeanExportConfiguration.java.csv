commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void setImportMetadata(AnnotationMetadata importMetadata) {     Map<String, Object> map = importMetadata.getAnnotationAttributes(EnableMBeanExport.class.getName()).     this.enableMBeanExport = AnnotationAttributes.fromMap(map).     if (this.enableMBeanExport == null) {         throw new IllegalArgumentException("@EnableMBeanExport is not present on importing class " + importMetadata.getClassName()).     } }
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     this.environment = environment. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;0;10;;@Bean(name = MBEAN_EXPORTER_BEAN_NAME) @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public AnnotationMBeanExporter mbeanExporter() {     AnnotationMBeanExporter exporter = new AnnotationMBeanExporter().     Assert.state(this.enableMBeanExport != null, "No EnableMBeanExport annotation found").     setupDomain(exporter, this.enableMBeanExport).     setupServer(exporter, this.enableMBeanExport).     setupRegistrationPolicy(exporter, this.enableMBeanExport).     return exporter. }
false;private;2;9;;private void setupDomain(AnnotationMBeanExporter exporter, AnnotationAttributes enableMBeanExport) {     String defaultDomain = enableMBeanExport.getString("defaultDomain").     if (StringUtils.hasLength(defaultDomain) && this.environment != null) {         defaultDomain = this.environment.resolvePlaceholders(defaultDomain).     }     if (StringUtils.hasText(defaultDomain)) {         exporter.setDefaultDomain(defaultDomain).     } }
false;private;2;19;;private void setupServer(AnnotationMBeanExporter exporter, AnnotationAttributes enableMBeanExport) {     String server = enableMBeanExport.getString("server").     if (StringUtils.hasLength(server) && this.environment != null) {         server = this.environment.resolvePlaceholders(server).     }     if (StringUtils.hasText(server)) {         Assert.state(this.beanFactory != null, "No BeanFactory set").         exporter.setServer(this.beanFactory.getBean(server, MBeanServer.class)).     } else {         SpecificPlatform specificPlatform = SpecificPlatform.get().         if (specificPlatform != null) {             MBeanServer mbeanServer = specificPlatform.getMBeanServer().             if (mbeanServer != null) {                 exporter.setServer(mbeanServer).             }         }     } }
false;private;2;4;;private void setupRegistrationPolicy(AnnotationMBeanExporter exporter, AnnotationAttributes enableMBeanExport) {     RegistrationPolicy registrationPolicy = enableMBeanExport.getEnum("registration").     exporter.setRegistrationPolicy(registrationPolicy). }
false;public;0;9;;@Override public MBeanServer getMBeanServer() {     try {         return new JndiLocatorDelegate().lookup("java:comp/env/jmx/runtime", MBeanServer.class).     } catch (NamingException ex) {         throw new MBeanServerNotFoundException("Failed to retrieve WebLogic MBeanServer from JNDI", ex).     } }
false;public;0;6;;@Override public MBeanServer getMBeanServer() {     WebSphereMBeanServerFactoryBean fb = new WebSphereMBeanServerFactoryBean().     fb.afterPropertiesSet().     return fb.getObject(). }
false;public,abstract;0;2;;@Nullable public abstract MBeanServer getMBeanServer().
false;public,static;0;10;;@Nullable public static SpecificPlatform get() {     ClassLoader classLoader = MBeanExportConfiguration.class.getClassLoader().     for (SpecificPlatform environment : values()) {         if (ClassUtils.isPresent(environment.identifyingClass, classLoader)) {             return environment.         }     }     return null. }
