commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * Return the default locale to use if no explicit locale has been given.  * <p>The default implementation returns the default locale passed into the  * corresponding constructor, or LocaleContextHolder's locale as fallback.  * Can be overridden in subclasses.  * @see #MessageSourceAccessor(org.springframework.context.MessageSource, java.util.Locale)  * @see org.springframework.context.i18n.LocaleContextHolder#getLocale()  */ ;/**  * Return the default locale to use if no explicit locale has been given.  * <p>The default implementation returns the default locale passed into the  * corresponding constructor, or LocaleContextHolder's locale as fallback.  * Can be overridden in subclasses.  * @see #MessageSourceAccessor(org.springframework.context.MessageSource, java.util.Locale)  * @see org.springframework.context.i18n.LocaleContextHolder#getLocale()  */ protected Locale getDefaultLocale() {     return (this.defaultLocale != null ? this.defaultLocale : LocaleContextHolder.getLocale()). }
true;public;2;4;/**  * Retrieve the message for the given code and the default Locale.  * @param code code of the message  * @param defaultMessage the String to return if the lookup fails  * @return the message  */ ;/**  * Retrieve the message for the given code and the default Locale.  * @param code code of the message  * @param defaultMessage the String to return if the lookup fails  * @return the message  */ public String getMessage(String code, String defaultMessage) {     String msg = this.messageSource.getMessage(code, null, defaultMessage, getDefaultLocale()).     return (msg != null ? msg : ""). }
true;public;3;4;/**  * Retrieve the message for the given code and the given Locale.  * @param code code of the message  * @param defaultMessage the String to return if the lookup fails  * @param locale the Locale in which to do lookup  * @return the message  */ ;/**  * Retrieve the message for the given code and the given Locale.  * @param code code of the message  * @param defaultMessage the String to return if the lookup fails  * @param locale the Locale in which to do lookup  * @return the message  */ public String getMessage(String code, String defaultMessage, Locale locale) {     String msg = this.messageSource.getMessage(code, null, defaultMessage, locale).     return (msg != null ? msg : ""). }
true;public;3;4;/**  * Retrieve the message for the given code and the default Locale.  * @param code code of the message  * @param args arguments for the message, or {@code null} if none  * @param defaultMessage the String to return if the lookup fails  * @return the message  */ ;/**  * Retrieve the message for the given code and the default Locale.  * @param code code of the message  * @param args arguments for the message, or {@code null} if none  * @param defaultMessage the String to return if the lookup fails  * @return the message  */ public String getMessage(String code, @Nullable Object[] args, String defaultMessage) {     String msg = this.messageSource.getMessage(code, args, defaultMessage, getDefaultLocale()).     return (msg != null ? msg : ""). }
true;public;4;4;/**  * Retrieve the message for the given code and the given Locale.  * @param code code of the message  * @param args arguments for the message, or {@code null} if none  * @param defaultMessage the String to return if the lookup fails  * @param locale the Locale in which to do lookup  * @return the message  */ ;/**  * Retrieve the message for the given code and the given Locale.  * @param code code of the message  * @param args arguments for the message, or {@code null} if none  * @param defaultMessage the String to return if the lookup fails  * @param locale the Locale in which to do lookup  * @return the message  */ public String getMessage(String code, @Nullable Object[] args, String defaultMessage, Locale locale) {     String msg = this.messageSource.getMessage(code, args, defaultMessage, locale).     return (msg != null ? msg : ""). }
true;public;1;3;/**  * Retrieve the message for the given code and the default Locale.  * @param code code of the message  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ ;/**  * Retrieve the message for the given code and the default Locale.  * @param code code of the message  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ public String getMessage(String code) throws NoSuchMessageException {     return this.messageSource.getMessage(code, null, getDefaultLocale()). }
true;public;2;3;/**  * Retrieve the message for the given code and the given Locale.  * @param code code of the message  * @param locale the Locale in which to do lookup  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ ;/**  * Retrieve the message for the given code and the given Locale.  * @param code code of the message  * @param locale the Locale in which to do lookup  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ public String getMessage(String code, Locale locale) throws NoSuchMessageException {     return this.messageSource.getMessage(code, null, locale). }
true;public;2;3;/**  * Retrieve the message for the given code and the default Locale.  * @param code code of the message  * @param args arguments for the message, or {@code null} if none  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ ;/**  * Retrieve the message for the given code and the default Locale.  * @param code code of the message  * @param args arguments for the message, or {@code null} if none  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ public String getMessage(String code, @Nullable Object[] args) throws NoSuchMessageException {     return this.messageSource.getMessage(code, args, getDefaultLocale()). }
true;public;3;3;/**  * Retrieve the message for the given code and the given Locale.  * @param code code of the message  * @param args arguments for the message, or {@code null} if none  * @param locale the Locale in which to do lookup  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ ;/**  * Retrieve the message for the given code and the given Locale.  * @param code code of the message  * @param args arguments for the message, or {@code null} if none  * @param locale the Locale in which to do lookup  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ public String getMessage(String code, @Nullable Object[] args, Locale locale) throws NoSuchMessageException {     return this.messageSource.getMessage(code, args, locale). }
true;public;1;3;/**  * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance)  * in the default Locale.  * @param resolvable the MessageSourceResolvable  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ ;/**  * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance)  * in the default Locale.  * @param resolvable the MessageSourceResolvable  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ public String getMessage(MessageSourceResolvable resolvable) throws NoSuchMessageException {     return this.messageSource.getMessage(resolvable, getDefaultLocale()). }
true;public;2;3;/**  * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance)  * in the given Locale.  * @param resolvable the MessageSourceResolvable  * @param locale the Locale in which to do lookup  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ ;/**  * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance)  * in the given Locale.  * @param resolvable the MessageSourceResolvable  * @param locale the Locale in which to do lookup  * @return the message  * @throws org.springframework.context.NoSuchMessageException if not found  */ public String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException {     return this.messageSource.getMessage(resolvable, locale). }
