commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to look up the EJB home object on startup.  * Default is "true".  * <p>Can be turned off to allow for late start of the EJB server.  * In this case, the EJB home object will be fetched on first access.  * @see #setCacheHome  */ ;/**  * Set whether to look up the EJB home object on startup.  * Default is "true".  * <p>Can be turned off to allow for late start of the EJB server.  * In this case, the EJB home object will be fetched on first access.  * @see #setCacheHome  */ public void setLookupHomeOnStartup(boolean lookupHomeOnStartup) {     this.lookupHomeOnStartup = lookupHomeOnStartup. }
true;public;1;3;/**  * Set whether to cache the EJB home object once it has been located.  * Default is "true".  * <p>Can be turned off to allow for hot restart of the EJB server.  * In this case, the EJB home object will be fetched for each invocation.  * @see #setLookupHomeOnStartup  */ ;/**  * Set whether to cache the EJB home object once it has been located.  * Default is "true".  * <p>Can be turned off to allow for hot restart of the EJB server.  * In this case, the EJB home object will be fetched for each invocation.  * @see #setLookupHomeOnStartup  */ public void setCacheHome(boolean cacheHome) {     this.cacheHome = cacheHome. }
true;public;1;3;/**  * Set whether to expose the JNDI environment context for all access to the target  * EJB, i.e. for all method invocations on the exposed object reference.  * <p>Default is "false", i.e. to only expose the JNDI context for object lookup.  * Switch this flag to "true" in order to expose the JNDI environment (including  * the authorization context) for each EJB invocation, as needed by WebLogic  * for EJBs with authorization requirements.  */ ;/**  * Set whether to expose the JNDI environment context for all access to the target  * EJB, i.e. for all method invocations on the exposed object reference.  * <p>Default is "false", i.e. to only expose the JNDI context for object lookup.  * Switch this flag to "true" in order to expose the JNDI environment (including  * the authorization context) for each EJB invocation, as needed by WebLogic  * for EJBs with authorization requirements.  */ public void setExposeAccessContext(boolean exposeAccessContext) {     this.exposeAccessContext = exposeAccessContext. }
true;public;0;8;/**  * Fetches EJB home on startup, if necessary.  * @see #setLookupHomeOnStartup  * @see #refreshHome  */ ;/**  * Fetches EJB home on startup, if necessary.  * @see #setLookupHomeOnStartup  * @see #refreshHome  */ @Override public void afterPropertiesSet() throws NamingException {     super.afterPropertiesSet().     if (this.lookupHomeOnStartup) {         // look up EJB home and create method         refreshHome().     } }
true;protected;0;9;/**  * Refresh the cached home object, if applicable.  * Also caches the create method on the home object.  * @throws NamingException if thrown by the JNDI lookup  * @see #lookup  * @see #getCreateMethod  */ ;/**  * Refresh the cached home object, if applicable.  * Also caches the create method on the home object.  * @throws NamingException if thrown by the JNDI lookup  * @see #lookup  * @see #getCreateMethod  */ protected void refreshHome() throws NamingException {     synchronized (this.homeMonitor) {         Object home = lookup().         if (this.cacheHome) {             this.cachedHome = home.             this.createMethod = getCreateMethod(home).         }     } }
true;protected;1;10;/**  * Determine the create method of the given EJB home object.  * @param home the EJB home object  * @return the create method  * @throws EjbAccessException if the method couldn't be retrieved  */ ;/**  * Determine the create method of the given EJB home object.  * @param home the EJB home object  * @return the create method  * @throws EjbAccessException if the method couldn't be retrieved  */ @Nullable protected Method getCreateMethod(Object home) throws EjbAccessException {     try {         // Cache the EJB create() method that must be declared on the home interface.         return home.getClass().getMethod("create").     } catch (NoSuchMethodException ex) {         throw new EjbAccessException("EJB home [" + home + "] has no no-arg create() method").     } }
true;protected;0;14;/**  * Return the EJB home object to use. Called for each invocation.  * <p>Default implementation returns the home created on initialization,  * if any. else, it invokes lookup to get a new proxy for each invocation.  * <p>Can be overridden in subclasses, for example to cache a home object  * for a given amount of time before recreating it, or to test the home  * object whether it is still alive.  * @return the EJB home object to use for an invocation  * @throws NamingException if proxy creation failed  * @see #lookup  * @see #getCreateMethod  */ ;/**  * Return the EJB home object to use. Called for each invocation.  * <p>Default implementation returns the home created on initialization,  * if any. else, it invokes lookup to get a new proxy for each invocation.  * <p>Can be overridden in subclasses, for example to cache a home object  * for a given amount of time before recreating it, or to test the home  * object whether it is still alive.  * @return the EJB home object to use for an invocation  * @throws NamingException if proxy creation failed  * @see #lookup  * @see #getCreateMethod  */ protected Object getHome() throws NamingException {     if (!this.cacheHome || (this.lookupHomeOnStartup && !isHomeRefreshable())) {         return (this.cachedHome != null ? this.cachedHome : lookup()).     } else {         synchronized (this.homeMonitor) {             if (this.cachedHome == null) {                 this.cachedHome = lookup().                 this.createMethod = getCreateMethod(this.cachedHome).             }             return this.cachedHome.         }     } }
true;protected;0;3;/**  * Return whether the cached EJB home object is potentially  * subject to on-demand refreshing. Default is "false".  */ ;/**  * Return whether the cached EJB home object is potentially  * subject to on-demand refreshing. Default is "false".  */ protected boolean isHomeRefreshable() {     return false. }
true;public;1;11;/**  * Prepares the thread context if necessary, and delegates to  * {@link #invokeInContext}.  */ ;/**  * Prepares the thread context if necessary, and delegates to  * {@link #invokeInContext}.  */ @Override @Nullable public Object invoke(MethodInvocation invocation) throws Throwable {     Context ctx = (this.exposeAccessContext ? getJndiTemplate().getContext() : null).     try {         return invokeInContext(invocation).     } finally {         getJndiTemplate().releaseContext(ctx).     } }
true;protected,abstract;1;2;/**  * Perform the given invocation on the current EJB home,  * within the thread context being prepared accordingly.  * Template method to be implemented by subclasses.  * @param invocation the AOP method invocation  * @return the invocation result, if any  * @throws Throwable in case of invocation failure  */ ;/**  * Perform the given invocation on the current EJB home,  * within the thread context being prepared accordingly.  * Template method to be implemented by subclasses.  * @param invocation the AOP method invocation  * @return the invocation result, if any  * @throws Throwable in case of invocation failure  */ @Nullable protected abstract Object invokeInContext(MethodInvocation invocation) throws Throwable.
true;protected;0;17;/**  * Invokes the {@code create()} method on the cached EJB home object.  * @return a new EJBObject or EJBLocalObject  * @throws NamingException if thrown by JNDI  * @throws InvocationTargetException if thrown by the create method  */ ;/**  * Invokes the {@code create()} method on the cached EJB home object.  * @return a new EJBObject or EJBLocalObject  * @throws NamingException if thrown by JNDI  * @throws InvocationTargetException if thrown by the create method  */ protected Object create() throws NamingException, InvocationTargetException {     try {         Object home = getHome().         Method createMethodToUse = this.createMethod.         if (createMethodToUse == null) {             createMethodToUse = getCreateMethod(home).         }         if (createMethodToUse == null) {             return home.         }         // Invoke create() method on EJB home object.         return createMethodToUse.invoke(home, (Object[]) null).     } catch (IllegalAccessException ex) {         throw new EjbAccessException("Could not access EJB home create() method", ex).     } }
