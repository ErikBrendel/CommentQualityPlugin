commented;modifiers;parameterAmount;loc;comment;code
false;public;1;40;;@Override @SuppressWarnings("unchecked") public Object invoke(MethodInvocation invocation) throws Throwable {     // Avoid Validator invocation on FactoryBean.getObjectType/isSingleton     if (isFactoryBeanMetadataMethod(invocation.getMethod())) {         return invocation.proceed().     }     Class<?>[] groups = determineValidationGroups(invocation).     // Standard Bean Validation 1.1 API     ExecutableValidator execVal = this.validator.forExecutables().     Method methodToValidate = invocation.getMethod().     Set<ConstraintViolation<Object>> result.     try {         result = execVal.validateParameters(invocation.getThis(), methodToValidate, invocation.getArguments(), groups).     } catch (IllegalArgumentException ex) {         // Probably a generic type mismatch between interface and impl as reported in SPR-12237 / HV-1011         // Let's try to find the bridged method on the implementation class...         methodToValidate = BridgeMethodResolver.findBridgedMethod(ClassUtils.getMostSpecificMethod(invocation.getMethod(), invocation.getThis().getClass())).         result = execVal.validateParameters(invocation.getThis(), methodToValidate, invocation.getArguments(), groups).     }     if (!result.isEmpty()) {         throw new ConstraintViolationException(result).     }     Object returnValue = invocation.proceed().     result = execVal.validateReturnValue(invocation.getThis(), methodToValidate, returnValue, groups).     if (!result.isEmpty()) {         throw new ConstraintViolationException(result).     }     return returnValue. }
false;private;1;20;;private boolean isFactoryBeanMetadataMethod(Method method) {     Class<?> clazz = method.getDeclaringClass().     // Call from interface-based proxy handle, allowing for an efficient check?     if (clazz.isInterface()) {         return ((clazz == FactoryBean.class || clazz == SmartFactoryBean.class) && !method.getName().equals("getObject")).     }     // Call from CGLIB proxy handle, potentially implementing a FactoryBean method?     Class<?> factoryBeanType = null.     if (SmartFactoryBean.class.isAssignableFrom(clazz)) {         factoryBeanType = SmartFactoryBean.class.     } else if (FactoryBean.class.isAssignableFrom(clazz)) {         factoryBeanType = FactoryBean.class.     }     return (factoryBeanType != null && !method.getName().equals("getObject") && ClassUtils.hasMethod(factoryBeanType, method.getName(), method.getParameterTypes())). }
true;protected;1;7;/**  * Determine the validation groups to validate against for the given method invocation.  * <p>Default are the validation groups as specified in the {@link Validated} annotation  * on the containing target class of the method.  * @param invocation the current MethodInvocation  * @return the applicable validation groups as a Class array  */ ;/**  * Determine the validation groups to validate against for the given method invocation.  * <p>Default are the validation groups as specified in the {@link Validated} annotation  * on the containing target class of the method.  * @param invocation the current MethodInvocation  * @return the applicable validation groups as a Class array  */ protected Class<?>[] determineValidationGroups(MethodInvocation invocation) {     Validated validatedAnn = AnnotationUtils.findAnnotation(invocation.getMethod(), Validated.class).     if (validatedAnn == null) {         validatedAnn = AnnotationUtils.findAnnotation(invocation.getThis().getClass(), Validated.class).     }     return (validatedAnn != null ? validatedAnn.value() : new Class<?>[0]). }
