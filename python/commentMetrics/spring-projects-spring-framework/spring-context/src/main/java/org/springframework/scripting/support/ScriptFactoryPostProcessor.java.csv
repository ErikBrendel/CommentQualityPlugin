# id;timestamp;commentText;codeText;commentWords;codeWords
ScriptFactoryPostProcessor -> @Override 	public void destroy();1356735495;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1368482696;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1385412762;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1389647667;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1428099805;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1432135182;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1461047077;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1467730834;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1479746164;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1495868221;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1496242568;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1496259743;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1496837955;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1498780456;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1502974979;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1521714971;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1530174524;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1530188116;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> @Override 	public void destroy();1536863076;Destroy the inner bean factory (used for scripts) on shutdown.;@Override_	public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;override,public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1385412762;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] { Type.getType(propertyType) })__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (abd.getDestroyMethodName() != null) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,abd,get,destroy,method,name,null,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1389647667;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (abd.getDestroyMethodName() != null) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,abd,get,destroy,method,name,null,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1428099805;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (abd.getDestroyMethodName() != null) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,abd,get,destroy,method,name,null,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1432135182;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1461047077;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1467730834;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1479746164;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1495868221;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1496242568;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces);1496259743;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1328020251;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1344552803;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1356735495;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1357119239;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1368482696;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1385412762;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1389647667;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1428099805;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1432135182;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1461047077;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1467730834;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1479746164;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1495868221;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1496242568;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1496259743;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1496837955;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1498780456;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1502974979;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1521714971;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1530174524;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1530188116;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd);1536863076;Create a ScriptFactory bean definition based on the given script definition,_extracting only the definition data that is relevant for the ScriptFactory_(that is, only bean class and constructor arguments)._@param bd the full script bean definition_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory;protected BeanDefinition createScriptFactoryBeanDefinition(BeanDefinition bd) {_		GenericBeanDefinition scriptBd = new GenericBeanDefinition()__		scriptBd.setBeanClassName(bd.getBeanClassName())__		scriptBd.getConstructorArgumentValues().addArgumentValues(bd.getConstructorArgumentValues())__		return scriptBd__	};create,a,script,factory,bean,definition,based,on,the,given,script,definition,extracting,only,the,definition,data,that,is,relevant,for,the,script,factory,that,is,only,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory;protected,bean,definition,create,script,factory,bean,definition,bean,definition,bd,generic,bean,definition,script,bd,new,generic,bean,definition,script,bd,set,bean,class,name,bd,get,bean,class,name,script,bd,get,constructor,argument,values,add,argument,values,bd,get,constructor,argument,values,return,script,bd
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1328020251;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1344552803;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1356735495;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1357119239;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1368482696;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1385412762;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1389647667;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1428099805;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1432135182;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1461047077;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1467730834;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1479746164;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1495868221;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1496242568;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1496259743;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1496837955;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1498780456;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1502974979;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1521714971;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1530174524;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1530188116;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator);1536863076;Obtain a ScriptSource for the given bean, lazily creating it_if not cached already._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator associated with the bean_@return the corresponding ScriptSource instance_@see #convertToScriptSource;protected ScriptSource getScriptSource(String beanName, String scriptSourceLocator) {_		synchronized (this.scriptSourceCache) {_			ScriptSource scriptSource = this.scriptSourceCache.get(beanName)__			if (scriptSource == null) {_				scriptSource = convertToScriptSource(beanName, scriptSourceLocator, this.resourceLoader)__				this.scriptSourceCache.put(beanName, scriptSource)__			}_			return scriptSource__		}_	};obtain,a,script,source,for,the,given,bean,lazily,creating,it,if,not,cached,already,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,associated,with,the,bean,return,the,corresponding,script,source,instance,see,convert,to,script,source;protected,script,source,get,script,source,string,bean,name,string,script,source,locator,synchronized,this,script,source,cache,script,source,script,source,this,script,source,cache,get,bean,name,if,script,source,null,script,source,convert,to,script,source,bean,name,script,source,locator,this,resource,loader,this,script,source,cache,put,bean,name,script,source,return,script,source
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces);1496837955;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,nullable,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces);1498780456;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,nullable,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces);1502974979;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,nullable,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces);1521714971;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,nullable,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces);1530174524;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,nullable,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces);1530188116;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (StringUtils.hasText(abd.getDestroyMethodName())) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,nullable,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,abd,get,destroy,method,name,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces);1536863076;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class<?> createConfigInterface(BeanDefinition bd, @Nullable Class<?>[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class<?> propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] {Type.getType(propertyType)})__			maker.add(signature, new Type[0])__		}_		if (bd.getInitMethodName() != null) {_			Signature signature = new Signature(bd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__			maker.add(signature, new Type[0])__		}_		if (StringUtils.hasText(bd.getDestroyMethodName())) {_			Signature signature = new Signature(bd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__			maker.add(signature, new Type[0])__		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,nullable,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,get,init,method,name,null,signature,signature,new,signature,bd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,string,utils,has,text,bd,get,destroy,method,name,signature,signature,new,signature,bd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class createCompositeInterface(Class[] interfaces);1328020251;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class createCompositeInterface(Class[] interfaces);1344552803;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class createCompositeInterface(Class[] interfaces);1356735495;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class createCompositeInterface(Class[] interfaces);1357119239;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class createCompositeInterface(Class[] interfaces);1368482696;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> public void destroy();1328020251;Destroy the inner bean factory (used for scripts) on shutdown.;public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> public void destroy();1344552803;Destroy the inner bean factory (used for scripts) on shutdown.;public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> public void destroy();1357119239;Destroy the inner bean factory (used for scripts) on shutdown.;public void destroy() {_		this.scriptBeanFactory.destroySingletons()__	};destroy,the,inner,bean,factory,used,for,scripts,on,shutdown;public,void,destroy,this,script,bean,factory,destroy,singletons
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1385412762;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1389647667;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1428099805;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1432135182;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1461047077;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1467730834;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1479746164;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1495868221;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1496242568;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1496259743;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1496837955;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1498780456;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1502974979;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1521714971;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1530174524;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1530188116;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1536863076;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class_for the given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.beanClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,bean,class,loader
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1328020251;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1344552803;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1356735495;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1357119239;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1368482696;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1385412762;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1389647667;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1428099805;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1432135182;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1461047077;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1467730834;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1479746164;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1495868221;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1496242568;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1496259743;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1496837955;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1498780456;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1502974979;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1521714971;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1530174524;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1530188116;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass);1536863076;Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces._@param defaultProxyTargetClass the flag value to set;public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {_		this.defaultProxyTargetClass = defaultProxyTargetClass__	};flag,to,signal,that,refreshable,proxies,should,be,created,to,proxy,the,target,class,not,its,interfaces,param,default,proxy,target,class,the,flag,value,to,set;public,void,set,default,proxy,target,class,boolean,default,proxy,target,class,this,default,proxy,target,class,default,proxy,target,class
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1328020251;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {__		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(scriptFactoryBeanName,_						createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory = this.scriptBeanFactory_						.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName,_						scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(bd, scriptFactoryBeanName, scriptSource,_						scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1344552803;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {__		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(scriptFactoryBeanName,_						createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory = this.scriptBeanFactory_						.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName,_						scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(bd, scriptFactoryBeanName, scriptSource,_						scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1356735495;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {__		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(scriptFactoryBeanName,_						createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory = this.scriptBeanFactory_						.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName,_						scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(bd, scriptFactoryBeanName, scriptSource,_						scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1357119239;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {__		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(scriptFactoryBeanName,_						createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory = this.scriptBeanFactory_						.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName,_						scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(bd, scriptFactoryBeanName, scriptSource,_						scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1368482696;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {__		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(scriptFactoryBeanName,_						createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory = this.scriptBeanFactory_						.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName,_						scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(bd, scriptFactoryBeanName, scriptSource,_						scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1385412762;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {__		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(scriptFactoryBeanName,_						createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory = this.scriptBeanFactory_						.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName,_						scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(bd, scriptFactoryBeanName, scriptSource,_						scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1389647667;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {__		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(scriptFactoryBeanName,_						createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory = this.scriptBeanFactory_						.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName,_						scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(bd, scriptFactoryBeanName, scriptSource,_						scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1428099805;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1432135182;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1461047077;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1467730834;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1479746164;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1495868221;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1496242568;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1496259743;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1496837955;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1498780456;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1502974979;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1521714971;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1530174524;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1530188116;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName);1536863076;Prepare the script beans in the internal BeanFactory that this_post-processor uses. Each original bean definition will be split_into a ScriptFactory definition and a scripted object definition._@param bd the original bean definition in the main BeanFactory_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptedObjectBeanName the name of the internal scripted object bean;protected void prepareScriptBeans(BeanDefinition bd, String scriptFactoryBeanName, String scriptedObjectBeanName) {_		_		synchronized (this.scriptBeanFactory) {_			if (!this.scriptBeanFactory.containsBeanDefinition(scriptedObjectBeanName)) {__				this.scriptBeanFactory.registerBeanDefinition(_						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd))__				ScriptFactory scriptFactory =_						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)__				ScriptSource scriptSource =_						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())__				Class<?>[] interfaces = scriptFactory.getScriptInterfaces()___				Class<?>[] scriptedInterfaces = interfaces__				if (scriptFactory.requiresConfigInterface() && !bd.getPropertyValues().isEmpty()) {_					Class<?> configInterface = createConfigInterface(bd, interfaces)__					scriptedInterfaces = ObjectUtils.addObjectToArray(interfaces, configInterface)__				}__				BeanDefinition objectBd = createScriptedObjectBeanDefinition(_						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces)__				long refreshCheckDelay = resolveRefreshCheckDelay(bd)__				if (refreshCheckDelay >= 0) {_					objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE)__				}__				this.scriptBeanFactory.registerBeanDefinition(scriptedObjectBeanName, objectBd)__			}_		}_	};prepare,the,script,beans,in,the,internal,bean,factory,that,this,post,processor,uses,each,original,bean,definition,will,be,split,into,a,script,factory,definition,and,a,scripted,object,definition,param,bd,the,original,bean,definition,in,the,main,bean,factory,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,scripted,object,bean,name,the,name,of,the,internal,scripted,object,bean;protected,void,prepare,script,beans,bean,definition,bd,string,script,factory,bean,name,string,scripted,object,bean,name,synchronized,this,script,bean,factory,if,this,script,bean,factory,contains,bean,definition,scripted,object,bean,name,this,script,bean,factory,register,bean,definition,script,factory,bean,name,create,script,factory,bean,definition,bd,script,factory,script,factory,this,script,bean,factory,get,bean,script,factory,bean,name,script,factory,class,script,source,script,source,get,script,source,script,factory,bean,name,script,factory,get,script,source,locator,class,interfaces,script,factory,get,script,interfaces,class,scripted,interfaces,interfaces,if,script,factory,requires,config,interface,bd,get,property,values,is,empty,class,config,interface,create,config,interface,bd,interfaces,scripted,interfaces,object,utils,add,object,to,array,interfaces,config,interface,bean,definition,object,bd,create,scripted,object,bean,definition,bd,script,factory,bean,name,script,source,scripted,interfaces,long,refresh,check,delay,resolve,refresh,check,delay,bd,if,refresh,check,delay,0,object,bd,set,scope,bean,definition,this,script,bean,factory,register,bean,definition,scripted,object,bean,name,object,bd
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1328020251;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		} else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		} else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute ["_					+ REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value [" + attributeValue_					+ "]: needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1344552803;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		} else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		} else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute ["_					+ REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value [" + attributeValue_					+ "]: needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1356735495;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		} else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		} else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute ["_					+ REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value [" + attributeValue_					+ "]: needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1357119239;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		} else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		} else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute ["_					+ REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value [" + attributeValue_					+ "]: needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1368482696;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		} else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		} else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute ["_					+ REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value [" + attributeValue_					+ "]: needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1385412762;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		} else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		} else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute ["_					+ REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value [" + attributeValue_					+ "]: needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1389647667;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1428099805;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1432135182;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1461047077;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1467730834;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1479746164;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1495868221;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1496242568;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1496259743;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1496837955;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1498780456;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1502974979;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1521714971;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1530174524;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1530188116;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition);1536863076;Get the refresh check delay for the given {@link ScriptFactory} {@link BeanDefinition}._If the {@link BeanDefinition} has a_{@link org.springframework.core.AttributeAccessor metadata attribute}_under the key {@link #REFRESH_CHECK_DELAY_ATTRIBUTE} which is a valid {@link Number}_type, then this value is used. Otherwise, the {@link #defaultRefreshCheckDelay}_value is used._@param beanDefinition the BeanDefinition to check_@return the refresh check delay;protected long resolveRefreshCheckDelay(BeanDefinition beanDefinition) {_		long refreshCheckDelay = this.defaultRefreshCheckDelay__		Object attributeValue = beanDefinition.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (attributeValue instanceof Number) {_			refreshCheckDelay = ((Number) attributeValue).longValue()__		}_		else if (attributeValue instanceof String) {_			refreshCheckDelay = Long.parseLong((String) attributeValue)__		}_		else if (attributeValue != null) {_			throw new BeanDefinitionStoreException("Invalid refresh check delay attribute [" +_					REFRESH_CHECK_DELAY_ATTRIBUTE + "] with value '" + attributeValue +_					"': needs to be of type Number or String")__		}_		return refreshCheckDelay__	};get,the,refresh,check,delay,for,the,given,link,script,factory,link,bean,definition,if,the,link,bean,definition,has,a,link,org,springframework,core,attribute,accessor,metadata,attribute,under,the,key,link,which,is,a,valid,link,number,type,then,this,value,is,used,otherwise,the,link,default,refresh,check,delay,value,is,used,param,bean,definition,the,bean,definition,to,check,return,the,refresh,check,delay;protected,long,resolve,refresh,check,delay,bean,definition,bean,definition,long,refresh,check,delay,this,default,refresh,check,delay,object,attribute,value,bean,definition,get,attribute,if,attribute,value,instanceof,number,refresh,check,delay,number,attribute,value,long,value,else,if,attribute,value,instanceof,string,refresh,check,delay,long,parse,long,string,attribute,value,else,if,attribute,value,null,throw,new,bean,definition,store,exception,invalid,refresh,check,delay,attribute,with,value,attribute,value,needs,to,be,of,type,number,or,string,return,refresh,check,delay
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1495868221;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1496242568;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1496259743;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1496837955;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces != null) {_			proxyFactory.setInterfaces(interfaces)__		}_		else {_			Class<?> targetClass = ts.getTargetClass()__			if (targetClass != null) {_				proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.beanClassLoader))__			}_		}__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,proxy,factory,set,interfaces,interfaces,else,class,target,class,ts,get,target,class,if,target,class,null,proxy,factory,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,bean,class,loader,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1498780456;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces != null) {_			proxyFactory.setInterfaces(interfaces)__		}_		else {_			Class<?> targetClass = ts.getTargetClass()__			if (targetClass != null) {_				proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.beanClassLoader))__			}_		}__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,proxy,factory,set,interfaces,interfaces,else,class,target,class,ts,get,target,class,if,target,class,null,proxy,factory,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,bean,class,loader,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1502974979;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces != null) {_			proxyFactory.setInterfaces(interfaces)__		}_		else {_			Class<?> targetClass = ts.getTargetClass()__			if (targetClass != null) {_				proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.beanClassLoader))__			}_		}__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,proxy,factory,set,interfaces,interfaces,else,class,target,class,ts,get,target,class,if,target,class,null,proxy,factory,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,bean,class,loader,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1521714971;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces != null) {_			proxyFactory.setInterfaces(interfaces)__		}_		else {_			Class<?> targetClass = ts.getTargetClass()__			if (targetClass != null) {_				proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.beanClassLoader))__			}_		}__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,proxy,factory,set,interfaces,interfaces,else,class,target,class,ts,get,target,class,if,target,class,null,proxy,factory,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,bean,class,loader,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1530174524;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces != null) {_			proxyFactory.setInterfaces(interfaces)__		}_		else {_			Class<?> targetClass = ts.getTargetClass()__			if (targetClass != null) {_				proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.beanClassLoader))__			}_		}__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,proxy,factory,set,interfaces,interfaces,else,class,target,class,ts,get,target,class,if,target,class,null,proxy,factory,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,bean,class,loader,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1530188116;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces != null) {_			proxyFactory.setInterfaces(interfaces)__		}_		else {_			Class<?> targetClass = ts.getTargetClass()__			if (targetClass != null) {_				proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.beanClassLoader))__			}_		}__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,proxy,factory,set,interfaces,interfaces,else,class,target,class,ts,get,target,class,if,target,class,null,proxy,factory,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,bean,class,loader,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass);1536863076;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, @Nullable Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces != null) {_			proxyFactory.setInterfaces(interfaces)__		}_		else {_			Class<?> targetClass = ts.getTargetClass()__			if (targetClass != null) {_				proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.beanClassLoader))__			}_		}__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,nullable,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,proxy,factory,set,interfaces,interfaces,else,class,target,class,ts,get,target,class,if,target,class,null,proxy,factory,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,bean,class,loader,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass);1328020251;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be <code>null</code> to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_ _			proxyFactory.setProxyTargetClass(proxyTargetClass)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,code,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,proxy,target,class,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass);1344552803;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be <code>null</code> to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_ _			proxyFactory.setProxyTargetClass(proxyTargetClass)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,code,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,proxy,target,class,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass);1356735495;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_ _			proxyFactory.setProxyTargetClass(proxyTargetClass)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,proxy,target,class,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass);1357119239;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_ _			proxyFactory.setProxyTargetClass(proxyTargetClass)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,proxy,target,class,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass);1368482696;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_ _			proxyFactory.setProxyTargetClass(proxyTargetClass)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,proxy,target,class,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1385412762;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1389647667;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1428099805;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1432135182;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1461047077;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1467730834;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1479746164;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1495868221;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1496242568;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class<?>[] interfaces);1496259743;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1328020251;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1344552803;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1356735495;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1357119239;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1368482696;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1385412762;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1389647667;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1428099805;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1432135182;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1461047077;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1467730834;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1479746164;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1495868221;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1496242568;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1496259743;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1496837955;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1498780456;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1502974979;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1521714971;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1530174524;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1530188116;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay);1536863076;Set the delay between refresh checks, in milliseconds._Default is -1, indicating no refresh checks at all._<p>Note that an actual refresh will only happen when_the {@link org.springframework.scripting.ScriptSource} indicates_that it has been modified._@see org.springframework.scripting.ScriptSource#isModified();public void setDefaultRefreshCheckDelay(long defaultRefreshCheckDelay) {_		this.defaultRefreshCheckDelay = defaultRefreshCheckDelay__	};set,the,delay,between,refresh,checks,in,milliseconds,default,is,1,indicating,no,refresh,checks,at,all,p,note,that,an,actual,refresh,will,only,happen,when,the,link,org,springframework,scripting,script,source,indicates,that,it,has,been,modified,see,org,springframework,scripting,script,source,is,modified;public,void,set,default,refresh,check,delay,long,default,refresh,check,delay,this,default,refresh,check,delay,default,refresh,check,delay
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1328020251;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		} else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1344552803;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		} else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1356735495;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		} else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1357119239;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		} else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1368482696;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		} else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1385412762;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		} else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1389647667;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1428099805;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1432135182;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1461047077;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1467730834;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1479746164;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1495868221;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1496242568;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1496259743;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1496837955;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1498780456;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1502974979;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1521714971;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1530174524;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1530188116;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator, 			ResourceLoader resourceLoader);1536863076;Convert the given script source locator to a ScriptSource instance._<p>By default, supported locators are Spring resource locations_(such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")_and inline scripts ("inline:myScriptText...")._@param beanName the name of the scripted bean_@param scriptSourceLocator the script source locator_@param resourceLoader the ResourceLoader to use (if necessary)_@return the ScriptSource instance;protected ScriptSource convertToScriptSource(String beanName, String scriptSourceLocator,_			ResourceLoader resourceLoader) {__		if (scriptSourceLocator.startsWith(INLINE_SCRIPT_PREFIX)) {_			return new StaticScriptSource(scriptSourceLocator.substring(INLINE_SCRIPT_PREFIX.length()), beanName)__		}_		else {_			return new ResourceScriptSource(resourceLoader.getResource(scriptSourceLocator))__		}_	};convert,the,given,script,source,locator,to,a,script,source,instance,p,by,default,supported,locators,are,spring,resource,locations,such,as,file,c,my,script,bsh,or,classpath,my,package,my,script,bsh,and,inline,scripts,inline,my,script,text,param,bean,name,the,name,of,the,scripted,bean,param,script,source,locator,the,script,source,locator,param,resource,loader,the,resource,loader,to,use,if,necessary,return,the,script,source,instance;protected,script,source,convert,to,script,source,string,bean,name,string,script,source,locator,resource,loader,resource,loader,if,script,source,locator,starts,with,return,new,static,script,source,script,source,locator,substring,length,bean,name,else,return,new,resource,script,source,resource,loader,get,resource,script,source,locator
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class[] interfaces);1328020251;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class[] interfaces);1344552803;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class[] interfaces);1356735495;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class[] interfaces);1357119239;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, Class[] interfaces);1368482696;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, Class[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass);1385412762;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_ _			proxyFactory.setProxyTargetClass(proxyTargetClass)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,proxy,target,class,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass);1389647667;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(proxyTargetClass)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,proxy,target,class,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass);1428099805;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass);1432135182;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass);1461047077;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass);1467730834;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass);1479746164;Create a refreshable proxy for the given AOP TargetSource._@param ts the refreshable TargetSource_@param interfaces the proxy interfaces (may be {@code null} to_indicate proxying of all interfaces implemented by the target class)_@return the generated proxy_@see RefreshableScriptTargetSource;protected Object createRefreshableProxy(TargetSource ts, Class<?>[] interfaces, boolean proxyTargetClass) {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(ts)__		ClassLoader classLoader = this.beanClassLoader___		if (interfaces == null) {_			interfaces = ClassUtils.getAllInterfacesForClass(ts.getTargetClass(), this.beanClassLoader)__		}_		proxyFactory.setInterfaces(interfaces)__		if (proxyTargetClass) {_			classLoader = null_  _			proxyFactory.setProxyTargetClass(true)__		}__		DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(ts)__		introduction.suppressInterface(TargetSource.class)__		proxyFactory.addAdvice(introduction)___		return proxyFactory.getProxy(classLoader)__	};create,a,refreshable,proxy,for,the,given,aop,target,source,param,ts,the,refreshable,target,source,param,interfaces,the,proxy,interfaces,may,be,code,null,to,indicate,proxying,of,all,interfaces,implemented,by,the,target,class,return,the,generated,proxy,see,refreshable,script,target,source;protected,object,create,refreshable,proxy,target,source,ts,class,interfaces,boolean,proxy,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,ts,class,loader,class,loader,this,bean,class,loader,if,interfaces,null,interfaces,class,utils,get,all,interfaces,for,class,ts,get,target,class,this,bean,class,loader,proxy,factory,set,interfaces,interfaces,if,proxy,target,class,class,loader,null,proxy,factory,set,proxy,target,class,true,delegating,introduction,interceptor,introduction,new,delegating,introduction,interceptor,ts,introduction,suppress,interface,target,source,class,proxy,factory,add,advice,introduction,return,proxy,factory,get,proxy,class,loader
ScriptFactoryPostProcessor -> protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces);1328020251;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see net.sf.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] { Type.getType(propertyType) })__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (abd.getDestroyMethodName() != null) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,net,sf,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,abd,get,destroy,method,name,null,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces);1344552803;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] { Type.getType(propertyType) })__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (abd.getDestroyMethodName() != null) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,abd,get,destroy,method,name,null,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces);1356735495;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] { Type.getType(propertyType) })__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (abd.getDestroyMethodName() != null) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,abd,get,destroy,method,name,null,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces);1357119239;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] { Type.getType(propertyType) })__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (abd.getDestroyMethodName() != null) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,abd,get,destroy,method,name,null,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces);1368482696;Create a config interface for the given bean definition, defining setter_methods for the defined property values as well as an init method and_a destroy method (if defined)._<p>This implementation creates the interface via CGLIB's InterfaceMaker,_determining the property types from the given interfaces (as far as possible)._@param bd the bean definition (property values etc) to create a_config interface for_@param interfaces the interfaces to check against (might define_getters corresponding to the setters we're supposed to generate)_@return the config interface_@see org.springframework.cglib.proxy.InterfaceMaker_@see org.springframework.beans.BeanUtils#findPropertyType;protected Class createConfigInterface(BeanDefinition bd, Class[] interfaces) {_		InterfaceMaker maker = new InterfaceMaker()__		PropertyValue[] pvs = bd.getPropertyValues().getPropertyValues()__		for (PropertyValue pv : pvs) {_			String propertyName = pv.getName()__			Class propertyType = BeanUtils.findPropertyType(propertyName, interfaces)__			String setterName = "set" + StringUtils.capitalize(propertyName)__			Signature signature = new Signature(setterName, Type.VOID_TYPE, new Type[] { Type.getType(propertyType) })__			maker.add(signature, new Type[0])__		}_		if (bd instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd__			if (abd.getInitMethodName() != null) {_				Signature signature = new Signature(abd.getInitMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_			if (abd.getDestroyMethodName() != null) {_				Signature signature = new Signature(abd.getDestroyMethodName(), Type.VOID_TYPE, new Type[0])__				maker.add(signature, new Type[0])__			}_		}_		return maker.create()__	};create,a,config,interface,for,the,given,bean,definition,defining,setter,methods,for,the,defined,property,values,as,well,as,an,init,method,and,a,destroy,method,if,defined,p,this,implementation,creates,the,interface,via,cglib,s,interface,maker,determining,the,property,types,from,the,given,interfaces,as,far,as,possible,param,bd,the,bean,definition,property,values,etc,to,create,a,config,interface,for,param,interfaces,the,interfaces,to,check,against,might,define,getters,corresponding,to,the,setters,we,re,supposed,to,generate,return,the,config,interface,see,org,springframework,cglib,proxy,interface,maker,see,org,springframework,beans,bean,utils,find,property,type;protected,class,create,config,interface,bean,definition,bd,class,interfaces,interface,maker,maker,new,interface,maker,property,value,pvs,bd,get,property,values,get,property,values,for,property,value,pv,pvs,string,property,name,pv,get,name,class,property,type,bean,utils,find,property,type,property,name,interfaces,string,setter,name,set,string,utils,capitalize,property,name,signature,signature,new,signature,setter,name,type,new,type,type,get,type,property,type,maker,add,signature,new,type,0,if,bd,instanceof,abstract,bean,definition,abstract,bean,definition,abd,abstract,bean,definition,bd,if,abd,get,init,method,name,null,signature,signature,new,signature,abd,get,init,method,name,type,new,type,0,maker,add,signature,new,type,0,if,abd,get,destroy,method,name,null,signature,signature,new,signature,abd,get,destroy,method,name,type,new,type,0,maker,add,signature,new,type,0,return,maker,create
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, @Nullable Class<?>[] interfaces);1496837955;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, @Nullable Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,nullable,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, @Nullable Class<?>[] interfaces);1498780456;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, @Nullable Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,nullable,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, @Nullable Class<?>[] interfaces);1502974979;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, @Nullable Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,nullable,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, @Nullable Class<?>[] interfaces);1521714971;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, @Nullable Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,nullable,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, @Nullable Class<?>[] interfaces);1530174524;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, @Nullable Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,nullable,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, @Nullable Class<?>[] interfaces);1530188116;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, @Nullable Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,nullable,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
ScriptFactoryPostProcessor -> protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, 			ScriptSource scriptSource, @Nullable Class<?>[] interfaces);1536863076;Create a bean definition for the scripted object, based on the given script_definition, extracting the definition data that is relevant for the scripted_object (that is, everything but bean class and constructor arguments)._@param bd the full script bean definition_@param scriptFactoryBeanName the name of the internal ScriptFactory bean_@param scriptSource the ScriptSource for the scripted bean_@param interfaces the interfaces that the scripted bean is supposed to implement_@return the extracted ScriptFactory bean definition_@see org.springframework.scripting.ScriptFactory#getScriptedObject;protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName,_			ScriptSource scriptSource, @Nullable Class<?>[] interfaces) {__		GenericBeanDefinition objectBd = new GenericBeanDefinition(bd)__		objectBd.setFactoryBeanName(scriptFactoryBeanName)__		objectBd.setFactoryMethodName("getScriptedObject")__		objectBd.getConstructorArgumentValues().clear()__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource)__		objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces)__		return objectBd__	};create,a,bean,definition,for,the,scripted,object,based,on,the,given,script,definition,extracting,the,definition,data,that,is,relevant,for,the,scripted,object,that,is,everything,but,bean,class,and,constructor,arguments,param,bd,the,full,script,bean,definition,param,script,factory,bean,name,the,name,of,the,internal,script,factory,bean,param,script,source,the,script,source,for,the,scripted,bean,param,interfaces,the,interfaces,that,the,scripted,bean,is,supposed,to,implement,return,the,extracted,script,factory,bean,definition,see,org,springframework,scripting,script,factory,get,scripted,object;protected,bean,definition,create,scripted,object,bean,definition,bean,definition,bd,string,script,factory,bean,name,script,source,script,source,nullable,class,interfaces,generic,bean,definition,object,bd,new,generic,bean,definition,bd,object,bd,set,factory,bean,name,script,factory,bean,name,object,bd,set,factory,method,name,get,scripted,object,object,bd,get,constructor,argument,values,clear,object,bd,get,constructor,argument,values,add,indexed,argument,value,0,script,source,object,bd,get,constructor,argument,values,add,indexed,argument,value,1,interfaces,return,object,bd
