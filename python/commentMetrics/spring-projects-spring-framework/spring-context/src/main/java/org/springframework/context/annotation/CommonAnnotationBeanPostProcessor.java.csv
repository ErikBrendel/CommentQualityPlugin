# id;timestamp;commentText;codeText;commentWords;codeWords
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1328020251;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1335883941;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1346406592;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1355352386;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1356735495;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1357119239;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1362408075;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1363695025;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1368482696;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1380104837;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1382746898;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1382788991;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1384168190;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1385412762;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1387493371;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1398638841;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1411076742;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1416688499;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1417981895;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1419339720;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1424465614;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1426780215;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1432125256;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1447399860;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1455295270;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1455746407;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1467730834;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1467846264;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1478541798;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1496263893;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1496837955;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1497341397;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1498780456;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1506097334;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1520528267;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1530174524;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1530188116;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1531945062;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1533562895;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch);1549551674;Set whether to allow a fallback to a type match if no explicit name has been_specified. The default name (i.e. the field name or bean property name) will_still be checked first_ if a bean of that name exists, it will be taken._However, if no bean of that name exists, a by-type resolution of the_dependency will be attempted if this flag is "true"._<p>Default is "true". Switch this flag to "false" in order to enforce a_by-name lookup in all cases, throwing an exception in case of no name match._@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#resolveDependency;public void setFallbackToDefaultTypeMatch(boolean fallbackToDefaultTypeMatch) {_		this.fallbackToDefaultTypeMatch = fallbackToDefaultTypeMatch__	};set,whether,to,allow,a,fallback,to,a,type,match,if,no,explicit,name,has,been,specified,the,default,name,i,e,the,field,name,or,bean,property,name,will,still,be,checked,first,if,a,bean,of,that,name,exists,it,will,be,taken,however,if,no,bean,of,that,name,exists,a,by,type,resolution,of,the,dependency,will,be,attempted,if,this,flag,is,true,p,default,is,true,switch,this,flag,to,false,in,order,to,enforce,a,by,name,lookup,in,all,cases,throwing,an,exception,in,case,of,no,name,match,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,resolve,dependency;public,void,set,fallback,to,default,type,match,boolean,fallback,to,default,type,match,this,fallback,to,default,type,match,fallback,to,default,type,match
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException;1496837955;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException;1497341397;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException;1498780456;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException;1506097334;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException;1520528267;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException;1530174524;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, @Nullable String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1328020251;Specify the factory for objects to be injected into <code>@Resource</code> /_<code>@WebServiceRef</code> / <code>@EJB</code> annotated fields and setter methods,_<b>for <code>name</code> attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for <code>name</code> attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,code,web,service,ref,code,code,ejb,code,annotated,fields,and,setter,methods,b,for,code,name,code,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,code,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1335883941;Specify the factory for objects to be injected into <code>@Resource</code> /_<code>@WebServiceRef</code> / <code>@EJB</code> annotated fields and setter methods,_<b>for <code>name</code> attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for <code>name</code> attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,code,web,service,ref,code,code,ejb,code,annotated,fields,and,setter,methods,b,for,code,name,code,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,code,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1346406592;Specify the factory for objects to be injected into <code>@Resource</code> /_<code>@WebServiceRef</code> / <code>@EJB</code> annotated fields and setter methods,_<b>for <code>name</code> attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for <code>name</code> attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,code,web,service,ref,code,code,ejb,code,annotated,fields,and,setter,methods,b,for,code,name,code,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,code,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1355352386;Specify the factory for objects to be injected into <code>@Resource</code> /_<code>@WebServiceRef</code> / <code>@EJB</code> annotated fields and setter methods,_<b>for <code>name</code> attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for <code>name</code> attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,code,web,service,ref,code,code,ejb,code,annotated,fields,and,setter,methods,b,for,code,name,code,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,code,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1356735495;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1357119239;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1362408075;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1363695025;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1368482696;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1380104837;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1382746898;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1382788991;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1384168190;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1385412762;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1387493371;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1398638841;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1411076742;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1416688499;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1417981895;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1419339720;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1424465614;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1426780215;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1432125256;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1447399860;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1455295270;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1455746407;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1467730834;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1467846264;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1478541798;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1496263893;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1496837955;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1497341397;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1498780456;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1506097334;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1520528267;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1530174524;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1530188116;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1531945062;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1533562895;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> public void setResourceFactory(BeanFactory resourceFactory);1549551674;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code name} attributes and default names</b>._<p>The default is the BeanFactory that this post-processor is defined in,_if any, looking up resource names as Spring bean names. Specify the resource_factory explicitly for programmatic usage of this post-processor._<p>Specifying Spring's {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_leads to JNDI lookup behavior equivalent to standard Java EE 5 resource injection,_even for {@code name} attributes and default names. This is the same behavior_that the "alwaysUseJndiLookup" flag enables._@see #setAlwaysUseJndiLookup;public void setResourceFactory(BeanFactory resourceFactory) {_		Assert.notNull(resourceFactory, "BeanFactory must not be null")__		this.resourceFactory = resourceFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,name,attributes,and,default,names,b,p,the,default,is,the,bean,factory,that,this,post,processor,is,defined,in,if,any,looking,up,resource,names,as,spring,bean,names,specify,the,resource,factory,explicitly,for,programmatic,usage,of,this,post,processor,p,specifying,spring,s,link,org,springframework,jndi,support,simple,jndi,bean,factory,leads,to,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,even,for,code,name,attributes,and,default,names,this,is,the,same,behavior,that,the,always,use,jndi,lookup,flag,enables,see,set,always,use,jndi,lookup;public,void,set,resource,factory,bean,factory,resource,factory,assert,not,null,resource,factory,bean,factory,must,not,be,null,this,resource,factory,resource,factory
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1328020251;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1335883941;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1346406592;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1355352386;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1356735495;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1357119239;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1362408075;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1363695025;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1368482696;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1380104837;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1382746898;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1382788991;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1384168190;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1385412762;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1387493371;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1398638841;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1411076742;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1416688499;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1417981895;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1419339720;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1424465614;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1426780215;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1432125256;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1447399860;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1455295270;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1455746407;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1467730834;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1467846264;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1478541798;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1496263893;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1496837955;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1497341397;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1498780456;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1506097334;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1520528267;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1530174524;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1530188116;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1531945062;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1533562895;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final DependencyDescriptor getDependencyDescriptor();1549551674;Build a DependencyDescriptor for the underlying field/method.;public final DependencyDescriptor getDependencyDescriptor() {_			if (this.isField) {_				return new LookupDependencyDescriptor((Field) this.member, this.lookupType)__			}_			else {_				return new LookupDependencyDescriptor((Method) this.member, this.lookupType)__			}_		};build,a,dependency,descriptor,for,the,underlying,field,method;public,final,dependency,descriptor,get,dependency,descriptor,if,this,is,field,return,new,lookup,dependency,descriptor,field,this,member,this,lookup,type,else,return,new,lookup,dependency,descriptor,method,this,member,this,lookup,type
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1328020251;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never <code>null</code>)_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,code,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1335883941;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never <code>null</code>)_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,code,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1346406592;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never <code>null</code>)_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,code,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1355352386;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never <code>null</code>)_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,code,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1356735495;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1357119239;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1362408075;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1363695025;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1368482696;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1380104837;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1382746898;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1382788991;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1384168190;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1385412762;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1387493371;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1398638841;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1411076742;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1416688499;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1417981895;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1419339720;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1424465614;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1426780215;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1432125256;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1447399860;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1455295270;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1455746407;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<String>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,string,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1467730834;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1467846264;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1478541798;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName) 			throws BeansException;1496263893;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1328020251;Ignore the given resource type when resolving <code>@Resource</code>_annotations._<p>By default, the <code>javax.xml.ws.WebServiceContext</code> interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,code,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,code,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1335883941;Ignore the given resource type when resolving <code>@Resource</code>_annotations._<p>By default, the <code>javax.xml.ws.WebServiceContext</code> interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,code,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,code,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1346406592;Ignore the given resource type when resolving <code>@Resource</code>_annotations._<p>By default, the <code>javax.xml.ws.WebServiceContext</code> interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,code,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,code,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1355352386;Ignore the given resource type when resolving <code>@Resource</code>_annotations._<p>By default, the <code>javax.xml.ws.WebServiceContext</code> interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,code,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,code,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1356735495;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1357119239;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1362408075;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1363695025;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1368482696;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1380104837;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1382746898;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1382788991;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1384168190;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1385412762;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1387493371;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1398638841;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1411076742;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1416688499;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1417981895;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1419339720;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1424465614;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1426780215;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1432125256;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1447399860;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1455295270;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1455746407;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1467730834;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1467846264;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1478541798;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1496263893;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1496837955;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1497341397;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1498780456;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1506097334;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1520528267;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1530174524;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1530188116;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1531945062;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1533562895;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> public void ignoreResourceType(String resourceType);1549551674;Ignore the given resource type when resolving {@code @Resource}_annotations._<p>By default, the {@code javax.xml.ws.WebServiceContext} interface_will be ignored, since it will be resolved by the JAX-WS runtime._@param resourceType the resource type to ignore;public void ignoreResourceType(String resourceType) {_		Assert.notNull(resourceType, "Ignored resource type must not be null")__		this.ignoredResourceTypes.add(resourceType)__	};ignore,the,given,resource,type,when,resolving,code,resource,annotations,p,by,default,the,code,javax,xml,ws,web,service,context,interface,will,be,ignored,since,it,will,be,resolved,by,the,jax,ws,runtime,param,resource,type,the,resource,type,to,ignore;public,void,ignore,resource,type,string,resource,type,assert,not,null,resource,type,ignored,resource,type,must,not,be,null,this,ignored,resource,types,add,resource,type
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1530188116;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws NoSuchBeanDefinitionException if no corresponding target resource found;protected Object getResource(LookupElement element, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,no,such,bean,definition,exception,if,no,corresponding,target,resource,found;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1531945062;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws NoSuchBeanDefinitionException if no corresponding target resource found;protected Object getResource(LookupElement element, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,no,such,bean,definition,exception,if,no,corresponding,target,resource,found;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1533562895;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws NoSuchBeanDefinitionException if no corresponding target resource found;protected Object getResource(LookupElement element, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,no,such,bean,definition,exception,if,no,corresponding,target,resource,found;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1549551674;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws NoSuchBeanDefinitionException if no corresponding target resource found;protected Object getResource(LookupElement element, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,no,such,bean,definition,exception,if,no,corresponding,target,resource,found;protected,object,get,resource,lookup,element,element,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1328020251;Specify the factory for objects to be injected into <code>@Resource</code> /_<code>@WebServiceRef</code> / <code>@EJB</code> annotated fields and setter methods,_<b>for <code>mappedName</code> attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for <code>name</code> attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,code,web,service,ref,code,code,ejb,code,annotated,fields,and,setter,methods,b,for,code,mapped,name,code,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,code,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1335883941;Specify the factory for objects to be injected into <code>@Resource</code> /_<code>@WebServiceRef</code> / <code>@EJB</code> annotated fields and setter methods,_<b>for <code>mappedName</code> attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for <code>name</code> attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,code,web,service,ref,code,code,ejb,code,annotated,fields,and,setter,methods,b,for,code,mapped,name,code,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,code,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1346406592;Specify the factory for objects to be injected into <code>@Resource</code> /_<code>@WebServiceRef</code> / <code>@EJB</code> annotated fields and setter methods,_<b>for <code>mappedName</code> attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for <code>name</code> attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,code,web,service,ref,code,code,ejb,code,annotated,fields,and,setter,methods,b,for,code,mapped,name,code,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,code,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1355352386;Specify the factory for objects to be injected into <code>@Resource</code> /_<code>@WebServiceRef</code> / <code>@EJB</code> annotated fields and setter methods,_<b>for <code>mappedName</code> attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for <code>name</code> attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,code,web,service,ref,code,code,ejb,code,annotated,fields,and,setter,methods,b,for,code,mapped,name,code,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,code,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1356735495;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1357119239;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1362408075;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1363695025;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1368482696;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1380104837;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1382746898;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1382788991;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1384168190;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1385412762;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1387493371;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1398638841;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1411076742;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1416688499;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1417981895;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1419339720;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1424465614;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1426780215;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1432125256;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1447399860;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1455295270;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1455746407;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1467730834;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1467846264;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1478541798;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1496263893;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1496837955;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1497341397;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1498780456;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1506097334;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1520528267;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1530174524;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1530188116;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1531945062;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1533562895;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> public void setJndiFactory(BeanFactory jndiFactory);1549551674;Specify the factory for objects to be injected into {@code @Resource} /_{@code @WebServiceRef} / {@code @EJB} annotated fields and setter methods,_<b>for {@code mappedName} attributes that point directly into JNDI</b>._This factory will also be used if "alwaysUseJndiLookup" is set to "true" in order_to enforce JNDI lookups even for {@code name} attributes and default names._<p>The default is a {@link org.springframework.jndi.support.SimpleJndiBeanFactory}_for JNDI lookup behavior equivalent to standard Java EE 5 resource injection._@see #setResourceFactory_@see #setAlwaysUseJndiLookup;public void setJndiFactory(BeanFactory jndiFactory) {_		Assert.notNull(jndiFactory, "BeanFactory must not be null")__		this.jndiFactory = jndiFactory__	};specify,the,factory,for,objects,to,be,injected,into,code,resource,code,web,service,ref,code,ejb,annotated,fields,and,setter,methods,b,for,code,mapped,name,attributes,that,point,directly,into,jndi,b,this,factory,will,also,be,used,if,always,use,jndi,lookup,is,set,to,true,in,order,to,enforce,jndi,lookups,even,for,code,name,attributes,and,default,names,p,the,default,is,a,link,org,springframework,jndi,support,simple,jndi,bean,factory,for,jndi,lookup,behavior,equivalent,to,standard,java,ee,5,resource,injection,see,set,resource,factory,see,set,always,use,jndi,lookup;public,void,set,jndi,factory,bean,factory,jndi,factory,assert,not,null,jndi,factory,bean,factory,must,not,be,null,this,jndi,factory,jndi,factory
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1424465614;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1426780215;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1432125256;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1447399860;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1455295270;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1455746407;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1467730834;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1467846264;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1478541798;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName);1496263893;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1328020251;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1335883941;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1346406592;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1355352386;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1356735495;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1357119239;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1362408075;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1363695025;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1368482696;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1380104837;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1382746898;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1382788991;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1384168190;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1385412762;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1387493371;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1398638841;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1411076742;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1416688499;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1417981895;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1419339720;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1424465614;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1426780215;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1432125256;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1447399860;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1455295270;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1455746407;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1467730834;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1467846264;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1478541798;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1496263893;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1496837955;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1497341397;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1498780456;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1506097334;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1520528267;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1530174524;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1530188116;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1531945062;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1533562895;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> public CommonAnnotationBeanPostProcessor();1549551674;Create a new CommonAnnotationBeanPostProcessor,_with the init and destroy annotation types set to_{@link javax.annotation.PostConstruct} and {@link javax.annotation.PreDestroy},_respectively.;public CommonAnnotationBeanPostProcessor() {_		setOrder(Ordered.LOWEST_PRECEDENCE - 3)__		setInitAnnotationType(PostConstruct.class)__		setDestroyAnnotationType(PreDestroy.class)__		ignoreResourceType("javax.xml.ws.WebServiceContext")__	};create,a,new,common,annotation,bean,post,processor,with,the,init,and,destroy,annotation,types,set,to,link,javax,annotation,post,construct,and,link,javax,annotation,pre,destroy,respectively;public,common,annotation,bean,post,processor,set,order,ordered,3,set,init,annotation,type,post,construct,class,set,destroy,annotation,type,pre,destroy,class,ignore,resource,type,javax,xml,ws,web,service,context
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1328020251;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1335883941;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1346406592;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1355352386;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1356735495;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1357119239;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1362408075;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1363695025;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1368482696;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1380104837;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1382746898;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1382788991;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1384168190;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1385412762;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1387493371;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1398638841;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1411076742;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1416688499;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1417981895;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1419339720;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1424465614;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1426780215;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1432125256;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1447399860;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1455295270;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1455746407;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1467730834;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1467846264;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1478541798;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1496263893;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1496837955;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1497341397;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1498780456;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1506097334;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1520528267;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1530174524;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1530188116;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1531945062;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1533562895;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final String getName();1549551674;Return the resource name for the lookup.;public final String getName() {_			return this.name__		};return,the,resource,name,for,the,lookup;public,final,string,get,name,return,this,name
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws BeansException;1496837955;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws BeansException;1497341397;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws BeansException;1498780456;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws BeansException;1506097334;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws BeansException;1520528267;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws BeansException;1530174524;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws BeansException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,beans,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1328020251;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for <code>name</code> attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only <code>mappedName</code> attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for <code>name</code> attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,code,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,code,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,code,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1335883941;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for <code>name</code> attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only <code>mappedName</code> attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for <code>name</code> attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,code,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,code,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,code,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1346406592;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for <code>name</code> attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only <code>mappedName</code> attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for <code>name</code> attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,code,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,code,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,code,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1355352386;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for <code>name</code> attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only <code>mappedName</code> attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for <code>name</code> attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,code,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,code,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,code,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1356735495;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1357119239;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1362408075;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1363695025;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1368482696;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1380104837;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1382746898;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1382788991;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1384168190;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1385412762;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1387493371;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1398638841;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1411076742;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1416688499;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1417981895;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1419339720;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1424465614;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1426780215;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1432125256;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1447399860;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1455295270;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1455746407;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1467730834;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1467846264;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1478541798;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1496263893;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1496837955;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1497341397;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1498780456;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1506097334;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1520528267;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1530174524;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1530188116;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1531945062;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1533562895;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup);1549551674;Set whether to always use JNDI lookups equivalent to standard Java EE 5 resource_injection, <b>even for {@code name} attributes and default names</b>._<p>Default is "false": Resource names are used for Spring bean lookups in the_containing BeanFactory_ only {@code mappedName} attributes point directly_into JNDI. Switch this flag to "true" for enforcing Java EE style JNDI lookups_in any case, even for {@code name} attributes and default names._@see #setJndiFactory_@see #setResourceFactory;public void setAlwaysUseJndiLookup(boolean alwaysUseJndiLookup) {_		this.alwaysUseJndiLookup = alwaysUseJndiLookup__	};set,whether,to,always,use,jndi,lookups,equivalent,to,standard,java,ee,5,resource,injection,b,even,for,code,name,attributes,and,default,names,b,p,default,is,false,resource,names,are,used,for,spring,bean,lookups,in,the,containing,bean,factory,only,code,mapped,name,attributes,point,directly,into,jndi,switch,this,flag,to,true,for,enforcing,java,ee,style,jndi,lookups,in,any,case,even,for,code,name,attributes,and,default,names,see,set,jndi,factory,see,set,resource,factory;public,void,set,always,use,jndi,lookup,boolean,always,use,jndi,lookup,this,always,use,jndi,lookup,always,use,jndi,lookup
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1328020251;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never <code>null</code>)_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,code,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1335883941;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never <code>null</code>)_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,code,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1346406592;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never <code>null</code>)_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,code,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1355352386;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never <code>null</code>)_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,code,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1356735495;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1357119239;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1362408075;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1363695025;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1368482696;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1380104837;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1382746898;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1382788991;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1384168190;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1385412762;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1387493371;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1398638841;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1411076742;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1416688499;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1417981895;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1419339720;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1424465614;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1426780215;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1432125256;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1447399860;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1455295270;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1455746407;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1467730834;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1467846264;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1478541798;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException;1496263893;Obtain the resource object for the given name and type._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws BeansException if we failed to obtain the target resource;protected Object getResource(LookupElement element, String requestingBeanName) throws BeansException {_		if (StringUtils.hasLength(element.mappedName)) {_			return this.jndiFactory.getBean(element.mappedName, element.lookupType)__		}_		if (this.alwaysUseJndiLookup) {_			return this.jndiFactory.getBean(element.name, element.lookupType)__		}_		if (this.resourceFactory == null) {_			throw new NoSuchBeanDefinitionException(element.lookupType,_					"No resource factory configured - specify the 'resourceFactory' property")__		}_		return autowireResource(this.resourceFactory, element, requestingBeanName)__	};obtain,the,resource,object,for,the,given,name,and,type,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,beans,exception,if,we,failed,to,obtain,the,target,resource;protected,object,get,resource,lookup,element,element,string,requesting,bean,name,throws,beans,exception,if,string,utils,has,length,element,mapped,name,return,this,jndi,factory,get,bean,element,mapped,name,element,lookup,type,if,this,always,use,jndi,lookup,return,this,jndi,factory,get,bean,element,name,element,lookup,type,if,this,resource,factory,null,throw,new,no,such,bean,definition,exception,element,lookup,type,no,resource,factory,configured,specify,the,resource,factory,property,return,autowire,resource,this,resource,factory,element,requesting,bean,name
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1328020251;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1335883941;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1346406592;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1355352386;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1356735495;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1357119239;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1362408075;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1363695025;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1368482696;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1380104837;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1382746898;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1382788991;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1384168190;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1385412762;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1387493371;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1398638841;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1411076742;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1416688499;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1417981895;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1419339720;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1424465614;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1426780215;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1432125256;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1447399860;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1455295270;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1455746407;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1467730834;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1467846264;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1478541798;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1496263893;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1496837955;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1497341397;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1498780456;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1506097334;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1520528267;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1530174524;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1530188116;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1531945062;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1533562895;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> LookupElement -> public final Class<?> getLookupType();1549551674;Return the desired type for the lookup.;public final Class<?> getLookupType() {_			return this.lookupType__		};return,the,desired,type,for,the,lookup;public,final,class,get,lookup,type,return,this,lookup,type
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1496837955;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1497341397;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1498780456;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1506097334;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1520528267;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1530174524;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1530188116;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1531945062;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1533562895;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName);1549551674;Obtain a lazily resolving resource proxy for the given name and type,_delegating to {@link #getResource} on demand once a method call comes in._@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@since 4.2_@see #getResource_@see Lazy;protected Object buildLazyResourceProxy(final LookupElement element, final @Nullable String requestingBeanName) {_		TargetSource ts = new TargetSource() {_			@Override_			public Class<?> getTargetClass() {_				return element.lookupType__			}_			@Override_			public boolean isStatic() {_				return false__			}_			@Override_			public Object getTarget() {_				return getResource(element, requestingBeanName)__			}_			@Override_			public void releaseTarget(Object target) {_			}_		}__		ProxyFactory pf = new ProxyFactory()__		pf.setTargetSource(ts)__		if (element.lookupType.isInterface()) {_			pf.addInterface(element.lookupType)__		}_		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null)__		return pf.getProxy(classLoader)__	};obtain,a,lazily,resolving,resource,proxy,for,the,given,name,and,type,delegating,to,link,get,resource,on,demand,once,a,method,call,comes,in,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,since,4,2,see,get,resource,see,lazy;protected,object,build,lazy,resource,proxy,final,lookup,element,element,final,nullable,string,requesting,bean,name,target,source,ts,new,target,source,override,public,class,get,target,class,return,element,lookup,type,override,public,boolean,is,static,return,false,override,public,object,get,target,return,get,resource,element,requesting,bean,name,override,public,void,release,target,object,target,proxy,factory,pf,new,proxy,factory,pf,set,target,source,ts,if,element,lookup,type,is,interface,pf,add,interface,element,lookup,type,class,loader,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,null,return,pf,get,proxy,class,loader
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1530188116;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws NoSuchBeanDefinitionException if no corresponding target resource found;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,no,such,bean,definition,exception,if,no,corresponding,target,resource,found;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1531945062;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws NoSuchBeanDefinitionException if no corresponding target resource found;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,no,such,bean,definition,exception,if,no,corresponding,target,resource,found;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1533562895;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws NoSuchBeanDefinitionException if no corresponding target resource found;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (this.fallbackToDefaultTypeMatch && element.isDefaultName &&_				factory instanceof AutowireCapableBeanFactory && !factory.containsBean(name)) {_			autowiredBeanNames = new LinkedHashSet<>()__			resource = ((AutowireCapableBeanFactory) factory).resolveDependency(_					element.getDependencyDescriptor(), requestingBeanName, autowiredBeanNames, null)__			if (resource == null) {_				throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,no,such,bean,definition,exception,if,no,corresponding,target,resource,found;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,this,fallback,to,default,type,match,element,is,default,name,factory,instanceof,autowire,capable,bean,factory,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,autowire,capable,bean,factory,factory,resolve,dependency,element,get,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
CommonAnnotationBeanPostProcessor -> protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1549551674;Obtain a resource object for the given name and type through autowiring_based on the given factory._@param factory the factory to autowire against_@param element the descriptor for the annotated field/method_@param requestingBeanName the name of the requesting bean_@return the resource object (never {@code null})_@throws NoSuchBeanDefinitionException if no corresponding target resource found;protected Object autowireResource(BeanFactory factory, LookupElement element, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Object resource__		Set<String> autowiredBeanNames__		String name = element.name___		if (factory instanceof AutowireCapableBeanFactory) {_			AutowireCapableBeanFactory beanFactory = (AutowireCapableBeanFactory) factory__			DependencyDescriptor descriptor = element.getDependencyDescriptor()__			if (this.fallbackToDefaultTypeMatch && element.isDefaultName && !factory.containsBean(name)) {_				autowiredBeanNames = new LinkedHashSet<>()__				resource = beanFactory.resolveDependency(descriptor, requestingBeanName, autowiredBeanNames, null)__				if (resource == null) {_					throw new NoSuchBeanDefinitionException(element.getLookupType(), "No resolvable resource object")__				}_			}_			else {_				resource = beanFactory.resolveBeanByName(name, descriptor)__				autowiredBeanNames = Collections.singleton(name)__			}_		}_		else {_			resource = factory.getBean(name, element.lookupType)__			autowiredBeanNames = Collections.singleton(name)__		}__		if (factory instanceof ConfigurableBeanFactory) {_			ConfigurableBeanFactory beanFactory = (ConfigurableBeanFactory) factory__			for (String autowiredBeanName : autowiredBeanNames) {_				if (requestingBeanName != null && beanFactory.containsBean(autowiredBeanName)) {_					beanFactory.registerDependentBean(autowiredBeanName, requestingBeanName)__				}_			}_		}__		return resource__	};obtain,a,resource,object,for,the,given,name,and,type,through,autowiring,based,on,the,given,factory,param,factory,the,factory,to,autowire,against,param,element,the,descriptor,for,the,annotated,field,method,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,resource,object,never,code,null,throws,no,such,bean,definition,exception,if,no,corresponding,target,resource,found;protected,object,autowire,resource,bean,factory,factory,lookup,element,element,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,object,resource,set,string,autowired,bean,names,string,name,element,name,if,factory,instanceof,autowire,capable,bean,factory,autowire,capable,bean,factory,bean,factory,autowire,capable,bean,factory,factory,dependency,descriptor,descriptor,element,get,dependency,descriptor,if,this,fallback,to,default,type,match,element,is,default,name,factory,contains,bean,name,autowired,bean,names,new,linked,hash,set,resource,bean,factory,resolve,dependency,descriptor,requesting,bean,name,autowired,bean,names,null,if,resource,null,throw,new,no,such,bean,definition,exception,element,get,lookup,type,no,resolvable,resource,object,else,resource,bean,factory,resolve,bean,by,name,name,descriptor,autowired,bean,names,collections,singleton,name,else,resource,factory,get,bean,name,element,lookup,type,autowired,bean,names,collections,singleton,name,if,factory,instanceof,configurable,bean,factory,configurable,bean,factory,bean,factory,configurable,bean,factory,factory,for,string,autowired,bean,name,autowired,bean,names,if,requesting,bean,name,null,bean,factory,contains,bean,autowired,bean,name,bean,factory,register,dependent,bean,autowired,bean,name,requesting,bean,name,return,resource
