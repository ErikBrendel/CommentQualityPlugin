commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the affected field of the object.  */ ;/**  * Return the affected field of the object.  */ public String getField() {     return this.field. }
true;public;0;4;/**  * Return the rejected field value.  */ ;/**  * Return the rejected field value.  */ @Nullable public Object getRejectedValue() {     return this.rejectedValue. }
true;public;0;3;/**  * Return whether this error represents a binding failure  * (like a type mismatch). otherwise it is a validation failure.  */ ;/**  * Return whether this error represents a binding failure  * (like a type mismatch). otherwise it is a validation failure.  */ public boolean isBindingFailure() {     return this.bindingFailure. }
false;public;1;13;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (!super.equals(other)) {         return false.     }     FieldError otherError = (FieldError) other.     return (getField().equals(otherError.getField()) && ObjectUtils.nullSafeEquals(getRejectedValue(), otherError.getRejectedValue()) && isBindingFailure() == otherError.isBindingFailure()). }
false;public;0;8;;@Override public int hashCode() {     int hashCode = super.hashCode().     hashCode = 29 * hashCode + getField().hashCode().     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(getRejectedValue()).     hashCode = 29 * hashCode + (isBindingFailure() ? 1 : 0).     return hashCode. }
false;public;0;6;;@Override public String toString() {     return "Field error in object '" + getObjectName() + "' on field '" + this.field + "': rejected value [" + ObjectUtils.nullSafeToString(this.rejectedValue) + "]. " + resolvableToString(). }
