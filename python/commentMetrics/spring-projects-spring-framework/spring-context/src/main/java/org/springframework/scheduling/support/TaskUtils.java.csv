# id;timestamp;commentText;codeText;commentWords;codeWords
TaskUtils -> public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler( 			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask);1328020251;Decorates the task for error handling. If the provided_{@link ErrorHandler} is not null, it will be used. Otherwise,_repeating tasks will have errors suppressed by default whereas_one-shot tasks will have errors propagated by default since those_errors may be expected through the returned {@link Future}. In both_cases, the errors will be logged.;public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(_			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask) {__		if (task instanceof DelegatingErrorHandlingRunnable) {_			return (DelegatingErrorHandlingRunnable) task__		}_		ErrorHandler eh = errorHandler != null ? errorHandler : getDefaultErrorHandler(isRepeatingTask)__		return new DelegatingErrorHandlingRunnable(task, eh)__	};decorates,the,task,for,error,handling,if,the,provided,link,error,handler,is,not,null,it,will,be,used,otherwise,repeating,tasks,will,have,errors,suppressed,by,default,whereas,one,shot,tasks,will,have,errors,propagated,by,default,since,those,errors,may,be,expected,through,the,returned,link,future,in,both,cases,the,errors,will,be,logged;public,static,delegating,error,handling,runnable,decorate,task,with,error,handler,runnable,task,error,handler,error,handler,boolean,is,repeating,task,if,task,instanceof,delegating,error,handling,runnable,return,delegating,error,handling,runnable,task,error,handler,eh,error,handler,null,error,handler,get,default,error,handler,is,repeating,task,return,new,delegating,error,handling,runnable,task,eh
TaskUtils -> public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler( 			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask);1356735495;Decorates the task for error handling. If the provided_{@link ErrorHandler} is not null, it will be used. Otherwise,_repeating tasks will have errors suppressed by default whereas_one-shot tasks will have errors propagated by default since those_errors may be expected through the returned {@link Future}. In both_cases, the errors will be logged.;public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(_			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask) {__		if (task instanceof DelegatingErrorHandlingRunnable) {_			return (DelegatingErrorHandlingRunnable) task__		}_		ErrorHandler eh = errorHandler != null ? errorHandler : getDefaultErrorHandler(isRepeatingTask)__		return new DelegatingErrorHandlingRunnable(task, eh)__	};decorates,the,task,for,error,handling,if,the,provided,link,error,handler,is,not,null,it,will,be,used,otherwise,repeating,tasks,will,have,errors,suppressed,by,default,whereas,one,shot,tasks,will,have,errors,propagated,by,default,since,those,errors,may,be,expected,through,the,returned,link,future,in,both,cases,the,errors,will,be,logged;public,static,delegating,error,handling,runnable,decorate,task,with,error,handler,runnable,task,error,handler,error,handler,boolean,is,repeating,task,if,task,instanceof,delegating,error,handling,runnable,return,delegating,error,handling,runnable,task,error,handler,eh,error,handler,null,error,handler,get,default,error,handler,is,repeating,task,return,new,delegating,error,handling,runnable,task,eh
TaskUtils -> public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler( 			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask);1357119239;Decorates the task for error handling. If the provided_{@link ErrorHandler} is not null, it will be used. Otherwise,_repeating tasks will have errors suppressed by default whereas_one-shot tasks will have errors propagated by default since those_errors may be expected through the returned {@link Future}. In both_cases, the errors will be logged.;public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(_			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask) {__		if (task instanceof DelegatingErrorHandlingRunnable) {_			return (DelegatingErrorHandlingRunnable) task__		}_		ErrorHandler eh = errorHandler != null ? errorHandler : getDefaultErrorHandler(isRepeatingTask)__		return new DelegatingErrorHandlingRunnable(task, eh)__	};decorates,the,task,for,error,handling,if,the,provided,link,error,handler,is,not,null,it,will,be,used,otherwise,repeating,tasks,will,have,errors,suppressed,by,default,whereas,one,shot,tasks,will,have,errors,propagated,by,default,since,those,errors,may,be,expected,through,the,returned,link,future,in,both,cases,the,errors,will,be,logged;public,static,delegating,error,handling,runnable,decorate,task,with,error,handler,runnable,task,error,handler,error,handler,boolean,is,repeating,task,if,task,instanceof,delegating,error,handling,runnable,return,delegating,error,handling,runnable,task,error,handler,eh,error,handler,null,error,handler,get,default,error,handler,is,repeating,task,return,new,delegating,error,handling,runnable,task,eh
TaskUtils -> public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler( 			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask);1364421156;Decorate the task for error handling. If the provided {@link ErrorHandler}_is not {@code null}, it will be used. Otherwise, repeating tasks will have_errors suppressed by default whereas one-shot tasks will have errors_propagated by default since those errors may be expected through the_returned {@link Future}. In both cases, the errors will be logged.;public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(_			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask) {__		if (task instanceof DelegatingErrorHandlingRunnable) {_			return (DelegatingErrorHandlingRunnable) task__		}_		ErrorHandler eh = (errorHandler != null ? errorHandler : getDefaultErrorHandler(isRepeatingTask))__		return new DelegatingErrorHandlingRunnable(task, eh)__	};decorate,the,task,for,error,handling,if,the,provided,link,error,handler,is,not,code,null,it,will,be,used,otherwise,repeating,tasks,will,have,errors,suppressed,by,default,whereas,one,shot,tasks,will,have,errors,propagated,by,default,since,those,errors,may,be,expected,through,the,returned,link,future,in,both,cases,the,errors,will,be,logged;public,static,delegating,error,handling,runnable,decorate,task,with,error,handler,runnable,task,error,handler,error,handler,boolean,is,repeating,task,if,task,instanceof,delegating,error,handling,runnable,return,delegating,error,handling,runnable,task,error,handler,eh,error,handler,null,error,handler,get,default,error,handler,is,repeating,task,return,new,delegating,error,handling,runnable,task,eh
TaskUtils -> public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler( 			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask);1368482696;Decorate the task for error handling. If the provided {@link ErrorHandler}_is not {@code null}, it will be used. Otherwise, repeating tasks will have_errors suppressed by default whereas one-shot tasks will have errors_propagated by default since those errors may be expected through the_returned {@link Future}. In both cases, the errors will be logged.;public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(_			Runnable task, ErrorHandler errorHandler, boolean isRepeatingTask) {__		if (task instanceof DelegatingErrorHandlingRunnable) {_			return (DelegatingErrorHandlingRunnable) task__		}_		ErrorHandler eh = (errorHandler != null ? errorHandler : getDefaultErrorHandler(isRepeatingTask))__		return new DelegatingErrorHandlingRunnable(task, eh)__	};decorate,the,task,for,error,handling,if,the,provided,link,error,handler,is,not,code,null,it,will,be,used,otherwise,repeating,tasks,will,have,errors,suppressed,by,default,whereas,one,shot,tasks,will,have,errors,propagated,by,default,since,those,errors,may,be,expected,through,the,returned,link,future,in,both,cases,the,errors,will,be,logged;public,static,delegating,error,handling,runnable,decorate,task,with,error,handler,runnable,task,error,handler,error,handler,boolean,is,repeating,task,if,task,instanceof,delegating,error,handling,runnable,return,delegating,error,handling,runnable,task,error,handler,eh,error,handler,null,error,handler,get,default,error,handler,is,repeating,task,return,new,delegating,error,handling,runnable,task,eh
TaskUtils -> public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask);1328020251;Return the default {@link ErrorHandler} implementation based on the boolean_value indicating whether the task will be repeating or not. For repeating tasks_it will suppress errors, but for one-time tasks it will propagate. In both_cases, the error will be logged.;public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask) {_		return (isRepeatingTask ? LOG_AND_SUPPRESS_ERROR_HANDLER : LOG_AND_PROPAGATE_ERROR_HANDLER)__	};return,the,default,link,error,handler,implementation,based,on,the,boolean,value,indicating,whether,the,task,will,be,repeating,or,not,for,repeating,tasks,it,will,suppress,errors,but,for,one,time,tasks,it,will,propagate,in,both,cases,the,error,will,be,logged;public,static,error,handler,get,default,error,handler,boolean,is,repeating,task,return,is,repeating,task
TaskUtils -> public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask);1356735495;Return the default {@link ErrorHandler} implementation based on the boolean_value indicating whether the task will be repeating or not. For repeating tasks_it will suppress errors, but for one-time tasks it will propagate. In both_cases, the error will be logged.;public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask) {_		return (isRepeatingTask ? LOG_AND_SUPPRESS_ERROR_HANDLER : LOG_AND_PROPAGATE_ERROR_HANDLER)__	};return,the,default,link,error,handler,implementation,based,on,the,boolean,value,indicating,whether,the,task,will,be,repeating,or,not,for,repeating,tasks,it,will,suppress,errors,but,for,one,time,tasks,it,will,propagate,in,both,cases,the,error,will,be,logged;public,static,error,handler,get,default,error,handler,boolean,is,repeating,task,return,is,repeating,task
TaskUtils -> public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask);1357119239;Return the default {@link ErrorHandler} implementation based on the boolean_value indicating whether the task will be repeating or not. For repeating tasks_it will suppress errors, but for one-time tasks it will propagate. In both_cases, the error will be logged.;public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask) {_		return (isRepeatingTask ? LOG_AND_SUPPRESS_ERROR_HANDLER : LOG_AND_PROPAGATE_ERROR_HANDLER)__	};return,the,default,link,error,handler,implementation,based,on,the,boolean,value,indicating,whether,the,task,will,be,repeating,or,not,for,repeating,tasks,it,will,suppress,errors,but,for,one,time,tasks,it,will,propagate,in,both,cases,the,error,will,be,logged;public,static,error,handler,get,default,error,handler,boolean,is,repeating,task,return,is,repeating,task
TaskUtils -> public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask);1364421156;Return the default {@link ErrorHandler} implementation based on the boolean_value indicating whether the task will be repeating or not. For repeating tasks_it will suppress errors, but for one-time tasks it will propagate. In both_cases, the error will be logged.;public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask) {_		return (isRepeatingTask ? LOG_AND_SUPPRESS_ERROR_HANDLER : LOG_AND_PROPAGATE_ERROR_HANDLER)__	};return,the,default,link,error,handler,implementation,based,on,the,boolean,value,indicating,whether,the,task,will,be,repeating,or,not,for,repeating,tasks,it,will,suppress,errors,but,for,one,time,tasks,it,will,propagate,in,both,cases,the,error,will,be,logged;public,static,error,handler,get,default,error,handler,boolean,is,repeating,task,return,is,repeating,task
TaskUtils -> public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask);1368482696;Return the default {@link ErrorHandler} implementation based on the boolean_value indicating whether the task will be repeating or not. For repeating tasks_it will suppress errors, but for one-time tasks it will propagate. In both_cases, the error will be logged.;public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask) {_		return (isRepeatingTask ? LOG_AND_SUPPRESS_ERROR_HANDLER : LOG_AND_PROPAGATE_ERROR_HANDLER)__	};return,the,default,link,error,handler,implementation,based,on,the,boolean,value,indicating,whether,the,task,will,be,repeating,or,not,for,repeating,tasks,it,will,suppress,errors,but,for,one,time,tasks,it,will,propagate,in,both,cases,the,error,will,be,logged;public,static,error,handler,get,default,error,handler,boolean,is,repeating,task,return,is,repeating,task
TaskUtils -> public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask);1495868221;Return the default {@link ErrorHandler} implementation based on the boolean_value indicating whether the task will be repeating or not. For repeating tasks_it will suppress errors, but for one-time tasks it will propagate. In both_cases, the error will be logged.;public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask) {_		return (isRepeatingTask ? LOG_AND_SUPPRESS_ERROR_HANDLER : LOG_AND_PROPAGATE_ERROR_HANDLER)__	};return,the,default,link,error,handler,implementation,based,on,the,boolean,value,indicating,whether,the,task,will,be,repeating,or,not,for,repeating,tasks,it,will,suppress,errors,but,for,one,time,tasks,it,will,propagate,in,both,cases,the,error,will,be,logged;public,static,error,handler,get,default,error,handler,boolean,is,repeating,task,return,is,repeating,task
