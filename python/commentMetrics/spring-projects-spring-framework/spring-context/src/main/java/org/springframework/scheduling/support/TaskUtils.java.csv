commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;9;/**  * Decorate the task for error handling. If the provided {@link ErrorHandler}  * is not {@code null}, it will be used. Otherwise, repeating tasks will have  * errors suppressed by default whereas one-shot tasks will have errors  * propagated by default since those errors may be expected through the  * returned {@link Future}. In both cases, the errors will be logged.  */ ;/**  * Decorate the task for error handling. If the provided {@link ErrorHandler}  * is not {@code null}, it will be used. Otherwise, repeating tasks will have  * errors suppressed by default whereas one-shot tasks will have errors  * propagated by default since those errors may be expected through the  * returned {@link Future}. In both cases, the errors will be logged.  */ public static DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(Runnable task, @Nullable ErrorHandler errorHandler, boolean isRepeatingTask) {     if (task instanceof DelegatingErrorHandlingRunnable) {         return (DelegatingErrorHandlingRunnable) task.     }     ErrorHandler eh = (errorHandler != null ? errorHandler : getDefaultErrorHandler(isRepeatingTask)).     return new DelegatingErrorHandlingRunnable(task, eh). }
true;public,static;1;3;/**  * Return the default {@link ErrorHandler} implementation based on the boolean  * value indicating whether the task will be repeating or not. For repeating tasks  * it will suppress errors, but for one-time tasks it will propagate. In both  * cases, the error will be logged.  */ ;/**  * Return the default {@link ErrorHandler} implementation based on the boolean  * value indicating whether the task will be repeating or not. For repeating tasks  * it will suppress errors, but for one-time tasks it will propagate. In both  * cases, the error will be logged.  */ public static ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask) {     return (isRepeatingTask ? LOG_AND_SUPPRESS_ERROR_HANDLER : LOG_AND_PROPAGATE_ERROR_HANDLER). }
false;public;1;6;;@Override public void handleError(Throwable t) {     if (logger.isErrorEnabled()) {         logger.error("Unexpected error occurred in scheduled task.", t).     } }
false;public;1;5;;@Override public void handleError(Throwable t) {     super.handleError(t).     ReflectionUtils.rethrowRuntimeException(t). }
