# id;timestamp;commentText;codeText;commentWords;codeWords
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1396272050;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned.__@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '"_					+ ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (operation.getCacheNames().isEmpty()) {_			throw new IllegalStateException("No cache names could be detected on '"_					+ ae.toString()+ "'. Make sure to set the value parameter on the annotation or" +_					"declare a @CacheConfig at the class-level with the default cache name(s) to use.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,operation,get,cache,names,is,empty,throw,new,illegal,state,exception,no,cache,names,could,be,detected,on,ae,to,string,make,sure,to,set,the,value,parameter,on,the,annotation,or,declare,a,cache,config,at,the,class,level,with,the,default,cache,name,s,to,use
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1396878069;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned.__@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '"_					+ ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '"_					+ ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_		if (operation.getCacheNames().isEmpty()) {_			throw new IllegalStateException("No cache names could be detected on '"_					+ ae.toString() + "'. Make sure to set the value parameter on the annotation or " +_					"declare a @CacheConfig at the class-level with the default cache name(s) to use.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used,if,operation,get,cache,names,is,empty,throw,new,illegal,state,exception,no,cache,names,could,be,detected,on,ae,to,string,make,sure,to,set,the,value,parameter,on,the,annotation,or,declare,a,cache,config,at,the,class,level,with,the,default,cache,name,s,to,use
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1407445568;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_		if (operation.getCacheNames().isEmpty()) {_			throw new IllegalStateException("No cache names could be detected on '" +_					ae.toString() + "'. Make sure to set the value parameter on the annotation or " +_					"declare a @CacheConfig at the class-level with the default cache name(s) to use.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used,if,operation,get,cache,names,is,empty,throw,new,illegal,state,exception,no,cache,names,could,be,detected,on,ae,to,string,make,sure,to,set,the,value,parameter,on,the,annotation,or,declare,a,cache,config,at,the,class,level,with,the,default,cache,name,s,to,use
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1433105521;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_		if (operation.getCacheNames().isEmpty()) {_			throw new IllegalStateException("No cache names could be detected on '" +_					ae.toString() + "'. Make sure to set the value parameter on the annotation or " +_					"declare a @CacheConfig at the class-level with the default cache name(s) to use.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used,if,operation,get,cache,names,is,empty,throw,new,illegal,state,exception,no,cache,names,could,be,detected,on,ae,to,string,make,sure,to,set,the,value,parameter,on,the,annotation,or,declare,a,cache,config,at,the,class,level,with,the,default,cache,name,s,to,use
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1433324569;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1442951852;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1450701275;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1451421620;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1455712279;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1458561249;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1458999130;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1460495991;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1467730834;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1477690375;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1488283735;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1493223407;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1496837955;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1498780456;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1502974979;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1534157039;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation);1534347014;Validates the specified {@link CacheOperation}._<p>Throws an {@link IllegalStateException} if the state of the operation is_invalid. As there might be multiple sources for default values, this ensure_that the operation is in a proper state before being returned._@param ae the annotated element of the cache operation_@param operation the {@link CacheOperation} to validate;private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) {_		if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +_					"These attributes are mutually exclusive: either set the SpEL expression used to" +_					"compute the key at runtime or set the name of the KeyGenerator bean to use.")__		}_		if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) {_			throw new IllegalStateException("Invalid cache annotation configuration on '" +_					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +_					"These attributes are mutually exclusive: the cache manager is used to configure a" +_					"default cache resolver if none is set. If a cache resolver is set, the cache manager" +_					"won't be used.")__		}_	};validates,the,specified,link,cache,operation,p,throws,an,link,illegal,state,exception,if,the,state,of,the,operation,is,invalid,as,there,might,be,multiple,sources,for,default,values,this,ensure,that,the,operation,is,in,a,proper,state,before,being,returned,param,ae,the,annotated,element,of,the,cache,operation,param,operation,the,link,cache,operation,to,validate;private,void,validate,cache,operation,annotated,element,ae,cache,operation,operation,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,key,and,key,generator,attributes,have,been,set,these,attributes,are,mutually,exclusive,either,set,the,sp,el,expression,used,to,compute,the,key,at,runtime,or,set,the,name,of,the,key,generator,bean,to,use,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,throw,new,illegal,state,exception,invalid,cache,annotation,configuration,on,ae,to,string,both,cache,manager,and,cache,resolver,attributes,have,been,set,these,attributes,are,mutually,exclusive,the,cache,manager,is,used,to,configure,a,default,cache,resolver,if,none,is,set,if,a,cache,resolver,is,set,the,cache,manager,won,t,be,used
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation operation);1396272050;Apply the defaults to the specified {@link CacheOperation}.__@param operation the operation to update;public void applyDefault(CacheOperation operation) {_			if (!StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(cacheManager)) {_				operation.setCacheManager(cacheManager)__			}_			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator())_					&& StringUtils.hasText(keyGenerator)) {_				operation.setKeyGenerator(keyGenerator)__			}_			if (operation.getCacheNames().isEmpty() && cacheNames != null) {_				operation.setCacheNames(cacheNames)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,param,operation,the,operation,to,update;public,void,apply,default,cache,operation,operation,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,cache,manager,operation,set,cache,manager,cache,manager,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,string,utils,has,text,key,generator,operation,set,key,generator,key,generator,if,operation,get,cache,names,is,empty,cache,names,null,operation,set,cache,names,cache,names
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation operation);1396878069;Apply the defaults to the specified {@link CacheOperation}.__@param operation the operation to update;public void applyDefault(CacheOperation operation) {_			if (operation.getCacheNames().isEmpty() && cacheNames != null) {_				operation.setCacheNames(cacheNames)__			}_			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator())_					&& StringUtils.hasText(keyGenerator)) {_				operation.setKeyGenerator(keyGenerator)__			}__			if (isSet(operation.getCacheManager()) || isSet(operation.getCacheResolver())) {_				_			}_			else if (isSet(cacheResolver)) {_				operation.setCacheResolver(cacheResolver)__			}_			else if (isSet(cacheManager)) {_				operation.setCacheManager(cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,param,operation,the,operation,to,update;public,void,apply,default,cache,operation,operation,if,operation,get,cache,names,is,empty,cache,names,null,operation,set,cache,names,cache,names,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,string,utils,has,text,key,generator,operation,set,key,generator,key,generator,if,is,set,operation,get,cache,manager,is,set,operation,get,cache,resolver,else,if,is,set,cache,resolver,operation,set,cache,resolver,cache,resolver,else,if,is,set,cache,manager,operation,set,cache,manager,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation operation);1407445568;Apply the defaults to the specified {@link CacheOperation}._@param operation the operation to update;public void applyDefault(CacheOperation operation) {_			if (operation.getCacheNames().isEmpty() && this.cacheNames != null) {_				operation.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				operation.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(operation.getCacheManager()) || StringUtils.hasText(operation.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				operation.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				operation.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,param,operation,the,operation,to,update;public,void,apply,default,cache,operation,operation,if,operation,get,cache,names,is,empty,this,cache,names,null,operation,set,cache,names,this,cache,names,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,string,utils,has,text,this,key,generator,operation,set,key,generator,this,key,generator,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,operation,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,operation,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation operation);1433105521;Apply the defaults to the specified {@link CacheOperation}._@param operation the operation to update;public void applyDefault(CacheOperation operation) {_			if (operation.getCacheNames().isEmpty() && this.cacheNames != null) {_				operation.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				operation.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(operation.getCacheManager()) || StringUtils.hasText(operation.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				operation.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				operation.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,param,operation,the,operation,to,update;public,void,apply,default,cache,operation,operation,if,operation,get,cache,names,is,empty,this,cache,names,null,operation,set,cache,names,this,cache,names,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,string,utils,has,text,this,key,generator,operation,set,key,generator,this,key,generator,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,operation,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,operation,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation operation);1433324569;Apply the defaults to the specified {@link CacheOperation}._@param operation the operation to update;public void applyDefault(CacheOperation operation) {_			if (operation.getCacheNames().isEmpty() && this.cacheNames != null) {_				operation.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				operation.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(operation.getCacheManager()) || StringUtils.hasText(operation.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				operation.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				operation.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,param,operation,the,operation,to,update;public,void,apply,default,cache,operation,operation,if,operation,get,cache,names,is,empty,this,cache,names,null,operation,set,cache,names,this,cache,names,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,string,utils,has,text,this,key,generator,operation,set,key,generator,this,key,generator,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,operation,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,operation,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation operation);1442951852;Apply the defaults to the specified {@link CacheOperation}._@param operation the operation to update;public void applyDefault(CacheOperation operation) {_			if (operation.getCacheNames().isEmpty() && this.cacheNames != null) {_				operation.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				operation.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(operation.getCacheManager()) || StringUtils.hasText(operation.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				operation.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				operation.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,param,operation,the,operation,to,update;public,void,apply,default,cache,operation,operation,if,operation,get,cache,names,is,empty,this,cache,names,null,operation,set,cache,names,this,cache,names,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,string,utils,has,text,this,key,generator,operation,set,key,generator,this,key,generator,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,operation,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,operation,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation operation);1450701275;Apply the defaults to the specified {@link CacheOperation}._@param operation the operation to update;public void applyDefault(CacheOperation operation) {_			if (operation.getCacheNames().isEmpty() && this.cacheNames != null) {_				operation.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				operation.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(operation.getCacheManager()) || StringUtils.hasText(operation.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				operation.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				operation.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,param,operation,the,operation,to,update;public,void,apply,default,cache,operation,operation,if,operation,get,cache,names,is,empty,this,cache,names,null,operation,set,cache,names,this,cache,names,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,string,utils,has,text,this,key,generator,operation,set,key,generator,this,key,generator,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,operation,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,operation,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation operation);1451421620;Apply the defaults to the specified {@link CacheOperation}._@param operation the operation to update;public void applyDefault(CacheOperation operation) {_			if (operation.getCacheNames().isEmpty() && this.cacheNames != null) {_				operation.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				operation.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(operation.getCacheManager()) || StringUtils.hasText(operation.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				operation.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				operation.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,param,operation,the,operation,to,update;public,void,apply,default,cache,operation,operation,if,operation,get,cache,names,is,empty,this,cache,names,null,operation,set,cache,names,this,cache,names,if,string,utils,has,text,operation,get,key,string,utils,has,text,operation,get,key,generator,string,utils,has,text,this,key,generator,operation,set,key,generator,this,key,generator,if,string,utils,has,text,operation,get,cache,manager,string,utils,has,text,operation,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,operation,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,operation,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1455712279;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1458561249;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1458999130;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1460495991;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1467730834;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1477690375;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1488283735;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1493223407;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1496837955;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1498780456;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1502974979;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1534157039;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig -> public void applyDefault(CacheOperation.Builder builder);1534347014;Apply the defaults to the specified {@link CacheOperation.Builder}._@param builder the operation builder to update;public void applyDefault(CacheOperation.Builder builder) {_			if (!this.initialized) {_				CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(this.target, CacheConfig.class)__				if (annotation != null) {_					this.cacheNames = annotation.cacheNames()__					this.keyGenerator = annotation.keyGenerator()__					this.cacheManager = annotation.cacheManager()__					this.cacheResolver = annotation.cacheResolver()__				}_				this.initialized = true__			}__			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {_				builder.setCacheNames(this.cacheNames)__			}_			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&_					StringUtils.hasText(this.keyGenerator)) {_				builder.setKeyGenerator(this.keyGenerator)__			}__			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {_				_			}_			else if (StringUtils.hasText(this.cacheResolver)) {_				builder.setCacheResolver(this.cacheResolver)__			}_			else if (StringUtils.hasText(this.cacheManager)) {_				builder.setCacheManager(this.cacheManager)__			}_		};apply,the,defaults,to,the,specified,link,cache,operation,builder,param,builder,the,operation,builder,to,update;public,void,apply,default,cache,operation,builder,builder,if,this,initialized,cache,config,annotation,annotated,element,utils,find,merged,annotation,this,target,cache,config,class,if,annotation,null,this,cache,names,annotation,cache,names,this,key,generator,annotation,key,generator,this,cache,manager,annotation,cache,manager,this,cache,resolver,annotation,cache,resolver,this,initialized,true,if,builder,get,cache,names,is,empty,this,cache,names,null,builder,set,cache,names,this,cache,names,if,string,utils,has,text,builder,get,key,string,utils,has,text,builder,get,key,generator,string,utils,has,text,this,key,generator,builder,set,key,generator,this,key,generator,if,string,utils,has,text,builder,get,cache,manager,string,utils,has,text,builder,get,cache,resolver,else,if,string,utils,has,text,this,cache,resolver,builder,set,cache,resolver,this,cache,resolver,else,if,string,utils,has,text,this,cache,manager,builder,set,cache,manager,this,cache,manager
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1396272050;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}.__@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		final CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheManager(),_					annotation.keyGenerator(), annotation.cacheNames())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,final,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,manager,annotation,key,generator,annotation,cache,names,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1396878069;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}.__@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		final CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,final,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1407445568;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1433105521;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1433324569;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1442951852;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1450701275;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1451421620;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1455712279;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1458561249;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1458999130;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1460495991;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1467730834;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1477690375;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotation,utils,get,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1488283735;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotatedElementUtils.getMergedAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotated,element,utils,get,merged,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1493223407;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotated,element,utils,find,merged,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1496837955;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotated,element,utils,find,merged,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1498780456;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotated,element,utils,find,merged,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1502974979;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotated,element,utils,find,merged,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
SpringCacheAnnotationParser -> DefaultCacheConfig getDefaultCacheConfig(Class<?> target);1534157039;Provides the {@link DefaultCacheConfig} instance for the specified {@link Class}._@param target the class-level to handle_@return the default config (never {@code null});DefaultCacheConfig getDefaultCacheConfig(Class<?> target) {_		CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(target, CacheConfig.class)__		if (annotation != null) {_			return new DefaultCacheConfig(annotation.cacheNames(), annotation.keyGenerator(),_					annotation.cacheManager(), annotation.cacheResolver())__		}_		return new DefaultCacheConfig()__	};provides,the,link,default,cache,config,instance,for,the,specified,link,class,param,target,the,class,level,to,handle,return,the,default,config,never,code,null;default,cache,config,get,default,cache,config,class,target,cache,config,annotation,annotated,element,utils,find,merged,annotation,target,cache,config,class,if,annotation,null,return,new,default,cache,config,annotation,cache,names,annotation,key,generator,annotation,cache,manager,annotation,cache,resolver,return,new,default,cache,config
