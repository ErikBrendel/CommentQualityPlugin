# id;timestamp;commentText;codeText;commentWords;codeWords
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1348521358;Actually generate a JSON snapshot of the beans in the given ApplicationContexts_@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder()__		for (ConfigurableApplicationContext context : contexts) {_			result.append("{\n\"context\": \"").append(context.getId()).append("\"\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\"\n")__			}_			else {_				result.append("\"parent\": null\n")__			}_			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_						(!bd.isLazyInit() || bf.containsSingleton(beanName))) {_					result.append("{\n\"bean\": \"").append(beanName).append("\"\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\"\n")__					Class beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\"\n")__					}_					else {_						result.append("\"type\": null\n")__					}_					result.append("\"resource\": \"").append(bd.getResourceDescription()).append("\"\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}\n")__				}_			}_			result.append("}")__		}_		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,for,configurable,application,context,context,contexts,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,bd,get,resource,description,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1348671313;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			for (int i = 0_ i < beanNames.length_ i++) {_				String beanName = beanNames[i]__				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_						(!bd.isLazyInit() || bf.containsSingleton(beanName))) {_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					String resource = StringUtils.replace(bd.getResourceDescription(), "\\", "/")__					result.append("\"resource\": \"").append(resource).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					if (i < beanNames.length - 1) {_						result.append(",\n")__					}_				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,for,int,i,0,i,bean,names,length,i,string,bean,name,bean,names,i,bean,definition,bd,bf,get,bean,definition,bean,name,if,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,string,resource,string,utils,replace,bd,get,resource,description,result,append,resource,append,resource,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,if,i,bean,names,length,1,result,append,n,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1349352652;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			for (int i = 0_ i < beanNames.length_ i++) {_				String beanName = beanNames[i]__				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_						(!bd.isLazyInit() || bf.containsSingleton(beanName))) {_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					String resource = StringUtils.replace(bd.getResourceDescription(), "\\", "/")__					result.append("\"resource\": \"").append(resource).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					if (i < beanNames.length - 1) {_						result.append(",\n")__					}_				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,for,int,i,0,i,bean,names,length,i,string,bean,name,bean,names,i,bean,definition,bd,bf,get,bean,definition,bean,name,if,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,string,resource,string,utils,replace,bd,get,resource,description,result,append,resource,append,resource,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,if,i,bean,names,length,1,result,append,n,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1356735495;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			for (int i = 0_ i < beanNames.length_ i++) {_				String beanName = beanNames[i]__				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_						(!bd.isLazyInit() || bf.containsSingleton(beanName))) {_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					String resource = StringUtils.replace(bd.getResourceDescription(), "\\", "/")__					result.append("\"resource\": \"").append(resource).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					if (i < beanNames.length - 1) {_						result.append(",\n")__					}_				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,for,int,i,0,i,bean,names,length,i,string,bean,name,bean,names,i,bean,definition,bd,bf,get,bean,definition,bean,name,if,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,string,resource,string,utils,replace,bd,get,resource,description,result,append,resource,append,resource,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,if,i,bean,names,length,1,result,append,n,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1357119239;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			for (int i = 0_ i < beanNames.length_ i++) {_				String beanName = beanNames[i]__				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_						(!bd.isLazyInit() || bf.containsSingleton(beanName))) {_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					String resource = StringUtils.replace(bd.getResourceDescription(), "\\", "/")__					result.append("\"resource\": \"").append(resource).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					if (i < beanNames.length - 1) {_						result.append(",\n")__					}_				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,for,int,i,0,i,bean,names,length,i,string,bean,name,bean,names,i,bean,definition,bd,bf,get,bean,definition,bean,name,if,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,string,resource,string,utils,replace,bd,get,resource,description,result,append,resource,append,resource,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,if,i,bean,names,length,1,result,append,n,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1368482696;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			for (int i = 0_ i < beanNames.length_ i++) {_				String beanName = beanNames[i]__				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_						(!bd.isLazyInit() || bf.containsSingleton(beanName))) {_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					String resource = StringUtils.replace(bd.getResourceDescription(), "\\", "/")__					result.append("\"resource\": \"").append(resource).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					if (i < beanNames.length - 1) {_						result.append(",\n")__					}_				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,for,int,i,0,i,bean,names,length,i,string,bean,name,bean,names,i,bean,definition,bd,bf,get,bean,definition,bean,name,if,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,string,resource,string,utils,replace,bd,get,resource,description,result,append,resource,append,resource,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,if,i,bean,names,length,1,result,append,n,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1391081182;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					String resource = StringUtils.replace(bd.getResourceDescription(), "\\", "/")__					result.append("\"resource\": \"").append(resource).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,string,resource,string,utils,replace,bd,get,resource,description,result,append,resource,append,resource,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1411732895;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1411759924;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1412118625;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1467730834;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": [")__					String[] dependencies = bf.getDependenciesForBean(beanName)__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))__					if (dependencies.length > 0) {_						result.append("\"")__					}_					result.append("]\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,string,dependencies,bf,get,dependencies,for,bean,bean,name,if,dependencies,length,0,result,append,result,append,string,utils,array,to,delimited,string,dependencies,if,dependencies,length,0,result,append,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1472234663;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					result.append("\"aliases\": ")__					appendArray(result, bf.getAliases(beanName))__					result.append(",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": ")__					appendArray(result, bf.getDependenciesForBean(beanName))__					result.append("\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,result,append,aliases,append,array,result,bf,get,aliases,bean,name,result,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,append,array,result,bf,get,dependencies,for,bean,bean,name,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1477486994;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					result.append("\"aliases\": ")__					appendArray(result, bf.getAliases(beanName))__					result.append(",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": ")__					appendArray(result, bf.getDependenciesForBean(beanName))__					result.append("\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,result,append,aliases,append,array,result,bf,get,aliases,bean,name,result,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,append,array,result,bf,get,dependencies,for,bean,bean,name,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1477691361;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					result.append("\"aliases\": ")__					appendArray(result, bf.getAliases(beanName))__					result.append(",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": ")__					appendArray(result, bf.getDependenciesForBean(beanName))__					result.append("\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,result,append,aliases,append,array,result,bf,get,aliases,bean,name,result,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,append,array,result,bf,get,dependencies,for,bean,bean,name,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1477943760;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					result.append("\"aliases\": ")__					appendArray(result, bf.getAliases(beanName))__					result.append(",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": ")__					appendArray(result, bf.getDependenciesForBean(beanName))__					result.append("\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,result,append,aliases,append,array,result,bf,get,aliases,bean,name,result,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,append,array,result,bf,get,dependencies,for,bean,bean,name,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1495868221;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					result.append("\"aliases\": ")__					appendArray(result, bf.getAliases(beanName))__					result.append(",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": ")__					appendArray(result, bf.getDependenciesForBean(beanName))__					result.append("\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,result,append,aliases,append,array,result,bf,get,aliases,bean,name,result,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,append,array,result,bf,get,dependencies,for,bean,bean,name,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1496837955;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					result.append("\"aliases\": ")__					appendArray(result, bf.getAliases(beanName))__					result.append(",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": ")__					appendArray(result, bf.getDependenciesForBean(beanName))__					result.append("\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,result,append,aliases,append,array,result,bf,get,aliases,bean,name,result,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,append,array,result,bf,get,dependencies,for,bean,bean,name,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1498780456;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					result.append("\"aliases\": ")__					appendArray(result, bf.getAliases(beanName))__					result.append(",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": ")__					appendArray(result, bf.getDependenciesForBean(beanName))__					result.append("\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,result,append,aliases,append,array,result,bf,get,aliases,bean,name,result,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,append,array,result,bf,get,dependencies,for,bean,bean,name,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected String generateJson(Set<ConfigurableApplicationContext> contexts);1530174524;Actually generate a JSON snapshot of the beans in the given ApplicationContexts._<p>This implementation doesn't use any JSON parsing libraries in order to avoid_third-party library dependencies. It produces an array of context description_objects, each containing a context and parent attribute as well as a beans_attribute with nested bean description objects. Each bean object contains a_bean, scope, type and resource attribute, as well as a dependencies attribute_with a nested array of bean names that the present bean depends on._@param contexts the set of ApplicationContexts_@return the JSON document;protected String generateJson(Set<ConfigurableApplicationContext> contexts) {_		StringBuilder result = new StringBuilder("[\n")__		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator()_ it.hasNext()_) {_			ConfigurableApplicationContext context = it.next()__			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n")__			if (context.getParent() != null) {_				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")__			}_			else {_				result.append("\"parent\": null,\n")__			}_			result.append("\"beans\": [\n")__			ConfigurableListableBeanFactory bf = context.getBeanFactory()__			String[] beanNames = bf.getBeanDefinitionNames()__			boolean elementAppended = false__			for (String beanName : beanNames) {_				BeanDefinition bd = bf.getBeanDefinition(beanName)__				if (isBeanEligible(beanName, bd, bf)) {_					if (elementAppended) {_						result.append(",\n")__					}_					result.append("{\n\"bean\": \"").append(beanName).append("\",\n")__					result.append("\"aliases\": ")__					appendArray(result, bf.getAliases(beanName))__					result.append(",\n")__					String scope = bd.getScope()__					if (!StringUtils.hasText(scope)) {_						scope = BeanDefinition.SCOPE_SINGLETON__					}_					result.append("\"scope\": \"").append(scope).append("\",\n")__					Class<?> beanType = bf.getType(beanName)__					if (beanType != null) {_						result.append("\"type\": \"").append(beanType.getName()).append("\",\n")__					}_					else {_						result.append("\"type\": null,\n")__					}_					result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")__					result.append("\"dependencies\": ")__					appendArray(result, bf.getDependenciesForBean(beanName))__					result.append("\n}")__					elementAppended = true__				}_			}_			result.append("]\n")__			result.append("}")__			if (it.hasNext()) {_				result.append(",\n")__			}_		}_		result.append("]")__		return result.toString()__	};actually,generate,a,json,snapshot,of,the,beans,in,the,given,application,contexts,p,this,implementation,doesn,t,use,any,json,parsing,libraries,in,order,to,avoid,third,party,library,dependencies,it,produces,an,array,of,context,description,objects,each,containing,a,context,and,parent,attribute,as,well,as,a,beans,attribute,with,nested,bean,description,objects,each,bean,object,contains,a,bean,scope,type,and,resource,attribute,as,well,as,a,dependencies,attribute,with,a,nested,array,of,bean,names,that,the,present,bean,depends,on,param,contexts,the,set,of,application,contexts,return,the,json,document;protected,string,generate,json,set,configurable,application,context,contexts,string,builder,result,new,string,builder,n,for,iterator,configurable,application,context,it,contexts,iterator,it,has,next,configurable,application,context,context,it,next,result,append,n,context,append,context,get,id,append,n,if,context,get,parent,null,result,append,parent,append,context,get,parent,get,id,append,n,else,result,append,parent,null,n,result,append,beans,n,configurable,listable,bean,factory,bf,context,get,bean,factory,string,bean,names,bf,get,bean,definition,names,boolean,element,appended,false,for,string,bean,name,bean,names,bean,definition,bd,bf,get,bean,definition,bean,name,if,is,bean,eligible,bean,name,bd,bf,if,element,appended,result,append,n,result,append,n,bean,append,bean,name,append,n,result,append,aliases,append,array,result,bf,get,aliases,bean,name,result,append,n,string,scope,bd,get,scope,if,string,utils,has,text,scope,scope,bean,definition,result,append,scope,append,scope,append,n,class,bean,type,bf,get,type,bean,name,if,bean,type,null,result,append,type,append,bean,type,get,name,append,n,else,result,append,type,null,n,result,append,resource,append,get,escaped,resource,description,bd,append,n,result,append,dependencies,append,array,result,bf,get,dependencies,for,bean,bean,name,result,append,n,element,appended,true,result,append,n,result,append,if,it,has,next,result,append,n,result,append,return,result,to,string
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1348521358;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1348671313;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1349352652;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1356735495;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1357119239;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1368482696;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1391081182;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1411732895;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1411759924;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1412118625;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<ConfigurableApplicationContext>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,configurable,application,context,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1467730834;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1472234663;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1477486994;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1477691361;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1477943760;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1495868221;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1496837955;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1498780456;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> protected Set<ConfigurableApplicationContext> findApplicationContexts();1530174524;Find all applicable ApplicationContexts for the current application._<p>Called if no specific ApplicationContext has been set for this LiveBeansView._@return the set of ApplicationContexts;protected Set<ConfigurableApplicationContext> findApplicationContexts() {_		synchronized (applicationContexts) {_			return new LinkedHashSet<>(applicationContexts)__		}_	};find,all,applicable,application,contexts,for,the,current,application,p,called,if,no,specific,application,context,has,been,set,for,this,live,beans,view,return,the,set,of,application,contexts;protected,set,configurable,application,context,find,application,contexts,synchronized,application,contexts,return,new,linked,hash,set,application,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1356735495;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1368482696;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1391081182;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1411732895;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1411759924;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1412118625;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1467730834;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1472234663;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1477486994;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1477691361;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1477943760;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1495868221;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1496837955;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1498780456;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> @Override 	public String getSnapshotAsJson();1530174524;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;@Override_	public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;override,public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> public String getSnapshotAsJson();1348521358;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> public String getSnapshotAsJson();1348671313;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> public String getSnapshotAsJson();1349352652;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> public String getSnapshotAsJson();1357119239;Generate a JSON snapshot of current beans and their dependencies,_finding all active ApplicationContexts through {@link #findApplicationContexts()},_then delegating to {@link #generateJson(java.util.Set)}.;public String getSnapshotAsJson() {_		Set<ConfigurableApplicationContext> contexts__		if (this.applicationContext != null) {_			contexts = Collections.singleton(this.applicationContext)__		}_		else {_			contexts = findApplicationContexts()__		}_		return generateJson(contexts)__	};generate,a,json,snapshot,of,current,beans,and,their,dependencies,finding,all,active,application,contexts,through,link,find,application,contexts,then,delegating,to,link,generate,json,java,util,set;public,string,get,snapshot,as,json,set,configurable,application,context,contexts,if,this,application,context,null,contexts,collections,singleton,this,application,context,else,contexts,find,application,contexts,return,generate,json,contexts
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1391081182;Determine whether the specified bean  is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1411732895;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1411759924;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1412118625;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1467730834;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1472234663;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1477486994;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1477691361;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1477943760;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1495868221;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1496837955;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1498780456;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf);1530174524;Determine whether the specified bean is eligible for inclusion in the_LiveBeansView JSON snapshot._@param beanName the name of the bean_@param bd the corresponding bean definition_@param bf the containing bean factory_@return {@code true} if the bean is to be included_ {@code false} otherwise;protected boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {_		return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE &&_				(!bd.isLazyInit() || bf.containsSingleton(beanName)))__	};determine,whether,the,specified,bean,is,eligible,for,inclusion,in,the,live,beans,view,json,snapshot,param,bean,name,the,name,of,the,bean,param,bd,the,corresponding,bean,definition,param,bf,the,containing,bean,factory,return,code,true,if,the,bean,is,to,be,included,code,false,otherwise;protected,boolean,is,bean,eligible,string,bean,name,bean,definition,bd,configurable,bean,factory,bf,return,bd,get,role,bean,definition,bd,is,lazy,init,bf,contains,singleton,bean,name
LiveBeansView -> protected String getEscapedResourceDescription(BeanDefinition bd);1411732895;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> protected String getEscapedResourceDescription(BeanDefinition bd);1411759924;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> protected String getEscapedResourceDescription(BeanDefinition bd);1412118625;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> protected String getEscapedResourceDescription(BeanDefinition bd);1467730834;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> protected String getEscapedResourceDescription(BeanDefinition bd);1472234663;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> protected String getEscapedResourceDescription(BeanDefinition bd);1477486994;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> protected String getEscapedResourceDescription(BeanDefinition bd);1477691361;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> protected String getEscapedResourceDescription(BeanDefinition bd);1477943760;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> @Nullable 	protected String getEscapedResourceDescription(BeanDefinition bd);1495868221;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;@Nullable_	protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;nullable,protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> @Nullable 	protected String getEscapedResourceDescription(BeanDefinition bd);1496837955;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;@Nullable_	protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;nullable,protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> @Nullable 	protected String getEscapedResourceDescription(BeanDefinition bd);1498780456;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;@Nullable_	protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;nullable,protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
LiveBeansView -> @Nullable 	protected String getEscapedResourceDescription(BeanDefinition bd);1530174524;Determine a resource description for the given bean definition and_apply basic JSON escaping (backslashes, double quotes) to it._@param bd the bean definition to build the resource description for_@return the JSON-escaped resource description;@Nullable_	protected String getEscapedResourceDescription(BeanDefinition bd) {_		String resourceDescription = bd.getResourceDescription()__		if (resourceDescription == null) {_			return null__		}_		StringBuilder result = new StringBuilder(resourceDescription.length() + 16)__		for (int i = 0_ i < resourceDescription.length()_ i++) {_			char character = resourceDescription.charAt(i)__			if (character == '\\') {_				result.append('/')__			}_			else if (character == '"') {_				result.append("\\").append('"')__			}_			else {_				result.append(character)__			}_		}_		return result.toString()__	};determine,a,resource,description,for,the,given,bean,definition,and,apply,basic,json,escaping,backslashes,double,quotes,to,it,param,bd,the,bean,definition,to,build,the,resource,description,for,return,the,json,escaped,resource,description;nullable,protected,string,get,escaped,resource,description,bean,definition,bd,string,resource,description,bd,get,resource,description,if,resource,description,null,return,null,string,builder,result,new,string,builder,resource,description,length,16,for,int,i,0,i,resource,description,length,i,char,character,resource,description,char,at,i,if,character,result,append,else,if,character,result,append,append,else,result,append,character,return,result,to,string
