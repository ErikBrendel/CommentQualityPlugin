# id;timestamp;commentText;codeText;commentWords;codeWords
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1328020251;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be <code>null</code> or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to create the script proxy with_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,code,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,create,the,script,proxy,with,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1356735495;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to create the script proxy with_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,create,the,script,proxy,with,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1357119239;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to create the script proxy with_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,create,the,script,proxy,with,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1368482696;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to create the script proxy with_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,create,the,script,proxy,with,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, @Nullable Class<?>[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1495868221;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, @Nullable Class<?>[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,nullable,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, @Nullable Class<?>[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1496259743;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, @Nullable Class<?>[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,nullable,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1382746895;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class clazz = (Class) result__			try {_				return clazz.newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class [" +_						clazz.getName() + "]. Root cause is " + ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,root,cause,is,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1385412762;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class<?> clazz = (Class<?>) result__			try {_				return clazz.newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class [" +_						clazz.getName() + "]. Root cause is " + ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,root,cause,is,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1468948866;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class<?> clazz = (Class<?>) result__			try {_				return ReflectionUtils.accessibleConstructor(clazz).newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class: " + clazz.getName(), ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,reflection,utils,accessible,constructor,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,ex,else,return,result
BshScriptUtils -> static Class determineBshObjectType(String scriptSource) throws EvalError;1328020251;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be <code>null</code>._@param scriptSource the script source text_@return the scripted Java class, or <code>null</code> if none could be determined_@throws EvalError in case of BeanShell parsing failure;static Class determineBshObjectType(String scriptSource) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,code,param,script,source,the,script,source,text,return,the,scripted,java,class,or,code,null,code,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,class,determine,bsh,object,type,string,script,source,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> static Class determineBshObjectType(String scriptSource) throws EvalError;1356735495;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;static Class determineBshObjectType(String scriptSource) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,class,determine,bsh,object,type,string,script,source,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> static Class determineBshObjectType(String scriptSource) throws EvalError;1357119239;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;static Class determineBshObjectType(String scriptSource) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,class,determine,bsh,object,type,string,script,source,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> static Class determineBshObjectType(String scriptSource) throws EvalError;1368482696;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;static Class determineBshObjectType(String scriptSource) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,class,determine,bsh,object,type,string,script,source,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class<?>... scriptInterfaces) throws EvalError;1382746895;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, Class<?>... scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class<?>... scriptInterfaces) throws EvalError;1385412762;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, Class<?>... scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class<?>... scriptInterfaces) throws EvalError;1468948866;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, Class<?>... scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> @Nullable 	static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError;1495868221;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;@Nullable_	static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class<?>) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;nullable,static,class,determine,bsh,object,type,string,script,source,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> @Nullable 	static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError;1496259743;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;@Nullable_	static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class<?>) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;nullable,static,class,determine,bsh,object,type,string,script,source,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> @Nullable 	static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError;1496837955;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;@Nullable_	static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class<?>) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;nullable,static,class,determine,bsh,object,type,string,script,source,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader) 			throws EvalError;1496259743;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class<?> clazz = (Class<?>) result__			try {_				return ReflectionUtils.accessibleConstructor(clazz).newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class: " + clazz.getName(), ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,nullable,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,reflection,utils,accessible,constructor,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader) 			throws EvalError;1496837955;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class<?> clazz = (Class<?>) result__			try {_				return ReflectionUtils.accessibleConstructor(clazz).newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class: " + clazz.getName(), ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,nullable,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,reflection,utils,accessible,constructor,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader) 			throws EvalError;1498780456;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class<?> clazz = (Class<?>) result__			try {_				return ReflectionUtils.accessibleConstructor(clazz).newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class: " + clazz.getName(), ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,nullable,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,reflection,utils,accessible,constructor,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader) 			throws EvalError;1530174524;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class<?> clazz = (Class<?>) result__			try {_				return ReflectionUtils.accessibleConstructor(clazz).newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class: " + clazz.getName(), ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,nullable,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,reflection,utils,accessible,constructor,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1328020251;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be <code>null</code> or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to create the script proxy with_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class clazz = (Class) result__			try {_				return clazz.newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class [" +_						clazz.getName() + "]. Root cause is " + ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,code,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,create,the,script,proxy,with,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,root,cause,is,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1356735495;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to create the script proxy with_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class clazz = (Class) result__			try {_				return clazz.newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class [" +_						clazz.getName() + "]. Root cause is " + ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,create,the,script,proxy,with,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,root,cause,is,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1357119239;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to create the script proxy with_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class clazz = (Class) result__			try {_				return clazz.newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class [" +_						clazz.getName() + "]. Root cause is " + ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,create,the,script,proxy,with,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,root,cause,is,ex,else,return,result
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1368482696;Create a new BeanShell-scripted object from the given script source._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to create the script proxy with_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource, Class[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Object result = evaluateBshScript(scriptSource, scriptInterfaces, classLoader)__		if (result instanceof Class) {_			Class clazz = (Class) result__			try {_				return clazz.newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Could not instantiate script class [" +_						clazz.getName() + "]. Root cause is " + ex)__			}_		}_		else {_			return result__		}_	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,create,the,script,proxy,with,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,object,result,evaluate,bsh,script,script,source,script,interfaces,class,loader,if,result,instanceof,class,class,clazz,class,result,try,return,clazz,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,could,not,instantiate,script,class,clazz,get,name,root,cause,is,ex,else,return,result
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1382746895;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1385412762;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader) 			throws EvalError;1468948866;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(String scriptSource, Class<?>[] scriptInterfaces, ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			Assert.notEmpty(scriptInterfaces,_					"Given script requires a script proxy: At least one script interface is required.")__			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,class,script,interfaces,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,null,return,result,else,assert,not,empty,script,interfaces,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1328020251;Create a new BeanShell-scripted object from the given script source._<p>With this <code>createBshObject</code> variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,code,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1356735495;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1357119239;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1368482696;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1382746895;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1385412762;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1468948866;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1495868221;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1496259743;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1496837955;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1498780456;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> public static Object createBshObject(String scriptSource) throws EvalError;1530174524;Create a new BeanShell-scripted object from the given script source._<p>With this {@code createBshObject} variant, the script needs to_declare a full class or return an actual instance of the scripted object._@param scriptSource the script source text_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure;public static Object createBshObject(String scriptSource) throws EvalError {_		return createBshObject(scriptSource, null, null)__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,p,with,this,code,create,bsh,object,variant,the,script,needs,to,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,param,script,source,the,script,source,text,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;public,static,object,create,bsh,object,string,script,source,throws,eval,error,return,create,bsh,object,script,source,null,null
BshScriptUtils -> @Nullable 	static Class<?> determineBshObjectType(String scriptSource, @Nullable ClassLoader classLoader) throws EvalError;1498780456;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;@Nullable_	static Class<?> determineBshObjectType(String scriptSource, @Nullable ClassLoader classLoader) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		if (classLoader != null) {_			interpreter.setClassLoader(classLoader)__		}_		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class<?>) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;nullable,static,class,determine,bsh,object,type,string,script,source,nullable,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,if,class,loader,null,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> @Nullable 	static Class<?> determineBshObjectType(String scriptSource, @Nullable ClassLoader classLoader) throws EvalError;1530174524;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;@Nullable_	static Class<?> determineBshObjectType(String scriptSource, @Nullable ClassLoader classLoader) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		if (classLoader != null) {_			interpreter.setClassLoader(classLoader)__		}_		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class<?>) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;nullable,static,class,determine,bsh,object,type,string,script,source,nullable,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,if,class,loader,null,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class[] scriptInterfaces) throws EvalError;1328020251;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be <code>null</code> or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, Class[] scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,code,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class[] scriptInterfaces) throws EvalError;1356735495;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, Class[] scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class[] scriptInterfaces) throws EvalError;1357119239;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, Class[] scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, Class[] scriptInterfaces) throws EvalError;1368482696;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, Class[] scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError;1382746895;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,class,determine,bsh,object,type,string,script,source,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError;1385412762;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class<?>) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,class,determine,bsh,object,type,string,script,source,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError;1468948866;Evaluate the specified BeanShell script based on the given script source,_returning the Class defined by the script._<p>The script may either declare a full class or return an actual instance of_the scripted object (in which case the Class of the object will be returned)._In any other case, the returned Class will be {@code null}._@param scriptSource the script source text_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class, or {@code null} if none could be determined_@throws EvalError in case of BeanShell parsing failure;static Class<?> determineBshObjectType(String scriptSource, ClassLoader classLoader) throws EvalError {_		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result instanceof Class) {_			return (Class<?>) result__		}_		else if (result != null) {_			return result.getClass()__		}_		else {_			return null__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,returning,the,class,defined,by,the,script,p,the,script,may,either,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,class,of,the,object,will,be,returned,in,any,other,case,the,returned,class,will,be,code,null,param,script,source,the,script,source,text,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,code,null,if,none,could,be,determined,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,class,determine,bsh,object,type,string,script,source,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,instanceof,class,return,class,result,else,if,result,null,return,result,get,class,else,return,null
BshScriptUtils -> static Object evaluateBshScript( 			String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader) 			throws EvalError;1496837955;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(_			String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			if (ObjectUtils.isEmpty(scriptInterfaces)) {_				throw new IllegalArgumentException("Given script requires a script proxy: " +_						"At least one script interface is required.\nScript: " + scriptSource)__			}_			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,nullable,class,script,interfaces,nullable,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,null,return,result,else,if,object,utils,is,empty,script,interfaces,throw,new,illegal,argument,exception,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,n,script,script,source,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript( 			String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader) 			throws EvalError;1498780456;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(_			String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			if (ObjectUtils.isEmpty(scriptInterfaces)) {_				throw new IllegalArgumentException("Given script requires a script proxy: " +_						"At least one script interface is required.\nScript: " + scriptSource)__			}_			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,nullable,class,script,interfaces,nullable,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,null,return,result,else,if,object,utils,is,empty,script,interfaces,throw,new,illegal,argument,exception,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,n,script,script,source,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> static Object evaluateBshScript( 			String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader) 			throws EvalError;1530174524;Evaluate the specified BeanShell script based on the given script source,_keeping a returned script Class or script Object as-is._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@param classLoader the ClassLoader to use for evaluating the script_@return the scripted Java class or Java object_@throws EvalError in case of BeanShell parsing failure;static Object evaluateBshScript(_			String scriptSource, @Nullable Class<?>[] scriptInterfaces, @Nullable ClassLoader classLoader)_			throws EvalError {__		Assert.hasText(scriptSource, "Script source must not be empty")__		Interpreter interpreter = new Interpreter()__		interpreter.setClassLoader(classLoader)__		Object result = interpreter.eval(scriptSource)__		if (result != null) {_			return result__		}_		else {_			_			if (ObjectUtils.isEmpty(scriptInterfaces)) {_				throw new IllegalArgumentException("Given script requires a script proxy: " +_						"At least one script interface is required.\nScript: " + scriptSource)__			}_			XThis xt = (XThis) interpreter.eval("return this")__			return Proxy.newProxyInstance(classLoader, scriptInterfaces, new BshObjectInvocationHandler(xt))__		}_	};evaluate,the,specified,bean,shell,script,based,on,the,given,script,source,keeping,a,returned,script,class,or,script,object,as,is,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,param,class,loader,the,class,loader,to,use,for,evaluating,the,script,return,the,scripted,java,class,or,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure;static,object,evaluate,bsh,script,string,script,source,nullable,class,script,interfaces,nullable,class,loader,class,loader,throws,eval,error,assert,has,text,script,source,script,source,must,not,be,empty,interpreter,interpreter,new,interpreter,interpreter,set,class,loader,class,loader,object,result,interpreter,eval,script,source,if,result,null,return,result,else,if,object,utils,is,empty,script,interfaces,throw,new,illegal,argument,exception,given,script,requires,a,script,proxy,at,least,one,script,interface,is,required,n,script,script,source,xthis,xt,xthis,interpreter,eval,return,this,return,proxy,new,proxy,instance,class,loader,script,interfaces,new,bsh,object,invocation,handler,xt
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError;1495868221;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError;1496259743;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError;1496837955;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError;1498780456;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
BshScriptUtils -> public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError;1530174524;Create a new BeanShell-scripted object from the given script source,_using the default ClassLoader._<p>The script may either be a simple script that needs a corresponding proxy_generated (implementing the specified interfaces), or declare a full class_or return an actual instance of the scripted object (in which case the_specified interfaces, if any, need to be implemented by that class/instance)._@param scriptSource the script source text_@param scriptInterfaces the interfaces that the scripted Java object is_supposed to implement (may be {@code null} or empty if the script itself_declares a full class or returns an actual instance of the scripted object)_@return the scripted Java object_@throws EvalError in case of BeanShell parsing failure_@see #createBshObject(String, Class[], ClassLoader);public static Object createBshObject(String scriptSource, @Nullable Class<?>... scriptInterfaces) throws EvalError {_		return createBshObject(scriptSource, scriptInterfaces, ClassUtils.getDefaultClassLoader())__	};create,a,new,bean,shell,scripted,object,from,the,given,script,source,using,the,default,class,loader,p,the,script,may,either,be,a,simple,script,that,needs,a,corresponding,proxy,generated,implementing,the,specified,interfaces,or,declare,a,full,class,or,return,an,actual,instance,of,the,scripted,object,in,which,case,the,specified,interfaces,if,any,need,to,be,implemented,by,that,class,instance,param,script,source,the,script,source,text,param,script,interfaces,the,interfaces,that,the,scripted,java,object,is,supposed,to,implement,may,be,code,null,or,empty,if,the,script,itself,declares,a,full,class,or,returns,an,actual,instance,of,the,scripted,object,return,the,scripted,java,object,throws,eval,error,in,case,of,bean,shell,parsing,failure,see,create,bsh,object,string,class,class,loader;public,static,object,create,bsh,object,string,script,source,nullable,class,script,interfaces,throws,eval,error,return,create,bsh,object,script,source,script,interfaces,class,utils,get,default,class,loader
