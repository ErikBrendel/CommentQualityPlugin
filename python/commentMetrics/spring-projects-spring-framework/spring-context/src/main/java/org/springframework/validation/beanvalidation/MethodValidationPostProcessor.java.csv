commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the 'validated' annotation type.  * The default validated annotation type is the {@link Validated} annotation.  * <p>This setter property exists so that developers can provide their own  * (non-Spring-specific) annotation type to indicate that a class is supposed  * to be validated in the sense of applying method validation.  * @param validatedAnnotationType the desired annotation type  */ ;/**  * Set the 'validated' annotation type.  * The default validated annotation type is the {@link Validated} annotation.  * <p>This setter property exists so that developers can provide their own  * (non-Spring-specific) annotation type to indicate that a class is supposed  * to be validated in the sense of applying method validation.  * @param validatedAnnotationType the desired annotation type  */ public void setValidatedAnnotationType(Class<? extends Annotation> validatedAnnotationType) {     Assert.notNull(validatedAnnotationType, "'validatedAnnotationType' must not be null").     this.validatedAnnotationType = validatedAnnotationType. }
true;public;1;12;/**  * Set the JSR-303 Validator to delegate to for validating methods.  * <p>Default is the default ValidatorFactory's default Validator.  */ ;/**  * Set the JSR-303 Validator to delegate to for validating methods.  * <p>Default is the default ValidatorFactory's default Validator.  */ public void setValidator(Validator validator) {     // Unwrap to the native Validator with forExecutables support     if (validator instanceof LocalValidatorFactoryBean) {         this.validator = ((LocalValidatorFactoryBean) validator).getValidator().     } else if (validator instanceof SpringValidatorAdapter) {         this.validator = validator.unwrap(Validator.class).     } else {         this.validator = validator.     } }
true;public;1;3;/**  * Set the JSR-303 ValidatorFactory to delegate to for validating methods,  * using its default Validator.  * <p>Default is the default ValidatorFactory's default Validator.  * @see javax.validation.ValidatorFactory#getValidator()  */ ;/**  * Set the JSR-303 ValidatorFactory to delegate to for validating methods,  * using its default Validator.  * <p>Default is the default ValidatorFactory's default Validator.  * @see javax.validation.ValidatorFactory#getValidator()  */ public void setValidatorFactory(ValidatorFactory validatorFactory) {     this.validator = validatorFactory.getValidator(). }
false;public;0;5;;@Override public void afterPropertiesSet() {     Pointcut pointcut = new AnnotationMatchingPointcut(this.validatedAnnotationType, true).     this.advisor = new DefaultPointcutAdvisor(pointcut, createMethodValidationAdvice(this.validator)). }
true;protected;1;3;/**  * Create AOP advice for method validation purposes, to be applied  * with a pointcut for the specified 'validated' annotation.  * @param validator the JSR-303 Validator to delegate to  * @return the interceptor to use (typically, but not necessarily,  * a {@link MethodValidationInterceptor} or subclass thereof)  * @since 4.2  */ ;/**  * Create AOP advice for method validation purposes, to be applied  * with a pointcut for the specified 'validated' annotation.  * @param validator the JSR-303 Validator to delegate to  * @return the interceptor to use (typically, but not necessarily,  * a {@link MethodValidationInterceptor} or subclass thereof)  * @since 4.2  */ protected Advice createMethodValidationAdvice(@Nullable Validator validator) {     return (validator != null ? new MethodValidationInterceptor(validator) : new MethodValidationInterceptor()). }
