# id;timestamp;commentText;codeText;commentWords;codeWords
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1496837955;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (may be {@code null} if a name is given)_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		BeanDefinitionBuilder builder = (supplier != null ?_				BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier) :_				BeanDefinitionBuilder.genericBeanDefinition(beanClass))__		BeanDefinition beanDefinition = builder.applyCustomizers(customizers).getRawBeanDefinition()___		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,may,be,code,null,if,a,name,is,given,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,nullable,supplier,t,supplier,bean,definition,customizer,customizers,bean,definition,builder,builder,supplier,null,bean,definition,builder,generic,bean,definition,bean,class,supplier,bean,definition,builder,generic,bean,definition,bean,class,bean,definition,bean,definition,builder,apply,customizers,customizers,get,raw,bean,definition,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1498780456;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (may be {@code null} if a name is given)_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		BeanDefinitionBuilder builder = (supplier != null ?_				BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier) :_				BeanDefinitionBuilder.genericBeanDefinition(beanClass))__		BeanDefinition beanDefinition = builder.applyCustomizers(customizers).getRawBeanDefinition()___		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,may,be,code,null,if,a,name,is,given,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,nullable,supplier,t,supplier,bean,definition,customizer,customizers,bean,definition,builder,builder,supplier,null,bean,definition,builder,generic,bean,definition,bean,class,supplier,bean,definition,builder,generic,bean,definition,bean,class,bean,definition,bean,definition,builder,apply,customizers,customizers,get,raw,bean,definition,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1502974979;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (may be {@code null} if a name is given)_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		BeanDefinitionBuilder builder = (supplier != null ?_				BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier) :_				BeanDefinitionBuilder.genericBeanDefinition(beanClass))__		BeanDefinition beanDefinition = builder.applyCustomizers(customizers).getRawBeanDefinition()___		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,may,be,code,null,if,a,name,is,given,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,nullable,supplier,t,supplier,bean,definition,customizer,customizers,bean,definition,builder,builder,supplier,null,bean,definition,builder,generic,bean,definition,bean,class,supplier,bean,definition,builder,generic,bean,definition,bean,class,bean,definition,bean,definition,builder,apply,customizers,customizers,get,raw,bean,definition,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1519945587;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (may be {@code null} if a name is given)_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		BeanDefinitionBuilder builder = (supplier != null ?_				BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier) :_				BeanDefinitionBuilder.genericBeanDefinition(beanClass))__		BeanDefinition beanDefinition = builder.applyCustomizers(customizers).getRawBeanDefinition()___		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,may,be,code,null,if,a,name,is,given,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,nullable,supplier,t,supplier,bean,definition,customizer,customizers,bean,definition,builder,builder,supplier,null,bean,definition,builder,generic,bean,definition,bean,class,supplier,bean,definition,builder,generic,bean,definition,bean,class,bean,definition,bean,definition,builder,apply,customizers,customizers,get,raw,bean,definition,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public final <T> void registerBean( 			Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1537388383;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the factory's_{@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(_			Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {__		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean( 			Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1537391140;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the factory's_{@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(_			Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {__		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1328020251;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1356735495;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1357119239;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1367955086;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1368482696;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1377641679;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1429910443;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1472066637;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1482260272;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1482492407;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1486719481;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1495868221;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1496242568;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1496243689;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1496259743;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1496837955;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1498780456;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1502974979;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1519945587;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1537388383;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> @Override 	protected final void closeBeanFactory();1537391140;Not much to do: We hold a single internal BeanFactory that will never_get released.;@Override_	protected final void closeBeanFactory() {_		this.beanFactory.setSerializationId(null)__	};not,much,to,do,we,hold,a,single,internal,bean,factory,that,will,never,get,released;override,protected,final,void,close,bean,factory,this,bean,factory,set,serialization,id,null
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1328020251;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1356735495;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1357119239;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1367955086;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1368482696;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1377641679;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1429910443;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1472066637;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1482260272;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1482492407;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1486719481;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1495868221;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1496242568;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1496243689;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1496259743;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1496837955;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1498780456;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1502974979;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1519945587;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1537388383;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory);1537391140;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,assert,not,null,bean,factory,bean,factory,must,not,be,null,this,bean,factory,bean,factory
GenericApplicationContext -> public final <T> void registerBean( 			@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1537388383;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (resolving a public constructor_to be autowired, possibly simply the default constructor)_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(_			@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {__		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,resolving,a,public,constructor,to,be,autowired,possibly,simply,the,default,constructor,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean( 			@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1537391140;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (resolving a public constructor_to be autowired, possibly simply the default constructor)_@param customizers one or more callbacks for customizing the factory's_{@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(_			@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {__		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,resolving,a,public,constructor,to,be,autowired,possibly,simply,the,default,constructor,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public GenericApplicationContext(@Nullable ApplicationContext parent);1496837955;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(@Nullable ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,nullable,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(@Nullable ApplicationContext parent);1498780456;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(@Nullable ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,nullable,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(@Nullable ApplicationContext parent);1502974979;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(@Nullable ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,nullable,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(@Nullable ApplicationContext parent);1519945587;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(@Nullable ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,nullable,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(@Nullable ApplicationContext parent);1537388383;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(@Nullable ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,nullable,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(@Nullable ApplicationContext parent);1537391140;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(@Nullable ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,nullable,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1328020251;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1356735495;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1357119239;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1367955086;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1368482696;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1377641679;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1429910443;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1472066637;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1482260272;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1482492407;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1486719481;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1495868221;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1496242568;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1496243689;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(ApplicationContext parent);1496259743;Create a new GenericApplicationContext with the given parent._@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(ApplicationContext parent) {_		this()__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,parent,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,application,context,parent,this,set,parent,parent
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1486719481;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1495868221;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1496242568;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1496243689;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1496259743;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1496837955;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1498780456;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1502974979;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1519945587;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1537388383;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean (resolving a public constructor_to be autowired, possibly simply the default constructor)_@param customizers one or more callbacks for customizing the factory's_{@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,resolving,a,public,constructor,to,be,autowired,possibly,simply,the,default,constructor,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers);1537391140;Register a bean from the given bean class, optionally customizing its_bean definition metadata (typically declared as a lambda expression_or method reference)._@param beanClass the class of the bean (resolving a public constructor_to be autowired, possibly simply the default constructor)_@param customizers one or more callbacks for customizing the factory's_{@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,optionally,customizing,its,bean,definition,metadata,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,resolving,a,public,constructor,to,be,autowired,possibly,simply,the,default,constructor,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,bean,definition,customizer,customizers,register,bean,null,bean,class,null,customizers
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1328020251;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1356735495;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1357119239;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1367955086;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1368482696;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1377641679;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1429910443;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1472066637;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1482260272;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1482492407;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1486719481;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1495868221;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1496242568;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1496243689;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1496259743;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1496837955;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1498780456;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1502974979;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1519945587;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1537388383;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> @Override 	public Resource[] getResources(String locationPattern) throws IOException;1537391140;This implementation delegates to this context's ResourceLoader if it_implements the ResourcePatternResolver interface, falling back to the_default superclass behavior else._@see #setResourceLoader;@Override_	public Resource[] getResources(String locationPattern) throws IOException {_		if (this.resourceLoader instanceof ResourcePatternResolver) {_			return ((ResourcePatternResolver) this.resourceLoader).getResources(locationPattern)__		}_		return super.getResources(locationPattern)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,it,implements,the,resource,pattern,resolver,interface,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resources,string,location,pattern,throws,ioexception,if,this,resource,loader,instanceof,resource,pattern,resolver,return,resource,pattern,resolver,this,resource,loader,get,resources,location,pattern,return,super,get,resources,location,pattern
GenericApplicationContext -> public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1495868221;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1496242568;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1496243689;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1496259743;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1496837955;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1498780456;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1502974979;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers);1519945587;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {_		registerBean(beanName, beanClass, null, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,bean,definition,customizer,customizers,register,bean,bean,name,bean,class,null,customizers
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1328020251;Set a ResourceLoader to use for this context. If set, the context will_delegate all <code>getResource</code> calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for <code>getResources</code>_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,code,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,code,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1356735495;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1357119239;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1367955086;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1368482696;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1377641679;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1429910443;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1472066637;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1482260272;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1482492407;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1486719481;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1495868221;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1496242568;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1496243689;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1496259743;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1496837955;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1498780456;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1502974979;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1519945587;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1537388383;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> public void setResourceLoader(ResourceLoader resourceLoader);1537391140;Set a ResourceLoader to use for this context. If set, the context will_delegate all {@code getResource} calls to the given ResourceLoader._If not set, default resource loading will apply._<p>The main reason to specify a custom ResourceLoader is to resolve_resource paths (without URL prefix) in a specific fashion._The default behavior is to resolve such paths as class path locations._To resolve resource paths as file system locations, specify a_FileSystemResourceLoader here._<p>You can also pass in a full ResourcePatternResolver, which will_be autodetected by the context and used for {@code getResources}_calls as well. Else, default resource pattern matching will apply._@see #getResource_@see org.springframework.core.io.DefaultResourceLoader_@see org.springframework.core.io.FileSystemResourceLoader_@see org.springframework.core.io.support.ResourcePatternResolver_@see #getResources;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,a,resource,loader,to,use,for,this,context,if,set,the,context,will,delegate,all,code,get,resource,calls,to,the,given,resource,loader,if,not,set,default,resource,loading,will,apply,p,the,main,reason,to,specify,a,custom,resource,loader,is,to,resolve,resource,paths,without,url,prefix,in,a,specific,fashion,the,default,behavior,is,to,resolve,such,paths,as,class,path,locations,to,resolve,resource,paths,as,file,system,locations,specify,a,file,system,resource,loader,here,p,you,can,also,pass,in,a,full,resource,pattern,resolver,which,will,be,autodetected,by,the,context,and,used,for,code,get,resources,calls,as,well,else,default,resource,pattern,matching,will,apply,see,get,resource,see,org,springframework,core,io,default,resource,loader,see,org,springframework,core,io,file,system,resource,loader,see,org,springframework,core,io,support,resource,pattern,resolver,see,get,resources;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1328020251;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1356735495;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1357119239;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1367955086;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1368482696;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1377641679;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1429910443;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1472066637;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1482260272;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1482492407;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1486719481;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(ApplicationContext parent);1495868221;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, @Nullable Class<T> beanClass, Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1495868221;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (may be {@code null} if a name is given)_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, @Nullable Class<T> beanClass, Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		Assert.isTrue(beanName != null || beanClass != null, "Either bean name or bean class must be specified")__		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		BeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier)._				applyCustomizers(customizers).getRawBeanDefinition()__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,may,be,code,null,if,a,name,is,given,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,nullable,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,assert,is,true,bean,name,null,bean,class,null,either,bean,name,or,bean,class,must,be,specified,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,bean,definition,bean,definition,bean,definition,builder,generic,bean,definition,bean,class,supplier,apply,customizers,customizers,get,raw,bean,definition,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, @Nullable Class<T> beanClass, Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1496242568;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (may be {@code null} if a name is given)_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, @Nullable Class<T> beanClass, Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		Assert.isTrue(beanName != null || beanClass != null, "Either bean name or bean class must be specified")__		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		BeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier)._				applyCustomizers(customizers).getRawBeanDefinition()__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,may,be,code,null,if,a,name,is,given,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,nullable,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,assert,is,true,bean,name,null,bean,class,null,either,bean,name,or,bean,class,must,be,specified,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,bean,definition,bean,definition,bean,definition,builder,generic,bean,definition,bean,class,supplier,apply,customizers,customizers,get,raw,bean,definition,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, @Nullable Class<T> beanClass, Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1496243689;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (may be {@code null} if a name is given)_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, @Nullable Class<T> beanClass, Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		Assert.isTrue(beanName != null || beanClass != null, "Either bean name or bean class must be specified")__		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		BeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier)._				applyCustomizers(customizers).getRawBeanDefinition()__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,may,be,code,null,if,a,name,is,given,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,nullable,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,assert,is,true,bean,name,null,bean,class,null,either,bean,name,or,bean,class,must,be,specified,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,bean,definition,bean,definition,bean,definition,builder,generic,bean,definition,bean,class,supplier,apply,customizers,customizers,get,raw,bean,definition,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1496242568;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1496243689;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1496259743;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1496837955;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1498780456;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1502974979;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1519945587;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1537388383;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> @Override 	public void setParent(@Nullable ApplicationContext parent);1537391140;Set the parent of this application context, also setting_the parent of the internal BeanFactory accordingly._@see org.springframework.beans.factory.config.ConfigurableBeanFactory#setParentBeanFactory;@Override_	public void setParent(@Nullable ApplicationContext parent) {_		super.setParent(parent)__		this.beanFactory.setParentBeanFactory(getInternalParentBeanFactory())__	};set,the,parent,of,this,application,context,also,setting,the,parent,of,the,internal,bean,factory,accordingly,see,org,springframework,beans,factory,config,configurable,bean,factory,set,parent,bean,factory;override,public,void,set,parent,nullable,application,context,parent,super,set,parent,parent,this,bean,factory,set,parent,bean,factory,get,internal,parent,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1328020251;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__		this.beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory,this,bean,factory,set,autowire,candidate,resolver,new,qualifier,annotation,autowire,candidate,resolver
GenericApplicationContext -> public GenericApplicationContext();1356735495;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__		this.beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory,this,bean,factory,set,autowire,candidate,resolver,new,qualifier,annotation,autowire,candidate,resolver
GenericApplicationContext -> public GenericApplicationContext();1357119239;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__		this.beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory,this,bean,factory,set,autowire,candidate,resolver,new,qualifier,annotation,autowire,candidate,resolver
GenericApplicationContext -> public GenericApplicationContext();1367955086;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__		this.beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory,this,bean,factory,set,autowire,candidate,resolver,new,qualifier,annotation,autowire,candidate,resolver
GenericApplicationContext -> public GenericApplicationContext();1368482696;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__		this.beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory,this,bean,factory,set,autowire,candidate,resolver,new,qualifier,annotation,autowire,candidate,resolver
GenericApplicationContext -> public GenericApplicationContext();1377641679;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1429910443;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1472066637;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1482260272;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1482492407;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1486719481;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1495868221;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1496242568;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1496243689;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1496259743;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1496837955;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1498780456;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1502974979;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1519945587;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1537388383;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> public GenericApplicationContext();1537391140;Create a new GenericApplicationContext._@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext() {_		this.beanFactory = new DefaultListableBeanFactory()__	};create,a,new,generic,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,this,bean,factory,new,default,listable,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1328020251;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1356735495;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1357119239;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1367955086;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1368482696;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1377641679;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1429910443;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1472066637;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1482260272;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1482492407;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1486719481;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1495868221;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1496242568;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1496243689;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1496259743;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1496837955;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1498780456;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1502974979;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1519945587;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1537388383;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> @Override 	public final ConfigurableListableBeanFactory getBeanFactory();1537391140;Return the single internal BeanFactory held by this context_(as ConfigurableListableBeanFactory).;@Override_	public final ConfigurableListableBeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,single,internal,bean,factory,held,by,this,context,as,configurable,listable,bean,factory;override,public,final,configurable,listable,bean,factory,get,bean,factory,return,this,bean,factory
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1328020251;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1356735495;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1357119239;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1367955086;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1368482696;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1377641679;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1429910443;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1472066637;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1482260272;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1482492407;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1486719481;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1495868221;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1496242568;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1496243689;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1496259743;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1496837955;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1498780456;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1502974979;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1519945587;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1537388383;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent);1537391140;Create a new GenericApplicationContext with the given DefaultListableBeanFactory._@param beanFactory the DefaultListableBeanFactory instance to use for this context_@param parent the parent application context_@see #registerBeanDefinition_@see #refresh;public GenericApplicationContext(DefaultListableBeanFactory beanFactory, ApplicationContext parent) {_		this(beanFactory)__		setParent(parent)__	};create,a,new,generic,application,context,with,the,given,default,listable,bean,factory,param,bean,factory,the,default,listable,bean,factory,instance,to,use,for,this,context,param,parent,the,parent,application,context,see,register,bean,definition,see,refresh;public,generic,application,context,default,listable,bean,factory,bean,factory,application,context,parent,this,bean,factory,set,parent,parent
GenericApplicationContext -> public <T> void registerBean(String beanName, Class<T> beanClass, Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1482492407;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(String beanName, Class<T> beanClass, Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		Assert.isTrue(beanName != null || beanClass != null, "Either bean name or bean class must be specified")__		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		BeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier)._				applyCustomizers(customizers).getRawBeanDefinition()__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,string,bean,name,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,assert,is,true,bean,name,null,bean,class,null,either,bean,name,or,bean,class,must,be,specified,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,bean,definition,bean,definition,bean,definition,builder,generic,bean,definition,bean,class,supplier,apply,customizers,customizers,get,raw,bean,definition,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public <T> void registerBean(String beanName, Class<T> beanClass, Supplier<T> supplier, 			BeanDefinitionCustomizer... customizers);1486719481;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean (may be {@code null} if a name is given)_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(String beanName, Class<T> beanClass, Supplier<T> supplier,_			BeanDefinitionCustomizer... customizers) {__		Assert.isTrue(beanName != null || beanClass != null, "Either bean name or bean class must be specified")__		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		BeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(beanClass, supplier)._				applyCustomizers(customizers).getRawBeanDefinition()__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,may,be,code,null,if,a,name,is,given,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,string,bean,name,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,assert,is,true,bean,name,null,bean,class,null,either,bean,name,or,bean,class,must,be,specified,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,bean,definition,bean,definition,bean,definition,builder,generic,bean,definition,bean,class,supplier,apply,customizers,customizers,get,raw,bean,definition,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1328020251;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1356735495;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1357119239;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1367955086;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1368482696;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1377641679;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1429910443;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1472066637;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1482260272;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1482492407;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1486719481;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1495868221;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1496242568;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1496243689;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1496259743;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1496837955;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1498780456;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1502974979;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1519945587;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1537388383;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1537391140;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.beanFactory.setAllowCircularReferences(allowCircularReferences)__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,bean,factory,set,allow,circular,references,allow,circular,references
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1328020251;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (this.refreshed) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__		this.refreshed = true__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id,this,refreshed,true
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1356735495;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (this.refreshed) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__		this.refreshed = true__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id,this,refreshed,true
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1357119239;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (this.refreshed) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__		this.refreshed = true__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id,this,refreshed,true
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1367955086;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (this.refreshed) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__		this.refreshed = true__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id,this,refreshed,true
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1368482696;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (this.refreshed) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__		this.refreshed = true__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id,this,refreshed,true
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1377641679;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (this.refreshed) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__		this.refreshed = true__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id,this,refreshed,true
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1429910443;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1472066637;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1482260272;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1482492407;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1486719481;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1495868221;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1496242568;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1496243689;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1496259743;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1496837955;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1498780456;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1502974979;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1519945587;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1537388383;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> @Override 	protected final void refreshBeanFactory() throws IllegalStateException;1537391140;Do nothing: We hold a single internal BeanFactory and rely on callers_to register beans through our public methods (or the BeanFactory's)._@see #registerBeanDefinition;@Override_	protected final void refreshBeanFactory() throws IllegalStateException {_		if (!this.refreshed.compareAndSet(false, true)) {_			throw new IllegalStateException(_					"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once")__		}_		this.beanFactory.setSerializationId(getId())__	};do,nothing,we,hold,a,single,internal,bean,factory,and,rely,on,callers,to,register,beans,through,our,public,methods,or,the,bean,factory,s,see,register,bean,definition;override,protected,final,void,refresh,bean,factory,throws,illegal,state,exception,if,this,refreshed,compare,and,set,false,true,throw,new,illegal,state,exception,generic,application,context,does,not,support,multiple,refresh,attempts,just,call,refresh,once,this,bean,factory,set,serialization,id,get,id
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, 			@Nullable Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1537388383;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean (in case_of {@code null}, resolving a public constructor to be autowired instead)_@param customizers one or more callbacks for customizing the factory's_{@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, Class<T> beanClass,_			@Nullable Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {__		ClassDerivedBeanDefinition beanDefinition = new ClassDerivedBeanDefinition(beanClass)__		if (supplier != null) {_			beanDefinition.setInstanceSupplier(supplier)__		}_		for (BeanDefinitionCustomizer customizer : customizers) {_			customizer.customize(beanDefinition)__		}__		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,in,case,of,code,null,resolving,a,public,constructor,to,be,autowired,instead,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,nullable,supplier,t,supplier,bean,definition,customizer,customizers,class,derived,bean,definition,bean,definition,new,class,derived,bean,definition,bean,class,if,supplier,null,bean,definition,set,instance,supplier,supplier,for,bean,definition,customizer,customizer,customizers,customizer,customize,bean,definition,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, 			@Nullable Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1537391140;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._<p>This method can be overridden to adapt the registration mechanism for_all {@code registerBean} methods (since they all delegate to this one)._@param beanName the name of the bean (may be {@code null})_@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean (in case_of {@code null}, resolving a public constructor to be autowired instead)_@param customizers one or more callbacks for customizing the factory's_{@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0;public <T> void registerBean(@Nullable String beanName, Class<T> beanClass,_			@Nullable Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {__		ClassDerivedBeanDefinition beanDefinition = new ClassDerivedBeanDefinition(beanClass)__		if (supplier != null) {_			beanDefinition.setInstanceSupplier(supplier)__		}_		for (BeanDefinitionCustomizer customizer : customizers) {_			customizer.customize(beanDefinition)__		}__		String nameToUse = (beanName != null ? beanName : beanClass.getName())__		registerBeanDefinition(nameToUse, beanDefinition)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,p,this,method,can,be,overridden,to,adapt,the,registration,mechanism,for,all,code,register,bean,methods,since,they,all,delegate,to,this,one,param,bean,name,the,name,of,the,bean,may,be,code,null,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,in,case,of,code,null,resolving,a,public,constructor,to,be,autowired,instead,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0;public,t,void,register,bean,nullable,string,bean,name,class,t,bean,class,nullable,supplier,t,supplier,bean,definition,customizer,customizers,class,derived,bean,definition,bean,definition,new,class,derived,bean,definition,bean,class,if,supplier,null,bean,definition,set,instance,supplier,supplier,for,bean,definition,customizer,customizer,customizers,customizer,customize,bean,definition,string,name,to,use,bean,name,null,bean,name,bean,class,get,name,register,bean,definition,name,to,use,bean,definition
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1328020251;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1356735495;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1357119239;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1367955086;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1368482696;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1377641679;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1429910443;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1472066637;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1482260272;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1482492407;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1486719481;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1495868221;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1496242568;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1496243689;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1496259743;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1496837955;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1498780456;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1502974979;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1519945587;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1537388383;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public final DefaultListableBeanFactory getDefaultListableBeanFactory();1537391140;Return the underlying bean factory of this context,_available for registering bean definitions._<p><b>NOTE:</b> You need to call {@link #refresh()} to initialize the_bean factory and its contained beans with application context semantics_(autodetecting BeanFactoryPostProcessors, etc)._@return the internal bean factory (as DefaultListableBeanFactory);public final DefaultListableBeanFactory getDefaultListableBeanFactory() {_		return this.beanFactory__	};return,the,underlying,bean,factory,of,this,context,available,for,registering,bean,definitions,p,b,note,b,you,need,to,call,link,refresh,to,initialize,the,bean,factory,and,its,contained,beans,with,application,context,semantics,autodetecting,bean,factory,post,processors,etc,return,the,internal,bean,factory,as,default,listable,bean,factory;public,final,default,listable,bean,factory,get,default,listable,bean,factory,return,this,bean,factory
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1328020251;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1356735495;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1357119239;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1367955086;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1368482696;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1377641679;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1429910443;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1472066637;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1482260272;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1482492407;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1486719481;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1495868221;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1496242568;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1496243689;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1496259743;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1496837955;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1498780456;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1502974979;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1519945587;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1537388383;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1537391140;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@since 3.0_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding)__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,since,3,0,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,bean,factory,set,allow,bean,definition,overriding,allow,bean,definition,overriding
GenericApplicationContext -> @Override 	public Resource getResource(String location);1328020251;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1356735495;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1357119239;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1367955086;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1368482696;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1377641679;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1429910443;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1472066637;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1482260272;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1482492407;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1486719481;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1495868221;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1496242568;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1496243689;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1496259743;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1496837955;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1498780456;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1502974979;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1519945587;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1537388383;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> @Override 	public Resource getResource(String location);1537391140;This implementation delegates to this context's ResourceLoader if set,_falling back to the default superclass behavior else._@see #setResourceLoader;@Override_	public Resource getResource(String location) {_		if (this.resourceLoader != null) {_			return this.resourceLoader.getResource(location)__		}_		return super.getResource(location)__	};this,implementation,delegates,to,this,context,s,resource,loader,if,set,falling,back,to,the,default,superclass,behavior,else,see,set,resource,loader;override,public,resource,get,resource,string,location,if,this,resource,loader,null,return,this,resource,loader,get,resource,location,return,super,get,resource,location
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1486719481;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1495868221;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1496242568;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1496243689;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1496259743;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1496837955;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1498780456;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1502974979;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
GenericApplicationContext -> public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers);1519945587;Register a bean from the given bean class, using the given supplier for_obtaining a new instance (typically declared as a lambda expression or_method reference), optionally customizing its bean definition metadata_(again typically declared as a lambda expression or method reference)._@param beanClass the class of the bean_@param supplier a callback for creating an instance of the bean_@param customizers one or more callbacks for customizing the_factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag_@since 5.0_@see #registerBean(String, Class, Supplier, BeanDefinitionCustomizer...);public final <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {_		registerBean(null, beanClass, supplier, customizers)__	};register,a,bean,from,the,given,bean,class,using,the,given,supplier,for,obtaining,a,new,instance,typically,declared,as,a,lambda,expression,or,method,reference,optionally,customizing,its,bean,definition,metadata,again,typically,declared,as,a,lambda,expression,or,method,reference,param,bean,class,the,class,of,the,bean,param,supplier,a,callback,for,creating,an,instance,of,the,bean,param,customizers,one,or,more,callbacks,for,customizing,the,factory,s,link,bean,definition,e,g,setting,a,lazy,init,or,primary,flag,since,5,0,see,register,bean,string,class,supplier,bean,definition,customizer;public,final,t,void,register,bean,class,t,bean,class,supplier,t,supplier,bean,definition,customizer,customizers,register,bean,null,bean,class,supplier,customizers
