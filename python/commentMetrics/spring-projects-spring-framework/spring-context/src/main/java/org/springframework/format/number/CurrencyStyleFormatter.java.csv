commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the desired number of fraction digits.  * Default is 2.  */ ;/**  * Specify the desired number of fraction digits.  * Default is 2.  */ public void setFractionDigits(int fractionDigits) {     this.fractionDigits = fractionDigits. }
true;public;1;3;/**  * Specify the rounding mode to use for decimal parsing.  * Default is {@link java.math.RoundingMode#UNNECESSARY}.  */ ;/**  * Specify the rounding mode to use for decimal parsing.  * Default is {@link java.math.RoundingMode#UNNECESSARY}.  */ public void setRoundingMode(RoundingMode roundingMode) {     this.roundingMode = roundingMode. }
true;public;1;3;/**  * Specify the currency, if known.  */ ;/**  * Specify the currency, if known.  */ public void setCurrency(Currency currency) {     this.currency = currency. }
true;public;1;3;/**  * Specify the pattern to use to format number values.  * If not specified, the default DecimalFormat pattern is used.  * @see java.text.DecimalFormat#applyPattern(String)  */ ;/**  * Specify the pattern to use to format number values.  * If not specified, the default DecimalFormat pattern is used.  * @see java.text.DecimalFormat#applyPattern(String)  */ public void setPattern(String pattern) {     this.pattern = pattern. }
false;public;2;11;;@Override public BigDecimal parse(String text, Locale locale) throws ParseException {     BigDecimal decimal = (BigDecimal) super.parse(text, locale).     if (this.roundingMode != null) {         decimal = decimal.setScale(this.fractionDigits, this.roundingMode).     } else {         decimal = decimal.setScale(this.fractionDigits).     }     return decimal. }
false;protected;1;17;;@Override protected NumberFormat getNumberFormat(Locale locale) {     DecimalFormat format = (DecimalFormat) NumberFormat.getCurrencyInstance(locale).     format.setParseBigDecimal(true).     format.setMaximumFractionDigits(this.fractionDigits).     format.setMinimumFractionDigits(this.fractionDigits).     if (this.roundingMode != null) {         format.setRoundingMode(this.roundingMode).     }     if (this.currency != null) {         format.setCurrency(this.currency).     }     if (this.pattern != null) {         format.applyPattern(this.pattern).     }     return format. }
