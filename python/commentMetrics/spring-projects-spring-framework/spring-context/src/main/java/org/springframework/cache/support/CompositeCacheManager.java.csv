commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the CacheManagers to delegate to.  */ ;/**  * Specify the CacheManagers to delegate to.  */ public void setCacheManagers(Collection<CacheManager> cacheManagers) {     this.cacheManagers.addAll(cacheManagers). }
true;public;1;3;/**  * Indicate whether a {@link NoOpCacheManager} should be added at the end of the delegate list.  * In this case, any {@code getCache} requests not handled by the configured CacheManagers will  * be automatically handled by the {@link NoOpCacheManager} (and hence never return {@code null}).  */ ;/**  * Indicate whether a {@link NoOpCacheManager} should be added at the end of the delegate list.  * In this case, any {@code getCache} requests not handled by the configured CacheManagers will  * be automatically handled by the {@link NoOpCacheManager} (and hence never return {@code null}).  */ public void setFallbackToNoOpCache(boolean fallbackToNoOpCache) {     this.fallbackToNoOpCache = fallbackToNoOpCache. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (this.fallbackToNoOpCache) {         this.cacheManagers.add(new NoOpCacheManager()).     } }
false;public;1;11;;@Override @Nullable public Cache getCache(String name) {     for (CacheManager cacheManager : this.cacheManagers) {         Cache cache = cacheManager.getCache(name).         if (cache != null) {             return cache.         }     }     return null. }
false;public;0;8;;@Override public Collection<String> getCacheNames() {     Set<String> names = new LinkedHashSet<>().     for (CacheManager manager : this.cacheManagers) {         names.addAll(manager.getCacheNames()).     }     return Collections.unmodifiableSet(names). }
