commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * The name of the {@link AdviceMode} attribute for the annotation specified by the  * generic type {@code A}. The default is {@value #DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME},  * but subclasses may override in order to customize.  */ ;/**  * The name of the {@link AdviceMode} attribute for the annotation specified by the  * generic type {@code A}. The default is {@value #DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME},  * but subclasses may override in order to customize.  */ protected String getAdviceModeAttributeName() {     return DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME. }
true;public,final;1;19;/**  * This implementation resolves the type of annotation from generic metadata and  * validates that (a) the annotation is in fact present on the importing  * {@code @Configuration} class and (b) that the given annotation has an  * {@linkplain #getAdviceModeAttributeName() advice mode attribute} of type  * {@link AdviceMode}.  * <p>The {@link #selectImports(AdviceMode)} method is then invoked, allowing the  * concrete implementation to choose imports in a safe and convenient fashion.  * @throws IllegalArgumentException if expected annotation {@code A} is not present  * on the importing {@code @Configuration} class or if {@link #selectImports(AdviceMode)}  * returns {@code null}  */ ;/**  * This implementation resolves the type of annotation from generic metadata and  * validates that (a) the annotation is in fact present on the importing  * {@code @Configuration} class and (b) that the given annotation has an  * {@linkplain #getAdviceModeAttributeName() advice mode attribute} of type  * {@link AdviceMode}.  * <p>The {@link #selectImports(AdviceMode)} method is then invoked, allowing the  * concrete implementation to choose imports in a safe and convenient fashion.  * @throws IllegalArgumentException if expected annotation {@code A} is not present  * on the importing {@code @Configuration} class or if {@link #selectImports(AdviceMode)}  * returns {@code null}  */ @Override public final String[] selectImports(AnnotationMetadata importingClassMetadata) {     Class<?> annType = GenericTypeResolver.resolveTypeArgument(getClass(), AdviceModeImportSelector.class).     Assert.state(annType != null, "Unresolvable type argument for AdviceModeImportSelector").     AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(importingClassMetadata, annType).     if (attributes == null) {         throw new IllegalArgumentException(String.format("@%s is not present on importing class '%s' as expected", annType.getSimpleName(), importingClassMetadata.getClassName())).     }     AdviceMode adviceMode = attributes.getEnum(getAdviceModeAttributeName()).     String[] imports = selectImports(adviceMode).     if (imports == null) {         throw new IllegalArgumentException("Unknown AdviceMode: " + adviceMode).     }     return imports. }
true;protected,abstract;1;2;/**  * Determine which classes should be imported based on the given {@code AdviceMode}.  * <p>Returning {@code null} from this method indicates that the {@code AdviceMode}  * could not be handled or was unknown and that an {@code IllegalArgumentException}  * should be thrown.  * @param adviceMode the value of the {@linkplain #getAdviceModeAttributeName()  * advice mode attribute} for the annotation specified via generics.  * @return array containing classes to import (empty array if none.  * {@code null} if the given {@code AdviceMode} is unknown)  */ ;/**  * Determine which classes should be imported based on the given {@code AdviceMode}.  * <p>Returning {@code null} from this method indicates that the {@code AdviceMode}  * could not be handled or was unknown and that an {@code IllegalArgumentException}  * should be thrown.  * @param adviceMode the value of the {@linkplain #getAdviceModeAttributeName()  * advice mode attribute} for the annotation specified via generics.  * @return array containing classes to import (empty array if none.  * {@code null} if the given {@code AdviceMode} is unknown)  */ @Nullable protected abstract String[] selectImports(AdviceMode adviceMode).
