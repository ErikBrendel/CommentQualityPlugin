commented;modifiers;parameterAmount;loc;comment;code
true;public;0;2;/**  * Return the name of the target interface that this invoker operates on.  * @return the name of the target interface, or {@code null} if none  * @throws RemoteException in case of communication errors  * @see RmiServiceExporter#getServiceInterface()  */ ;/**  * Return the name of the target interface that this invoker operates on.  * @return the name of the target interface, or {@code null} if none  * @throws RemoteException in case of communication errors  * @see RmiServiceExporter#getServiceInterface()  */ @Nullable public String getTargetInterfaceName() throws RemoteException.
true;public;1;3;/**  * Apply the given invocation to the target object.  * <p>Called by  * {@link RmiClientInterceptor#doInvoke(org.aopalliance.intercept.MethodInvocation, RmiInvocationHandler)}.  * @param invocation object that encapsulates invocation parameters  * @return the object returned from the invoked method, if any  * @throws RemoteException in case of communication errors  * @throws NoSuchMethodException if the method name could not be resolved  * @throws IllegalAccessException if the method could not be accessed  * @throws InvocationTargetException if the method invocation resulted in an exception  */ ;/**  * Apply the given invocation to the target object.  * <p>Called by  * {@link RmiClientInterceptor#doInvoke(org.aopalliance.intercept.MethodInvocation, RmiInvocationHandler)}.  * @param invocation object that encapsulates invocation parameters  * @return the object returned from the invoked method, if any  * @throws RemoteException in case of communication errors  * @throws NoSuchMethodException if the method name could not be resolved  * @throws IllegalAccessException if the method could not be accessed  * @throws InvocationTargetException if the method invocation resulted in an exception  */ @Nullable public Object invoke(RemoteInvocation invocation) throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException.
