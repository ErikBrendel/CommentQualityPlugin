commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Exposes the underlying {@link GroovyBeanDefinitionReader} for convenient access  * to the {@code loadBeanDefinition} methods on it as well as the ability  * to specify an inline Groovy bean definition closure.  * @see GroovyBeanDefinitionReader#loadBeanDefinitions(org.springframework.core.io.Resource...)  * @see GroovyBeanDefinitionReader#loadBeanDefinitions(String...)  */ ;/**  * Exposes the underlying {@link GroovyBeanDefinitionReader} for convenient access  * to the {@code loadBeanDefinition} methods on it as well as the ability  * to specify an inline Groovy bean definition closure.  * @see GroovyBeanDefinitionReader#loadBeanDefinitions(org.springframework.core.io.Resource...)  * @see GroovyBeanDefinitionReader#loadBeanDefinitions(String...)  */ public final GroovyBeanDefinitionReader getReader() {     return this.reader. }
true;public;1;5;/**  * Delegates the given environment to underlying {@link GroovyBeanDefinitionReader}.  * Should be called before any call to {@code #load}.  */ ;/**  * Delegates the given environment to underlying {@link GroovyBeanDefinitionReader}.  * Should be called before any call to {@code #load}.  */ @Override public void setEnvironment(ConfigurableEnvironment environment) {     super.setEnvironment(environment).     this.reader.setEnvironment(getEnvironment()). }
true;public;1;3;/**  * Load bean definitions from the given Groovy scripts or XML files.  * <p>Note that ".xml" files will be parsed as XML content. all other kinds  * of resources will be parsed as Groovy scripts.  * @param resources one or more resources to load from  */ ;/**  * Load bean definitions from the given Groovy scripts or XML files.  * <p>Note that ".xml" files will be parsed as XML content. all other kinds  * of resources will be parsed as Groovy scripts.  * @param resources one or more resources to load from  */ public void load(Resource... resources) {     this.reader.loadBeanDefinitions(resources). }
true;public;1;3;/**  * Load bean definitions from the given Groovy scripts or XML files.  * <p>Note that ".xml" files will be parsed as XML content. all other kinds  * of resources will be parsed as Groovy scripts.  * @param resourceLocations one or more resource locations to load from  */ ;/**  * Load bean definitions from the given Groovy scripts or XML files.  * <p>Note that ".xml" files will be parsed as XML content. all other kinds  * of resources will be parsed as Groovy scripts.  * @param resourceLocations one or more resource locations to load from  */ public void load(String... resourceLocations) {     this.reader.loadBeanDefinitions(resourceLocations). }
true;public;2;7;/**  * Load bean definitions from the given Groovy scripts or XML files.  * <p>Note that ".xml" files will be parsed as XML content. all other kinds  * of resources will be parsed as Groovy scripts.  * @param relativeClass class whose package will be used as a prefix when  * loading each specified resource name  * @param resourceNames relatively-qualified names of resources to load  */ ;/**  * Load bean definitions from the given Groovy scripts or XML files.  * <p>Note that ".xml" files will be parsed as XML content. all other kinds  * of resources will be parsed as Groovy scripts.  * @param relativeClass class whose package will be used as a prefix when  * loading each specified resource name  * @param resourceNames relatively-qualified names of resources to load  */ public void load(Class<?> relativeClass, String... resourceNames) {     Resource[] resources = new Resource[resourceNames.length].     for (int i = 0. i < resourceNames.length. i++) {         resources[i] = new ClassPathResource(resourceNames[i], relativeClass).     }     load(resources). }
false;public;1;3;;// Implementation of the GroovyObject interface public void setMetaClass(MetaClass metaClass) {     this.metaClass = metaClass. }
false;public;0;3;;public MetaClass getMetaClass() {     return this.metaClass. }
false;public;2;3;;public Object invokeMethod(String name, Object args) {     return this.metaClass.invokeMethod(this, name, args). }
false;public;2;8;;public void setProperty(String property, Object newValue) {     if (newValue instanceof BeanDefinition) {         registerBeanDefinition(property, (BeanDefinition) newValue).     } else {         this.metaClass.setProperty(this, property, newValue).     } }
false;public;1;10;;@Nullable public Object getProperty(String property) {     if (containsBean(property)) {         return getBean(property).     } else if (this.contextWrapper.isReadableProperty(property)) {         return this.contextWrapper.getPropertyValue(property).     }     throw new NoSuchBeanDefinitionException(property). }
