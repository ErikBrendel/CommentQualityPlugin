commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the user's chronology (calendar system).  */ ;/**  * Set the user's chronology (calendar system).  */ public void setChronology(@Nullable Chronology chronology) {     this.chronology = chronology. }
true;public;0;4;/**  * Return the user's chronology (calendar system), if any.  */ ;/**  * Return the user's chronology (calendar system), if any.  */ @Nullable public Chronology getChronology() {     return this.chronology. }
true;public;1;3;/**  * Set the user's time zone.  * <p>Alternatively, set a {@link TimeZoneAwareLocaleContext} on  * {@link LocaleContextHolder}. This context class will fall back to  * checking the locale context if no setting has been provided here.  * @see org.springframework.context.i18n.LocaleContextHolder#getTimeZone()  * @see org.springframework.context.i18n.LocaleContextHolder#setLocaleContext  */ ;/**  * Set the user's time zone.  * <p>Alternatively, set a {@link TimeZoneAwareLocaleContext} on  * {@link LocaleContextHolder}. This context class will fall back to  * checking the locale context if no setting has been provided here.  * @see org.springframework.context.i18n.LocaleContextHolder#getTimeZone()  * @see org.springframework.context.i18n.LocaleContextHolder#setLocaleContext  */ public void setTimeZone(@Nullable DateTimeZone timeZone) {     this.timeZone = timeZone. }
true;public;0;4;/**  * Return the user's time zone, if any.  */ ;/**  * Return the user's time zone, if any.  */ @Nullable public DateTimeZone getTimeZone() {     return this.timeZone. }
true;public;1;18;/**  * Get the DateTimeFormatter with the this context's settings  * applied to the base {@code formatter}.  * @param formatter the base formatter that establishes default  * formatting rules, generally context-independent  * @return the contextual DateTimeFormatter  */ ;/**  * Get the DateTimeFormatter with the this context's settings  * applied to the base {@code formatter}.  * @param formatter the base formatter that establishes default  * formatting rules, generally context-independent  * @return the contextual DateTimeFormatter  */ public DateTimeFormatter getFormatter(DateTimeFormatter formatter) {     if (this.chronology != null) {         formatter = formatter.withChronology(this.chronology).     }     if (this.timeZone != null) {         formatter = formatter.withZone(this.timeZone).     } else {         LocaleContext localeContext = LocaleContextHolder.getLocaleContext().         if (localeContext instanceof TimeZoneAwareLocaleContext) {             TimeZone timeZone = ((TimeZoneAwareLocaleContext) localeContext).getTimeZone().             if (timeZone != null) {                 formatter = formatter.withZone(DateTimeZone.forTimeZone(timeZone)).             }         }     }     return formatter. }
