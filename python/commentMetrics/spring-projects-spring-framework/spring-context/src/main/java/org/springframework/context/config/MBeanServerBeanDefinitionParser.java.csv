commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;5;;@Override protected String resolveId(Element element, AbstractBeanDefinition definition, ParserContext parserContext) {     String id = element.getAttribute(ID_ATTRIBUTE).     return (StringUtils.hasText(id) ? id : MBEAN_SERVER_BEAN_NAME). }
false;protected;2;20;;@Override protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {     String agentId = element.getAttribute(AGENT_ID_ATTRIBUTE).     if (StringUtils.hasText(agentId)) {         RootBeanDefinition bd = new RootBeanDefinition(MBeanServerFactoryBean.class).         bd.getPropertyValues().add("agentId", agentId).         return bd.     }     AbstractBeanDefinition specialServer = findServerForSpecialEnvironment().     if (specialServer != null) {         return specialServer.     }     RootBeanDefinition bd = new RootBeanDefinition(MBeanServerFactoryBean.class).     bd.getPropertyValues().add("locateExistingServerIfPossible", Boolean.TRUE).     // Mark as infrastructure bean and attach source location.     bd.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     bd.setSource(parserContext.extractSource(element)).     return bd. }
false;static;0;14;;@Nullable static AbstractBeanDefinition findServerForSpecialEnvironment() {     if (weblogicPresent) {         RootBeanDefinition bd = new RootBeanDefinition(JndiObjectFactoryBean.class).         bd.getPropertyValues().add("jndiName", "java:comp/env/jmx/runtime").         return bd.     } else if (webspherePresent) {         return new RootBeanDefinition(WebSphereMBeanServerFactoryBean.class).     } else {         return null.     } }
