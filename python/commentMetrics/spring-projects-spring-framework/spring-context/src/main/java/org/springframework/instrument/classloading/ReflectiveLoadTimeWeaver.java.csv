# id;timestamp;commentText;codeText;commentWords;codeWords
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1328020251;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1356735495;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1357119239;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1362408075;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1368482696;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1375370826;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1385412762;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1460395177;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1467677340;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1496837955;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1498780456;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver();1532091916;Create a new ReflectiveLoadTimeWeaver for the current context class_loader, <i>which needs to support the required weaving methods</i>.;public ReflectiveLoadTimeWeaver() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,new,reflective,load,time,weaver,for,the,current,context,class,loader,i,which,needs,to,support,the,required,weaving,methods,i;public,reflective,load,time,weaver,this,class,utils,get,default,class,loader
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(@Nullable ClassLoader classLoader);1496837955;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(@Nullable ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class)__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME)__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,nullable,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(@Nullable ClassLoader classLoader);1498780456;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(@Nullable ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader___		Method addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class)__		if (addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.addTransformerMethod = addTransformerMethod___		Method getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME)__		_		if (getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_		this.getThrowawayClassLoaderMethod = getThrowawayClassLoaderMethod__	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,nullable,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,method,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,class,file,transformer,class,if,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,add,transformer,method,add,transformer,method,method,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,if,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead,this,get,throwaway,class,loader,method,get,throwaway,class,loader,method
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(@Nullable ClassLoader classLoader);1532091916;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(@Nullable ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader___		Method addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class)__		if (addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.addTransformerMethod = addTransformerMethod___		Method getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME)__		_		if (getThrowawayClassLoaderMethod == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_		this.getThrowawayClassLoaderMethod = getThrowawayClassLoaderMethod__	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,nullable,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,method,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,class,file,transformer,class,if,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,add,transformer,method,add,transformer,method,method,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,if,get,throwaway,class,loader,method,null,if,logger,is,debug,enabled,logger,debug,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead,this,get,throwaway,class,loader,method,get,throwaway,class,loader,method
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1328020251;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the <code>ClassLoader</code> to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied <code>ClassLoader</code>_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME,_				new Class [] {ClassFileTransformer.class})__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME,_				new Class[0])__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,code,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,code,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,0,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1356735495;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME,_				new Class [] {ClassFileTransformer.class})__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME,_				new Class[0])__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,0,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1357119239;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME,_				new Class [] {ClassFileTransformer.class})__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME,_				new Class[0])__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,0,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1362408075;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME,_				new Class [] {ClassFileTransformer.class})__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME,_				new Class[0])__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,0,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1368482696;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME,_				new Class [] {ClassFileTransformer.class})__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME,_				new Class[0])__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,0,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1375370826;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME,_				new Class[] {ClassFileTransformer.class})__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME, new Class[0])__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,0,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1385412762;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME,_				new Class<?>[] {ClassFileTransformer.class})__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME, new Class<?>[0])__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,new,class,0,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1460395177;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class)__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME)__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
ReflectiveLoadTimeWeaver -> public ReflectiveLoadTimeWeaver(ClassLoader classLoader);1467677340;Create a new SimpleLoadTimeWeaver for the given class loader._@param classLoader the {@code ClassLoader} to delegate to for_weaving (<i>must</i> support the required weaving methods)._@throws IllegalStateException if the supplied {@code ClassLoader}_does not support the required weaving methods;public ReflectiveLoadTimeWeaver(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.classLoader = classLoader__		this.addTransformerMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class)__		if (this.addTransformerMethod == null) {_			throw new IllegalStateException(_					"ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide an " +_					"'addTransformer(ClassFileTransformer)' method.")__		}_		this.getThrowawayClassLoaderMethod = ClassUtils.getMethodIfAvailable(_				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME)__		_		if (this.getThrowawayClassLoaderMethod == null) {_			if (logger.isInfoEnabled()) {_				logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " +_						"'getThrowawayClassLoader()' method_ SimpleThrowawayClassLoader will be used instead.")__			}_		}_	};create,a,new,simple,load,time,weaver,for,the,given,class,loader,param,class,loader,the,code,class,loader,to,delegate,to,for,weaving,i,must,i,support,the,required,weaving,methods,throws,illegal,state,exception,if,the,supplied,code,class,loader,does,not,support,the,required,weaving,methods;public,reflective,load,time,weaver,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,class,loader,class,loader,this,add,transformer,method,class,utils,get,method,if,available,this,class,loader,get,class,class,file,transformer,class,if,this,add,transformer,method,null,throw,new,illegal,state,exception,class,loader,class,loader,get,class,get,name,does,not,provide,an,add,transformer,class,file,transformer,method,this,get,throwaway,class,loader,method,class,utils,get,method,if,available,this,class,loader,get,class,if,this,get,throwaway,class,loader,method,null,if,logger,is,info,enabled,logger,info,the,class,loader,class,loader,get,class,get,name,does,not,provide,a,get,throwaway,class,loader,method,simple,throwaway,class,loader,will,be,used,instead
