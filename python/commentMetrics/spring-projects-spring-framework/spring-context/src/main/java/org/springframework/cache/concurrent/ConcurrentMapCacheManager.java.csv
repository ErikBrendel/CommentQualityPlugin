# id;timestamp;commentText;codeText;commentWords;codeWords
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1328020251;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1355352386;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1356735495;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1357119239;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1368482696;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1386673175;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1387499296;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1406207196;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1450450053;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1450788623;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1453433733;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1464621225;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1467730834;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(Collection<String> cacheNames);1467968225;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1328020251;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name)__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1355352386;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name)__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1356735495;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name)__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1357119239;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name)__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1368482696;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name)__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1386673175;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name)__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1387499296;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name, isAllowNullValues())__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name,is,allow,null,values
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1406207196;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name, isAllowNullValues())__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name,is,allow,null,values
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1450450053;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		return new ConcurrentMapCache(name, isAllowNullValues())__	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,return,new,concurrent,map,cache,name,is,allow,null,values
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1450788623;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization =_				this.storeByValue ? serialization : null__		return new ConcurrentMapCache(name, new ConcurrentHashMap<Object, Object>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,this,store,by,value,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,object,object,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1453433733;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization =_				this.storeByValue ? this.serialization : null__		return new ConcurrentMapCache(name, new ConcurrentHashMap<Object, Object>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,this,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,object,object,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1464621225;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization = (isStoreByValue() ? this.serialization : null)__		return new ConcurrentMapCache(name, new ConcurrentHashMap<Object, Object>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,is,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,object,object,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1467730834;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization = (isStoreByValue() ? this.serialization : null)__		return new ConcurrentMapCache(name, new ConcurrentHashMap<>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,is,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1467968225;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization = (isStoreByValue() ? this.serialization : null)__		return new ConcurrentMapCache(name, new ConcurrentHashMap<>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,is,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1495868221;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization = (isStoreByValue() ? this.serialization : null)__		return new ConcurrentMapCache(name, new ConcurrentHashMap<>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,is,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1496242568;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization = (isStoreByValue() ? this.serialization : null)__		return new ConcurrentMapCache(name, new ConcurrentHashMap<>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,is,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1496837955;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization = (isStoreByValue() ? this.serialization : null)__		return new ConcurrentMapCache(name, new ConcurrentHashMap<>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,is,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1500495740;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization = (isStoreByValue() ? this.serialization : null)__		return new ConcurrentMapCache(name, new ConcurrentHashMap<>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,is,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> protected Cache createConcurrentMapCache(String name);1502974979;Create a new ConcurrentMapCache instance for the specified cache name._@param name the name of the cache_@return the ConcurrentMapCache (or a decorator thereof);protected Cache createConcurrentMapCache(String name) {_		SerializationDelegate actualSerialization = (isStoreByValue() ? this.serialization : null)__		return new ConcurrentMapCache(name, new ConcurrentHashMap<>(256),_				isAllowNullValues(), actualSerialization)___	};create,a,new,concurrent,map,cache,instance,for,the,specified,cache,name,param,name,the,name,of,the,cache,return,the,concurrent,map,cache,or,a,decorator,thereof;protected,cache,create,concurrent,map,cache,string,name,serialization,delegate,actual,serialization,is,store,by,value,this,serialization,null,return,new,concurrent,map,cache,name,new,concurrent,hash,map,256,is,allow,null,values,actual,serialization
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1328020251;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1355352386;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1356735495;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1357119239;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1368482696;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1386673175;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1387499296;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1406207196;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1450450053;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1450788623;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1453433733;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1464621225;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1467730834;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1467968225;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1495868221;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1496242568;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1496837955;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1500495740;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager(String... cacheNames);1502974979;Construct a static ConcurrentMapCacheManager,_managing caches for the specified cache names only.;public ConcurrentMapCacheManager(String... cacheNames) {_		setCacheNames(Arrays.asList(cacheNames))__	};construct,a,static,concurrent,map,cache,manager,managing,caches,for,the,specified,cache,names,only;public,concurrent,map,cache,manager,string,cache,names,set,cache,names,arrays,as,list,cache,names
ConcurrentMapCacheManager -> public boolean isStoreByValue();1450788623;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable.;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1453433733;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable.;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1464621225;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable._@since 4.3;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable,since,4,3;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1467730834;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable._@since 4.3;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable,since,4,3;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1467968225;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable._@since 4.3;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable,since,4,3;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1495868221;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable._@since 4.3;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable,since,4,3;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1496242568;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable._@since 4.3;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable,since,4,3;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1496837955;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable._@since 4.3;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable,since,4,3;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1500495740;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable._@since 4.3;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable,since,4,3;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public boolean isStoreByValue();1502974979;Return whether this cache manager stores a copy of each entry or_a reference for all its caches. If store by value is enabled, any_cache entry must be serializable._@since 4.3;public boolean isStoreByValue() {_		return this.storeByValue__	};return,whether,this,cache,manager,stores,a,copy,of,each,entry,or,a,reference,for,all,its,caches,if,store,by,value,is,enabled,any,cache,entry,must,be,serializable,since,4,3;public,boolean,is,store,by,value,return,this,store,by,value
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1328020251;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1355352386;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1356735495;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1357119239;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1368482696;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1386673175;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1387499296;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1406207196;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1450450053;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1450788623;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1453433733;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1464621225;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1467730834;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1467968225;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1495868221;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1496242568;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1496837955;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1500495740;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public ConcurrentMapCacheManager();1502974979;Construct a dynamic ConcurrentMapCacheManager,_lazily creating cache instances as they are being requested.;public ConcurrentMapCacheManager() {_	};construct,a,dynamic,concurrent,map,cache,manager,lazily,creating,cache,instances,as,they,are,being,requested;public,concurrent,map,cache,manager
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1387499296;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s.;public void setAllowNullValues(boolean allowNullValues) {_		this.allowNullValues = allowNullValues__	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s;public,void,set,allow,null,values,boolean,allow,null,values,this,allow,null,values,allow,null,values
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1406207196;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {_				entry.setValue(createConcurrentMapCache(entry.getKey()))__			}_		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,for,map,entry,string,cache,entry,this,cache,map,entry,set,entry,set,value,create,concurrent,map,cache,entry,get,key
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1450450053;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {_				entry.setValue(createConcurrentMapCache(entry.getKey()))__			}_		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,for,map,entry,string,cache,entry,this,cache,map,entry,set,entry,set,value,create,concurrent,map,cache,entry,get,key
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1450788623;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {_				entry.setValue(createConcurrentMapCache(entry.getKey()))__			}_		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,for,map,entry,string,cache,entry,this,cache,map,entry,set,entry,set,value,create,concurrent,map,cache,entry,get,key
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1453433733;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {_				entry.setValue(createConcurrentMapCache(entry.getKey()))__			}_		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,for,map,entry,string,cache,entry,this,cache,map,entry,set,entry,set,value,create,concurrent,map,cache,entry,get,key
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1464621225;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			recreateCaches()__		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,recreate,caches
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1467730834;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			recreateCaches()__		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,recreate,caches
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1467968225;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			recreateCaches()__		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,recreate,caches
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1495868221;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			recreateCaches()__		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,recreate,caches
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1496242568;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			recreateCaches()__		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,recreate,caches
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1496837955;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			recreateCaches()__		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,recreate,caches
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1500495740;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			recreateCaches()__		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,recreate,caches
ConcurrentMapCacheManager -> public void setAllowNullValues(boolean allowNullValues);1502974979;Specify whether to accept and convert {@code null} values for all caches_in this cache manager._<p>Default is "true", despite ConcurrentHashMap itself not supporting {@code null}_values. An internal holder object will be used to store user-level {@code null}s._<p>Note: A change of the null-value setting will reset all existing caches,_if any, to reconfigure them with the new null-value requirement.;public void setAllowNullValues(boolean allowNullValues) {_		if (allowNullValues != this.allowNullValues) {_			this.allowNullValues = allowNullValues__			_			recreateCaches()__		}_	};specify,whether,to,accept,and,convert,code,null,values,for,all,caches,in,this,cache,manager,p,default,is,true,despite,concurrent,hash,map,itself,not,supporting,code,null,values,an,internal,holder,object,will,be,used,to,store,user,level,code,null,s,p,note,a,change,of,the,null,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,null,value,requirement;public,void,set,allow,null,values,boolean,allow,null,values,if,allow,null,values,this,allow,null,values,this,allow,null,values,allow,null,values,recreate,caches
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1387499296;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1406207196;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1450450053;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1450788623;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1453433733;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1464621225;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1467730834;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1467968225;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1495868221;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1496242568;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1496837955;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1500495740;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public boolean isAllowNullValues();1502974979;Return whether this cache manager accepts and converts {@code null} values_for all of its caches.;public boolean isAllowNullValues() {_		return this.allowNullValues__	};return,whether,this,cache,manager,accepts,and,converts,code,null,values,for,all,of,its,caches;public,boolean,is,allow,null,values,return,this,allow,null,values
ConcurrentMapCacheManager -> public void setCacheNames(@Nullable Collection<String> cacheNames);1495868221;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(@Nullable Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,nullable,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(@Nullable Collection<String> cacheNames);1496242568;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(@Nullable Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,nullable,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(@Nullable Collection<String> cacheNames);1496837955;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(@Nullable Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,nullable,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(@Nullable Collection<String> cacheNames);1500495740;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(@Nullable Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,nullable,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setCacheNames(@Nullable Collection<String> cacheNames);1502974979;Specify the set of cache names for this CacheManager's 'static' mode._<p>The number of caches and their names will be fixed after a call to this method,_with no creation of further cache regions at runtime._<p>Calling this with a {@code null} collection argument resets the_mode to 'dynamic', allowing for further creation of caches again.;public void setCacheNames(@Nullable Collection<String> cacheNames) {_		if (cacheNames != null) {_			for (String name : cacheNames) {_				this.cacheMap.put(name, createConcurrentMapCache(name))__			}_			this.dynamic = false__		}_		else {_			this.dynamic = true__		}_	};specify,the,set,of,cache,names,for,this,cache,manager,s,static,mode,p,the,number,of,caches,and,their,names,will,be,fixed,after,a,call,to,this,method,with,no,creation,of,further,cache,regions,at,runtime,p,calling,this,with,a,code,null,collection,argument,resets,the,mode,to,dynamic,allowing,for,further,creation,of,caches,again;public,void,set,cache,names,nullable,collection,string,cache,names,if,cache,names,null,for,string,name,cache,names,this,cache,map,put,name,create,concurrent,map,cache,name,this,dynamic,false,else,this,dynamic,true
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1450788623;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement.;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {_				entry.setValue(createConcurrentMapCache(entry.getKey()))__			}_		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,for,map,entry,string,cache,entry,this,cache,map,entry,set,entry,set,value,create,concurrent,map,cache,entry,get,key
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1453433733;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement.;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {_				entry.setValue(createConcurrentMapCache(entry.getKey()))__			}_		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,for,map,entry,string,cache,entry,this,cache,map,entry,set,entry,set,value,create,concurrent,map,cache,entry,get,key
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1464621225;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement._@since 4.3;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			recreateCaches()__		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement,since,4,3;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,recreate,caches
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1467730834;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement._@since 4.3;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			recreateCaches()__		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement,since,4,3;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,recreate,caches
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1467968225;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement._@since 4.3;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			recreateCaches()__		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement,since,4,3;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,recreate,caches
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1495868221;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement._@since 4.3;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			recreateCaches()__		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement,since,4,3;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,recreate,caches
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1496242568;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement._@since 4.3;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			recreateCaches()__		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement,since,4,3;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,recreate,caches
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1496837955;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement._@since 4.3;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			recreateCaches()__		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement,since,4,3;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,recreate,caches
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1500495740;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement._@since 4.3;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			recreateCaches()__		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement,since,4,3;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,recreate,caches
ConcurrentMapCacheManager -> public void setStoreByValue(boolean storeByValue);1502974979;Specify whether this cache manager stores a copy of each entry ({@code true}_or the reference ({@code false} for all of its caches._<p>Default is "false" so that the value itself is stored and no serializable_contract is required on cached values._<p>Note: A change of the store-by-value setting will reset all existing caches,_if any, to reconfigure them with the new store-by-value requirement._@since 4.3;public void setStoreByValue(boolean storeByValue) {_		if (storeByValue != this.storeByValue) {_			this.storeByValue = storeByValue__			_			recreateCaches()__		}_	};specify,whether,this,cache,manager,stores,a,copy,of,each,entry,code,true,or,the,reference,code,false,for,all,of,its,caches,p,default,is,false,so,that,the,value,itself,is,stored,and,no,serializable,contract,is,required,on,cached,values,p,note,a,change,of,the,store,by,value,setting,will,reset,all,existing,caches,if,any,to,reconfigure,them,with,the,new,store,by,value,requirement,since,4,3;public,void,set,store,by,value,boolean,store,by,value,if,store,by,value,this,store,by,value,this,store,by,value,store,by,value,recreate,caches
