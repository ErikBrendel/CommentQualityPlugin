commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the JNDI template to use for JNDI lookups.  * @see org.springframework.jndi.JndiAccessor#setJndiTemplate  */ ;/**  * Set the JNDI template to use for JNDI lookups.  * @see org.springframework.jndi.JndiAccessor#setJndiTemplate  */ public void setJndiTemplate(JndiTemplate jndiTemplate) {     this.jndiLocator.setJndiTemplate(jndiTemplate). }
true;public;1;3;/**  * Set the JNDI environment to use for JNDI lookups.  * @see org.springframework.jndi.JndiAccessor#setJndiEnvironment  */ ;/**  * Set the JNDI environment to use for JNDI lookups.  * @see org.springframework.jndi.JndiAccessor#setJndiEnvironment  */ public void setJndiEnvironment(Properties jndiEnvironment) {     this.jndiLocator.setJndiEnvironment(jndiEnvironment). }
true;public;1;3;/**  * Set whether the lookup occurs in a Java EE container, i.e. if the prefix  * "java:comp/env/" needs to be added if the JNDI name doesn't already  * contain it. PersistenceAnnotationBeanPostProcessor's default is "true".  * @see org.springframework.jndi.JndiLocatorSupport#setResourceRef  */ ;/**  * Set whether the lookup occurs in a Java EE container, i.e. if the prefix  * "java:comp/env/" needs to be added if the JNDI name doesn't already  * contain it. PersistenceAnnotationBeanPostProcessor's default is "true".  * @see org.springframework.jndi.JndiLocatorSupport#setResourceRef  */ public void setResourceRef(boolean resourceRef) {     this.jndiLocator.setResourceRef(resourceRef). }
true;public;1;3;/**  * Specify a JNDI name of the {@link java.util.concurrent.ThreadFactory} to delegate to,  * replacing the default JNDI name "java:comp/DefaultManagedThreadFactory".  * <p>This can either be a fully qualified JNDI name, or the JNDI name relative  * to the current environment naming context if "resourceRef" is set to "true".  * @see #setResourceRef  */ ;/**  * Specify a JNDI name of the {@link java.util.concurrent.ThreadFactory} to delegate to,  * replacing the default JNDI name "java:comp/DefaultManagedThreadFactory".  * <p>This can either be a fully qualified JNDI name, or the JNDI name relative  * to the current environment naming context if "resourceRef" is set to "true".  * @see #setResourceRef  */ public void setJndiName(String jndiName) {     this.jndiName = jndiName. }
false;public;0;15;;@Override public void afterPropertiesSet() throws NamingException {     if (this.jndiName != null) {         try {             this.threadFactory = this.jndiLocator.lookup(this.jndiName, ThreadFactory.class).         } catch (NamingException ex) {             if (logger.isTraceEnabled()) {                 logger.trace("Failed to retrieve [" + this.jndiName + "] from JNDI", ex).             }             logger.info("Could not find default managed thread factory in JNDI - " + "proceeding with default local thread factory").         }     } }
false;public;1;9;;@Override public Thread newThread(Runnable runnable) {     if (this.threadFactory != null) {         return this.threadFactory.newThread(runnable).     } else {         return super.newThread(runnable).     } }
