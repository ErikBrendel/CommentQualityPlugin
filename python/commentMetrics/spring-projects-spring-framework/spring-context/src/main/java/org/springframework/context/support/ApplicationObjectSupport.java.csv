commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;26;;@Override public final void setApplicationContext(@Nullable ApplicationContext context) throws BeansException {     if (context == null && !isContextRequired()) {         // Reset internal context state.         this.applicationContext = null.         this.messageSourceAccessor = null.     } else if (this.applicationContext == null) {         // Initialize with passed-in context.         if (!requiredContextClass().isInstance(context)) {             throw new ApplicationContextException("Invalid application context: needs to be of type [" + requiredContextClass().getName() + "]").         }         this.applicationContext = context.         this.messageSourceAccessor = new MessageSourceAccessor(context).         initApplicationContext(context).     } else {         // Ignore reinitialization if same context passed in.         if (this.applicationContext != context) {             throw new ApplicationContextException("Cannot reinitialize with different application context: current one is [" + this.applicationContext + "], passed-in one is [" + context + "]").         }     } }
true;protected;0;3;/**  * Determine whether this application object needs to run in an ApplicationContext.  * <p>Default is "false". Can be overridden to enforce running in a context  * (i.e. to throw IllegalStateException on accessors if outside a context).  * @see #getApplicationContext  * @see #getMessageSourceAccessor  */ ;/**  * Determine whether this application object needs to run in an ApplicationContext.  * <p>Default is "false". Can be overridden to enforce running in a context  * (i.e. to throw IllegalStateException on accessors if outside a context).  * @see #getApplicationContext  * @see #getMessageSourceAccessor  */ protected boolean isContextRequired() {     return false. }
true;protected;0;3;/**  * Determine the context class that any context passed to  * {@code setApplicationContext} must be an instance of.  * Can be overridden in subclasses.  * @see #setApplicationContext  */ ;/**  * Determine the context class that any context passed to  * {@code setApplicationContext} must be an instance of.  * Can be overridden in subclasses.  * @see #setApplicationContext  */ protected Class<?> requiredContextClass() {     return ApplicationContext.class. }
true;protected;1;3;/**  * Subclasses can override this for custom initialization behavior.  * Gets called by {@code setApplicationContext} after setting the context instance.  * <p>Note: Does <i>not</i> get called on re-initialization of the context  * but rather just on first initialization of this object's context reference.  * <p>The default implementation calls the overloaded {@link #initApplicationContext()}  * method without ApplicationContext reference.  * @param context the containing ApplicationContext  * @throws ApplicationContextException in case of initialization errors  * @throws BeansException if thrown by ApplicationContext methods  * @see #setApplicationContext  */ ;/**  * Subclasses can override this for custom initialization behavior.  * Gets called by {@code setApplicationContext} after setting the context instance.  * <p>Note: Does <i>not</i> get called on re-initialization of the context  * but rather just on first initialization of this object's context reference.  * <p>The default implementation calls the overloaded {@link #initApplicationContext()}  * method without ApplicationContext reference.  * @param context the containing ApplicationContext  * @throws ApplicationContextException in case of initialization errors  * @throws BeansException if thrown by ApplicationContext methods  * @see #setApplicationContext  */ protected void initApplicationContext(ApplicationContext context) throws BeansException {     initApplicationContext(). }
true;protected;0;2;/**  * Subclasses can override this for custom initialization behavior.  * <p>The default implementation is empty. Called by  * {@link #initApplicationContext(org.springframework.context.ApplicationContext)}.  * @throws ApplicationContextException in case of initialization errors  * @throws BeansException if thrown by ApplicationContext methods  * @see #setApplicationContext  */ ;/**  * Subclasses can override this for custom initialization behavior.  * <p>The default implementation is empty. Called by  * {@link #initApplicationContext(org.springframework.context.ApplicationContext)}.  * @throws ApplicationContextException in case of initialization errors  * @throws BeansException if thrown by ApplicationContext methods  * @see #setApplicationContext  */ protected void initApplicationContext() throws BeansException { }
true;public,final;0;8;/**  * Return the ApplicationContext that this object is associated with.  * @throws IllegalStateException if not running in an ApplicationContext  */ ;/**  * Return the ApplicationContext that this object is associated with.  * @throws IllegalStateException if not running in an ApplicationContext  */ @Nullable public final ApplicationContext getApplicationContext() throws IllegalStateException {     if (this.applicationContext == null && isContextRequired()) {         throw new IllegalStateException("ApplicationObjectSupport instance [" + this + "] does not run in an ApplicationContext").     }     return this.applicationContext. }
true;protected,final;0;5;/**  * Obtain the ApplicationContext for actual use.  * @return the ApplicationContext (never {@code null})  * @throws IllegalStateException in case of no ApplicationContext set  * @since 5.0  */ ;/**  * Obtain the ApplicationContext for actual use.  * @return the ApplicationContext (never {@code null})  * @throws IllegalStateException in case of no ApplicationContext set  * @since 5.0  */ protected final ApplicationContext obtainApplicationContext() {     ApplicationContext applicationContext = getApplicationContext().     Assert.state(applicationContext != null, "No ApplicationContext").     return applicationContext. }
true;protected,final;0;8;/**  * Return a MessageSourceAccessor for the application context  * used by this object, for easy message access.  * @throws IllegalStateException if not running in an ApplicationContext  */ ;/**  * Return a MessageSourceAccessor for the application context  * used by this object, for easy message access.  * @throws IllegalStateException if not running in an ApplicationContext  */ @Nullable protected final MessageSourceAccessor getMessageSourceAccessor() throws IllegalStateException {     if (this.messageSourceAccessor == null && isContextRequired()) {         throw new IllegalStateException("ApplicationObjectSupport instance [" + this + "] does not run in an ApplicationContext").     }     return this.messageSourceAccessor. }
