# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1328020251;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1337516454;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1352413278;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1356735495;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1357119239;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1363208506;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1368482696;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1396443880;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1398290143;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1409784938;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1437152146;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1447077603;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1448462352;Set the {@link Executor} to use when invoking methods asynchronously.;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1457735038;Set the {@link Executor} to use when invoking methods asynchronously._<p>If not specified, default executor resolution will apply: searching for a_unique {@link TaskExecutor} bean in the context, or for an {@link Executor}_bean named "taskExecutor" otherwise. If neither of the two is resolvable,_a local default executor will be created within the interceptor._@see AsyncAnnotationAdvisor#AsyncAnnotationAdvisor(Executor, AsyncUncaughtExceptionHandler)_@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory)_@see #DEFAULT_TASK_EXECUTOR_BEAN_NAME;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously,p,if,not,specified,default,executor,resolution,will,apply,searching,for,a,unique,link,task,executor,bean,in,the,context,or,for,an,link,executor,bean,named,task,executor,otherwise,if,neither,of,the,two,is,resolvable,a,local,default,executor,will,be,created,within,the,interceptor,see,async,annotation,advisor,async,annotation,advisor,executor,async,uncaught,exception,handler,see,annotation,async,execution,interceptor,get,default,executor,bean,factory,see;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1498780456;Set the {@link Executor} to use when invoking methods asynchronously._<p>If not specified, default executor resolution will apply: searching for a_unique {@link TaskExecutor} bean in the context, or for an {@link Executor}_bean named "taskExecutor" otherwise. If neither of the two is resolvable,_a local default executor will be created within the interceptor._@see AsyncAnnotationAdvisor#AsyncAnnotationAdvisor(Executor, AsyncUncaughtExceptionHandler)_@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory)_@see #DEFAULT_TASK_EXECUTOR_BEAN_NAME;public void setExecutor(Executor executor) {_		this.executor = executor__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously,p,if,not,specified,default,executor,resolution,will,apply,searching,for,a,unique,link,task,executor,bean,in,the,context,or,for,an,link,executor,bean,named,task,executor,otherwise,if,neither,of,the,two,is,resolvable,a,local,default,executor,will,be,created,within,the,interceptor,see,async,annotation,advisor,async,annotation,advisor,executor,async,uncaught,exception,handler,see,annotation,async,execution,interceptor,get,default,executor,bean,factory,see;public,void,set,executor,executor,executor,this,executor,executor
AsyncAnnotationBeanPostProcessor -> public void setExecutor(Executor executor);1531589372;Set the {@link Executor} to use when invoking methods asynchronously._<p>If not specified, default executor resolution will apply: searching for a_unique {@link TaskExecutor} bean in the context, or for an {@link Executor}_bean named "taskExecutor" otherwise. If neither of the two is resolvable,_a local default executor will be created within the interceptor._@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory)_@see #DEFAULT_TASK_EXECUTOR_BEAN_NAME;public void setExecutor(Executor executor) {_		this.executor = SingletonSupplier.of(executor)__	};set,the,link,executor,to,use,when,invoking,methods,asynchronously,p,if,not,specified,default,executor,resolution,will,apply,searching,for,a,unique,link,task,executor,bean,in,the,context,or,for,an,link,executor,bean,named,task,executor,otherwise,if,neither,of,the,two,is,resolvable,a,local,default,executor,will,be,created,within,the,interceptor,see,annotation,async,execution,interceptor,get,default,executor,bean,factory,see;public,void,set,executor,executor,executor,this,executor,singleton,supplier,of,executor
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1328020251;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_<code>javax.ejb.Asynchronous</code> annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,code,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1337516454;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_<code>javax.ejb.Asynchronous</code> annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,code,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1352413278;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_<code>javax.ejb.Asynchronous</code> annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,code,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1356735495;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1357119239;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1363208506;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1368482696;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1396443880;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1398290143;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1409784938;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1437152146;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1447077603;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1448462352;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1457735038;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1498780456;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1531589372;Set the 'async' annotation type to be detected at either class or method_level. By default, both the {@link Async} annotation and the EJB 3.1_{@code javax.ejb.Asynchronous} annotation will be detected._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method (or all_methods of a given class) should be invoked asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		this.asyncAnnotationType = asyncAnnotationType__	};set,the,async,annotation,type,to,be,detected,at,either,class,or,method,level,by,default,both,the,link,async,annotation,and,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,will,be,detected,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,or,all,methods,of,a,given,class,should,be,invoked,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,this,async,annotation,type,async,annotation,type
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1396443880;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions.;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = exceptionHandler__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,exception,handler
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1398290143;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions._@since 4.1;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = exceptionHandler__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions,since,4,1;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,exception,handler
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1409784938;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions._@since 4.1;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = exceptionHandler__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions,since,4,1;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,exception,handler
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1437152146;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions._@since 4.1;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = exceptionHandler__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions,since,4,1;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,exception,handler
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1447077603;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions._@since 4.1;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = exceptionHandler__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions,since,4,1;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,exception,handler
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1448462352;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions._@since 4.1;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = exceptionHandler__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions,since,4,1;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,exception,handler
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1457735038;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions._@since 4.1;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = exceptionHandler__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions,since,4,1;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,exception,handler
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1498780456;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions._@since 4.1;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = exceptionHandler__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions,since,4,1;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,exception,handler
AsyncAnnotationBeanPostProcessor -> public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler);1531589372;Set the {@link AsyncUncaughtExceptionHandler} to use to handle uncaught_exceptions thrown by asynchronous method executions._@since 4.1;public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {_		this.exceptionHandler = SingletonSupplier.of(exceptionHandler)__	};set,the,link,async,uncaught,exception,handler,to,use,to,handle,uncaught,exceptions,thrown,by,asynchronous,method,executions,since,4,1;public,void,set,exception,handler,async,uncaught,exception,handler,exception,handler,this,exception,handler,singleton,supplier,of,exception,handler
