# id;timestamp;commentText;codeText;commentWords;codeWords
ApplicationContext -> long getStartupDate()_;1328020251;Return the timestamp when this context was first loaded._@return the timestamp (ms) when this context was first loaded;long getStartupDate()_;return,the,timestamp,when,this,context,was,first,loaded,return,the,timestamp,ms,when,this,context,was,first,loaded;long,get,startup,date
ApplicationContext -> long getStartupDate()_;1348521358;Return the timestamp when this context was first loaded._@return the timestamp (ms) when this context was first loaded;long getStartupDate()_;return,the,timestamp,when,this,context,was,first,loaded,return,the,timestamp,ms,when,this,context,was,first,loaded;long,get,startup,date
ApplicationContext -> long getStartupDate()_;1356735495;Return the timestamp when this context was first loaded._@return the timestamp (ms) when this context was first loaded;long getStartupDate()_;return,the,timestamp,when,this,context,was,first,loaded,return,the,timestamp,ms,when,this,context,was,first,loaded;long,get,startup,date
ApplicationContext -> long getStartupDate()_;1415280583;Return the timestamp when this context was first loaded._@return the timestamp (ms) when this context was first loaded;long getStartupDate()_;return,the,timestamp,when,this,context,was,first,loaded,return,the,timestamp,ms,when,this,context,was,first,loaded;long,get,startup,date
ApplicationContext -> long getStartupDate()_;1495868221;Return the timestamp when this context was first loaded._@return the timestamp (ms) when this context was first loaded;long getStartupDate()_;return,the,timestamp,when,this,context,was,first,loaded,return,the,timestamp,ms,when,this,context,was,first,loaded;long,get,startup,date
ApplicationContext -> String getApplicationName()_;1348521358;Return a name for the deployed application that this context belongs to._@return a name for the deployed application, or the empty String by default;String getApplicationName()_;return,a,name,for,the,deployed,application,that,this,context,belongs,to,return,a,name,for,the,deployed,application,or,the,empty,string,by,default;string,get,application,name
ApplicationContext -> String getApplicationName()_;1356735495;Return a name for the deployed application that this context belongs to._@return a name for the deployed application, or the empty String by default;String getApplicationName()_;return,a,name,for,the,deployed,application,that,this,context,belongs,to,return,a,name,for,the,deployed,application,or,the,empty,string,by,default;string,get,application,name
ApplicationContext -> String getApplicationName()_;1415280583;Return a name for the deployed application that this context belongs to._@return a name for the deployed application, or the empty String by default;String getApplicationName()_;return,a,name,for,the,deployed,application,that,this,context,belongs,to,return,a,name,for,the,deployed,application,or,the,empty,string,by,default;string,get,application,name
ApplicationContext -> String getApplicationName()_;1495868221;Return a name for the deployed application that this context belongs to._@return a name for the deployed application, or the empty String by default;String getApplicationName()_;return,a,name,for,the,deployed,application,that,this,context,belongs,to,return,a,name,for,the,deployed,application,or,the,empty,string,by,default;string,get,application,name
ApplicationContext -> String getId()_;1328020251;Return the unique id of this application context._@return the unique id of the context, or <code>null</code> if none;String getId()_;return,the,unique,id,of,this,application,context,return,the,unique,id,of,the,context,or,code,null,code,if,none;string,get,id
ApplicationContext -> String getId()_;1348521358;Return the unique id of this application context._@return the unique id of the context, or <code>null</code> if none;String getId()_;return,the,unique,id,of,this,application,context,return,the,unique,id,of,the,context,or,code,null,code,if,none;string,get,id
ApplicationContext -> String getId()_;1356735495;Return the unique id of this application context._@return the unique id of the context, or {@code null} if none;String getId()_;return,the,unique,id,of,this,application,context,return,the,unique,id,of,the,context,or,code,null,if,none;string,get,id
ApplicationContext -> String getId()_;1415280583;Return the unique id of this application context._@return the unique id of the context, or {@code null} if none;String getId()_;return,the,unique,id,of,this,application,context,return,the,unique,id,of,the,context,or,code,null,if,none;string,get,id
ApplicationContext -> AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;1328020251;Expose AutowireCapableBeanFactory functionality for this context._<p>This is not typically used by application code, except for the purpose_of initializing bean instances that live outside the application context,_applying the Spring bean lifecycle (fully or partly) to them._<p>Alternatively, the internal BeanFactory exposed by the_{@link ConfigurableApplicationContext} interface offers access to the_AutowireCapableBeanFactory interface too. The present method mainly_serves as convenient, specific facility on the ApplicationContext_interface itself._@return the AutowireCapableBeanFactory for this context_@throws IllegalStateException if the context does not support_the AutowireCapableBeanFactory interface or does not hold an autowire-capable_bean factory yet (usually if <code>refresh()</code> has never been called)_@see ConfigurableApplicationContext#refresh()_@see ConfigurableApplicationContext#getBeanFactory();AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;expose,autowire,capable,bean,factory,functionality,for,this,context,p,this,is,not,typically,used,by,application,code,except,for,the,purpose,of,initializing,bean,instances,that,live,outside,the,application,context,applying,the,spring,bean,lifecycle,fully,or,partly,to,them,p,alternatively,the,internal,bean,factory,exposed,by,the,link,configurable,application,context,interface,offers,access,to,the,autowire,capable,bean,factory,interface,too,the,present,method,mainly,serves,as,convenient,specific,facility,on,the,application,context,interface,itself,return,the,autowire,capable,bean,factory,for,this,context,throws,illegal,state,exception,if,the,context,does,not,support,the,autowire,capable,bean,factory,interface,or,does,not,hold,an,autowire,capable,bean,factory,yet,usually,if,code,refresh,code,has,never,been,called,see,configurable,application,context,refresh,see,configurable,application,context,get,bean,factory;autowire,capable,bean,factory,get,autowire,capable,bean,factory,throws,illegal,state,exception
ApplicationContext -> AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;1348521358;Expose AutowireCapableBeanFactory functionality for this context._<p>This is not typically used by application code, except for the purpose_of initializing bean instances that live outside the application context,_applying the Spring bean lifecycle (fully or partly) to them._<p>Alternatively, the internal BeanFactory exposed by the_{@link ConfigurableApplicationContext} interface offers access to the_AutowireCapableBeanFactory interface too. The present method mainly_serves as convenient, specific facility on the ApplicationContext_interface itself._@return the AutowireCapableBeanFactory for this context_@throws IllegalStateException if the context does not support_the AutowireCapableBeanFactory interface or does not hold an autowire-capable_bean factory yet (usually if <code>refresh()</code> has never been called)_@see ConfigurableApplicationContext#refresh()_@see ConfigurableApplicationContext#getBeanFactory();AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;expose,autowire,capable,bean,factory,functionality,for,this,context,p,this,is,not,typically,used,by,application,code,except,for,the,purpose,of,initializing,bean,instances,that,live,outside,the,application,context,applying,the,spring,bean,lifecycle,fully,or,partly,to,them,p,alternatively,the,internal,bean,factory,exposed,by,the,link,configurable,application,context,interface,offers,access,to,the,autowire,capable,bean,factory,interface,too,the,present,method,mainly,serves,as,convenient,specific,facility,on,the,application,context,interface,itself,return,the,autowire,capable,bean,factory,for,this,context,throws,illegal,state,exception,if,the,context,does,not,support,the,autowire,capable,bean,factory,interface,or,does,not,hold,an,autowire,capable,bean,factory,yet,usually,if,code,refresh,code,has,never,been,called,see,configurable,application,context,refresh,see,configurable,application,context,get,bean,factory;autowire,capable,bean,factory,get,autowire,capable,bean,factory,throws,illegal,state,exception
ApplicationContext -> AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;1356735495;Expose AutowireCapableBeanFactory functionality for this context._<p>This is not typically used by application code, except for the purpose_of initializing bean instances that live outside the application context,_applying the Spring bean lifecycle (fully or partly) to them._<p>Alternatively, the internal BeanFactory exposed by the_{@link ConfigurableApplicationContext} interface offers access to the_AutowireCapableBeanFactory interface too. The present method mainly_serves as convenient, specific facility on the ApplicationContext_interface itself._@return the AutowireCapableBeanFactory for this context_@throws IllegalStateException if the context does not support_the AutowireCapableBeanFactory interface or does not hold an autowire-capable_bean factory yet (usually if {@code refresh()} has never been called)_@see ConfigurableApplicationContext#refresh()_@see ConfigurableApplicationContext#getBeanFactory();AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;expose,autowire,capable,bean,factory,functionality,for,this,context,p,this,is,not,typically,used,by,application,code,except,for,the,purpose,of,initializing,bean,instances,that,live,outside,the,application,context,applying,the,spring,bean,lifecycle,fully,or,partly,to,them,p,alternatively,the,internal,bean,factory,exposed,by,the,link,configurable,application,context,interface,offers,access,to,the,autowire,capable,bean,factory,interface,too,the,present,method,mainly,serves,as,convenient,specific,facility,on,the,application,context,interface,itself,return,the,autowire,capable,bean,factory,for,this,context,throws,illegal,state,exception,if,the,context,does,not,support,the,autowire,capable,bean,factory,interface,or,does,not,hold,an,autowire,capable,bean,factory,yet,usually,if,code,refresh,has,never,been,called,see,configurable,application,context,refresh,see,configurable,application,context,get,bean,factory;autowire,capable,bean,factory,get,autowire,capable,bean,factory,throws,illegal,state,exception
ApplicationContext -> AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;1415280583;Expose AutowireCapableBeanFactory functionality for this context._<p>This is not typically used by application code, except for the purpose of_initializing bean instances that live outside of the application context,_applying the Spring bean lifecycle (fully or partly) to them._<p>Alternatively, the internal BeanFactory exposed by the_{@link ConfigurableApplicationContext} interface offers access to the_{@link AutowireCapableBeanFactory} interface too. The present method mainly_serves as a convenient, specific facility on the ApplicationContext interface._<p><b>NOTE: As of 4.2, this method will consistently throw IllegalStateException_after the application context has been closed.</b> In current Spring Framework_versions, only refreshable application contexts behave that way_ as of 4.2,_all application context implementations will be required to comply._@return the AutowireCapableBeanFactory for this context_@throws IllegalStateException if the context does not support the_{@link AutowireCapableBeanFactory} interface, or does not hold an_autowire-capable bean factory yet (e.g. if {@code refresh()} has_never been called), or if the context has been closed already_@see ConfigurableApplicationContext#refresh()_@see ConfigurableApplicationContext#getBeanFactory();AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;expose,autowire,capable,bean,factory,functionality,for,this,context,p,this,is,not,typically,used,by,application,code,except,for,the,purpose,of,initializing,bean,instances,that,live,outside,of,the,application,context,applying,the,spring,bean,lifecycle,fully,or,partly,to,them,p,alternatively,the,internal,bean,factory,exposed,by,the,link,configurable,application,context,interface,offers,access,to,the,link,autowire,capable,bean,factory,interface,too,the,present,method,mainly,serves,as,a,convenient,specific,facility,on,the,application,context,interface,p,b,note,as,of,4,2,this,method,will,consistently,throw,illegal,state,exception,after,the,application,context,has,been,closed,b,in,current,spring,framework,versions,only,refreshable,application,contexts,behave,that,way,as,of,4,2,all,application,context,implementations,will,be,required,to,comply,return,the,autowire,capable,bean,factory,for,this,context,throws,illegal,state,exception,if,the,context,does,not,support,the,link,autowire,capable,bean,factory,interface,or,does,not,hold,an,autowire,capable,bean,factory,yet,e,g,if,code,refresh,has,never,been,called,or,if,the,context,has,been,closed,already,see,configurable,application,context,refresh,see,configurable,application,context,get,bean,factory;autowire,capable,bean,factory,get,autowire,capable,bean,factory,throws,illegal,state,exception
ApplicationContext -> AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;1495868221;Expose AutowireCapableBeanFactory functionality for this context._<p>This is not typically used by application code, except for the purpose of_initializing bean instances that live outside of the application context,_applying the Spring bean lifecycle (fully or partly) to them._<p>Alternatively, the internal BeanFactory exposed by the_{@link ConfigurableApplicationContext} interface offers access to the_{@link AutowireCapableBeanFactory} interface too. The present method mainly_serves as a convenient, specific facility on the ApplicationContext interface._<p><b>NOTE: As of 4.2, this method will consistently throw IllegalStateException_after the application context has been closed.</b> In current Spring Framework_versions, only refreshable application contexts behave that way_ as of 4.2,_all application context implementations will be required to comply._@return the AutowireCapableBeanFactory for this context_@throws IllegalStateException if the context does not support the_{@link AutowireCapableBeanFactory} interface, or does not hold an_autowire-capable bean factory yet (e.g. if {@code refresh()} has_never been called), or if the context has been closed already_@see ConfigurableApplicationContext#refresh()_@see ConfigurableApplicationContext#getBeanFactory();AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException_;expose,autowire,capable,bean,factory,functionality,for,this,context,p,this,is,not,typically,used,by,application,code,except,for,the,purpose,of,initializing,bean,instances,that,live,outside,of,the,application,context,applying,the,spring,bean,lifecycle,fully,or,partly,to,them,p,alternatively,the,internal,bean,factory,exposed,by,the,link,configurable,application,context,interface,offers,access,to,the,link,autowire,capable,bean,factory,interface,too,the,present,method,mainly,serves,as,a,convenient,specific,facility,on,the,application,context,interface,p,b,note,as,of,4,2,this,method,will,consistently,throw,illegal,state,exception,after,the,application,context,has,been,closed,b,in,current,spring,framework,versions,only,refreshable,application,contexts,behave,that,way,as,of,4,2,all,application,context,implementations,will,be,required,to,comply,return,the,autowire,capable,bean,factory,for,this,context,throws,illegal,state,exception,if,the,context,does,not,support,the,link,autowire,capable,bean,factory,interface,or,does,not,hold,an,autowire,capable,bean,factory,yet,e,g,if,code,refresh,has,never,been,called,or,if,the,context,has,been,closed,already,see,configurable,application,context,refresh,see,configurable,application,context,get,bean,factory;autowire,capable,bean,factory,get,autowire,capable,bean,factory,throws,illegal,state,exception
ApplicationContext -> String getDisplayName()_;1328020251;Return a friendly name for this context._@return a display name for this context (never <code>null</code>);String getDisplayName()_;return,a,friendly,name,for,this,context,return,a,display,name,for,this,context,never,code,null,code;string,get,display,name
ApplicationContext -> String getDisplayName()_;1348521358;Return a friendly name for this context._@return a display name for this context (never <code>null</code>);String getDisplayName()_;return,a,friendly,name,for,this,context,return,a,display,name,for,this,context,never,code,null,code;string,get,display,name
ApplicationContext -> String getDisplayName()_;1356735495;Return a friendly name for this context._@return a display name for this context (never {@code null});String getDisplayName()_;return,a,friendly,name,for,this,context,return,a,display,name,for,this,context,never,code,null;string,get,display,name
ApplicationContext -> String getDisplayName()_;1415280583;Return a friendly name for this context._@return a display name for this context (never {@code null});String getDisplayName()_;return,a,friendly,name,for,this,context,return,a,display,name,for,this,context,never,code,null;string,get,display,name
ApplicationContext -> String getDisplayName()_;1495868221;Return a friendly name for this context._@return a display name for this context (never {@code null});String getDisplayName()_;return,a,friendly,name,for,this,context,return,a,display,name,for,this,context,never,code,null;string,get,display,name
ApplicationContext -> ApplicationContext getParent()_;1328020251;Return the parent context, or <code>null</code> if there is no parent_and this is the root of the context hierarchy._@return the parent context, or <code>null</code> if there is no parent;ApplicationContext getParent()_;return,the,parent,context,or,code,null,code,if,there,is,no,parent,and,this,is,the,root,of,the,context,hierarchy,return,the,parent,context,or,code,null,code,if,there,is,no,parent;application,context,get,parent
ApplicationContext -> ApplicationContext getParent()_;1348521358;Return the parent context, or <code>null</code> if there is no parent_and this is the root of the context hierarchy._@return the parent context, or <code>null</code> if there is no parent;ApplicationContext getParent()_;return,the,parent,context,or,code,null,code,if,there,is,no,parent,and,this,is,the,root,of,the,context,hierarchy,return,the,parent,context,or,code,null,code,if,there,is,no,parent;application,context,get,parent
ApplicationContext -> ApplicationContext getParent()_;1356735495;Return the parent context, or {@code null} if there is no parent_and this is the root of the context hierarchy._@return the parent context, or {@code null} if there is no parent;ApplicationContext getParent()_;return,the,parent,context,or,code,null,if,there,is,no,parent,and,this,is,the,root,of,the,context,hierarchy,return,the,parent,context,or,code,null,if,there,is,no,parent;application,context,get,parent
ApplicationContext -> ApplicationContext getParent()_;1415280583;Return the parent context, or {@code null} if there is no parent_and this is the root of the context hierarchy._@return the parent context, or {@code null} if there is no parent;ApplicationContext getParent()_;return,the,parent,context,or,code,null,if,there,is,no,parent,and,this,is,the,root,of,the,context,hierarchy,return,the,parent,context,or,code,null,if,there,is,no,parent;application,context,get,parent
