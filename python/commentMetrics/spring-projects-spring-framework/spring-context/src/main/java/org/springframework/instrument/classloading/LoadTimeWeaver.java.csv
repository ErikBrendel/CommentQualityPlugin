commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Add a {@code ClassFileTransformer} to be applied by this  * {@code LoadTimeWeaver}.  * @param transformer the {@code ClassFileTransformer} to add  */ ;/**  * Add a {@code ClassFileTransformer} to be applied by this  * {@code LoadTimeWeaver}.  * @param transformer the {@code ClassFileTransformer} to add  */ void addTransformer(ClassFileTransformer transformer).
true;;0;1;/**  * Return a {@code ClassLoader} that supports instrumentation  * through AspectJ-style load-time weaving based on user-defined  * {@link ClassFileTransformer ClassFileTransformers}.  * <p>May be the current {@code ClassLoader}, or a {@code ClassLoader}  * created by this {@link LoadTimeWeaver} instance.  * @return the {@code ClassLoader} which will expose  * instrumented classes according to the registered transformers  */ ;/**  * Return a {@code ClassLoader} that supports instrumentation  * through AspectJ-style load-time weaving based on user-defined  * {@link ClassFileTransformer ClassFileTransformers}.  * <p>May be the current {@code ClassLoader}, or a {@code ClassLoader}  * created by this {@link LoadTimeWeaver} instance.  * @return the {@code ClassLoader} which will expose  * instrumented classes according to the registered transformers  */ ClassLoader getInstrumentableClassLoader().
true;;0;1;/**  * Return a throwaway {@code ClassLoader}, enabling classes to be  * loaded and inspected without affecting the parent {@code ClassLoader}.  * <p>Should <i>not</i> return the same instance of the {@link ClassLoader}  * returned from an invocation of {@link #getInstrumentableClassLoader()}.  * @return a temporary throwaway {@code ClassLoader}. should return  * a new instance for each call, with no existing state  */ ;/**  * Return a throwaway {@code ClassLoader}, enabling classes to be  * loaded and inspected without affecting the parent {@code ClassLoader}.  * <p>Should <i>not</i> return the same instance of the {@link ClassLoader}  * returned from an invocation of {@link #getInstrumentableClassLoader()}.  * @return a temporary throwaway {@code ClassLoader}. should return  * a new instance for each call, with no existing state  */ ClassLoader getThrowawayClassLoader().
