commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the result value returned by a successful invocation of the  * target method, if any.  * <p>This setter is intended for JavaBean-style deserialization.  * Use {@link #RemoteInvocationResult(Object)} otherwise.  * @see #RemoteInvocationResult()  */ ;/**  * Set the result value returned by a successful invocation of the  * target method, if any.  * <p>This setter is intended for JavaBean-style deserialization.  * Use {@link #RemoteInvocationResult(Object)} otherwise.  * @see #RemoteInvocationResult()  */ public void setValue(@Nullable Object value) {     this.value = value. }
true;public;0;4;/**  * Return the result value returned by a successful invocation  * of the target method, if any.  * @see #hasException  */ ;/**  * Return the result value returned by a successful invocation  * of the target method, if any.  * @see #hasException  */ @Nullable public Object getValue() {     return this.value. }
true;public;1;3;/**  * Set the exception thrown by an unsuccessful invocation of the  * target method, if any.  * <p>This setter is intended for JavaBean-style deserialization.  * Use {@link #RemoteInvocationResult(Throwable)} otherwise.  * @see #RemoteInvocationResult()  */ ;/**  * Set the exception thrown by an unsuccessful invocation of the  * target method, if any.  * <p>This setter is intended for JavaBean-style deserialization.  * Use {@link #RemoteInvocationResult(Throwable)} otherwise.  * @see #RemoteInvocationResult()  */ public void setException(@Nullable Throwable exception) {     this.exception = exception. }
true;public;0;4;/**  * Return the exception thrown by an unsuccessful invocation  * of the target method, if any.  * @see #hasException  */ ;/**  * Return the exception thrown by an unsuccessful invocation  * of the target method, if any.  * @see #hasException  */ @Nullable public Throwable getException() {     return this.exception. }
true;public;0;3;/**  * Return whether this invocation result holds an exception.  * If this returns {@code false}, the result value applies  * (even if it is {@code null}).  * @see #getValue  * @see #getException  */ ;/**  * Return whether this invocation result holds an exception.  * If this returns {@code false}, the result value applies  * (even if it is {@code null}).  * @see #getValue  * @see #getException  */ public boolean hasException() {     return (this.exception != null). }
true;public;0;3;/**  * Return whether this invocation result holds an InvocationTargetException,  * thrown by an invocation of the target method itself.  * @see #hasException()  */ ;/**  * Return whether this invocation result holds an InvocationTargetException,  * thrown by an invocation of the target method itself.  * @see #hasException()  */ public boolean hasInvocationTargetException() {     return (this.exception instanceof InvocationTargetException). }
true;public;0;14;/**  * Recreate the invocation result, either returning the result value  * in case of a successful invocation of the target method, or  * rethrowing the exception thrown by the target method.  * @return the result value, if any  * @throws Throwable the exception, if any  */ ;/**  * Recreate the invocation result, either returning the result value  * in case of a successful invocation of the target method, or  * rethrowing the exception thrown by the target method.  * @return the result value, if any  * @throws Throwable the exception, if any  */ @Nullable public Object recreate() throws Throwable {     if (this.exception != null) {         Throwable exToThrow = this.exception.         if (this.exception instanceof InvocationTargetException) {             exToThrow = ((InvocationTargetException) this.exception).getTargetException().         }         RemoteInvocationUtils.fillInClientStackTraceIfPossible(exToThrow).         throw exToThrow.     } else {         return this.value.     } }
