commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to look up the JNDI object on startup. Default is "true".  * <p>Can be turned off to allow for late availability of the JNDI object.  * In this case, the JNDI object will be fetched on first access.  * @see #setCache  */ ;/**  * Set whether to look up the JNDI object on startup. Default is "true".  * <p>Can be turned off to allow for late availability of the JNDI object.  * In this case, the JNDI object will be fetched on first access.  * @see #setCache  */ public void setLookupOnStartup(boolean lookupOnStartup) {     this.lookupOnStartup = lookupOnStartup. }
true;public;1;3;/**  * Set whether to cache the JNDI object once it has been located.  * Default is "true".  * <p>Can be turned off to allow for hot redeployment of JNDI objects.  * In this case, the JNDI object will be fetched for each invocation.  * @see #setLookupOnStartup  */ ;/**  * Set whether to cache the JNDI object once it has been located.  * Default is "true".  * <p>Can be turned off to allow for hot redeployment of JNDI objects.  * In this case, the JNDI object will be fetched for each invocation.  * @see #setLookupOnStartup  */ public void setCache(boolean cache) {     this.cache = cache. }
false;public;0;13;;@Override public void afterPropertiesSet() throws NamingException {     super.afterPropertiesSet().     if (this.lookupOnStartup) {         Object object = lookup().         if (this.cache) {             this.cachedObject = object.         } else {             this.targetClass = object.getClass().         }     } }
false;public;0;13;;@Override @Nullable public Class<?> getTargetClass() {     if (this.cachedObject != null) {         return this.cachedObject.getClass().     } else if (this.targetClass != null) {         return this.targetClass.     } else {         return getExpectedType().     } }
false;public;0;4;;@Override public boolean isStatic() {     return (this.cachedObject != null). }
false;public;0;20;;@Override @Nullable public Object getTarget() {     try {         if (this.lookupOnStartup || !this.cache) {             return (this.cachedObject != null ? this.cachedObject : lookup()).         } else {             synchronized (this) {                 if (this.cachedObject == null) {                     this.cachedObject = lookup().                 }                 return this.cachedObject.             }         }     } catch (NamingException ex) {         throw new JndiLookupFailureException("JndiObjectTargetSource failed to obtain new target object", ex).     } }
false;public;1;3;;@Override public void releaseTarget(Object target) { }
