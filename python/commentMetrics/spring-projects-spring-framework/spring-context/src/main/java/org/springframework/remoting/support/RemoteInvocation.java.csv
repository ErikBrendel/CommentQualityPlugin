commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the name of the target method.  * <p>This setter is intended for JavaBean-style deserialization.  */ ;/**  * Set the name of the target method.  * <p>This setter is intended for JavaBean-style deserialization.  */ public void setMethodName(String methodName) {     this.methodName = methodName. }
true;public;0;3;/**  * Return the name of the target method.  */ ;/**  * Return the name of the target method.  */ public String getMethodName() {     return this.methodName. }
true;public;1;3;/**  * Set the parameter types of the target method.  * <p>This setter is intended for JavaBean-style deserialization.  */ ;/**  * Set the parameter types of the target method.  * <p>This setter is intended for JavaBean-style deserialization.  */ public void setParameterTypes(Class<?>[] parameterTypes) {     this.parameterTypes = parameterTypes. }
true;public;0;3;/**  * Return the parameter types of the target method.  */ ;/**  * Return the parameter types of the target method.  */ public Class<?>[] getParameterTypes() {     return this.parameterTypes. }
true;public;1;3;/**  * Set the arguments for the target method call.  * <p>This setter is intended for JavaBean-style deserialization.  */ ;/**  * Set the arguments for the target method call.  * <p>This setter is intended for JavaBean-style deserialization.  */ public void setArguments(Object[] arguments) {     this.arguments = arguments. }
true;public;0;3;/**  * Return the arguments for the target method call.  */ ;/**  * Return the arguments for the target method call.  */ public Object[] getArguments() {     return this.arguments. }
true;public;2;9;/**  * Add an additional invocation attribute. Useful to add additional  * invocation context without having to subclass RemoteInvocation.  * <p>Attribute keys have to be unique, and no overriding of existing  * attributes is allowed.  * <p>The implementation avoids to unnecessarily create the attributes  * Map, to minimize serialization size.  * @param key the attribute key  * @param value the attribute value  * @throws IllegalStateException if the key is already bound  */ ;/**  * Add an additional invocation attribute. Useful to add additional  * invocation context without having to subclass RemoteInvocation.  * <p>Attribute keys have to be unique, and no overriding of existing  * attributes is allowed.  * <p>The implementation avoids to unnecessarily create the attributes  * Map, to minimize serialization size.  * @param key the attribute key  * @param value the attribute value  * @throws IllegalStateException if the key is already bound  */ public void addAttribute(String key, Serializable value) throws IllegalStateException {     if (this.attributes == null) {         this.attributes = new HashMap<>().     }     if (this.attributes.containsKey(key)) {         throw new IllegalStateException("There is already an attribute with key '" + key + "' bound").     }     this.attributes.put(key, value). }
true;public;1;7;/**  * Retrieve the attribute for the given key, if any.  * <p>The implementation avoids to unnecessarily create the attributes  * Map, to minimize serialization size.  * @param key the attribute key  * @return the attribute value, or {@code null} if not defined  */ ;/**  * Retrieve the attribute for the given key, if any.  * <p>The implementation avoids to unnecessarily create the attributes  * Map, to minimize serialization size.  * @param key the attribute key  * @return the attribute value, or {@code null} if not defined  */ @Nullable public Serializable getAttribute(String key) {     if (this.attributes == null) {         return null.     }     return this.attributes.get(key). }
true;public;1;3;/**  * Set the attributes Map. Only here for special purposes:  * Preferably, use {@link #addAttribute} and {@link #getAttribute}.  * @param attributes the attributes Map  * @see #addAttribute  * @see #getAttribute  */ ;/**  * Set the attributes Map. Only here for special purposes:  * Preferably, use {@link #addAttribute} and {@link #getAttribute}.  * @param attributes the attributes Map  * @see #addAttribute  * @see #getAttribute  */ public void setAttributes(@Nullable Map<String, Serializable> attributes) {     this.attributes = attributes. }
true;public;0;4;/**  * Return the attributes Map. Mainly here for debugging purposes:  * Preferably, use {@link #addAttribute} and {@link #getAttribute}.  * @return the attributes Map, or {@code null} if none created  * @see #addAttribute  * @see #getAttribute  */ ;/**  * Return the attributes Map. Mainly here for debugging purposes:  * Preferably, use {@link #addAttribute} and {@link #getAttribute}.  * @return the attributes Map, or {@code null} if none created  * @see #addAttribute  * @see #getAttribute  */ @Nullable public Map<String, Serializable> getAttributes() {     return this.attributes. }
true;public;1;6;/**  * Perform this invocation on the given target object.  * Typically called when a RemoteInvocation is received on the server.  * @param targetObject the target object to apply the invocation to  * @return the invocation result  * @throws NoSuchMethodException if the method name could not be resolved  * @throws IllegalAccessException if the method could not be accessed  * @throws InvocationTargetException if the method invocation resulted in an exception  * @see java.lang.reflect.Method#invoke  */ ;/**  * Perform this invocation on the given target object.  * Typically called when a RemoteInvocation is received on the server.  * @param targetObject the target object to apply the invocation to  * @return the invocation result  * @throws NoSuchMethodException if the method name could not be resolved  * @throws IllegalAccessException if the method could not be accessed  * @throws InvocationTargetException if the method invocation resulted in an exception  * @see java.lang.reflect.Method#invoke  */ public Object invoke(Object targetObject) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {     Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes).     return method.invoke(targetObject, this.arguments). }
false;public;0;5;;@Override public String toString() {     return "RemoteInvocation: method name '" + this.methodName + "'. parameter types " + ClassUtils.classNamesToString(this.parameterTypes). }
