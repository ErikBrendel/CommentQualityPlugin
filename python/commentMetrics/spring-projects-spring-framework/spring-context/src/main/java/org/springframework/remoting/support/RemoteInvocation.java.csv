# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteInvocation -> public Map<String, Serializable> getAttributes();1328020251;Return the attributes Map. Mainly here for debugging purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@return the attributes Map, or <code>null</code> if none created_@see #addAttribute_@see #getAttribute;public Map<String, Serializable> getAttributes() {_		return this.attributes__	};return,the,attributes,map,mainly,here,for,debugging,purposes,preferably,use,link,add,attribute,and,link,get,attribute,return,the,attributes,map,or,code,null,code,if,none,created,see,add,attribute,see,get,attribute;public,map,string,serializable,get,attributes,return,this,attributes
RemoteInvocation -> public Map<String, Serializable> getAttributes();1356735495;Return the attributes Map. Mainly here for debugging purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@return the attributes Map, or {@code null} if none created_@see #addAttribute_@see #getAttribute;public Map<String, Serializable> getAttributes() {_		return this.attributes__	};return,the,attributes,map,mainly,here,for,debugging,purposes,preferably,use,link,add,attribute,and,link,get,attribute,return,the,attributes,map,or,code,null,if,none,created,see,add,attribute,see,get,attribute;public,map,string,serializable,get,attributes,return,this,attributes
RemoteInvocation -> public Map<String, Serializable> getAttributes();1385412762;Return the attributes Map. Mainly here for debugging purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@return the attributes Map, or {@code null} if none created_@see #addAttribute_@see #getAttribute;public Map<String, Serializable> getAttributes() {_		return this.attributes__	};return,the,attributes,map,mainly,here,for,debugging,purposes,preferably,use,link,add,attribute,and,link,get,attribute,return,the,attributes,map,or,code,null,if,none,created,see,add,attribute,see,get,attribute;public,map,string,serializable,get,attributes,return,this,attributes
RemoteInvocation -> public Map<String, Serializable> getAttributes();1390304956;Return the attributes Map. Mainly here for debugging purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@return the attributes Map, or {@code null} if none created_@see #addAttribute_@see #getAttribute;public Map<String, Serializable> getAttributes() {_		return this.attributes__	};return,the,attributes,map,mainly,here,for,debugging,purposes,preferably,use,link,add,attribute,and,link,get,attribute,return,the,attributes,map,or,code,null,if,none,created,see,add,attribute,see,get,attribute;public,map,string,serializable,get,attributes,return,this,attributes
RemoteInvocation -> public Map<String, Serializable> getAttributes();1467730834;Return the attributes Map. Mainly here for debugging purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@return the attributes Map, or {@code null} if none created_@see #addAttribute_@see #getAttribute;public Map<String, Serializable> getAttributes() {_		return this.attributes__	};return,the,attributes,map,mainly,here,for,debugging,purposes,preferably,use,link,add,attribute,and,link,get,attribute,return,the,attributes,map,or,code,null,if,none,created,see,add,attribute,see,get,attribute;public,map,string,serializable,get,attributes,return,this,attributes
RemoteInvocation -> public Class[] getParameterTypes();1328020251;Return the parameter types of the target method.;public Class[] getParameterTypes() {_		return this.parameterTypes__	};return,the,parameter,types,of,the,target,method;public,class,get,parameter,types,return,this,parameter,types
RemoteInvocation -> public Class[] getParameterTypes();1356735495;Return the parameter types of the target method.;public Class[] getParameterTypes() {_		return this.parameterTypes__	};return,the,parameter,types,of,the,target,method;public,class,get,parameter,types,return,this,parameter,types
RemoteInvocation -> public void setArguments(Object[] arguments);1328020251;Set the arguments for the target method call.;public void setArguments(Object[] arguments) {_		this.arguments = arguments__	};set,the,arguments,for,the,target,method,call;public,void,set,arguments,object,arguments,this,arguments,arguments
RemoteInvocation -> public void setArguments(Object[] arguments);1356735495;Set the arguments for the target method call.;public void setArguments(Object[] arguments) {_		this.arguments = arguments__	};set,the,arguments,for,the,target,method,call;public,void,set,arguments,object,arguments,this,arguments,arguments
RemoteInvocation -> public void setArguments(Object[] arguments);1385412762;Set the arguments for the target method call.;public void setArguments(Object[] arguments) {_		this.arguments = arguments__	};set,the,arguments,for,the,target,method,call;public,void,set,arguments,object,arguments,this,arguments,arguments
RemoteInvocation -> public void setArguments(Object[] arguments);1390304956;Set the arguments for the target method call._<p>This setter is intended for JavaBean-style deserialization.;public void setArguments(Object[] arguments) {_		this.arguments = arguments__	};set,the,arguments,for,the,target,method,call,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,arguments,object,arguments,this,arguments,arguments
RemoteInvocation -> public void setArguments(Object[] arguments);1467730834;Set the arguments for the target method call._<p>This setter is intended for JavaBean-style deserialization.;public void setArguments(Object[] arguments) {_		this.arguments = arguments__	};set,the,arguments,for,the,target,method,call,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,arguments,object,arguments,this,arguments,arguments
RemoteInvocation -> public void setArguments(Object[] arguments);1495868221;Set the arguments for the target method call._<p>This setter is intended for JavaBean-style deserialization.;public void setArguments(Object[] arguments) {_		this.arguments = arguments__	};set,the,arguments,for,the,target,method,call,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,arguments,object,arguments,this,arguments,arguments
RemoteInvocation -> public void setArguments(Object[] arguments);1500448076;Set the arguments for the target method call._<p>This setter is intended for JavaBean-style deserialization.;public void setArguments(Object[] arguments) {_		this.arguments = arguments__	};set,the,arguments,for,the,target,method,call,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,arguments,object,arguments,this,arguments,arguments
RemoteInvocation -> public void setArguments(Object[] arguments);1530174524;Set the arguments for the target method call._<p>This setter is intended for JavaBean-style deserialization.;public void setArguments(Object[] arguments) {_		this.arguments = arguments__	};set,the,arguments,for,the,target,method,call,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,arguments,object,arguments,this,arguments,arguments
RemoteInvocation -> @Nullable 	public Map<String, Serializable> getAttributes();1495868221;Return the attributes Map. Mainly here for debugging purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@return the attributes Map, or {@code null} if none created_@see #addAttribute_@see #getAttribute;@Nullable_	public Map<String, Serializable> getAttributes() {_		return this.attributes__	};return,the,attributes,map,mainly,here,for,debugging,purposes,preferably,use,link,add,attribute,and,link,get,attribute,return,the,attributes,map,or,code,null,if,none,created,see,add,attribute,see,get,attribute;nullable,public,map,string,serializable,get,attributes,return,this,attributes
RemoteInvocation -> @Nullable 	public Map<String, Serializable> getAttributes();1500448076;Return the attributes Map. Mainly here for debugging purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@return the attributes Map, or {@code null} if none created_@see #addAttribute_@see #getAttribute;@Nullable_	public Map<String, Serializable> getAttributes() {_		return this.attributes__	};return,the,attributes,map,mainly,here,for,debugging,purposes,preferably,use,link,add,attribute,and,link,get,attribute,return,the,attributes,map,or,code,null,if,none,created,see,add,attribute,see,get,attribute;nullable,public,map,string,serializable,get,attributes,return,this,attributes
RemoteInvocation -> @Nullable 	public Map<String, Serializable> getAttributes();1530174524;Return the attributes Map. Mainly here for debugging purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@return the attributes Map, or {@code null} if none created_@see #addAttribute_@see #getAttribute;@Nullable_	public Map<String, Serializable> getAttributes() {_		return this.attributes__	};return,the,attributes,map,mainly,here,for,debugging,purposes,preferably,use,link,add,attribute,and,link,get,attribute,return,the,attributes,map,or,code,null,if,none,created,see,add,attribute,see,get,attribute;nullable,public,map,string,serializable,get,attributes,return,this,attributes
RemoteInvocation -> public void setMethodName(String methodName);1328020251;Set the name of the target method.;public void setMethodName(String methodName) {_		this.methodName = methodName__	};set,the,name,of,the,target,method;public,void,set,method,name,string,method,name,this,method,name,method,name
RemoteInvocation -> public void setMethodName(String methodName);1356735495;Set the name of the target method.;public void setMethodName(String methodName) {_		this.methodName = methodName__	};set,the,name,of,the,target,method;public,void,set,method,name,string,method,name,this,method,name,method,name
RemoteInvocation -> public void setMethodName(String methodName);1385412762;Set the name of the target method.;public void setMethodName(String methodName) {_		this.methodName = methodName__	};set,the,name,of,the,target,method;public,void,set,method,name,string,method,name,this,method,name,method,name
RemoteInvocation -> public void setMethodName(String methodName);1390304956;Set the name of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setMethodName(String methodName) {_		this.methodName = methodName__	};set,the,name,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,method,name,string,method,name,this,method,name,method,name
RemoteInvocation -> public void setMethodName(String methodName);1467730834;Set the name of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setMethodName(String methodName) {_		this.methodName = methodName__	};set,the,name,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,method,name,string,method,name,this,method,name,method,name
RemoteInvocation -> public void setMethodName(String methodName);1495868221;Set the name of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setMethodName(String methodName) {_		this.methodName = methodName__	};set,the,name,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,method,name,string,method,name,this,method,name,method,name
RemoteInvocation -> public void setMethodName(String methodName);1500448076;Set the name of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setMethodName(String methodName) {_		this.methodName = methodName__	};set,the,name,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,method,name,string,method,name,this,method,name,method,name
RemoteInvocation -> public void setMethodName(String methodName);1530174524;Set the name of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setMethodName(String methodName) {_		this.methodName = methodName__	};set,the,name,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,method,name,string,method,name,this,method,name,method,name
RemoteInvocation -> public void setAttributes(@Nullable Map<String, Serializable> attributes);1500448076;Set the attributes Map. Only here for special purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@param attributes the attributes Map_@see #addAttribute_@see #getAttribute;public void setAttributes(@Nullable Map<String, Serializable> attributes) {_		this.attributes = attributes__	};set,the,attributes,map,only,here,for,special,purposes,preferably,use,link,add,attribute,and,link,get,attribute,param,attributes,the,attributes,map,see,add,attribute,see,get,attribute;public,void,set,attributes,nullable,map,string,serializable,attributes,this,attributes,attributes
RemoteInvocation -> public void setAttributes(@Nullable Map<String, Serializable> attributes);1530174524;Set the attributes Map. Only here for special purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@param attributes the attributes Map_@see #addAttribute_@see #getAttribute;public void setAttributes(@Nullable Map<String, Serializable> attributes) {_		this.attributes = attributes__	};set,the,attributes,map,only,here,for,special,purposes,preferably,use,link,add,attribute,and,link,get,attribute,param,attributes,the,attributes,map,see,add,attribute,see,get,attribute;public,void,set,attributes,nullable,map,string,serializable,attributes,this,attributes,attributes
RemoteInvocation -> public String getMethodName();1328020251;Return the name of the target method.;public String getMethodName() {_		return this.methodName__	};return,the,name,of,the,target,method;public,string,get,method,name,return,this,method,name
RemoteInvocation -> public String getMethodName();1356735495;Return the name of the target method.;public String getMethodName() {_		return this.methodName__	};return,the,name,of,the,target,method;public,string,get,method,name,return,this,method,name
RemoteInvocation -> public String getMethodName();1385412762;Return the name of the target method.;public String getMethodName() {_		return this.methodName__	};return,the,name,of,the,target,method;public,string,get,method,name,return,this,method,name
RemoteInvocation -> public String getMethodName();1390304956;Return the name of the target method.;public String getMethodName() {_		return this.methodName__	};return,the,name,of,the,target,method;public,string,get,method,name,return,this,method,name
RemoteInvocation -> public String getMethodName();1467730834;Return the name of the target method.;public String getMethodName() {_		return this.methodName__	};return,the,name,of,the,target,method;public,string,get,method,name,return,this,method,name
RemoteInvocation -> public String getMethodName();1495868221;Return the name of the target method.;public String getMethodName() {_		return this.methodName__	};return,the,name,of,the,target,method;public,string,get,method,name,return,this,method,name
RemoteInvocation -> public String getMethodName();1500448076;Return the name of the target method.;public String getMethodName() {_		return this.methodName__	};return,the,name,of,the,target,method;public,string,get,method,name,return,this,method,name
RemoteInvocation -> public String getMethodName();1530174524;Return the name of the target method.;public String getMethodName() {_		return this.methodName__	};return,the,name,of,the,target,method;public,string,get,method,name,return,this,method,name
RemoteInvocation -> public void addAttribute(String key, Serializable value) throws IllegalStateException;1328020251;Add an additional invocation attribute. Useful to add additional_invocation context without having to subclass RemoteInvocation._<p>Attribute keys have to be unique, and no overriding of existing_attributes is allowed._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@param value the attribute value_@throws IllegalStateException if the key is already bound;public void addAttribute(String key, Serializable value) throws IllegalStateException {_		if (this.attributes == null) {_			this.attributes = new HashMap<String, Serializable>()__		}_		if (this.attributes.containsKey(key)) {_			throw new IllegalStateException("There is already an attribute with key '" + key + "' bound")__		}_		this.attributes.put(key, value)__	};add,an,additional,invocation,attribute,useful,to,add,additional,invocation,context,without,having,to,subclass,remote,invocation,p,attribute,keys,have,to,be,unique,and,no,overriding,of,existing,attributes,is,allowed,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,param,value,the,attribute,value,throws,illegal,state,exception,if,the,key,is,already,bound;public,void,add,attribute,string,key,serializable,value,throws,illegal,state,exception,if,this,attributes,null,this,attributes,new,hash,map,string,serializable,if,this,attributes,contains,key,key,throw,new,illegal,state,exception,there,is,already,an,attribute,with,key,key,bound,this,attributes,put,key,value
RemoteInvocation -> public void addAttribute(String key, Serializable value) throws IllegalStateException;1356735495;Add an additional invocation attribute. Useful to add additional_invocation context without having to subclass RemoteInvocation._<p>Attribute keys have to be unique, and no overriding of existing_attributes is allowed._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@param value the attribute value_@throws IllegalStateException if the key is already bound;public void addAttribute(String key, Serializable value) throws IllegalStateException {_		if (this.attributes == null) {_			this.attributes = new HashMap<String, Serializable>()__		}_		if (this.attributes.containsKey(key)) {_			throw new IllegalStateException("There is already an attribute with key '" + key + "' bound")__		}_		this.attributes.put(key, value)__	};add,an,additional,invocation,attribute,useful,to,add,additional,invocation,context,without,having,to,subclass,remote,invocation,p,attribute,keys,have,to,be,unique,and,no,overriding,of,existing,attributes,is,allowed,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,param,value,the,attribute,value,throws,illegal,state,exception,if,the,key,is,already,bound;public,void,add,attribute,string,key,serializable,value,throws,illegal,state,exception,if,this,attributes,null,this,attributes,new,hash,map,string,serializable,if,this,attributes,contains,key,key,throw,new,illegal,state,exception,there,is,already,an,attribute,with,key,key,bound,this,attributes,put,key,value
RemoteInvocation -> public void addAttribute(String key, Serializable value) throws IllegalStateException;1385412762;Add an additional invocation attribute. Useful to add additional_invocation context without having to subclass RemoteInvocation._<p>Attribute keys have to be unique, and no overriding of existing_attributes is allowed._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@param value the attribute value_@throws IllegalStateException if the key is already bound;public void addAttribute(String key, Serializable value) throws IllegalStateException {_		if (this.attributes == null) {_			this.attributes = new HashMap<String, Serializable>()__		}_		if (this.attributes.containsKey(key)) {_			throw new IllegalStateException("There is already an attribute with key '" + key + "' bound")__		}_		this.attributes.put(key, value)__	};add,an,additional,invocation,attribute,useful,to,add,additional,invocation,context,without,having,to,subclass,remote,invocation,p,attribute,keys,have,to,be,unique,and,no,overriding,of,existing,attributes,is,allowed,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,param,value,the,attribute,value,throws,illegal,state,exception,if,the,key,is,already,bound;public,void,add,attribute,string,key,serializable,value,throws,illegal,state,exception,if,this,attributes,null,this,attributes,new,hash,map,string,serializable,if,this,attributes,contains,key,key,throw,new,illegal,state,exception,there,is,already,an,attribute,with,key,key,bound,this,attributes,put,key,value
RemoteInvocation -> public void addAttribute(String key, Serializable value) throws IllegalStateException;1390304956;Add an additional invocation attribute. Useful to add additional_invocation context without having to subclass RemoteInvocation._<p>Attribute keys have to be unique, and no overriding of existing_attributes is allowed._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@param value the attribute value_@throws IllegalStateException if the key is already bound;public void addAttribute(String key, Serializable value) throws IllegalStateException {_		if (this.attributes == null) {_			this.attributes = new HashMap<String, Serializable>()__		}_		if (this.attributes.containsKey(key)) {_			throw new IllegalStateException("There is already an attribute with key '" + key + "' bound")__		}_		this.attributes.put(key, value)__	};add,an,additional,invocation,attribute,useful,to,add,additional,invocation,context,without,having,to,subclass,remote,invocation,p,attribute,keys,have,to,be,unique,and,no,overriding,of,existing,attributes,is,allowed,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,param,value,the,attribute,value,throws,illegal,state,exception,if,the,key,is,already,bound;public,void,add,attribute,string,key,serializable,value,throws,illegal,state,exception,if,this,attributes,null,this,attributes,new,hash,map,string,serializable,if,this,attributes,contains,key,key,throw,new,illegal,state,exception,there,is,already,an,attribute,with,key,key,bound,this,attributes,put,key,value
RemoteInvocation -> public void addAttribute(String key, Serializable value) throws IllegalStateException;1467730834;Add an additional invocation attribute. Useful to add additional_invocation context without having to subclass RemoteInvocation._<p>Attribute keys have to be unique, and no overriding of existing_attributes is allowed._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@param value the attribute value_@throws IllegalStateException if the key is already bound;public void addAttribute(String key, Serializable value) throws IllegalStateException {_		if (this.attributes == null) {_			this.attributes = new HashMap<>()__		}_		if (this.attributes.containsKey(key)) {_			throw new IllegalStateException("There is already an attribute with key '" + key + "' bound")__		}_		this.attributes.put(key, value)__	};add,an,additional,invocation,attribute,useful,to,add,additional,invocation,context,without,having,to,subclass,remote,invocation,p,attribute,keys,have,to,be,unique,and,no,overriding,of,existing,attributes,is,allowed,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,param,value,the,attribute,value,throws,illegal,state,exception,if,the,key,is,already,bound;public,void,add,attribute,string,key,serializable,value,throws,illegal,state,exception,if,this,attributes,null,this,attributes,new,hash,map,if,this,attributes,contains,key,key,throw,new,illegal,state,exception,there,is,already,an,attribute,with,key,key,bound,this,attributes,put,key,value
RemoteInvocation -> public void addAttribute(String key, Serializable value) throws IllegalStateException;1495868221;Add an additional invocation attribute. Useful to add additional_invocation context without having to subclass RemoteInvocation._<p>Attribute keys have to be unique, and no overriding of existing_attributes is allowed._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@param value the attribute value_@throws IllegalStateException if the key is already bound;public void addAttribute(String key, Serializable value) throws IllegalStateException {_		if (this.attributes == null) {_			this.attributes = new HashMap<>()__		}_		if (this.attributes.containsKey(key)) {_			throw new IllegalStateException("There is already an attribute with key '" + key + "' bound")__		}_		this.attributes.put(key, value)__	};add,an,additional,invocation,attribute,useful,to,add,additional,invocation,context,without,having,to,subclass,remote,invocation,p,attribute,keys,have,to,be,unique,and,no,overriding,of,existing,attributes,is,allowed,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,param,value,the,attribute,value,throws,illegal,state,exception,if,the,key,is,already,bound;public,void,add,attribute,string,key,serializable,value,throws,illegal,state,exception,if,this,attributes,null,this,attributes,new,hash,map,if,this,attributes,contains,key,key,throw,new,illegal,state,exception,there,is,already,an,attribute,with,key,key,bound,this,attributes,put,key,value
RemoteInvocation -> public void addAttribute(String key, Serializable value) throws IllegalStateException;1500448076;Add an additional invocation attribute. Useful to add additional_invocation context without having to subclass RemoteInvocation._<p>Attribute keys have to be unique, and no overriding of existing_attributes is allowed._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@param value the attribute value_@throws IllegalStateException if the key is already bound;public void addAttribute(String key, Serializable value) throws IllegalStateException {_		if (this.attributes == null) {_			this.attributes = new HashMap<>()__		}_		if (this.attributes.containsKey(key)) {_			throw new IllegalStateException("There is already an attribute with key '" + key + "' bound")__		}_		this.attributes.put(key, value)__	};add,an,additional,invocation,attribute,useful,to,add,additional,invocation,context,without,having,to,subclass,remote,invocation,p,attribute,keys,have,to,be,unique,and,no,overriding,of,existing,attributes,is,allowed,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,param,value,the,attribute,value,throws,illegal,state,exception,if,the,key,is,already,bound;public,void,add,attribute,string,key,serializable,value,throws,illegal,state,exception,if,this,attributes,null,this,attributes,new,hash,map,if,this,attributes,contains,key,key,throw,new,illegal,state,exception,there,is,already,an,attribute,with,key,key,bound,this,attributes,put,key,value
RemoteInvocation -> public void addAttribute(String key, Serializable value) throws IllegalStateException;1530174524;Add an additional invocation attribute. Useful to add additional_invocation context without having to subclass RemoteInvocation._<p>Attribute keys have to be unique, and no overriding of existing_attributes is allowed._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@param value the attribute value_@throws IllegalStateException if the key is already bound;public void addAttribute(String key, Serializable value) throws IllegalStateException {_		if (this.attributes == null) {_			this.attributes = new HashMap<>()__		}_		if (this.attributes.containsKey(key)) {_			throw new IllegalStateException("There is already an attribute with key '" + key + "' bound")__		}_		this.attributes.put(key, value)__	};add,an,additional,invocation,attribute,useful,to,add,additional,invocation,context,without,having,to,subclass,remote,invocation,p,attribute,keys,have,to,be,unique,and,no,overriding,of,existing,attributes,is,allowed,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,param,value,the,attribute,value,throws,illegal,state,exception,if,the,key,is,already,bound;public,void,add,attribute,string,key,serializable,value,throws,illegal,state,exception,if,this,attributes,null,this,attributes,new,hash,map,if,this,attributes,contains,key,key,throw,new,illegal,state,exception,there,is,already,an,attribute,with,key,key,bound,this,attributes,put,key,value
RemoteInvocation -> public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments);1385412762;Create a new RemoteInvocation for the given parameters._@param methodName the name of the method to invoke_@param parameterTypes the parameter types of the method_@param arguments the arguments for the invocation;public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments) {_		this.methodName = methodName__		this.parameterTypes = parameterTypes__		this.arguments = arguments__	};create,a,new,remote,invocation,for,the,given,parameters,param,method,name,the,name,of,the,method,to,invoke,param,parameter,types,the,parameter,types,of,the,method,param,arguments,the,arguments,for,the,invocation;public,remote,invocation,string,method,name,class,parameter,types,object,arguments,this,method,name,method,name,this,parameter,types,parameter,types,this,arguments,arguments
RemoteInvocation -> public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments);1390304956;Create a new RemoteInvocation for the given parameters._@param methodName the name of the method to invoke_@param parameterTypes the parameter types of the method_@param arguments the arguments for the invocation;public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments) {_		this.methodName = methodName__		this.parameterTypes = parameterTypes__		this.arguments = arguments__	};create,a,new,remote,invocation,for,the,given,parameters,param,method,name,the,name,of,the,method,to,invoke,param,parameter,types,the,parameter,types,of,the,method,param,arguments,the,arguments,for,the,invocation;public,remote,invocation,string,method,name,class,parameter,types,object,arguments,this,method,name,method,name,this,parameter,types,parameter,types,this,arguments,arguments
RemoteInvocation -> public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments);1467730834;Create a new RemoteInvocation for the given parameters._@param methodName the name of the method to invoke_@param parameterTypes the parameter types of the method_@param arguments the arguments for the invocation;public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments) {_		this.methodName = methodName__		this.parameterTypes = parameterTypes__		this.arguments = arguments__	};create,a,new,remote,invocation,for,the,given,parameters,param,method,name,the,name,of,the,method,to,invoke,param,parameter,types,the,parameter,types,of,the,method,param,arguments,the,arguments,for,the,invocation;public,remote,invocation,string,method,name,class,parameter,types,object,arguments,this,method,name,method,name,this,parameter,types,parameter,types,this,arguments,arguments
RemoteInvocation -> public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments);1495868221;Create a new RemoteInvocation for the given parameters._@param methodName the name of the method to invoke_@param parameterTypes the parameter types of the method_@param arguments the arguments for the invocation;public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments) {_		this.methodName = methodName__		this.parameterTypes = parameterTypes__		this.arguments = arguments__	};create,a,new,remote,invocation,for,the,given,parameters,param,method,name,the,name,of,the,method,to,invoke,param,parameter,types,the,parameter,types,of,the,method,param,arguments,the,arguments,for,the,invocation;public,remote,invocation,string,method,name,class,parameter,types,object,arguments,this,method,name,method,name,this,parameter,types,parameter,types,this,arguments,arguments
RemoteInvocation -> public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments);1500448076;Create a new RemoteInvocation for the given parameters._@param methodName the name of the method to invoke_@param parameterTypes the parameter types of the method_@param arguments the arguments for the invocation;public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments) {_		this.methodName = methodName__		this.parameterTypes = parameterTypes__		this.arguments = arguments__	};create,a,new,remote,invocation,for,the,given,parameters,param,method,name,the,name,of,the,method,to,invoke,param,parameter,types,the,parameter,types,of,the,method,param,arguments,the,arguments,for,the,invocation;public,remote,invocation,string,method,name,class,parameter,types,object,arguments,this,method,name,method,name,this,parameter,types,parameter,types,this,arguments,arguments
RemoteInvocation -> public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments);1530174524;Create a new RemoteInvocation for the given parameters._@param methodName the name of the method to invoke_@param parameterTypes the parameter types of the method_@param arguments the arguments for the invocation;public RemoteInvocation(String methodName, Class<?>[] parameterTypes, Object[] arguments) {_		this.methodName = methodName__		this.parameterTypes = parameterTypes__		this.arguments = arguments__	};create,a,new,remote,invocation,for,the,given,parameters,param,method,name,the,name,of,the,method,to,invoke,param,parameter,types,the,parameter,types,of,the,method,param,arguments,the,arguments,for,the,invocation;public,remote,invocation,string,method,name,class,parameter,types,object,arguments,this,method,name,method,name,this,parameter,types,parameter,types,this,arguments,arguments
RemoteInvocation -> public void setParameterTypes(Class[] parameterTypes);1328020251;Set the parameter types of the target method.;public void setParameterTypes(Class[] parameterTypes) {_		this.parameterTypes = parameterTypes__	};set,the,parameter,types,of,the,target,method;public,void,set,parameter,types,class,parameter,types,this,parameter,types,parameter,types
RemoteInvocation -> public void setParameterTypes(Class[] parameterTypes);1356735495;Set the parameter types of the target method.;public void setParameterTypes(Class[] parameterTypes) {_		this.parameterTypes = parameterTypes__	};set,the,parameter,types,of,the,target,method;public,void,set,parameter,types,class,parameter,types,this,parameter,types,parameter,types
RemoteInvocation -> public Object invoke(Object targetObject) 			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;1328020251;Perform this invocation on the given target object._Typically called when a RemoteInvocation is received on the server._@param targetObject the target object to apply the invocation to_@return the invocation result_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see java.lang.reflect.Method#invoke;public Object invoke(Object targetObject)_			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes)__		return method.invoke(targetObject, this.arguments)__	};perform,this,invocation,on,the,given,target,object,typically,called,when,a,remote,invocation,is,received,on,the,server,param,target,object,the,target,object,to,apply,the,invocation,to,return,the,invocation,result,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,java,lang,reflect,method,invoke;public,object,invoke,object,target,object,throws,no,such,method,exception,illegal,access,exception,invocation,target,exception,method,method,target,object,get,class,get,method,this,method,name,this,parameter,types,return,method,invoke,target,object,this,arguments
RemoteInvocation -> public Object invoke(Object targetObject) 			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;1356735495;Perform this invocation on the given target object._Typically called when a RemoteInvocation is received on the server._@param targetObject the target object to apply the invocation to_@return the invocation result_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see java.lang.reflect.Method#invoke;public Object invoke(Object targetObject)_			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes)__		return method.invoke(targetObject, this.arguments)__	};perform,this,invocation,on,the,given,target,object,typically,called,when,a,remote,invocation,is,received,on,the,server,param,target,object,the,target,object,to,apply,the,invocation,to,return,the,invocation,result,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,java,lang,reflect,method,invoke;public,object,invoke,object,target,object,throws,no,such,method,exception,illegal,access,exception,invocation,target,exception,method,method,target,object,get,class,get,method,this,method,name,this,parameter,types,return,method,invoke,target,object,this,arguments
RemoteInvocation -> public Object invoke(Object targetObject) 			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;1385412762;Perform this invocation on the given target object._Typically called when a RemoteInvocation is received on the server._@param targetObject the target object to apply the invocation to_@return the invocation result_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see java.lang.reflect.Method#invoke;public Object invoke(Object targetObject)_			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes)__		return method.invoke(targetObject, this.arguments)__	};perform,this,invocation,on,the,given,target,object,typically,called,when,a,remote,invocation,is,received,on,the,server,param,target,object,the,target,object,to,apply,the,invocation,to,return,the,invocation,result,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,java,lang,reflect,method,invoke;public,object,invoke,object,target,object,throws,no,such,method,exception,illegal,access,exception,invocation,target,exception,method,method,target,object,get,class,get,method,this,method,name,this,parameter,types,return,method,invoke,target,object,this,arguments
RemoteInvocation -> public Object invoke(Object targetObject) 			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;1390304956;Perform this invocation on the given target object._Typically called when a RemoteInvocation is received on the server._@param targetObject the target object to apply the invocation to_@return the invocation result_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see java.lang.reflect.Method#invoke;public Object invoke(Object targetObject)_			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes)__		return method.invoke(targetObject, this.arguments)__	};perform,this,invocation,on,the,given,target,object,typically,called,when,a,remote,invocation,is,received,on,the,server,param,target,object,the,target,object,to,apply,the,invocation,to,return,the,invocation,result,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,java,lang,reflect,method,invoke;public,object,invoke,object,target,object,throws,no,such,method,exception,illegal,access,exception,invocation,target,exception,method,method,target,object,get,class,get,method,this,method,name,this,parameter,types,return,method,invoke,target,object,this,arguments
RemoteInvocation -> public Object invoke(Object targetObject) 			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;1467730834;Perform this invocation on the given target object._Typically called when a RemoteInvocation is received on the server._@param targetObject the target object to apply the invocation to_@return the invocation result_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see java.lang.reflect.Method#invoke;public Object invoke(Object targetObject)_			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes)__		return method.invoke(targetObject, this.arguments)__	};perform,this,invocation,on,the,given,target,object,typically,called,when,a,remote,invocation,is,received,on,the,server,param,target,object,the,target,object,to,apply,the,invocation,to,return,the,invocation,result,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,java,lang,reflect,method,invoke;public,object,invoke,object,target,object,throws,no,such,method,exception,illegal,access,exception,invocation,target,exception,method,method,target,object,get,class,get,method,this,method,name,this,parameter,types,return,method,invoke,target,object,this,arguments
RemoteInvocation -> public Object invoke(Object targetObject) 			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;1495868221;Perform this invocation on the given target object._Typically called when a RemoteInvocation is received on the server._@param targetObject the target object to apply the invocation to_@return the invocation result_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see java.lang.reflect.Method#invoke;public Object invoke(Object targetObject)_			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes)__		return method.invoke(targetObject, this.arguments)__	};perform,this,invocation,on,the,given,target,object,typically,called,when,a,remote,invocation,is,received,on,the,server,param,target,object,the,target,object,to,apply,the,invocation,to,return,the,invocation,result,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,java,lang,reflect,method,invoke;public,object,invoke,object,target,object,throws,no,such,method,exception,illegal,access,exception,invocation,target,exception,method,method,target,object,get,class,get,method,this,method,name,this,parameter,types,return,method,invoke,target,object,this,arguments
RemoteInvocation -> public Object invoke(Object targetObject) 			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;1500448076;Perform this invocation on the given target object._Typically called when a RemoteInvocation is received on the server._@param targetObject the target object to apply the invocation to_@return the invocation result_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see java.lang.reflect.Method#invoke;public Object invoke(Object targetObject)_			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes)__		return method.invoke(targetObject, this.arguments)__	};perform,this,invocation,on,the,given,target,object,typically,called,when,a,remote,invocation,is,received,on,the,server,param,target,object,the,target,object,to,apply,the,invocation,to,return,the,invocation,result,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,java,lang,reflect,method,invoke;public,object,invoke,object,target,object,throws,no,such,method,exception,illegal,access,exception,invocation,target,exception,method,method,target,object,get,class,get,method,this,method,name,this,parameter,types,return,method,invoke,target,object,this,arguments
RemoteInvocation -> public Object invoke(Object targetObject) 			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException;1530174524;Perform this invocation on the given target object._Typically called when a RemoteInvocation is received on the server._@param targetObject the target object to apply the invocation to_@return the invocation result_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see java.lang.reflect.Method#invoke;public Object invoke(Object targetObject)_			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		Method method = targetObject.getClass().getMethod(this.methodName, this.parameterTypes)__		return method.invoke(targetObject, this.arguments)__	};perform,this,invocation,on,the,given,target,object,typically,called,when,a,remote,invocation,is,received,on,the,server,param,target,object,the,target,object,to,apply,the,invocation,to,return,the,invocation,result,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,java,lang,reflect,method,invoke;public,object,invoke,object,target,object,throws,no,such,method,exception,illegal,access,exception,invocation,target,exception,method,method,target,object,get,class,get,method,this,method,name,this,parameter,types,return,method,invoke,target,object,this,arguments
RemoteInvocation -> public RemoteInvocation();1328020251;Create a new RemoteInvocation for use as JavaBean.;public RemoteInvocation() {_	};create,a,new,remote,invocation,for,use,as,java,bean;public,remote,invocation
RemoteInvocation -> public RemoteInvocation();1356735495;Create a new RemoteInvocation for use as JavaBean.;public RemoteInvocation() {_	};create,a,new,remote,invocation,for,use,as,java,bean;public,remote,invocation
RemoteInvocation -> public RemoteInvocation();1385412762;Create a new RemoteInvocation for use as JavaBean.;public RemoteInvocation() {_	};create,a,new,remote,invocation,for,use,as,java,bean;public,remote,invocation
RemoteInvocation -> public RemoteInvocation();1390304956;Create a new RemoteInvocation for JavaBean-style deserialization_(e.g. with Jackson).;public RemoteInvocation() {_	};create,a,new,remote,invocation,for,java,bean,style,deserialization,e,g,with,jackson;public,remote,invocation
RemoteInvocation -> public RemoteInvocation();1467730834;Create a new RemoteInvocation for JavaBean-style deserialization_(e.g. with Jackson).;public RemoteInvocation() {_	};create,a,new,remote,invocation,for,java,bean,style,deserialization,e,g,with,jackson;public,remote,invocation
RemoteInvocation -> public RemoteInvocation();1495868221;Create a new RemoteInvocation for JavaBean-style deserialization_(e.g. with Jackson).;public RemoteInvocation() {_	};create,a,new,remote,invocation,for,java,bean,style,deserialization,e,g,with,jackson;public,remote,invocation
RemoteInvocation -> public RemoteInvocation();1500448076;Create a new RemoteInvocation for JavaBean-style deserialization_(e.g. with Jackson).;public RemoteInvocation() {_	};create,a,new,remote,invocation,for,java,bean,style,deserialization,e,g,with,jackson;public,remote,invocation
RemoteInvocation -> public RemoteInvocation();1530174524;Create a new RemoteInvocation for JavaBean-style deserialization_(e.g. with Jackson).;public RemoteInvocation() {_	};create,a,new,remote,invocation,for,java,bean,style,deserialization,e,g,with,jackson;public,remote,invocation
RemoteInvocation -> public void setAttributes(Map<String, Serializable> attributes);1328020251;Set the attributes Map. Only here for special purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@param attributes the attributes Map_@see #addAttribute_@see #getAttribute;public void setAttributes(Map<String, Serializable> attributes) {_		this.attributes = attributes__	};set,the,attributes,map,only,here,for,special,purposes,preferably,use,link,add,attribute,and,link,get,attribute,param,attributes,the,attributes,map,see,add,attribute,see,get,attribute;public,void,set,attributes,map,string,serializable,attributes,this,attributes,attributes
RemoteInvocation -> public void setAttributes(Map<String, Serializable> attributes);1356735495;Set the attributes Map. Only here for special purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@param attributes the attributes Map_@see #addAttribute_@see #getAttribute;public void setAttributes(Map<String, Serializable> attributes) {_		this.attributes = attributes__	};set,the,attributes,map,only,here,for,special,purposes,preferably,use,link,add,attribute,and,link,get,attribute,param,attributes,the,attributes,map,see,add,attribute,see,get,attribute;public,void,set,attributes,map,string,serializable,attributes,this,attributes,attributes
RemoteInvocation -> public void setAttributes(Map<String, Serializable> attributes);1385412762;Set the attributes Map. Only here for special purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@param attributes the attributes Map_@see #addAttribute_@see #getAttribute;public void setAttributes(Map<String, Serializable> attributes) {_		this.attributes = attributes__	};set,the,attributes,map,only,here,for,special,purposes,preferably,use,link,add,attribute,and,link,get,attribute,param,attributes,the,attributes,map,see,add,attribute,see,get,attribute;public,void,set,attributes,map,string,serializable,attributes,this,attributes,attributes
RemoteInvocation -> public void setAttributes(Map<String, Serializable> attributes);1390304956;Set the attributes Map. Only here for special purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@param attributes the attributes Map_@see #addAttribute_@see #getAttribute;public void setAttributes(Map<String, Serializable> attributes) {_		this.attributes = attributes__	};set,the,attributes,map,only,here,for,special,purposes,preferably,use,link,add,attribute,and,link,get,attribute,param,attributes,the,attributes,map,see,add,attribute,see,get,attribute;public,void,set,attributes,map,string,serializable,attributes,this,attributes,attributes
RemoteInvocation -> public void setAttributes(Map<String, Serializable> attributes);1467730834;Set the attributes Map. Only here for special purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@param attributes the attributes Map_@see #addAttribute_@see #getAttribute;public void setAttributes(Map<String, Serializable> attributes) {_		this.attributes = attributes__	};set,the,attributes,map,only,here,for,special,purposes,preferably,use,link,add,attribute,and,link,get,attribute,param,attributes,the,attributes,map,see,add,attribute,see,get,attribute;public,void,set,attributes,map,string,serializable,attributes,this,attributes,attributes
RemoteInvocation -> public void setAttributes(Map<String, Serializable> attributes);1495868221;Set the attributes Map. Only here for special purposes:_Preferably, use {@link #addAttribute} and {@link #getAttribute}._@param attributes the attributes Map_@see #addAttribute_@see #getAttribute;public void setAttributes(Map<String, Serializable> attributes) {_		this.attributes = attributes__	};set,the,attributes,map,only,here,for,special,purposes,preferably,use,link,add,attribute,and,link,get,attribute,param,attributes,the,attributes,map,see,add,attribute,see,get,attribute;public,void,set,attributes,map,string,serializable,attributes,this,attributes,attributes
RemoteInvocation -> public void setParameterTypes(Class<?>[] parameterTypes);1385412762;Set the parameter types of the target method.;public void setParameterTypes(Class<?>[] parameterTypes) {_		this.parameterTypes = parameterTypes__	};set,the,parameter,types,of,the,target,method;public,void,set,parameter,types,class,parameter,types,this,parameter,types,parameter,types
RemoteInvocation -> public void setParameterTypes(Class<?>[] parameterTypes);1390304956;Set the parameter types of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setParameterTypes(Class<?>[] parameterTypes) {_		this.parameterTypes = parameterTypes__	};set,the,parameter,types,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,parameter,types,class,parameter,types,this,parameter,types,parameter,types
RemoteInvocation -> public void setParameterTypes(Class<?>[] parameterTypes);1467730834;Set the parameter types of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setParameterTypes(Class<?>[] parameterTypes) {_		this.parameterTypes = parameterTypes__	};set,the,parameter,types,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,parameter,types,class,parameter,types,this,parameter,types,parameter,types
RemoteInvocation -> public void setParameterTypes(Class<?>[] parameterTypes);1495868221;Set the parameter types of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setParameterTypes(Class<?>[] parameterTypes) {_		this.parameterTypes = parameterTypes__	};set,the,parameter,types,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,parameter,types,class,parameter,types,this,parameter,types,parameter,types
RemoteInvocation -> public void setParameterTypes(Class<?>[] parameterTypes);1500448076;Set the parameter types of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setParameterTypes(Class<?>[] parameterTypes) {_		this.parameterTypes = parameterTypes__	};set,the,parameter,types,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,parameter,types,class,parameter,types,this,parameter,types,parameter,types
RemoteInvocation -> public void setParameterTypes(Class<?>[] parameterTypes);1530174524;Set the parameter types of the target method._<p>This setter is intended for JavaBean-style deserialization.;public void setParameterTypes(Class<?>[] parameterTypes) {_		this.parameterTypes = parameterTypes__	};set,the,parameter,types,of,the,target,method,p,this,setter,is,intended,for,java,bean,style,deserialization;public,void,set,parameter,types,class,parameter,types,this,parameter,types,parameter,types
RemoteInvocation -> public Object[] getArguments();1328020251;Return the arguments for the target method call.;public Object[] getArguments() {_		return this.arguments__	};return,the,arguments,for,the,target,method,call;public,object,get,arguments,return,this,arguments
RemoteInvocation -> public Object[] getArguments();1356735495;Return the arguments for the target method call.;public Object[] getArguments() {_		return this.arguments__	};return,the,arguments,for,the,target,method,call;public,object,get,arguments,return,this,arguments
RemoteInvocation -> public Object[] getArguments();1385412762;Return the arguments for the target method call.;public Object[] getArguments() {_		return this.arguments__	};return,the,arguments,for,the,target,method,call;public,object,get,arguments,return,this,arguments
RemoteInvocation -> public Object[] getArguments();1390304956;Return the arguments for the target method call.;public Object[] getArguments() {_		return this.arguments__	};return,the,arguments,for,the,target,method,call;public,object,get,arguments,return,this,arguments
RemoteInvocation -> public Object[] getArguments();1467730834;Return the arguments for the target method call.;public Object[] getArguments() {_		return this.arguments__	};return,the,arguments,for,the,target,method,call;public,object,get,arguments,return,this,arguments
RemoteInvocation -> public Object[] getArguments();1495868221;Return the arguments for the target method call.;public Object[] getArguments() {_		return this.arguments__	};return,the,arguments,for,the,target,method,call;public,object,get,arguments,return,this,arguments
RemoteInvocation -> public Object[] getArguments();1500448076;Return the arguments for the target method call.;public Object[] getArguments() {_		return this.arguments__	};return,the,arguments,for,the,target,method,call;public,object,get,arguments,return,this,arguments
RemoteInvocation -> public Object[] getArguments();1530174524;Return the arguments for the target method call.;public Object[] getArguments() {_		return this.arguments__	};return,the,arguments,for,the,target,method,call;public,object,get,arguments,return,this,arguments
RemoteInvocation -> public RemoteInvocation(String methodName, Class[] parameterTypes, Object[] arguments);1328020251;Create a new RemoteInvocation for the given parameters._@param methodName the name of the method to invoke_@param parameterTypes the parameter types of the method_@param arguments the arguments for the invocation;public RemoteInvocation(String methodName, Class[] parameterTypes, Object[] arguments) {_		this.methodName = methodName__		this.parameterTypes = parameterTypes__		this.arguments = arguments__	};create,a,new,remote,invocation,for,the,given,parameters,param,method,name,the,name,of,the,method,to,invoke,param,parameter,types,the,parameter,types,of,the,method,param,arguments,the,arguments,for,the,invocation;public,remote,invocation,string,method,name,class,parameter,types,object,arguments,this,method,name,method,name,this,parameter,types,parameter,types,this,arguments,arguments
RemoteInvocation -> public RemoteInvocation(String methodName, Class[] parameterTypes, Object[] arguments);1356735495;Create a new RemoteInvocation for the given parameters._@param methodName the name of the method to invoke_@param parameterTypes the parameter types of the method_@param arguments the arguments for the invocation;public RemoteInvocation(String methodName, Class[] parameterTypes, Object[] arguments) {_		this.methodName = methodName__		this.parameterTypes = parameterTypes__		this.arguments = arguments__	};create,a,new,remote,invocation,for,the,given,parameters,param,method,name,the,name,of,the,method,to,invoke,param,parameter,types,the,parameter,types,of,the,method,param,arguments,the,arguments,for,the,invocation;public,remote,invocation,string,method,name,class,parameter,types,object,arguments,this,method,name,method,name,this,parameter,types,parameter,types,this,arguments,arguments
RemoteInvocation -> public Class<?>[] getParameterTypes();1385412762;Return the parameter types of the target method.;public Class<?>[] getParameterTypes() {_		return this.parameterTypes__	};return,the,parameter,types,of,the,target,method;public,class,get,parameter,types,return,this,parameter,types
RemoteInvocation -> public Class<?>[] getParameterTypes();1390304956;Return the parameter types of the target method.;public Class<?>[] getParameterTypes() {_		return this.parameterTypes__	};return,the,parameter,types,of,the,target,method;public,class,get,parameter,types,return,this,parameter,types
RemoteInvocation -> public Class<?>[] getParameterTypes();1467730834;Return the parameter types of the target method.;public Class<?>[] getParameterTypes() {_		return this.parameterTypes__	};return,the,parameter,types,of,the,target,method;public,class,get,parameter,types,return,this,parameter,types
RemoteInvocation -> public Class<?>[] getParameterTypes();1495868221;Return the parameter types of the target method.;public Class<?>[] getParameterTypes() {_		return this.parameterTypes__	};return,the,parameter,types,of,the,target,method;public,class,get,parameter,types,return,this,parameter,types
RemoteInvocation -> public Class<?>[] getParameterTypes();1500448076;Return the parameter types of the target method.;public Class<?>[] getParameterTypes() {_		return this.parameterTypes__	};return,the,parameter,types,of,the,target,method;public,class,get,parameter,types,return,this,parameter,types
RemoteInvocation -> public Class<?>[] getParameterTypes();1530174524;Return the parameter types of the target method.;public Class<?>[] getParameterTypes() {_		return this.parameterTypes__	};return,the,parameter,types,of,the,target,method;public,class,get,parameter,types,return,this,parameter,types
RemoteInvocation -> public Serializable getAttribute(String key);1328020251;Retrieve the attribute for the given key, if any._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@return the attribute value, or <code>null</code> if not defined;public Serializable getAttribute(String key) {_		if (this.attributes == null) {_			return null__		}_		return this.attributes.get(key)__	};retrieve,the,attribute,for,the,given,key,if,any,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,return,the,attribute,value,or,code,null,code,if,not,defined;public,serializable,get,attribute,string,key,if,this,attributes,null,return,null,return,this,attributes,get,key
RemoteInvocation -> public Serializable getAttribute(String key);1356735495;Retrieve the attribute for the given key, if any._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@return the attribute value, or {@code null} if not defined;public Serializable getAttribute(String key) {_		if (this.attributes == null) {_			return null__		}_		return this.attributes.get(key)__	};retrieve,the,attribute,for,the,given,key,if,any,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,return,the,attribute,value,or,code,null,if,not,defined;public,serializable,get,attribute,string,key,if,this,attributes,null,return,null,return,this,attributes,get,key
RemoteInvocation -> public Serializable getAttribute(String key);1385412762;Retrieve the attribute for the given key, if any._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@return the attribute value, or {@code null} if not defined;public Serializable getAttribute(String key) {_		if (this.attributes == null) {_			return null__		}_		return this.attributes.get(key)__	};retrieve,the,attribute,for,the,given,key,if,any,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,return,the,attribute,value,or,code,null,if,not,defined;public,serializable,get,attribute,string,key,if,this,attributes,null,return,null,return,this,attributes,get,key
RemoteInvocation -> public Serializable getAttribute(String key);1390304956;Retrieve the attribute for the given key, if any._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@return the attribute value, or {@code null} if not defined;public Serializable getAttribute(String key) {_		if (this.attributes == null) {_			return null__		}_		return this.attributes.get(key)__	};retrieve,the,attribute,for,the,given,key,if,any,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,return,the,attribute,value,or,code,null,if,not,defined;public,serializable,get,attribute,string,key,if,this,attributes,null,return,null,return,this,attributes,get,key
RemoteInvocation -> public Serializable getAttribute(String key);1467730834;Retrieve the attribute for the given key, if any._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@return the attribute value, or {@code null} if not defined;public Serializable getAttribute(String key) {_		if (this.attributes == null) {_			return null__		}_		return this.attributes.get(key)__	};retrieve,the,attribute,for,the,given,key,if,any,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,return,the,attribute,value,or,code,null,if,not,defined;public,serializable,get,attribute,string,key,if,this,attributes,null,return,null,return,this,attributes,get,key
RemoteInvocation -> public RemoteInvocation(MethodInvocation methodInvocation);1328020251;Create a new RemoteInvocation for the given AOP method invocation._@param methodInvocation the AOP invocation to convert;public RemoteInvocation(MethodInvocation methodInvocation) {_		this.methodName = methodInvocation.getMethod().getName()__		this.parameterTypes = methodInvocation.getMethod().getParameterTypes()__		this.arguments = methodInvocation.getArguments()__	};create,a,new,remote,invocation,for,the,given,aop,method,invocation,param,method,invocation,the,aop,invocation,to,convert;public,remote,invocation,method,invocation,method,invocation,this,method,name,method,invocation,get,method,get,name,this,parameter,types,method,invocation,get,method,get,parameter,types,this,arguments,method,invocation,get,arguments
RemoteInvocation -> public RemoteInvocation(MethodInvocation methodInvocation);1356735495;Create a new RemoteInvocation for the given AOP method invocation._@param methodInvocation the AOP invocation to convert;public RemoteInvocation(MethodInvocation methodInvocation) {_		this.methodName = methodInvocation.getMethod().getName()__		this.parameterTypes = methodInvocation.getMethod().getParameterTypes()__		this.arguments = methodInvocation.getArguments()__	};create,a,new,remote,invocation,for,the,given,aop,method,invocation,param,method,invocation,the,aop,invocation,to,convert;public,remote,invocation,method,invocation,method,invocation,this,method,name,method,invocation,get,method,get,name,this,parameter,types,method,invocation,get,method,get,parameter,types,this,arguments,method,invocation,get,arguments
RemoteInvocation -> public RemoteInvocation(MethodInvocation methodInvocation);1385412762;Create a new RemoteInvocation for the given AOP method invocation._@param methodInvocation the AOP invocation to convert;public RemoteInvocation(MethodInvocation methodInvocation) {_		this.methodName = methodInvocation.getMethod().getName()__		this.parameterTypes = methodInvocation.getMethod().getParameterTypes()__		this.arguments = methodInvocation.getArguments()__	};create,a,new,remote,invocation,for,the,given,aop,method,invocation,param,method,invocation,the,aop,invocation,to,convert;public,remote,invocation,method,invocation,method,invocation,this,method,name,method,invocation,get,method,get,name,this,parameter,types,method,invocation,get,method,get,parameter,types,this,arguments,method,invocation,get,arguments
RemoteInvocation -> public RemoteInvocation(MethodInvocation methodInvocation);1390304956;Create a new RemoteInvocation for the given AOP method invocation._@param methodInvocation the AOP invocation to convert;public RemoteInvocation(MethodInvocation methodInvocation) {_		this.methodName = methodInvocation.getMethod().getName()__		this.parameterTypes = methodInvocation.getMethod().getParameterTypes()__		this.arguments = methodInvocation.getArguments()__	};create,a,new,remote,invocation,for,the,given,aop,method,invocation,param,method,invocation,the,aop,invocation,to,convert;public,remote,invocation,method,invocation,method,invocation,this,method,name,method,invocation,get,method,get,name,this,parameter,types,method,invocation,get,method,get,parameter,types,this,arguments,method,invocation,get,arguments
RemoteInvocation -> public RemoteInvocation(MethodInvocation methodInvocation);1467730834;Create a new RemoteInvocation for the given AOP method invocation._@param methodInvocation the AOP invocation to convert;public RemoteInvocation(MethodInvocation methodInvocation) {_		this.methodName = methodInvocation.getMethod().getName()__		this.parameterTypes = methodInvocation.getMethod().getParameterTypes()__		this.arguments = methodInvocation.getArguments()__	};create,a,new,remote,invocation,for,the,given,aop,method,invocation,param,method,invocation,the,aop,invocation,to,convert;public,remote,invocation,method,invocation,method,invocation,this,method,name,method,invocation,get,method,get,name,this,parameter,types,method,invocation,get,method,get,parameter,types,this,arguments,method,invocation,get,arguments
RemoteInvocation -> public RemoteInvocation(MethodInvocation methodInvocation);1495868221;Create a new RemoteInvocation for the given AOP method invocation._@param methodInvocation the AOP invocation to convert;public RemoteInvocation(MethodInvocation methodInvocation) {_		this.methodName = methodInvocation.getMethod().getName()__		this.parameterTypes = methodInvocation.getMethod().getParameterTypes()__		this.arguments = methodInvocation.getArguments()__	};create,a,new,remote,invocation,for,the,given,aop,method,invocation,param,method,invocation,the,aop,invocation,to,convert;public,remote,invocation,method,invocation,method,invocation,this,method,name,method,invocation,get,method,get,name,this,parameter,types,method,invocation,get,method,get,parameter,types,this,arguments,method,invocation,get,arguments
RemoteInvocation -> public RemoteInvocation(MethodInvocation methodInvocation);1500448076;Create a new RemoteInvocation for the given AOP method invocation._@param methodInvocation the AOP invocation to convert;public RemoteInvocation(MethodInvocation methodInvocation) {_		this.methodName = methodInvocation.getMethod().getName()__		this.parameterTypes = methodInvocation.getMethod().getParameterTypes()__		this.arguments = methodInvocation.getArguments()__	};create,a,new,remote,invocation,for,the,given,aop,method,invocation,param,method,invocation,the,aop,invocation,to,convert;public,remote,invocation,method,invocation,method,invocation,this,method,name,method,invocation,get,method,get,name,this,parameter,types,method,invocation,get,method,get,parameter,types,this,arguments,method,invocation,get,arguments
RemoteInvocation -> public RemoteInvocation(MethodInvocation methodInvocation);1530174524;Create a new RemoteInvocation for the given AOP method invocation._@param methodInvocation the AOP invocation to convert;public RemoteInvocation(MethodInvocation methodInvocation) {_		this.methodName = methodInvocation.getMethod().getName()__		this.parameterTypes = methodInvocation.getMethod().getParameterTypes()__		this.arguments = methodInvocation.getArguments()__	};create,a,new,remote,invocation,for,the,given,aop,method,invocation,param,method,invocation,the,aop,invocation,to,convert;public,remote,invocation,method,invocation,method,invocation,this,method,name,method,invocation,get,method,get,name,this,parameter,types,method,invocation,get,method,get,parameter,types,this,arguments,method,invocation,get,arguments
RemoteInvocation -> @Nullable 	public Serializable getAttribute(String key);1495868221;Retrieve the attribute for the given key, if any._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@return the attribute value, or {@code null} if not defined;@Nullable_	public Serializable getAttribute(String key) {_		if (this.attributes == null) {_			return null__		}_		return this.attributes.get(key)__	};retrieve,the,attribute,for,the,given,key,if,any,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,return,the,attribute,value,or,code,null,if,not,defined;nullable,public,serializable,get,attribute,string,key,if,this,attributes,null,return,null,return,this,attributes,get,key
RemoteInvocation -> @Nullable 	public Serializable getAttribute(String key);1500448076;Retrieve the attribute for the given key, if any._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@return the attribute value, or {@code null} if not defined;@Nullable_	public Serializable getAttribute(String key) {_		if (this.attributes == null) {_			return null__		}_		return this.attributes.get(key)__	};retrieve,the,attribute,for,the,given,key,if,any,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,return,the,attribute,value,or,code,null,if,not,defined;nullable,public,serializable,get,attribute,string,key,if,this,attributes,null,return,null,return,this,attributes,get,key
RemoteInvocation -> @Nullable 	public Serializable getAttribute(String key);1530174524;Retrieve the attribute for the given key, if any._<p>The implementation avoids to unnecessarily create the attributes_Map, to minimize serialization size._@param key the attribute key_@return the attribute value, or {@code null} if not defined;@Nullable_	public Serializable getAttribute(String key) {_		if (this.attributes == null) {_			return null__		}_		return this.attributes.get(key)__	};retrieve,the,attribute,for,the,given,key,if,any,p,the,implementation,avoids,to,unnecessarily,create,the,attributes,map,to,minimize,serialization,size,param,key,the,attribute,key,return,the,attribute,value,or,code,null,if,not,defined;nullable,public,serializable,get,attribute,string,key,if,this,attributes,null,return,null,return,this,attributes,get,key
