commented;modifiers;parameterAmount;loc;comment;code
false;public;3;24;;@Override @Nullable public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {     String name = method.getName().     if ("equals".equals(name)) {         return (proxy == args[0]).     } else if ("hashCode".equals(name)) {         return hashCode().     } else if ("toString".equals(name)) {         return toString().     } else if ("initialize".equals(name)) {         initialize((Hashtable<?, ?>) args[0]).         return null.     } else if ("preProcess".equals(name)) {         return preProcess((String) args[0], (byte[]) args[1]).     } else {         throw new IllegalArgumentException("Unknown method: " + method).     } }
false;public;1;2;;public void initialize(Hashtable<?, ?> params) { }
false;public;2;9;;public byte[] preProcess(String className, byte[] classBytes) {     try {         byte[] result = this.transformer.transform(this.loader, className, null, null, classBytes).         return (result != null ? result : classBytes).     } catch (IllegalClassFormatException ex) {         throw new IllegalStateException("Cannot transform due to illegal class format", ex).     } }
false;public;0;4;;@Override public String toString() {     return getClass().getName() + " for transformer: " + this.transformer. }
