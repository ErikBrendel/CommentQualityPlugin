commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set one or more sources to find cache operations.  * @see CacheInterceptor#setCacheOperationSources  */ ;/**  * Set one or more sources to find cache operations.  * @see CacheInterceptor#setCacheOperationSources  */ public void setCacheOperationSources(CacheOperationSource... cacheOperationSources) {     this.cacheInterceptor.setCacheOperationSources(cacheOperationSources). }
true;public;1;3;/**  * Set the default {@link KeyGenerator} that this cache aspect should delegate to  * if no specific key generator has been set for the operation.  * <p>The default is a {@link SimpleKeyGenerator}.  * @since 5.0.3  * @see CacheInterceptor#setKeyGenerator  */ ;/**  * Set the default {@link KeyGenerator} that this cache aspect should delegate to  * if no specific key generator has been set for the operation.  * <p>The default is a {@link SimpleKeyGenerator}.  * @since 5.0.3  * @see CacheInterceptor#setKeyGenerator  */ public void setKeyGenerator(KeyGenerator keyGenerator) {     this.cacheInterceptor.setKeyGenerator(keyGenerator). }
true;public;1;3;/**  * Set the default {@link CacheResolver} that this cache aspect should delegate  * to if no specific cache resolver has been set for the operation.  * <p>The default resolver resolves the caches against their names and the  * default cache manager.  * @since 5.0.3  * @see CacheInterceptor#setCacheResolver  */ ;/**  * Set the default {@link CacheResolver} that this cache aspect should delegate  * to if no specific cache resolver has been set for the operation.  * <p>The default resolver resolves the caches against their names and the  * default cache manager.  * @since 5.0.3  * @see CacheInterceptor#setCacheResolver  */ public void setCacheResolver(CacheResolver cacheResolver) {     this.cacheInterceptor.setCacheResolver(cacheResolver). }
true;public;1;3;/**  * Set the {@link CacheManager} to use to create a default {@link CacheResolver}.  * Replace the current {@link CacheResolver}, if any.  * @since 5.0.3  * @see CacheInterceptor#setCacheManager  */ ;/**  * Set the {@link CacheManager} to use to create a default {@link CacheResolver}.  * Replace the current {@link CacheResolver}, if any.  * @since 5.0.3  * @see CacheInterceptor#setCacheManager  */ public void setCacheManager(CacheManager cacheManager) {     this.cacheInterceptor.setCacheManager(cacheManager). }
true;public;1;3;/**  * Set a pointcut, i.e. a bean that triggers conditional invocation of the  * {@link CacheInterceptor} depending on the method and attributes passed.  * <p>Note: Additional interceptors are always invoked.  * @see #setPreInterceptors  * @see #setPostInterceptors  */ ;/**  * Set a pointcut, i.e. a bean that triggers conditional invocation of the  * {@link CacheInterceptor} depending on the method and attributes passed.  * <p>Note: Additional interceptors are always invoked.  * @see #setPreInterceptors  * @see #setPostInterceptors  */ public void setPointcut(Pointcut pointcut) {     this.pointcut = pointcut. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.cacheInterceptor.setBeanFactory(beanFactory). }
false;public;0;4;;@Override public void afterSingletonsInstantiated() {     this.cacheInterceptor.afterSingletonsInstantiated(). }
false;protected;0;5;;@Override protected Object createMainInterceptor() {     this.cacheInterceptor.afterPropertiesSet().     return new DefaultPointcutAdvisor(this.pointcut, this.cacheInterceptor). }
