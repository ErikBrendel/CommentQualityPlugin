commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override @SuppressWarnings("unchecked") public Set<Class<?>> getFieldTypes() {     return (Set) Collections.singleton(MonetaryAmount.class). }
false;public;2;4;;@Override public Printer<MonetaryAmount> getPrinter(NumberFormat annotation, Class<?> fieldType) {     return configureFormatterFrom(annotation). }
false;public;2;4;;@Override public Parser<MonetaryAmount> getParser(NumberFormat annotation, Class<?> fieldType) {     return configureFormatterFrom(annotation). }
false;private;1;18;;private Formatter<MonetaryAmount> configureFormatterFrom(NumberFormat annotation) {     String pattern = resolveEmbeddedValue(annotation.pattern()).     if (StringUtils.hasLength(pattern)) {         return new PatternDecoratingFormatter(pattern).     } else {         Style style = annotation.style().         if (style == Style.NUMBER) {             return new NumberDecoratingFormatter(new NumberStyleFormatter()).         } else if (style == Style.PERCENT) {             return new NumberDecoratingFormatter(new PercentStyleFormatter()).         } else {             return new NumberDecoratingFormatter(new CurrencyStyleFormatter()).         }     } }
false;public;2;4;;@Override public String print(MonetaryAmount object, Locale locale) {     return this.numberFormatter.print(object.getNumber(), locale). }
false;public;2;6;;@Override public MonetaryAmount parse(String text, Locale locale) throws ParseException {     CurrencyUnit currencyUnit = Monetary.getCurrency(locale).     Number numberValue = this.numberFormatter.parse(text, locale).     return Monetary.getDefaultAmountFactory().setNumber(numberValue).setCurrency(currencyUnit).create(). }
false;public;2;7;;@Override public String print(MonetaryAmount object, Locale locale) {     CurrencyStyleFormatter formatter = new CurrencyStyleFormatter().     formatter.setCurrency(Currency.getInstance(object.getCurrency().getCurrencyCode())).     formatter.setPattern(this.pattern).     return formatter.print(object.getNumber(), locale). }
false;public;2;10;;@Override public MonetaryAmount parse(String text, Locale locale) throws ParseException {     CurrencyStyleFormatter formatter = new CurrencyStyleFormatter().     Currency currency = determineCurrency(text, locale).     CurrencyUnit currencyUnit = Monetary.getCurrency(currency.getCurrencyCode()).     formatter.setCurrency(currency).     formatter.setPattern(this.pattern).     Number numberValue = formatter.parse(text, locale).     return Monetary.getDefaultAmountFactory().setNumber(numberValue).setCurrency(currencyUnit).create(). }
false;private;2;22;;private Currency determineCurrency(String text, Locale locale) {     try {         if (text.length() < 3) {             // try with locale and likely let it fail on parse.             return Currency.getInstance(locale).         } else if (this.pattern.startsWith(CURRENCY_CODE_PATTERN)) {             return Currency.getInstance(text.substring(0, 3)).         } else if (this.pattern.endsWith(CURRENCY_CODE_PATTERN)) {             return Currency.getInstance(text.substring(text.length() - 3)).         } else {             // A pattern without a currency code...             return Currency.getInstance(locale).         }     } catch (IllegalArgumentException ex) {         throw new IllegalArgumentException("Cannot determine currency for number value [" + text + "]", ex).     } }
