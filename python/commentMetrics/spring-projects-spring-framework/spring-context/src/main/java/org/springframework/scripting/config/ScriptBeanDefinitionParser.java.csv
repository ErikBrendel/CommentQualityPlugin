# id;timestamp;commentText;codeText;commentWords;codeWords
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1328020251;Resolves the script source from either the '<code>script-source</code>' attribute or_the '<code>inline-script</code>' element. Logs and {@link XmlReaderContext#error} and_returns <code>null</code> if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = (Element) elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,code,attribute,or,the,code,inline,script,code,element,logs,and,link,xml,reader,context,error,and,returns,code,null,code,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1356735495;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = (Element) elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1357119417;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = (Element) elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1362408075;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = (Element) elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1385412762;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1431122168;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1432135182;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1447323728;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1467744603;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> private String resolveScriptSource(Element element, XmlReaderContext readerContext);1471388018;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1328020251;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1356735495;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1357119417;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1362408075;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1385412762;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1431122168;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1432135182;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1447323728;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1467744603;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1471388018;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1495868221;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1496242568;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1496837955;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1502974979;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> public ScriptBeanDefinitionParser(String scriptFactoryClassName);1537388389;Create a new instance of this parser, creating bean definitions for the_supplied {@link org.springframework.scripting.ScriptFactory} class._@param scriptFactoryClassName the ScriptFactory class to operate on;public ScriptBeanDefinitionParser(String scriptFactoryClassName) {_		this.scriptFactoryClassName = scriptFactoryClassName__	};create,a,new,instance,of,this,parser,creating,bean,definitions,for,the,supplied,link,org,springframework,scripting,script,factory,class,param,script,factory,class,name,the,script,factory,class,to,operate,on;public,script,bean,definition,parser,string,script,factory,class,name,this,script,factory,class,name,script,factory,class,name
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	@Nullable 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1502974979;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	@Nullable_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		if (element.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, Long.valueOf(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, Boolean.valueOf(proxyTargetClass))__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,nullable,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,if,element,has,attribute,string,destroy,method,element,get,attribute,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,long,value,of,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,bd,set,attribute,script,factory,post,processor,boolean,value,of,proxy,target,class,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	@Nullable 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1537388389;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	@Nullable_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == AbstractBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = AbstractBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = AbstractBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		if (element.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, Long.valueOf(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, Boolean.valueOf(proxyTargetClass))__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,nullable,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,abstract,bean,definition,autowire,mode,abstract,bean,definition,else,if,autowire,mode,abstract,bean,definition,autowire,mode,abstract,bean,definition,bd,set,autowire,mode,autowire,mode,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,if,element,has,attribute,string,destroy,method,element,get,attribute,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,long,value,of,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,bd,set,attribute,script,factory,post,processor,boolean,value,of,proxy,target,class,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1357119417;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependencyCheck = element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck))___		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(destroyMethod)) {_			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE))__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,dependency,check,element,get,attribute,bd,set,dependency,check,parser,context,get,delegate,get,dependency,check,dependency,check,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,string,destroy,method,element,get,attribute,if,string,utils,has,length,destroy,method,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1362408075;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependencyCheck = element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck))___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(destroyMethod)) {_			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE))__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,dependency,check,element,get,attribute,bd,set,dependency,check,parser,context,get,delegate,get,dependency,check,dependency,check,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,string,destroy,method,element,get,attribute,if,string,utils,has,length,destroy,method,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1385412762;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependencyCheck = element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck))___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(destroyMethod)) {_			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE))__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,dependency,check,element,get,attribute,bd,set,dependency,check,parser,context,get,delegate,get,dependency,check,dependency,check,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,string,destroy,method,element,get,attribute,if,string,utils,has,length,destroy,method,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1431122168;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependencyCheck = element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck))___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(destroyMethod)) {_			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,dependency,check,element,get,attribute,bd,set,dependency,check,parser,context,get,delegate,get,dependency,check,dependency,check,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,string,destroy,method,element,get,attribute,if,string,utils,has,length,destroy,method,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1432135182;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependencyCheck = element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck))___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		if (element.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,dependency,check,element,get,attribute,bd,set,dependency,check,parser,context,get,delegate,get,dependency,check,dependency,check,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,if,element,has,attribute,string,destroy,method,element,get,attribute,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1447323728;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependencyCheck = element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck))___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		if (element.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,dependency,check,element,get,attribute,bd,set,dependency,check,parser,context,get,delegate,get,dependency,check,dependency,check,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,if,element,has,attribute,string,destroy,method,element,get,attribute,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1467744603;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		if (element.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,if,element,has,attribute,string,destroy,method,element,get,attribute,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1471388018;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		if (element.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, Long.valueOf(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, Boolean.valueOf(proxyTargetClass))__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,if,element,has,attribute,string,destroy,method,element,get,attribute,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,long,value,of,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,bd,set,attribute,script,factory,post,processor,boolean,value,of,proxy,target,class,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1495868221;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		if (element.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, Long.valueOf(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, Boolean.valueOf(proxyTargetClass))__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,if,element,has,attribute,string,destroy,method,element,get,attribute,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,long,value,of,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,bd,set,attribute,script,factory,post,processor,boolean,value,of,proxy,target,class,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	@SuppressWarnings("deprecation") 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1496837955;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	@SuppressWarnings("deprecation")_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String engine = element.getAttribute(ENGINE_ATTRIBUTE)___		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependsOn = element.getAttribute(DEPENDS_ON_ATTRIBUTE)__		if (StringUtils.hasLength(dependsOn)) {_			bd.setDependsOn(StringUtils.tokenizeToStringArray(_					dependsOn, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		if (element.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, Long.valueOf(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, Boolean.valueOf(proxyTargetClass))__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		if (StringUtils.hasLength(engine)) {_			cav.addIndexedArgumentValue(constructorArgNum++, engine)__		}_		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(_					constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE), "java.lang.Class[]")__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,suppress,warnings,deprecation,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,engine,element,get,attribute,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,depends,on,element,get,attribute,if,string,utils,has,length,depends,on,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,bean,definition,parser,delegate,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,if,element,has,attribute,string,destroy,method,element,get,attribute,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,long,value,of,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,bd,set,attribute,script,factory,post,processor,boolean,value,of,proxy,target,class,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,if,string,utils,has,length,engine,cav,add,indexed,argument,value,constructor,arg,num,engine,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,java,lang,class,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1328020251;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1356735495;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1357119417;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1362408075;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1385412762;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1431122168;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1432135182;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1447323728;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1467744603;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1471388018;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1495868221;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1496242568;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1496837955;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1502974979;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected boolean shouldGenerateIdAsFallback();1537388389;Scripted beans may be anonymous as well.;@Override_	protected boolean shouldGenerateIdAsFallback() {_		return true__	};scripted,beans,may,be,anonymous,as,well;override,protected,boolean,should,generate,id,as,fallback,return,true
ScriptBeanDefinitionParser -> @Override 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1328020251;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())__		_		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependencyCheck = element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck))___		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(destroyMethod)) {_			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE))__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,dependency,check,element,get,attribute,bd,set,dependency,check,parser,context,get,delegate,get,dependency,check,dependency,check,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,string,destroy,method,element,get,attribute,if,string,utils,has,length,destroy,method,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Override 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1356735495;Parses the dynamic object element and returns the resulting bean definition._Registers a {@link ScriptFactoryPostProcessor} if needed.;@Override_	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		_		String value = resolveScriptSource(element, parserContext.getReaderContext())__		if (value == null) {_			return null__		}__		_		LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry())___		_		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setBeanClassName(this.scriptFactoryClassName)__		bd.setSource(parserContext.extractSource(element))__		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName())___		_		String scope = element.getAttribute(SCOPE_ATTRIBUTE)__		if (StringUtils.hasLength(scope)) {_			bd.setScope(scope)__		}__		_		String autowire = element.getAttribute(AUTOWIRE_ATTRIBUTE)__		int autowireMode = parserContext.getDelegate().getAutowireMode(autowire)__		_		if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_BY_TYPE__		}_		else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {_			autowireMode = GenericBeanDefinition.AUTOWIRE_NO__		}_		bd.setAutowireMode(autowireMode)___		_		String dependencyCheck = element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck))___		_		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults()___		_		String initMethod = element.getAttribute(INIT_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(initMethod)) {_			bd.setInitMethodName(initMethod)__		}_		else if (beanDefinitionDefaults.getInitMethodName() != null) {_			bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName())__		}__		String destroyMethod = element.getAttribute(DESTROY_METHOD_ATTRIBUTE)__		if (StringUtils.hasLength(destroyMethod)) {_			bd.setDestroyMethodName(destroyMethod)__		}_		else if (beanDefinitionDefaults.getDestroyMethodName() != null) {_			bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName())__		}__		_		String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE)__		if (StringUtils.hasText(refreshCheckDelay)) {_			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay))__		}__		_		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE)__		if (StringUtils.hasText(proxyTargetClass)) {_			Boolean flag = new Boolean(proxyTargetClass)__			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag)__		}__		_		ConstructorArgumentValues cav = bd.getConstructorArgumentValues()__		int constructorArgNum = 0__		cav.addIndexedArgumentValue(constructorArgNum++, value)__		if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {_			cav.addIndexedArgumentValue(constructorArgNum++, element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE))__		}__		_		if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {_			String customizerBeanName = element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE)__			if (!StringUtils.hasText(customizerBeanName)) {_				parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value", element)__			}_			else {_				cav.addIndexedArgumentValue(constructorArgNum++, new RuntimeBeanReference(customizerBeanName))__			}_		}__		_		parserContext.getDelegate().parsePropertyElements(element, bd)___		return bd__	};parses,the,dynamic,object,element,and,returns,the,resulting,bean,definition,registers,a,link,script,factory,post,processor,if,needed;override,protected,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,string,value,resolve,script,source,element,parser,context,get,reader,context,if,value,null,return,null,lang,namespace,utils,register,script,factory,post,processor,if,necessary,parser,context,get,registry,generic,bean,definition,bd,new,generic,bean,definition,bd,set,bean,class,name,this,script,factory,class,name,bd,set,source,parser,context,extract,source,element,bd,set,attribute,script,factory,post,processor,element,get,local,name,string,scope,element,get,attribute,if,string,utils,has,length,scope,bd,set,scope,scope,string,autowire,element,get,attribute,int,autowire,mode,parser,context,get,delegate,get,autowire,mode,autowire,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,else,if,autowire,mode,generic,bean,definition,autowire,mode,generic,bean,definition,bd,set,autowire,mode,autowire,mode,string,dependency,check,element,get,attribute,bd,set,dependency,check,parser,context,get,delegate,get,dependency,check,dependency,check,bean,definition,defaults,bean,definition,defaults,parser,context,get,delegate,get,bean,definition,defaults,string,init,method,element,get,attribute,if,string,utils,has,length,init,method,bd,set,init,method,name,init,method,else,if,bean,definition,defaults,get,init,method,name,null,bd,set,init,method,name,bean,definition,defaults,get,init,method,name,string,destroy,method,element,get,attribute,if,string,utils,has,length,destroy,method,bd,set,destroy,method,name,destroy,method,else,if,bean,definition,defaults,get,destroy,method,name,null,bd,set,destroy,method,name,bean,definition,defaults,get,destroy,method,name,string,refresh,check,delay,element,get,attribute,if,string,utils,has,text,refresh,check,delay,bd,set,attribute,script,factory,post,processor,new,long,refresh,check,delay,string,proxy,target,class,element,get,attribute,if,string,utils,has,text,proxy,target,class,boolean,flag,new,boolean,proxy,target,class,bd,set,attribute,script,factory,post,processor,flag,constructor,argument,values,cav,bd,get,constructor,argument,values,int,constructor,arg,num,0,cav,add,indexed,argument,value,constructor,arg,num,value,if,element,has,attribute,cav,add,indexed,argument,value,constructor,arg,num,element,get,attribute,if,element,has,attribute,string,customizer,bean,name,element,get,attribute,if,string,utils,has,text,customizer,bean,name,parser,context,get,reader,context,error,attribute,customizer,ref,has,empty,value,element,else,cav,add,indexed,argument,value,constructor,arg,num,new,runtime,bean,reference,customizer,bean,name,parser,context,get,delegate,parse,property,elements,element,bd,return,bd
ScriptBeanDefinitionParser -> @Nullable 	private String resolveScriptSource(Element element, XmlReaderContext readerContext);1495868221;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;@Nullable_	private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;nullable,private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> @Nullable 	private String resolveScriptSource(Element element, XmlReaderContext readerContext);1496242568;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;@Nullable_	private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;nullable,private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> @Nullable 	private String resolveScriptSource(Element element, XmlReaderContext readerContext);1496837955;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;@Nullable_	private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;nullable,private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> @Nullable 	private String resolveScriptSource(Element element, XmlReaderContext readerContext);1502974979;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;@Nullable_	private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;nullable,private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
ScriptBeanDefinitionParser -> @Nullable 	private String resolveScriptSource(Element element, XmlReaderContext readerContext);1537388389;Resolves the script source from either the '{@code script-source}' attribute or_the '{@code inline-script}' element. Logs and {@link XmlReaderContext#error} and_returns {@code null} if neither or both of these values are specified.;@Nullable_	private String resolveScriptSource(Element element, XmlReaderContext readerContext) {_		boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT)__		if (hasScriptSource && !elements.isEmpty()) {_			readerContext.error("Only one of 'script-source' and 'inline-script' should be specified.", element)__			return null__		}_		else if (hasScriptSource) {_			return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE)__		}_		else if (!elements.isEmpty()) {_			Element inlineElement = elements.get(0)__			return "inline:" + DomUtils.getTextValue(inlineElement)__		}_		else {_			readerContext.error("Must specify either 'script-source' or 'inline-script'.", element)__			return null__		}_	};resolves,the,script,source,from,either,the,code,script,source,attribute,or,the,code,inline,script,element,logs,and,link,xml,reader,context,error,and,returns,code,null,if,neither,or,both,of,these,values,are,specified;nullable,private,string,resolve,script,source,element,element,xml,reader,context,reader,context,boolean,has,script,source,element,has,attribute,list,element,elements,dom,utils,get,child,elements,by,tag,name,element,if,has,script,source,elements,is,empty,reader,context,error,only,one,of,script,source,and,inline,script,should,be,specified,element,return,null,else,if,has,script,source,return,element,get,attribute,else,if,elements,is,empty,element,inline,element,elements,get,0,return,inline,dom,utils,get,text,value,inline,element,else,reader,context,error,must,specify,either,script,source,or,inline,script,element,return,null
