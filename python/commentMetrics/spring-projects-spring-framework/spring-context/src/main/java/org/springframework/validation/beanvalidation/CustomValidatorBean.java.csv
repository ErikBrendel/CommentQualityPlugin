commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the ValidatorFactory to obtain the target Validator from.  * <p>Default is {@link javax.validation.Validation#buildDefaultValidatorFactory()}.  */ ;/**  * Set the ValidatorFactory to obtain the target Validator from.  * <p>Default is {@link javax.validation.Validation#buildDefaultValidatorFactory()}.  */ public void setValidatorFactory(ValidatorFactory validatorFactory) {     this.validatorFactory = validatorFactory. }
true;public;1;3;/**  * Specify a custom MessageInterpolator to use for this Validator.  */ ;/**  * Specify a custom MessageInterpolator to use for this Validator.  */ public void setMessageInterpolator(MessageInterpolator messageInterpolator) {     this.messageInterpolator = messageInterpolator. }
true;public;1;3;/**  * Specify a custom TraversableResolver to use for this Validator.  */ ;/**  * Specify a custom TraversableResolver to use for this Validator.  */ public void setTraversableResolver(TraversableResolver traversableResolver) {     this.traversableResolver = traversableResolver. }
false;public;0;18;;@Override public void afterPropertiesSet() {     if (this.validatorFactory == null) {         this.validatorFactory = Validation.buildDefaultValidatorFactory().     }     ValidatorContext validatorContext = this.validatorFactory.usingContext().     MessageInterpolator targetInterpolator = this.messageInterpolator.     if (targetInterpolator == null) {         targetInterpolator = this.validatorFactory.getMessageInterpolator().     }     validatorContext.messageInterpolator(new LocaleContextMessageInterpolator(targetInterpolator)).     if (this.traversableResolver != null) {         validatorContext.traversableResolver(this.traversableResolver).     }     setTargetValidator(validatorContext.getValidator()). }
