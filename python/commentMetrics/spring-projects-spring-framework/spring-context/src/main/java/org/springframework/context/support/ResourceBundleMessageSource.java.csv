# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1495868221;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1496242568;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1496837955;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1498780456;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1502974979;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1515532323;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1515532822;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1518167602;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1524846271;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1525211434;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1534438291;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> @Nullable 	protected String getStringOrNull(ResourceBundle bundle, String key);1551080576;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);@Nullable_	protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex) {_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;nullable,protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1328020251;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1329142650;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1348671314;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1356735495;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1357119239;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1362408075;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1363695025;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1368482696;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1423593059;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1425660337;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1438277652;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1454612260;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1467730834;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1495868221;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1496242568;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1496837955;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1498780456;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1502974979;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1515532323;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1515532822;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1518167602;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1524846271;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1525211434;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1534438291;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> public void setBundleClassLoader(ClassLoader classLoader);1551080576;Set the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's_{@link org.springframework.beans.factory.BeanClassLoaderAware bean ClassLoader},_or the default ClassLoader determined by_{@link org.springframework.util.ClassUtils#getDefaultClassLoader()}_if not running within a BeanFactory.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,link,org,springframework,beans,factory,bean,class,loader,aware,bean,class,loader,or,the,default,class,loader,determined,by,link,org,springframework,util,class,utils,get,default,class,loader,if,not,running,within,a,bean,factory;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1328020251;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or <code>null</code> if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,code,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1329142650;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or <code>null</code> if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,code,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1348671314;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or <code>null</code> if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,code,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1356735495;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1357119239;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1362408075;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1363695025;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1368482696;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1423593059;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1425660337;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1438277652;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1454612260;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<String, Map<Locale, MessageFormat>>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<Locale, MessageFormat>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,string,map,locale,message,format,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,locale,message,format,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1467730834;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1328020251;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1329142650;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1348671314;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		if ((this.defaultEncoding != null && !"ISO-8859-1".equals(this.defaultEncoding)) ||_				!this.fallbackToSystemLocale || this.cacheMillis >= 0) {_			_			if (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_16) {_				throw new IllegalStateException("Cannot use 'defaultEncoding', 'fallbackToSystemLocale' and " +_						"'cacheSeconds' on the standard ResourceBundleMessageSource when running on Java 5. " +_						"Consider using ReloadableResourceBundleMessageSource instead.")__			}_			return new ControlBasedResourceBundleFactory().getBundle(basename, locale)__		}_		else {_			_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__		}_	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,if,this,default,encoding,null,iso,8859,1,equals,this,default,encoding,this,fallback,to,system,locale,this,cache,millis,0,if,jdk,version,get,major,java,version,jdk,version,throw,new,illegal,state,exception,cannot,use,default,encoding,fallback,to,system,locale,and,cache,seconds,on,the,standard,resource,bundle,message,source,when,running,on,java,5,consider,using,reloadable,resource,bundle,message,source,instead,return,new,control,based,resource,bundle,factory,get,bundle,basename,locale,else,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1356735495;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		if ((this.defaultEncoding != null && !"ISO-8859-1".equals(this.defaultEncoding)) ||_				!this.fallbackToSystemLocale || this.cacheMillis >= 0) {_			_			if (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_16) {_				throw new IllegalStateException("Cannot use 'defaultEncoding', 'fallbackToSystemLocale' and " +_						"'cacheSeconds' on the standard ResourceBundleMessageSource when running on Java 5. " +_						"Consider using ReloadableResourceBundleMessageSource instead.")__			}_			return new ControlBasedResourceBundleFactory().getBundle(basename, locale)__		}_		else {_			_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__		}_	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,if,this,default,encoding,null,iso,8859,1,equals,this,default,encoding,this,fallback,to,system,locale,this,cache,millis,0,if,jdk,version,get,major,java,version,jdk,version,throw,new,illegal,state,exception,cannot,use,default,encoding,fallback,to,system,locale,and,cache,seconds,on,the,standard,resource,bundle,message,source,when,running,on,java,5,consider,using,reloadable,resource,bundle,message,source,instead,return,new,control,based,resource,bundle,factory,get,bundle,basename,locale,else,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1357119239;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		if ((this.defaultEncoding != null && !"ISO-8859-1".equals(this.defaultEncoding)) ||_				!this.fallbackToSystemLocale || this.cacheMillis >= 0) {_			_			if (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_16) {_				throw new IllegalStateException("Cannot use 'defaultEncoding', 'fallbackToSystemLocale' and " +_						"'cacheSeconds' on the standard ResourceBundleMessageSource when running on Java 5. " +_						"Consider using ReloadableResourceBundleMessageSource instead.")__			}_			return new ControlBasedResourceBundleFactory().getBundle(basename, locale)__		}_		else {_			_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__		}_	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,if,this,default,encoding,null,iso,8859,1,equals,this,default,encoding,this,fallback,to,system,locale,this,cache,millis,0,if,jdk,version,get,major,java,version,jdk,version,throw,new,illegal,state,exception,cannot,use,default,encoding,fallback,to,system,locale,and,cache,seconds,on,the,standard,resource,bundle,message,source,when,running,on,java,5,consider,using,reloadable,resource,bundle,message,source,instead,return,new,control,based,resource,bundle,factory,get,bundle,basename,locale,else,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1362408075;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		if ((this.defaultEncoding != null && !"ISO-8859-1".equals(this.defaultEncoding)) ||_				!this.fallbackToSystemLocale || this.cacheMillis >= 0) {_			_			if (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_16) {_				throw new IllegalStateException("Cannot use 'defaultEncoding', 'fallbackToSystemLocale' and " +_						"'cacheSeconds' on the standard ResourceBundleMessageSource when running on Java 5. " +_						"Consider using ReloadableResourceBundleMessageSource instead.")__			}_			return new ControlBasedResourceBundleFactory().getBundle(basename, locale)__		}_		else {_			_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__		}_	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,if,this,default,encoding,null,iso,8859,1,equals,this,default,encoding,this,fallback,to,system,locale,this,cache,millis,0,if,jdk,version,get,major,java,version,jdk,version,throw,new,illegal,state,exception,cannot,use,default,encoding,fallback,to,system,locale,and,cache,seconds,on,the,standard,resource,bundle,message,source,when,running,on,java,5,consider,using,reloadable,resource,bundle,message,source,instead,return,new,control,based,resource,bundle,factory,get,bundle,basename,locale,else,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1363695025;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		if ((this.defaultEncoding != null && !"ISO-8859-1".equals(this.defaultEncoding)) ||_				!this.fallbackToSystemLocale || this.cacheMillis >= 0) {_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__		}_		else {_			_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__		}_	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,if,this,default,encoding,null,iso,8859,1,equals,this,default,encoding,this,fallback,to,system,locale,this,cache,millis,0,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control,else,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1368482696;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		if ((this.defaultEncoding != null && !"ISO-8859-1".equals(this.defaultEncoding)) ||_				!this.fallbackToSystemLocale || this.cacheMillis >= 0) {_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__		}_		else {_			_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__		}_	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,if,this,default,encoding,null,iso,8859,1,equals,this,default,encoding,this,fallback,to,system,locale,this,cache,millis,0,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control,else,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1423593059;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		if ((this.defaultEncoding != null && !"ISO-8859-1".equals(this.defaultEncoding)) ||_				!this.fallbackToSystemLocale || this.cacheMillis >= 0) {_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__		}_		else {_			_			return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__		}_	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,if,this,default,encoding,null,iso,8859,1,equals,this,default,encoding,this,fallback,to,system,locale,this,cache,millis,0,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control,else,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1425660337;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1438277652;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1454612260;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1467730834;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1495868221;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1496242568;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1496837955;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader(), new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1498780456;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")__		return ResourceBundle.getBundle(basename, locale, classLoader, new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,return,resource,bundle,get,bundle,basename,locale,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1502974979;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")__		return ResourceBundle.getBundle(basename, locale, classLoader, new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,return,resource,bundle,get,bundle,basename,locale,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1515532323;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")__		return ResourceBundle.getBundle(basename, locale, classLoader, new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,return,resource,bundle,get,bundle,basename,locale,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1515532822;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")__		return ResourceBundle.getBundle(basename, locale, classLoader, new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,return,resource,bundle,get,bundle,basename,locale,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1518167602;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")__		return ResourceBundle.getBundle(basename, locale, classLoader, new MessageSourceControl())__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,return,resource,bundle,get,bundle,basename,locale,class,loader,new,message,source,control
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1524846271;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")__		String defaultEncoding = getDefaultEncoding()___		if ((defaultEncoding != null && !"ISO-8859-1".equals(defaultEncoding)) ||_				!isFallbackToSystemLocale() || getCacheMillis() >= 0) {_			try {_				return ResourceBundle.getBundle(basename, locale, classLoader, new MessageSourceControl())__			}_			catch (UnsupportedOperationException ex) {_				_				throw new IllegalStateException(_						"Custom ResourceBundleMessageSource configuration requires custom ResourceBundle.Control " +_						"which is not supported in current system environment (e.g. JDK 9+ module path deployment): " +_						"consider using defaults (ISO-8859-1 encoding, fallback to system locale, unlimited caching)",_						ex)__			}_		}_		else {_			return ResourceBundle.getBundle(basename, locale, classLoader)__		}_	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,string,default,encoding,get,default,encoding,if,default,encoding,null,iso,8859,1,equals,default,encoding,is,fallback,to,system,locale,get,cache,millis,0,try,return,resource,bundle,get,bundle,basename,locale,class,loader,new,message,source,control,catch,unsupported,operation,exception,ex,throw,new,illegal,state,exception,custom,resource,bundle,message,source,configuration,requires,custom,resource,bundle,control,which,is,not,supported,in,current,system,environment,e,g,jdk,9,module,path,deployment,consider,using,defaults,iso,8859,1,encoding,fallback,to,system,locale,unlimited,caching,ex,else,return,resource,bundle,get,bundle,basename,locale,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1525211434;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")___		MessageSourceControl control = this.control__		if (control != null) {_			try {_				return ResourceBundle.getBundle(basename, locale, classLoader, control)__			}_			catch (UnsupportedOperationException ex) {_				_				this.control = null__				String encoding = getDefaultEncoding()__				if (encoding != null && logger.isInfoEnabled()) {_					logger.info("ResourceBundleMessageSource is configured to read resources with encoding '" +_							encoding + "' but ResourceBundle.Control not supported in current system environment: " +_							ex.getMessage() + " - falling back to plain ResourceBundle.getBundle retrieval with the " +_							"platform default encoding. Consider setting the 'defaultEncoding' property to 'null' " +_							"for participating in the platform default and therefore avoiding this log message.")__				}_			}_		}__		_		return ResourceBundle.getBundle(basename, locale, classLoader)__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,message,source,control,control,this,control,if,control,null,try,return,resource,bundle,get,bundle,basename,locale,class,loader,control,catch,unsupported,operation,exception,ex,this,control,null,string,encoding,get,default,encoding,if,encoding,null,logger,is,info,enabled,logger,info,resource,bundle,message,source,is,configured,to,read,resources,with,encoding,encoding,but,resource,bundle,control,not,supported,in,current,system,environment,ex,get,message,falling,back,to,plain,resource,bundle,get,bundle,retrieval,with,the,platform,default,encoding,consider,setting,the,default,encoding,property,to,null,for,participating,in,the,platform,default,and,therefore,avoiding,this,log,message,return,resource,bundle,get,bundle,basename,locale,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1534438291;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")___		MessageSourceControl control = this.control__		if (control != null) {_			try {_				return ResourceBundle.getBundle(basename, locale, classLoader, control)__			}_			catch (UnsupportedOperationException ex) {_				_				this.control = null__				String encoding = getDefaultEncoding()__				if (encoding != null && logger.isInfoEnabled()) {_					logger.info("ResourceBundleMessageSource is configured to read resources with encoding '" +_							encoding + "' but ResourceBundle.Control not supported in current system environment: " +_							ex.getMessage() + " - falling back to plain ResourceBundle.getBundle retrieval with the " +_							"platform default encoding. Consider setting the 'defaultEncoding' property to 'null' " +_							"for participating in the platform default and therefore avoiding this log message.")__				}_			}_		}__		_		return ResourceBundle.getBundle(basename, locale, classLoader)__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,message,source,control,control,this,control,if,control,null,try,return,resource,bundle,get,bundle,basename,locale,class,loader,control,catch,unsupported,operation,exception,ex,this,control,null,string,encoding,get,default,encoding,if,encoding,null,logger,is,info,enabled,logger,info,resource,bundle,message,source,is,configured,to,read,resources,with,encoding,encoding,but,resource,bundle,control,not,supported,in,current,system,environment,ex,get,message,falling,back,to,plain,resource,bundle,get,bundle,retrieval,with,the,platform,default,encoding,consider,setting,the,default,encoding,property,to,null,for,participating,in,the,platform,default,and,therefore,avoiding,this,log,message,return,resource,bundle,get,bundle,basename,locale,class,loader
ResourceBundleMessageSource -> protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException;1551080576;Obtain the resource bundle for the given basename and Locale._@param basename the basename to look for_@param locale the Locale to look for_@return the corresponding ResourceBundle_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)_@see #getBundleClassLoader();protected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {_		ClassLoader classLoader = getBundleClassLoader()__		Assert.state(classLoader != null, "No bundle ClassLoader set")___		MessageSourceControl control = this.control__		if (control != null) {_			try {_				return ResourceBundle.getBundle(basename, locale, classLoader, control)__			}_			catch (UnsupportedOperationException ex) {_				_				this.control = null__				String encoding = getDefaultEncoding()__				if (encoding != null && logger.isInfoEnabled()) {_					logger.info("ResourceBundleMessageSource is configured to read resources with encoding '" +_							encoding + "' but ResourceBundle.Control not supported in current system environment: " +_							ex.getMessage() + " - falling back to plain ResourceBundle.getBundle retrieval with the " +_							"platform default encoding. Consider setting the 'defaultEncoding' property to 'null' " +_							"for participating in the platform default and therefore avoiding this log message.")__				}_			}_		}__		_		return ResourceBundle.getBundle(basename, locale, classLoader)__	};obtain,the,resource,bundle,for,the,given,basename,and,locale,param,basename,the,basename,to,look,for,param,locale,the,locale,to,look,for,return,the,corresponding,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,locale,class,loader,see,get,bundle,class,loader;protected,resource,bundle,do,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,class,loader,class,loader,get,bundle,class,loader,assert,state,class,loader,null,no,bundle,class,loader,set,message,source,control,control,this,control,if,control,null,try,return,resource,bundle,get,bundle,basename,locale,class,loader,control,catch,unsupported,operation,exception,ex,this,control,null,string,encoding,get,default,encoding,if,encoding,null,logger,is,info,enabled,logger,info,resource,bundle,message,source,is,configured,to,read,resources,with,encoding,encoding,but,resource,bundle,control,not,supported,in,current,system,environment,ex,get,message,falling,back,to,plain,resource,bundle,get,bundle,retrieval,with,the,platform,default,encoding,consider,setting,the,default,encoding,property,to,null,for,participating,in,the,platform,default,and,therefore,avoiding,this,log,message,return,resource,bundle,get,bundle,basename,locale,class,loader
ResourceBundleMessageSource -> @Override 	public String toString();1328020251;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1329142650;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1348671314;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1356735495;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1357119239;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1362408075;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1363695025;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1368482696;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1423593059;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1425660337;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1438277652;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=[" +_				StringUtils.arrayToCommaDelimitedString(this.basenames) + "]"__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,string,utils,array,to,comma,delimited,string,this,basenames
ResourceBundleMessageSource -> @Override 	public String toString();1454612260;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1467730834;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1495868221;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1496242568;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1496837955;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1498780456;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1502974979;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1515532323;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1515532822;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1518167602;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1524846271;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1525211434;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1534438291;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	public String toString();1551080576;Show the configuration of this MessageSource.;@Override_	public String toString() {_		return getClass().getName() + ": basenames=" + getBasenameSet()__	};show,the,configuration,of,this,message,source;override,public,string,to,string,return,get,class,get,name,basenames,get,basename,set
ResourceBundleMessageSource -> @Override 	@Nullable 	protected MessageFormat resolveCode(String code, Locale locale);1502974979;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	@Nullable_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,nullable,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	@Nullable 	protected MessageFormat resolveCode(String code, Locale locale);1515532323;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	@Nullable_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,nullable,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	@Nullable 	protected MessageFormat resolveCode(String code, Locale locale);1515532822;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	@Nullable_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,nullable,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	@Nullable 	protected MessageFormat resolveCode(String code, Locale locale);1518167602;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	@Nullable_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,nullable,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	@Nullable 	protected MessageFormat resolveCode(String code, Locale locale);1524846271;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	@Nullable_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,nullable,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	@Nullable 	protected MessageFormat resolveCode(String code, Locale locale);1525211434;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	@Nullable_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,nullable,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	@Nullable 	protected MessageFormat resolveCode(String code, Locale locale);1534438291;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	@Nullable_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,nullable,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	@Nullable 	protected MessageFormat resolveCode(String code, Locale locale);1551080576;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	@Nullable_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,nullable,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> protected String getStringOrNull(ResourceBundle bundle, String key);1438277652;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> protected String getStringOrNull(ResourceBundle bundle, String key);1454612260;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> protected String getStringOrNull(ResourceBundle bundle, String key);1467730834;Efficiently retrieve the String value for the specified key,_or return {@code null} if not found._<p>As of 4.2, the default implementation checks {@code containsKey}_before it attempts to call {@code getString} (which would require_catching {@code MissingResourceException} for key not found)._<p>Can be overridden in subclasses._@param bundle the ResourceBundle to perform the lookup in_@param key the key to look up_@return the associated value, or {@code null} if none_@since 4.2_@see ResourceBundle#getString(String)_@see ResourceBundle#containsKey(String);protected String getStringOrNull(ResourceBundle bundle, String key) {_		if (bundle.containsKey(key)) {_			try {_				return bundle.getString(key)__			}_			catch (MissingResourceException ex){_				_				_			}_		}_		return null__	};efficiently,retrieve,the,string,value,for,the,specified,key,or,return,code,null,if,not,found,p,as,of,4,2,the,default,implementation,checks,code,contains,key,before,it,attempts,to,call,code,get,string,which,would,require,catching,code,missing,resource,exception,for,key,not,found,p,can,be,overridden,in,subclasses,param,bundle,the,resource,bundle,to,perform,the,lookup,in,param,key,the,key,to,look,up,return,the,associated,value,or,code,null,if,none,since,4,2,see,resource,bundle,get,string,string,see,resource,bundle,contains,key,string;protected,string,get,string,or,null,resource,bundle,bundle,string,key,if,bundle,contains,key,key,try,return,bundle,get,string,key,catch,missing,resource,exception,ex,return,null
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(InputStream inputStream) throws IOException;1525211434;Load a property-based resource bundle from the given input stream,_picking up the default properties encoding on JDK 9+._<p>This will only be called with {@link #setDefaultEncoding "defaultEncoding"}_set to {@code null}, explicitly enforcing the platform default encoding_(which is UTF-8 with a ISO-8859-1 fallback on JDK 9+ but configurable_through the "java.util.PropertyResourceBundle.encoding" system property)._Note that this method can only be called with a {@link ResourceBundle.Control}:_When running on the JDK 9+ module path where such control handles are not_supported, any overrides in custom subclasses will effectively get ignored._<p>The default implementation returns a {@link PropertyResourceBundle}._@param inputStream the input stream for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 5.1_@see #loadBundle(Reader)_@see PropertyResourceBundle#PropertyResourceBundle(InputStream);protected ResourceBundle loadBundle(InputStream inputStream) throws IOException {_		return new PropertyResourceBundle(inputStream)__	};load,a,property,based,resource,bundle,from,the,given,input,stream,picking,up,the,default,properties,encoding,on,jdk,9,p,this,will,only,be,called,with,link,set,default,encoding,default,encoding,set,to,code,null,explicitly,enforcing,the,platform,default,encoding,which,is,utf,8,with,a,iso,8859,1,fallback,on,jdk,9,but,configurable,through,the,java,util,property,resource,bundle,encoding,system,property,note,that,this,method,can,only,be,called,with,a,link,resource,bundle,control,when,running,on,the,jdk,9,module,path,where,such,control,handles,are,not,supported,any,overrides,in,custom,subclasses,will,effectively,get,ignored,p,the,default,implementation,returns,a,link,property,resource,bundle,param,input,stream,the,input,stream,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,5,1,see,load,bundle,reader,see,property,resource,bundle,property,resource,bundle,input,stream;protected,resource,bundle,load,bundle,input,stream,input,stream,throws,ioexception,return,new,property,resource,bundle,input,stream
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(InputStream inputStream) throws IOException;1534438291;Load a property-based resource bundle from the given input stream,_picking up the default properties encoding on JDK 9+._<p>This will only be called with {@link #setDefaultEncoding "defaultEncoding"}_set to {@code null}, explicitly enforcing the platform default encoding_(which is UTF-8 with a ISO-8859-1 fallback on JDK 9+ but configurable_through the "java.util.PropertyResourceBundle.encoding" system property)._Note that this method can only be called with a {@code ResourceBundle.Control}:_When running on the JDK 9+ module path where such control handles are not_supported, any overrides in custom subclasses will effectively get ignored._<p>The default implementation returns a {@link PropertyResourceBundle}._@param inputStream the input stream for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 5.1_@see #loadBundle(Reader)_@see PropertyResourceBundle#PropertyResourceBundle(InputStream);protected ResourceBundle loadBundle(InputStream inputStream) throws IOException {_		return new PropertyResourceBundle(inputStream)__	};load,a,property,based,resource,bundle,from,the,given,input,stream,picking,up,the,default,properties,encoding,on,jdk,9,p,this,will,only,be,called,with,link,set,default,encoding,default,encoding,set,to,code,null,explicitly,enforcing,the,platform,default,encoding,which,is,utf,8,with,a,iso,8859,1,fallback,on,jdk,9,but,configurable,through,the,java,util,property,resource,bundle,encoding,system,property,note,that,this,method,can,only,be,called,with,a,code,resource,bundle,control,when,running,on,the,jdk,9,module,path,where,such,control,handles,are,not,supported,any,overrides,in,custom,subclasses,will,effectively,get,ignored,p,the,default,implementation,returns,a,link,property,resource,bundle,param,input,stream,the,input,stream,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,5,1,see,load,bundle,reader,see,property,resource,bundle,property,resource,bundle,input,stream;protected,resource,bundle,load,bundle,input,stream,input,stream,throws,ioexception,return,new,property,resource,bundle,input,stream
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(InputStream inputStream) throws IOException;1551080576;Load a property-based resource bundle from the given input stream,_picking up the default properties encoding on JDK 9+._<p>This will only be called with {@link #setDefaultEncoding "defaultEncoding"}_set to {@code null}, explicitly enforcing the platform default encoding_(which is UTF-8 with a ISO-8859-1 fallback on JDK 9+ but configurable_through the "java.util.PropertyResourceBundle.encoding" system property)._Note that this method can only be called with a {@code ResourceBundle.Control}:_When running on the JDK 9+ module path where such control handles are not_supported, any overrides in custom subclasses will effectively get ignored._<p>The default implementation returns a {@link PropertyResourceBundle}._@param inputStream the input stream for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 5.1_@see #loadBundle(Reader)_@see PropertyResourceBundle#PropertyResourceBundle(InputStream);protected ResourceBundle loadBundle(InputStream inputStream) throws IOException {_		return new PropertyResourceBundle(inputStream)__	};load,a,property,based,resource,bundle,from,the,given,input,stream,picking,up,the,default,properties,encoding,on,jdk,9,p,this,will,only,be,called,with,link,set,default,encoding,default,encoding,set,to,code,null,explicitly,enforcing,the,platform,default,encoding,which,is,utf,8,with,a,iso,8859,1,fallback,on,jdk,9,but,configurable,through,the,java,util,property,resource,bundle,encoding,system,property,note,that,this,method,can,only,be,called,with,a,code,resource,bundle,control,when,running,on,the,jdk,9,module,path,where,such,control,handles,are,not,supported,any,overrides,in,custom,subclasses,will,effectively,get,ignored,p,the,default,implementation,returns,a,link,property,resource,bundle,param,input,stream,the,input,stream,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,5,1,see,load,bundle,reader,see,property,resource,bundle,property,resource,bundle,input,stream;protected,resource,bundle,load,bundle,input,stream,input,stream,throws,ioexception,return,new,property,resource,bundle,input,stream
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1498780456;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1502974979;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1515532323;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1515532822;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1518167602;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1524846271;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1525211434;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1534438291;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> @Nullable 	protected ClassLoader getBundleClassLoader();1551080576;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;@Nullable_	protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;nullable,protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1328020251;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or <code>null</code> if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		synchronized (this.cachedResourceBundles) {_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new HashMap<Locale, ResourceBundle>()__					this.cachedResourceBundles.put(basename, localeMap)__				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,code,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1329142650;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or <code>null</code> if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		synchronized (this.cachedResourceBundles) {_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new HashMap<Locale, ResourceBundle>()__					this.cachedResourceBundles.put(basename, localeMap)__				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,code,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1348671314;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or <code>null</code> if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,code,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1356735495;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1357119239;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1362408075;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1363695025;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1368482696;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1423593059;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1425660337;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1438277652;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (this.cacheMillis >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,this,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1454612260;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<Locale, ResourceBundle>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,locale,resource,bundle,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> protected ResourceBundle getResourceBundle(String basename, Locale locale);1467730834;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1348671314;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>_<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support_and more flexibility in terms of the kinds of resources to load from_(in particular from outside of the classpath where expiration works reliably).;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support,and,more,flexibility,in,terms,of,the,kinds,of,resources,to,load,from,in,particular,from,outside,of,the,classpath,where,expiration,works,reliably;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1356735495;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>_<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support_and more flexibility in terms of the kinds of resources to load from_(in particular from outside of the classpath where expiration works reliably).;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support,and,more,flexibility,in,terms,of,the,kinds,of,resources,to,load,from,in,particular,from,outside,of,the,classpath,where,expiration,works,reliably;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1357119239;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>_<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support_and more flexibility in terms of the kinds of resources to load from_(in particular from outside of the classpath where expiration works reliably).;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support,and,more,flexibility,in,terms,of,the,kinds,of,resources,to,load,from,in,particular,from,outside,of,the,classpath,where,expiration,works,reliably;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1362408075;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>_<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support_and more flexibility in terms of the kinds of resources to load from_(in particular from outside of the classpath where expiration works reliably).;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support,and,more,flexibility,in,terms,of,the,kinds,of,resources,to,load,from,in,particular,from,outside,of,the,classpath,where,expiration,works,reliably;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1363695025;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1368482696;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1423593059;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1425660337;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>_@since 3.1.3;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul,since,3,1,3;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setCacheSeconds(int cacheSeconds);1438277652;Set the number of seconds to cache loaded resource bundle files._<ul>_<li>Default is "-1", indicating to cache forever._<li>A positive number will expire resource bundles after the given_number of seconds. This is essentially the interval between refresh checks._Note that a refresh attempt will first check the last-modified timestamp_of the file before actually reloading it_ so if files don't change, this_interval can be set rather low, as refresh attempts will not actually reload._<li>A value of "0" will check the last-modified timestamp of the file on_every message access. <b>Do not use this in a production environment!</b>_<li><b>Note that depending on your ClassLoader, expiration might not work reliably_since the ClassLoader may hold on to a cached version of the bundle file.</b>_Consider {@link ReloadableResourceBundleMessageSource} in combination_with resource bundle files in a non-classpath location._</ul>_@since 3.1.3;public void setCacheSeconds(int cacheSeconds) {_		this.cacheMillis = (cacheSeconds * 1000)__	};set,the,number,of,seconds,to,cache,loaded,resource,bundle,files,ul,li,default,is,1,indicating,to,cache,forever,li,a,positive,number,will,expire,resource,bundles,after,the,given,number,of,seconds,this,is,essentially,the,interval,between,refresh,checks,note,that,a,refresh,attempt,will,first,check,the,last,modified,timestamp,of,the,file,before,actually,reloading,it,so,if,files,don,t,change,this,interval,can,be,set,rather,low,as,refresh,attempts,will,not,actually,reload,li,a,value,of,0,will,check,the,last,modified,timestamp,of,the,file,on,every,message,access,b,do,not,use,this,in,a,production,environment,b,li,b,note,that,depending,on,your,class,loader,expiration,might,not,work,reliably,since,the,class,loader,may,hold,on,to,a,cached,version,of,the,bundle,file,b,consider,link,reloadable,resource,bundle,message,source,in,combination,with,resource,bundle,files,in,a,non,classpath,location,ul,since,3,1,3;public,void,set,cache,seconds,int,cache,seconds,this,cache,millis,cache,seconds,1000
ResourceBundleMessageSource -> public void setBasename(String basename);1328020251;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as <code>org.mypackage</code>), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic <code>java.util.ResourceBundle</code> usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(new String[] {basename})__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,code,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,code,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,new,string,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1329142650;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as <code>org.mypackage</code>), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic <code>java.util.ResourceBundle</code> usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,code,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,code,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1348671314;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as <code>org.mypackage</code>), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic <code>java.util.ResourceBundle</code> usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,code,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,code,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1356735495;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as {@code org.mypackage}), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1357119239;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as {@code org.mypackage}), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1362408075;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as {@code org.mypackage}), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1363695025;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as {@code org.mypackage}), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1368482696;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as {@code org.mypackage}), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1423593059;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as {@code org.mypackage}), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1425660337;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as {@code org.mypackage}), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> public void setBasename(String basename);1438277652;Set a single basename, following {@link java.util.ResourceBundle} conventions:_essentially, a fully-qualified classpath location. If it doesn't contain a_package qualifier (such as {@code org.mypackage}), it will be resolved_from the classpath root._<p>Messages will normally be held in the "/lib" or "/classes" directory of_a web application's WAR structure. They can also be held in jar files on_the class path._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,messages,will,normally,be,held,in,the,lib,or,classes,directory,of,a,web,application,s,war,structure,they,can,also,be,held,in,jar,files,on,the,class,path,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1328020251;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1329142650;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1348671314;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1356735495;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1357119239;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1362408075;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1363695025;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1368482696;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1423593059;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1425660337;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1438277652;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		MessageFormat messageFormat = null__		for (int i = 0_ messageFormat == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				messageFormat = getMessageFormat(bundle, code, locale)__			}_		}_		return messageFormat__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,message,format,message,format,null,for,int,i,0,message,format,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,message,format,get,message,format,bundle,code,locale,return,message,format
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1454612260;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1467730834;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1495868221;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1496242568;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1496837955;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Override 	protected MessageFormat resolveCode(String code, Locale locale);1498780456;Resolves the given message code as key in the registered resource bundles,_using a cached MessageFormat instance per message code.;@Override_	protected MessageFormat resolveCode(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				MessageFormat messageFormat = getMessageFormat(bundle, code, locale)__				if (messageFormat != null) {_					return messageFormat__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,using,a,cached,message,format,instance,per,message,code;override,protected,message,format,resolve,code,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,message,format,message,format,get,message,format,bundle,code,locale,if,message,format,null,return,message,format,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1495868221;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1496242568;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1496837955;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1498780456;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1502974979;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			synchronized (this.cachedResourceBundles) {_				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__				if (localeMap != null) {_					ResourceBundle bundle = localeMap.get(locale)__					if (bundle != null) {_						return bundle__					}_				}_				try {_					ResourceBundle bundle = doGetBundle(basename, locale)__					if (localeMap == null) {_						localeMap = new HashMap<>()__						this.cachedResourceBundles.put(basename, localeMap)__					}_					localeMap.put(locale, bundle)__					return bundle__				}_				catch (MissingResourceException ex) {_					if (logger.isWarnEnabled()) {_						logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__					}_					_					_					return null__				}_			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,synchronized,this,cached,resource,bundles,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,hash,map,this,cached,resource,bundles,put,basename,locale,map,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1515532323;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new ConcurrentHashMap<>()__					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap)__					if (existing != null) {_						localeMap = existing__					}_				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,resource,bundle,existing,this,cached,resource,bundles,put,if,absent,basename,locale,map,if,existing,null,locale,map,existing,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1515532822;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new ConcurrentHashMap<>()__					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap)__					if (existing != null) {_						localeMap = existing__					}_				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,resource,bundle,existing,this,cached,resource,bundles,put,if,absent,basename,locale,map,if,existing,null,locale,map,existing,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1518167602;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new ConcurrentHashMap<>()__					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap)__					if (existing != null) {_						localeMap = existing__					}_				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,resource,bundle,existing,this,cached,resource,bundles,put,if,absent,basename,locale,map,if,existing,null,locale,map,existing,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1524846271;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new ConcurrentHashMap<>()__					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap)__					if (existing != null) {_						localeMap = existing__					}_				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,resource,bundle,existing,this,cached,resource,bundles,put,if,absent,basename,locale,map,if,existing,null,locale,map,existing,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1525211434;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new ConcurrentHashMap<>()__					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap)__					if (existing != null) {_						localeMap = existing__					}_				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,resource,bundle,existing,this,cached,resource,bundles,put,if,absent,basename,locale,map,if,existing,null,locale,map,existing,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1534438291;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new ConcurrentHashMap<>()__					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap)__					if (existing != null) {_						localeMap = existing__					}_				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,resource,bundle,existing,this,cached,resource,bundles,put,if,absent,basename,locale,map,if,existing,null,locale,map,existing,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> @Nullable 	protected ResourceBundle getResourceBundle(String basename, Locale locale);1551080576;Return a ResourceBundle for the given basename and code,_fetching already generated MessageFormats from the cache._@param basename the basename of the ResourceBundle_@param locale the Locale to find the ResourceBundle for_@return the resulting ResourceBundle, or {@code null} if none_found for the given basename and Locale;@Nullable_	protected ResourceBundle getResourceBundle(String basename, Locale locale) {_		if (getCacheMillis() >= 0) {_			_			_			return doGetBundle(basename, locale)__		}_		else {_			_			Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename)__			if (localeMap != null) {_				ResourceBundle bundle = localeMap.get(locale)__				if (bundle != null) {_					return bundle__				}_			}_			try {_				ResourceBundle bundle = doGetBundle(basename, locale)__				if (localeMap == null) {_					localeMap = new ConcurrentHashMap<>()__					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap)__					if (existing != null) {_						localeMap = existing__					}_				}_				localeMap.put(locale, bundle)__				return bundle__			}_			catch (MissingResourceException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage())__				}_				_				_				return null__			}_		}_	};return,a,resource,bundle,for,the,given,basename,and,code,fetching,already,generated,message,formats,from,the,cache,param,basename,the,basename,of,the,resource,bundle,param,locale,the,locale,to,find,the,resource,bundle,for,return,the,resulting,resource,bundle,or,code,null,if,none,found,for,the,given,basename,and,locale;nullable,protected,resource,bundle,get,resource,bundle,string,basename,locale,locale,if,get,cache,millis,0,return,do,get,bundle,basename,locale,else,map,locale,resource,bundle,locale,map,this,cached,resource,bundles,get,basename,if,locale,map,null,resource,bundle,bundle,locale,map,get,locale,if,bundle,null,return,bundle,try,resource,bundle,bundle,do,get,bundle,basename,locale,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,resource,bundle,existing,this,cached,resource,bundles,put,if,absent,basename,locale,map,if,existing,null,locale,map,existing,locale,map,put,locale,bundle,return,bundle,catch,missing,resource,exception,ex,if,logger,is,warn,enabled,logger,warn,resource,bundle,basename,not,found,for,message,source,ex,get,message,return,null
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1348671314;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_<code>java.util.ResourceBundle</code>. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario._<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,code,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1356735495;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario._<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1357119239;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario._<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1362408075;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario._<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1363695025;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1368482696;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1423593059;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario.;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1425660337;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario._@since 3.1.3;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario,since,3,1,3;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1438277652;Set whether to fall back to the system Locale if no files for a specific_Locale have been found. Default is "true"_ if this is turned off, the only_fallback will be the default file (e.g. "messages.properties" for_basename "messages")._<p>Falling back to the system Locale is the default behavior of_{@code java.util.ResourceBundle}. However, this is often not desirable_in an application server environment, where the system Locale is not relevant_to the application at all: Set this flag to "false" in such a scenario._@since 3.1.3;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,default,is,true,if,this,is,turned,off,the,only,fallback,will,be,the,default,file,e,g,messages,properties,for,basename,messages,p,falling,back,to,the,system,locale,is,the,default,behavior,of,code,java,util,resource,bundle,however,this,is,often,not,desirable,in,an,application,server,environment,where,the,system,locale,is,not,relevant,to,the,application,at,all,set,this,flag,to,false,in,such,a,scenario,since,3,1,3;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1329142650;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as <code>org.mypackage</code>),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic <code>java.util.ResourceBundle</code> usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames)  {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,code,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,code,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1348671314;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as <code>org.mypackage</code>),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic <code>java.util.ResourceBundle</code> usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames)  {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,code,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,code,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1356735495;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as {@code org.mypackage}),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames)  {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1357119239;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as {@code org.mypackage}),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames)  {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1362408075;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as {@code org.mypackage}),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1363695025;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as {@code org.mypackage}),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1368482696;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as {@code org.mypackage}),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1423593059;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as {@code org.mypackage}),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1425660337;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as {@code org.mypackage}),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> public void setBasenames(String... basenames);1438277652;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions: essentially, a fully-qualified classpath location. If it_doesn't contain a package qualifier (such as {@code org.mypackage}),_it will be resolved from the classpath root._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		if (basenames != null) {_			this.basenames = new String[basenames.length]__			for (int i = 0_ i < basenames.length_ i++) {_				String basename = basenames[i]__				Assert.hasText(basename, "Basename must not be empty")__				this.basenames[i] = basename.trim()__			}_		}_		else {_			this.basenames = new String[0]__		}_	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,essentially,a,fully,qualified,classpath,location,if,it,doesn,t,contain,a,package,qualifier,such,as,code,org,mypackage,it,will,be,resolved,from,the,classpath,root,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,if,basenames,null,this,basenames,new,string,basenames,length,for,int,i,0,i,basenames,length,i,string,basename,basenames,i,assert,has,text,basename,basename,must,not,be,empty,this,basenames,i,basename,trim,else,this,basenames,new,string,0
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1328020251;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1329142650;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1348671314;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1356735495;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1357119239;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1362408075;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1363695025;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1368482696;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1423593059;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1425660337;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1438277652;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		String result = null__		for (int i = 0_ result == null && i < this.basenames.length_ i++) {_			ResourceBundle bundle = getResourceBundle(this.basenames[i], locale)__			if (bundle != null) {_				result = getStringOrNull(bundle, code)__			}_		}_		return result__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,string,result,null,for,int,i,0,result,null,i,this,basenames,length,i,resource,bundle,bundle,get,resource,bundle,this,basenames,i,locale,if,bundle,null,result,get,string,or,null,bundle,code,return,result
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1454612260;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1467730834;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1495868221;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1496242568;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1496837955;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1498780456;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1502974979;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1515532323;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1515532822;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1518167602;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1524846271;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1525211434;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1534438291;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Override 	protected String resolveCodeWithoutArguments(String code, Locale locale);1551080576;Resolves the given message code as key in the registered resource bundles,_returning the value found in the bundle as-is (without MessageFormat parsing).;@Override_	protected String resolveCodeWithoutArguments(String code, Locale locale) {_		Set<String> basenames = getBasenameSet()__		for (String basename : basenames) {_			ResourceBundle bundle = getResourceBundle(basename, locale)__			if (bundle != null) {_				String result = getStringOrNull(bundle, code)__				if (result != null) {_					return result__				}_			}_		}_		return null__	};resolves,the,given,message,code,as,key,in,the,registered,resource,bundles,returning,the,value,found,in,the,bundle,as,is,without,message,format,parsing;override,protected,string,resolve,code,without,arguments,string,code,locale,locale,set,string,basenames,get,basename,set,for,string,basename,basenames,resource,bundle,bundle,get,resource,bundle,basename,locale,if,bundle,null,string,result,get,string,or,null,bundle,code,if,result,null,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1495868221;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1496242568;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1496837955;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1498780456;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1502974979;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		synchronized (this.cachedBundleMessageFormats) {_			Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__			Map<Locale, MessageFormat> localeMap = null__			if (codeMap != null) {_				localeMap = codeMap.get(code)__				if (localeMap != null) {_					MessageFormat result = localeMap.get(locale)__					if (result != null) {_						return result__					}_				}_			}__			String msg = getStringOrNull(bundle, code)__			if (msg != null) {_				if (codeMap == null) {_					codeMap = new HashMap<>()__					this.cachedBundleMessageFormats.put(bundle, codeMap)__				}_				if (localeMap == null) {_					localeMap = new HashMap<>()__					codeMap.put(code, localeMap)__				}_				MessageFormat result = createMessageFormat(msg, locale)__				localeMap.put(locale, result)__				return result__			}__			return null__		}_	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,synchronized,this,cached,bundle,message,formats,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,hash,map,this,cached,bundle,message,formats,put,bundle,code,map,if,locale,map,null,locale,map,new,hash,map,code,map,put,code,locale,map,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1515532323;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__		Map<Locale, MessageFormat> localeMap = null__		if (codeMap != null) {_			localeMap = codeMap.get(code)__			if (localeMap != null) {_				MessageFormat result = localeMap.get(locale)__				if (result != null) {_					return result__				}_			}_		}__		String msg = getStringOrNull(bundle, code)__		if (msg != null) {_			if (codeMap == null) {_				codeMap = new ConcurrentHashMap<>()__				Map<String, Map<Locale, MessageFormat>> existing = this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap)__				if (existing != null) {_					codeMap = existing__				}_			}_			if (localeMap == null) {_				localeMap = new ConcurrentHashMap<>()__				Map<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap)__				if (existing != null) {_					localeMap = existing__				}_			}_			MessageFormat result = createMessageFormat(msg, locale)__			localeMap.put(locale, result)__			return result__		}__		return null__	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,concurrent,hash,map,map,string,map,locale,message,format,existing,this,cached,bundle,message,formats,put,if,absent,bundle,code,map,if,existing,null,code,map,existing,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,message,format,existing,code,map,put,if,absent,code,locale,map,if,existing,null,locale,map,existing,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1515532822;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__		Map<Locale, MessageFormat> localeMap = null__		if (codeMap != null) {_			localeMap = codeMap.get(code)__			if (localeMap != null) {_				MessageFormat result = localeMap.get(locale)__				if (result != null) {_					return result__				}_			}_		}__		String msg = getStringOrNull(bundle, code)__		if (msg != null) {_			if (codeMap == null) {_				codeMap = new ConcurrentHashMap<>()__				Map<String, Map<Locale, MessageFormat>> existing = this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap)__				if (existing != null) {_					codeMap = existing__				}_			}_			if (localeMap == null) {_				localeMap = new ConcurrentHashMap<>()__				Map<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap)__				if (existing != null) {_					localeMap = existing__				}_			}_			MessageFormat result = createMessageFormat(msg, locale)__			localeMap.put(locale, result)__			return result__		}__		return null__	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,concurrent,hash,map,map,string,map,locale,message,format,existing,this,cached,bundle,message,formats,put,if,absent,bundle,code,map,if,existing,null,code,map,existing,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,message,format,existing,code,map,put,if,absent,code,locale,map,if,existing,null,locale,map,existing,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1518167602;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__		Map<Locale, MessageFormat> localeMap = null__		if (codeMap != null) {_			localeMap = codeMap.get(code)__			if (localeMap != null) {_				MessageFormat result = localeMap.get(locale)__				if (result != null) {_					return result__				}_			}_		}__		String msg = getStringOrNull(bundle, code)__		if (msg != null) {_			if (codeMap == null) {_				codeMap = new ConcurrentHashMap<>()__				Map<String, Map<Locale, MessageFormat>> existing = this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap)__				if (existing != null) {_					codeMap = existing__				}_			}_			if (localeMap == null) {_				localeMap = new ConcurrentHashMap<>()__				Map<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap)__				if (existing != null) {_					localeMap = existing__				}_			}_			MessageFormat result = createMessageFormat(msg, locale)__			localeMap.put(locale, result)__			return result__		}__		return null__	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,concurrent,hash,map,map,string,map,locale,message,format,existing,this,cached,bundle,message,formats,put,if,absent,bundle,code,map,if,existing,null,code,map,existing,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,message,format,existing,code,map,put,if,absent,code,locale,map,if,existing,null,locale,map,existing,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1524846271;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__		Map<Locale, MessageFormat> localeMap = null__		if (codeMap != null) {_			localeMap = codeMap.get(code)__			if (localeMap != null) {_				MessageFormat result = localeMap.get(locale)__				if (result != null) {_					return result__				}_			}_		}__		String msg = getStringOrNull(bundle, code)__		if (msg != null) {_			if (codeMap == null) {_				codeMap = new ConcurrentHashMap<>()__				Map<String, Map<Locale, MessageFormat>> existing = this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap)__				if (existing != null) {_					codeMap = existing__				}_			}_			if (localeMap == null) {_				localeMap = new ConcurrentHashMap<>()__				Map<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap)__				if (existing != null) {_					localeMap = existing__				}_			}_			MessageFormat result = createMessageFormat(msg, locale)__			localeMap.put(locale, result)__			return result__		}__		return null__	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,concurrent,hash,map,map,string,map,locale,message,format,existing,this,cached,bundle,message,formats,put,if,absent,bundle,code,map,if,existing,null,code,map,existing,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,message,format,existing,code,map,put,if,absent,code,locale,map,if,existing,null,locale,map,existing,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1525211434;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__		Map<Locale, MessageFormat> localeMap = null__		if (codeMap != null) {_			localeMap = codeMap.get(code)__			if (localeMap != null) {_				MessageFormat result = localeMap.get(locale)__				if (result != null) {_					return result__				}_			}_		}__		String msg = getStringOrNull(bundle, code)__		if (msg != null) {_			if (codeMap == null) {_				codeMap = new ConcurrentHashMap<>()__				Map<String, Map<Locale, MessageFormat>> existing =_						this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap)__				if (existing != null) {_					codeMap = existing__				}_			}_			if (localeMap == null) {_				localeMap = new ConcurrentHashMap<>()__				Map<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap)__				if (existing != null) {_					localeMap = existing__				}_			}_			MessageFormat result = createMessageFormat(msg, locale)__			localeMap.put(locale, result)__			return result__		}__		return null__	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,concurrent,hash,map,map,string,map,locale,message,format,existing,this,cached,bundle,message,formats,put,if,absent,bundle,code,map,if,existing,null,code,map,existing,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,message,format,existing,code,map,put,if,absent,code,locale,map,if,existing,null,locale,map,existing,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1534438291;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__		Map<Locale, MessageFormat> localeMap = null__		if (codeMap != null) {_			localeMap = codeMap.get(code)__			if (localeMap != null) {_				MessageFormat result = localeMap.get(locale)__				if (result != null) {_					return result__				}_			}_		}__		String msg = getStringOrNull(bundle, code)__		if (msg != null) {_			if (codeMap == null) {_				codeMap = new ConcurrentHashMap<>()__				Map<String, Map<Locale, MessageFormat>> existing =_						this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap)__				if (existing != null) {_					codeMap = existing__				}_			}_			if (localeMap == null) {_				localeMap = new ConcurrentHashMap<>()__				Map<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap)__				if (existing != null) {_					localeMap = existing__				}_			}_			MessageFormat result = createMessageFormat(msg, locale)__			localeMap.put(locale, result)__			return result__		}__		return null__	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,concurrent,hash,map,map,string,map,locale,message,format,existing,this,cached,bundle,message,formats,put,if,absent,bundle,code,map,if,existing,null,code,map,existing,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,message,format,existing,code,map,put,if,absent,code,locale,map,if,existing,null,locale,map,existing,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> @Nullable 	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) 			throws MissingResourceException;1551080576;Return a MessageFormat for the given bundle and code,_fetching already generated MessageFormats from the cache._@param bundle the ResourceBundle to work on_@param code the message code to retrieve_@param locale the Locale to use to build the MessageFormat_@return the resulting MessageFormat, or {@code null} if no message_defined for the given code_@throws MissingResourceException if thrown by the ResourceBundle;@Nullable_	protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)_			throws MissingResourceException {__		Map<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle)__		Map<Locale, MessageFormat> localeMap = null__		if (codeMap != null) {_			localeMap = codeMap.get(code)__			if (localeMap != null) {_				MessageFormat result = localeMap.get(locale)__				if (result != null) {_					return result__				}_			}_		}__		String msg = getStringOrNull(bundle, code)__		if (msg != null) {_			if (codeMap == null) {_				codeMap = new ConcurrentHashMap<>()__				Map<String, Map<Locale, MessageFormat>> existing =_						this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap)__				if (existing != null) {_					codeMap = existing__				}_			}_			if (localeMap == null) {_				localeMap = new ConcurrentHashMap<>()__				Map<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap)__				if (existing != null) {_					localeMap = existing__				}_			}_			MessageFormat result = createMessageFormat(msg, locale)__			localeMap.put(locale, result)__			return result__		}__		return null__	};return,a,message,format,for,the,given,bundle,and,code,fetching,already,generated,message,formats,from,the,cache,param,bundle,the,resource,bundle,to,work,on,param,code,the,message,code,to,retrieve,param,locale,the,locale,to,use,to,build,the,message,format,return,the,resulting,message,format,or,code,null,if,no,message,defined,for,the,given,code,throws,missing,resource,exception,if,thrown,by,the,resource,bundle;nullable,protected,message,format,get,message,format,resource,bundle,bundle,string,code,locale,locale,throws,missing,resource,exception,map,string,map,locale,message,format,code,map,this,cached,bundle,message,formats,get,bundle,map,locale,message,format,locale,map,null,if,code,map,null,locale,map,code,map,get,code,if,locale,map,null,message,format,result,locale,map,get,locale,if,result,null,return,result,string,msg,get,string,or,null,bundle,code,if,msg,null,if,code,map,null,code,map,new,concurrent,hash,map,map,string,map,locale,message,format,existing,this,cached,bundle,message,formats,put,if,absent,bundle,code,map,if,existing,null,code,map,existing,if,locale,map,null,locale,map,new,concurrent,hash,map,map,locale,message,format,existing,code,map,put,if,absent,code,locale,map,if,existing,null,locale,map,existing,message,format,result,create,message,format,msg,locale,locale,map,put,locale,result,return,result,return,null
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1348671314;Set the default charset to use for parsing resource bundle files._<p>Default is none, using the <code>java.util.ResourceBundle</code>_default encoding: ISO-8859-1._<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support_and more flexibility in setting of an encoding per file.;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,none,using,the,code,java,util,resource,bundle,code,default,encoding,iso,8859,1,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support,and,more,flexibility,in,setting,of,an,encoding,per,file;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1356735495;Set the default charset to use for parsing resource bundle files._<p>Default is none, using the {@code java.util.ResourceBundle}_default encoding: ISO-8859-1._<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support_and more flexibility in setting of an encoding per file.;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,none,using,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support,and,more,flexibility,in,setting,of,an,encoding,per,file;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1357119239;Set the default charset to use for parsing resource bundle files._<p>Default is none, using the {@code java.util.ResourceBundle}_default encoding: ISO-8859-1._<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support_and more flexibility in setting of an encoding per file.;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,none,using,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support,and,more,flexibility,in,setting,of,an,encoding,per,file;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1362408075;Set the default charset to use for parsing resource bundle files._<p>Default is none, using the {@code java.util.ResourceBundle}_default encoding: ISO-8859-1._<p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using_{@link ReloadableResourceBundleMessageSource} for JDK 1.5 support_and more flexibility in setting of an encoding per file.;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,none,using,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,p,b,note,only,works,on,jdk,1,6,and,higher,b,consider,using,link,reloadable,resource,bundle,message,source,for,jdk,1,5,support,and,more,flexibility,in,setting,of,an,encoding,per,file;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1363695025;Set the default charset to use for parsing resource bundle files._<p>Default is none, using the {@code java.util.ResourceBundle}_default encoding: ISO-8859-1._and more flexibility in setting of an encoding per file.;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,none,using,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,and,more,flexibility,in,setting,of,an,encoding,per,file;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1368482696;Set the default charset to use for parsing resource bundle files._<p>Default is none, using the {@code java.util.ResourceBundle}_default encoding: ISO-8859-1._and more flexibility in setting of an encoding per file.;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,none,using,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,and,more,flexibility,in,setting,of,an,encoding,per,file;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1423593059;Set the default charset to use for parsing resource bundle files._<p>Default is none, using the {@code java.util.ResourceBundle}_default encoding: ISO-8859-1._and more flexibility in setting of an encoding per file.;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,none,using,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,and,more,flexibility,in,setting,of,an,encoding,per,file;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1425660337;Set the default charset to use for parsing resource bundle files._<p>Default is the {@code java.util.ResourceBundle} default encoding:_ISO-8859-1._@since 3.1.3;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,3,1,3;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> public void setDefaultEncoding(String defaultEncoding);1438277652;Set the default charset to use for parsing resource bundle files._<p>Default is the {@code java.util.ResourceBundle} default encoding:_ISO-8859-1._@since 3.1.3;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,3,1,3;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1425660337;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1438277652;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1454612260;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1467730834;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1495868221;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1496242568;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1496837955;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1498780456;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1502974979;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1515532323;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1515532822;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1518167602;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1524846271;Load a property-based resource bundle from the given reader._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1525211434;Load a property-based resource bundle from the given reader._<p>This will be called in case of a {@link #setDefaultEncoding "defaultEncoding"},_including {@link ResourceBundleMessageSource}'s default ISO-8859-1 encoding._Note that this method can only be called with a {@link ResourceBundle.Control}:_When running on the JDK 9+ module path where such control handles are not_supported, any overrides in custom subclasses will effectively get ignored._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see #loadBundle(InputStream)_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,this,will,be,called,in,case,of,a,link,set,default,encoding,default,encoding,including,link,resource,bundle,message,source,s,default,iso,8859,1,encoding,note,that,this,method,can,only,be,called,with,a,link,resource,bundle,control,when,running,on,the,jdk,9,module,path,where,such,control,handles,are,not,supported,any,overrides,in,custom,subclasses,will,effectively,get,ignored,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,load,bundle,input,stream,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1534438291;Load a property-based resource bundle from the given reader._<p>This will be called in case of a {@link #setDefaultEncoding "defaultEncoding"},_including {@link ResourceBundleMessageSource}'s default ISO-8859-1 encoding._Note that this method can only be called with a {@code ResourceBundle.Control}:_When running on the JDK 9+ module path where such control handles are not_supported, any overrides in custom subclasses will effectively get ignored._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see #loadBundle(InputStream)_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,this,will,be,called,in,case,of,a,link,set,default,encoding,default,encoding,including,link,resource,bundle,message,source,s,default,iso,8859,1,encoding,note,that,this,method,can,only,be,called,with,a,code,resource,bundle,control,when,running,on,the,jdk,9,module,path,where,such,control,handles,are,not,supported,any,overrides,in,custom,subclasses,will,effectively,get,ignored,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,load,bundle,input,stream,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ResourceBundle loadBundle(Reader reader) throws IOException;1551080576;Load a property-based resource bundle from the given reader._<p>This will be called in case of a {@link #setDefaultEncoding "defaultEncoding"},_including {@link ResourceBundleMessageSource}'s default ISO-8859-1 encoding._Note that this method can only be called with a {@code ResourceBundle.Control}:_When running on the JDK 9+ module path where such control handles are not_supported, any overrides in custom subclasses will effectively get ignored._<p>The default implementation returns a {@link PropertyResourceBundle}._@param reader the reader for the target resource_@return the fully loaded bundle_@throws IOException in case of I/O failure_@since 4.2_@see #loadBundle(InputStream)_@see PropertyResourceBundle#PropertyResourceBundle(Reader);protected ResourceBundle loadBundle(Reader reader) throws IOException {_		return new PropertyResourceBundle(reader)__	};load,a,property,based,resource,bundle,from,the,given,reader,p,this,will,be,called,in,case,of,a,link,set,default,encoding,default,encoding,including,link,resource,bundle,message,source,s,default,iso,8859,1,encoding,note,that,this,method,can,only,be,called,with,a,code,resource,bundle,control,when,running,on,the,jdk,9,module,path,where,such,control,handles,are,not,supported,any,overrides,in,custom,subclasses,will,effectively,get,ignored,p,the,default,implementation,returns,a,link,property,resource,bundle,param,reader,the,reader,for,the,target,resource,return,the,fully,loaded,bundle,throws,ioexception,in,case,of,i,o,failure,since,4,2,see,load,bundle,input,stream,see,property,resource,bundle,property,resource,bundle,reader;protected,resource,bundle,load,bundle,reader,reader,throws,ioexception,return,new,property,resource,bundle,reader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1328020251;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1329142650;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1348671314;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1356735495;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1357119239;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1362408075;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1363695025;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1368482696;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1423593059;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1425660337;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1438277652;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1454612260;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1467730834;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1495868221;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1496242568;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
ResourceBundleMessageSource -> protected ClassLoader getBundleClassLoader();1496837955;Return the ClassLoader to load resource bundles with._<p>Default is the containing BeanFactory's bean ClassLoader._@see #setBundleClassLoader;protected ClassLoader getBundleClassLoader() {_		return (this.bundleClassLoader != null ? this.bundleClassLoader : this.beanClassLoader)__	};return,the,class,loader,to,load,resource,bundles,with,p,default,is,the,containing,bean,factory,s,bean,class,loader,see,set,bundle,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader,null,this,bundle,class,loader,this,bean,class,loader
