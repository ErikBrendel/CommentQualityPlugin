commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link javax.management.NotificationListener}.  */ ;/**  * Set the {@link javax.management.NotificationListener}.  */ public void setNotificationListener(@Nullable NotificationListener notificationListener) {     this.notificationListener = notificationListener. }
true;public;0;4;/**  * Get the {@link javax.management.NotificationListener}.  */ ;/**  * Get the {@link javax.management.NotificationListener}.  */ @Nullable public NotificationListener getNotificationListener() {     return this.notificationListener. }
true;public;1;3;/**  * Set the {@link javax.management.NotificationFilter} associated  * with the encapsulated {@link #getNotificationFilter() NotificationFilter}.  * <p>May be {@code null}.  */ ;/**  * Set the {@link javax.management.NotificationFilter} associated  * with the encapsulated {@link #getNotificationFilter() NotificationFilter}.  * <p>May be {@code null}.  */ public void setNotificationFilter(@Nullable NotificationFilter notificationFilter) {     this.notificationFilter = notificationFilter. }
true;public;0;4;/**  * Return the {@link javax.management.NotificationFilter} associated  * with the encapsulated {@link #getNotificationListener() NotificationListener}.  * <p>May be {@code null}.  */ ;/**  * Return the {@link javax.management.NotificationFilter} associated  * with the encapsulated {@link #getNotificationListener() NotificationListener}.  * <p>May be {@code null}.  */ @Nullable public NotificationFilter getNotificationFilter() {     return this.notificationFilter. }
true;public;1;3;/**  * Set the (arbitrary) object that will be 'handed back' as-is by an  * {@link javax.management.NotificationBroadcaster} when notifying  * any {@link javax.management.NotificationListener}.  * @param handback the handback object (can be {@code null})  * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, Object)  */ ;/**  * Set the (arbitrary) object that will be 'handed back' as-is by an  * {@link javax.management.NotificationBroadcaster} when notifying  * any {@link javax.management.NotificationListener}.  * @param handback the handback object (can be {@code null})  * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, Object)  */ public void setHandback(@Nullable Object handback) {     this.handback = handback. }
true;public;0;4;/**  * Return the (arbitrary) object that will be 'handed back' as-is by an  * {@link javax.management.NotificationBroadcaster} when notifying  * any {@link javax.management.NotificationListener}.  * @return the handback object (may be {@code null})  * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, Object)  */ ;/**  * Return the (arbitrary) object that will be 'handed back' as-is by an  * {@link javax.management.NotificationBroadcaster} when notifying  * any {@link javax.management.NotificationListener}.  * @return the handback object (may be {@code null})  * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, Object)  */ @Nullable public Object getHandback() {     return this.handback. }
true;public;1;4;/**  * Set the {@link javax.management.ObjectName}-style name of the single MBean  * that the encapsulated {@link #getNotificationFilter() NotificationFilter}  * will be registered with to listen for {@link javax.management.Notification Notifications}.  * Can be specified as {@code ObjectName} instance or as {@code String}.  * @see #setMappedObjectNames  */ ;/**  * Set the {@link javax.management.ObjectName}-style name of the single MBean  * that the encapsulated {@link #getNotificationFilter() NotificationFilter}  * will be registered with to listen for {@link javax.management.Notification Notifications}.  * Can be specified as {@code ObjectName} instance or as {@code String}.  * @see #setMappedObjectNames  */ public void setMappedObjectName(@Nullable Object mappedObjectName) {     this.mappedObjectNames = (mappedObjectName != null ? new LinkedHashSet<>(Collections.singleton(mappedObjectName)) : null). }
true;public;1;3;/**  * Set an array of {@link javax.management.ObjectName}-style names of the MBeans  * that the encapsulated {@link #getNotificationFilter() NotificationFilter}  * will be registered with to listen for {@link javax.management.Notification Notifications}.  * Can be specified as {@code ObjectName} instances or as {@code String}s.  * @see #setMappedObjectName  */ ;/**  * Set an array of {@link javax.management.ObjectName}-style names of the MBeans  * that the encapsulated {@link #getNotificationFilter() NotificationFilter}  * will be registered with to listen for {@link javax.management.Notification Notifications}.  * Can be specified as {@code ObjectName} instances or as {@code String}s.  * @see #setMappedObjectName  */ public void setMappedObjectNames(Object... mappedObjectNames) {     this.mappedObjectNames = new LinkedHashSet<>(Arrays.asList(mappedObjectNames)). }
true;public;0;13;/**  * Return the list of {@link javax.management.ObjectName} String representations for  * which the encapsulated {@link #getNotificationFilter() NotificationFilter} will  * be registered as a listener for {@link javax.management.Notification Notifications}.  * @throws MalformedObjectNameException if an {@code ObjectName} is malformed  */ ;/**  * Return the list of {@link javax.management.ObjectName} String representations for  * which the encapsulated {@link #getNotificationFilter() NotificationFilter} will  * be registered as a listener for {@link javax.management.Notification Notifications}.  * @throws MalformedObjectNameException if an {@code ObjectName} is malformed  */ @Nullable public ObjectName[] getResolvedObjectNames() throws MalformedObjectNameException {     if (this.mappedObjectNames == null) {         return null.     }     ObjectName[] resolved = new ObjectName[this.mappedObjectNames.size()].     int i = 0.     for (Object objectName : this.mappedObjectNames) {         resolved[i] = ObjectNameManager.getInstance(objectName).         i++.     }     return resolved. }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof NotificationListenerHolder)) {         return false.     }     NotificationListenerHolder otherNlh = (NotificationListenerHolder) other.     return (ObjectUtils.nullSafeEquals(this.notificationListener, otherNlh.notificationListener) && ObjectUtils.nullSafeEquals(this.notificationFilter, otherNlh.notificationFilter) && ObjectUtils.nullSafeEquals(this.handback, otherNlh.handback) && ObjectUtils.nullSafeEquals(this.mappedObjectNames, otherNlh.mappedObjectNames)). }
false;public;0;8;;@Override public int hashCode() {     int hashCode = ObjectUtils.nullSafeHashCode(this.notificationListener).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.notificationFilter).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.handback).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.mappedObjectNames).     return hashCode. }
