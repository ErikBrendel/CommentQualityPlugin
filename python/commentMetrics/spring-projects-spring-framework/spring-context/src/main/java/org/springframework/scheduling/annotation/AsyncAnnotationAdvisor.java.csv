# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1328020251;Create a new ConcurrencyAnnotationBeanPostProcessor for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(new SimpleAsyncTaskExecutor())__	};create,a,new,concurrency,annotation,bean,post,processor,for,bean,style,configuration;public,async,annotation,advisor,this,new,simple,async,task,executor
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1335774711;Create a new ConcurrencyAnnotationBeanPostProcessor for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(new SimpleAsyncTaskExecutor())__	};create,a,new,concurrency,annotation,bean,post,processor,for,bean,style,configuration;public,async,annotation,advisor,this,new,simple,async,task,executor
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1337516454;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(new SimpleAsyncTaskExecutor())__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,new,simple,async,task,executor
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1356735495;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(new SimpleAsyncTaskExecutor())__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,new,simple,async,task,executor
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1357119239;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(new SimpleAsyncTaskExecutor())__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,new,simple,async,task,executor
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1362408075;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(new SimpleAsyncTaskExecutor())__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,new,simple,async,task,executor
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1368482696;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(new SimpleAsyncTaskExecutor())__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,new,simple,async,task,executor
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1388872053;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(new SimpleAsyncTaskExecutor())__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,new,simple,async,task,executor
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1396443880;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1398290143;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1398638841;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1403799291;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1457735038;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1467730834;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1488284003;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1493223400;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1495868221;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1496837955;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1498780456;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this(null, null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,null,null
AsyncAnnotationAdvisor -> public AsyncAnnotationAdvisor();1531589372;Create a new {@code AsyncAnnotationAdvisor} for bean-style configuration.;public AsyncAnnotationAdvisor() {_		this((Supplier<Executor>) null, (Supplier<AsyncUncaughtExceptionHandler>) null)__	};create,a,new,code,async,annotation,advisor,for,bean,style,configuration;public,async,annotation,advisor,this,supplier,executor,null,supplier,async,uncaught,exception,handler,null
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor);1328020251;Create a new ConcurrencyAnnotationBeanPostProcessor for the given task executor._@param executor the task executor to use for asynchronous methods;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		this.advice = buildAdvice(executor)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,concurrency,annotation,bean,post,processor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,this,advice,build,advice,executor,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor);1335774711;Create a new ConcurrencyAnnotationBeanPostProcessor for the given task executor._@param executor the task executor to use for asynchronous methods;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		this.advice = buildAdvice(executor)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,concurrency,annotation,bean,post,processor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,this,advice,build,advice,executor,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor);1337516454;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		this.advice = buildAdvice(executor)__		this.setTaskExecutor(executor)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,extends,annotation,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,this,advice,build,advice,executor,this,set,task,executor,executor,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor);1356735495;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		this.advice = buildAdvice(executor)__		this.setTaskExecutor(executor)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,extends,annotation,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,this,advice,build,advice,executor,this,set,task,executor,executor,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor);1357119239;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		this.advice = buildAdvice(executor)__		this.setTaskExecutor(executor)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,extends,annotation,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,this,advice,build,advice,executor,this,set,task,executor,executor,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor);1362408075;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		this.advice = buildAdvice(executor)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,extends,annotation,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,this,advice,build,advice,executor,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor);1368482696;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		this.advice = buildAdvice(executor)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,extends,annotation,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,this,advice,build,advice,executor,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor);1388872053;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		this.advice = buildAdvice(executor)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,extends,annotation,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,this,advice,build,advice,executor,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1328020251;Specify the task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor)__	};specify,the,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1335774711;Specify the task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor)__	};specify,the,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1337516454;Specify the task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor)__		delegateBeanFactory(this.beanFactory)__	};specify,the,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,delegate,bean,factory,this,bean,factory
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1356735495;Specify the task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor)__		delegateBeanFactory(this.beanFactory)__	};specify,the,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,delegate,bean,factory,this,bean,factory
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1357119239;Specify the task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor)__		delegateBeanFactory(this.beanFactory)__	};specify,the,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,delegate,bean,factory,this,bean,factory
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1362408075;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1368482696;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1388872053;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1396443880;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1398290143;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1398638841;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1403799291;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, this.exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,this,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1457735038;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, this.exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,this,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1467730834;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, this.exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,this,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1488284003;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, this.exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,this,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1493223400;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, this.exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,this,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1495868221;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, this.exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,this,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1496837955;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, this.exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,this,exception,handler
AsyncAnnotationAdvisor -> public void setTaskExecutor(Executor executor);1498780456;Specify the default task executor to use for asynchronous methods.;public void setTaskExecutor(Executor executor) {_		this.advice = buildAdvice(executor, this.exceptionHandler)__	};specify,the,default,task,executor,to,use,for,asynchronous,methods;public,void,set,task,executor,executor,executor,this,advice,build,advice,executor,this,exception,handler
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1368482696;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1388872053;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1396443880;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1398290143;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1398638841;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1403799291;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1457735038;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1467730834;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1488284003;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1493223400;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1495868221;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496837955;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1498780456;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1531589372;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (this.advice instanceof BeanFactoryAware) {_			((BeanFactoryAware) this.advice).setBeanFactory(beanFactory)__		}_	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;override,public,void,set,bean,factory,bean,factory,bean,factory,if,this,advice,instanceof,bean,factory,aware,bean,factory,aware,this,advice,set,bean,factory,bean,factory
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1328020251;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 <code>javax.ejb.Asynchronous</code> annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,code,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1335774711;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 <code>javax.ejb.Asynchronous</code> annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,code,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1337516454;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 <code>javax.ejb.Asynchronous</code> annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,code,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1356735495;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1357119239;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1362408075;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1368482696;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1388872053;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1396443880;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1398290143;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1398638841;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1403799291;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1457735038;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<Class<? extends Annotation>>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,class,extends,annotation,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1467730834;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1488284003;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1493223400;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1495868221;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1496837955;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1498780456;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType);1531589372;Set the 'async' annotation type._<p>The default async annotation type is the {@link Async} annotation, as well_as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present)._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a method is to_be executed asynchronously._@param asyncAnnotationType the desired annotation type;public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {_		Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null")__		Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<>()__		asyncAnnotationTypes.add(asyncAnnotationType)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};set,the,async,annotation,type,p,the,default,async,annotation,type,is,the,link,async,annotation,as,well,as,the,ejb,3,1,code,javax,ejb,asynchronous,annotation,if,present,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,method,is,to,be,executed,asynchronously,param,async,annotation,type,the,desired,annotation,type;public,void,set,async,annotation,type,class,extends,annotation,async,annotation,type,assert,not,null,async,annotation,type,async,annotation,type,must,not,be,null,set,class,extends,annotation,async,annotation,types,new,hash,set,async,annotation,types,add,async,annotation,type,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1337516454;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		this.beanFactory = beanFactory__		delegateBeanFactory(beanFactory)__	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,this,bean,factory,bean,factory,delegate,bean,factory,bean,factory
AsyncAnnotationAdvisor -> public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1357119239;Set the {@code BeanFactory} to be used when looking up executors by qualifier.;public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		this.beanFactory = beanFactory__		delegateBeanFactory(beanFactory)__	};set,the,code,bean,factory,to,be,used,when,looking,up,executors,by,qualifier;public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,this,bean,factory,bean,factory,delegate,bean,factory,bean,factory
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler);1396443880;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_@param exceptionHandler the {@link org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (executor == null) {_			executor = new SimpleAsyncTaskExecutor()__		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		} else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,param,exception,handler,the,link,org,springframework,aop,interceptor,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,extends,annotation,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,if,executor,null,executor,new,simple,async,task,executor,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler);1398290143;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_@param exceptionHandler the {@link org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader()__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.ejb.Asynchronous"))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (executor == null) {_			executor = new SimpleAsyncTaskExecutor()__		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,param,exception,handler,the,link,org,springframework,aop,interceptor,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,class,loader,cl,async,annotation,advisor,class,get,class,loader,try,async,annotation,types,add,class,extends,annotation,cl,load,class,javax,ejb,asynchronous,catch,class,not,found,exception,ex,if,executor,null,executor,new,simple,async,task,executor,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler);1398638841;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_@param exceptionHandler the {@link org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (executor == null) {_			executor = new SimpleAsyncTaskExecutor()__		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,param,exception,handler,the,link,org,springframework,aop,interceptor,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,try,async,annotation,types,add,class,extends,annotation,class,utils,for,name,javax,ejb,asynchronous,async,annotation,advisor,class,get,class,loader,catch,class,not,found,exception,ex,if,executor,null,executor,new,simple,async,task,executor,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler);1403799291;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_@param exceptionHandler the {@link org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions;@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (executor == null) {_			executor = new SimpleAsyncTaskExecutor()__		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,param,exception,handler,the,link,org,springframework,aop,interceptor,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,try,async,annotation,types,add,class,extends,annotation,class,utils,for,name,javax,ejb,asynchronous,async,annotation,advisor,class,get,class,loader,catch,class,not,found,exception,ex,if,executor,null,executor,new,simple,async,task,executor,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler);1457735038;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_(can be {@code null} to trigger default executor resolution)_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions_@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory);@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<Class<? extends Annotation>>(2)__		asyncAnnotationTypes.add(Async.class)__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,can,be,code,null,to,trigger,default,executor,resolution,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions,see,annotation,async,execution,interceptor,get,default,executor,bean,factory;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,class,extends,annotation,2,async,annotation,types,add,async,class,try,async,annotation,types,add,class,extends,annotation,class,utils,for,name,javax,ejb,asynchronous,async,annotation,advisor,class,get,class,loader,catch,class,not,found,exception,ex,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler);1467730834;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_(can be {@code null} to trigger default executor resolution)_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions_@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory);@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<>(2)__		asyncAnnotationTypes.add(Async.class)__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,can,be,code,null,to,trigger,default,executor,resolution,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions,see,annotation,async,execution,interceptor,get,default,executor,bean,factory;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,2,async,annotation,types,add,async,class,try,async,annotation,types,add,class,extends,annotation,class,utils,for,name,javax,ejb,asynchronous,async,annotation,advisor,class,get,class,loader,catch,class,not,found,exception,ex,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler);1488284003;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_(can be {@code null} to trigger default executor resolution)_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions_@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory);@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<>(2)__		asyncAnnotationTypes.add(Async.class)__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,can,be,code,null,to,trigger,default,executor,resolution,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions,see,annotation,async,execution,interceptor,get,default,executor,bean,factory;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,2,async,annotation,types,add,async,class,try,async,annotation,types,add,class,extends,annotation,class,utils,for,name,javax,ejb,asynchronous,async,annotation,advisor,class,get,class,loader,catch,class,not,found,exception,ex,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler);1493223400;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_(can be {@code null} to trigger default executor resolution)_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions_@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory);@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(Executor executor, AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<>(2)__		asyncAnnotationTypes.add(Async.class)__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,can,be,code,null,to,trigger,default,executor,resolution,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions,see,annotation,async,execution,interceptor,get,default,executor,bean,factory;suppress,warnings,unchecked,public,async,annotation,advisor,executor,executor,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,2,async,annotation,types,add,async,class,try,async,annotation,types,add,class,extends,annotation,class,utils,for,name,javax,ejb,asynchronous,async,annotation,advisor,class,get,class,loader,catch,class,not,found,exception,ex,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @Nullable 	protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1495868221;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;@Nullable_	protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType, true)__			if (result == null) {_				result = new ComposablePointcut(cpc)__			}_			else {_				result.union(cpc)__			}_			result = result.union(mpc)__		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;nullable,protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,true,if,result,null,result,new,composable,pointcut,cpc,else,result,union,cpc,result,result,union,mpc,return,result
AsyncAnnotationAdvisor -> @Nullable 	protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1496837955;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;@Nullable_	protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType, true)__			if (result == null) {_				result = new ComposablePointcut(cpc)__			}_			else {_				result.union(cpc)__			}_			result = result.union(mpc)__		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;nullable,protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,true,if,result,null,result,new,composable,pointcut,cpc,else,result,union,cpc,result,result,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1328020251;Calculate a pointcut for the given target class, if any._@param targetClass the class to introspect_@return the applicable Pointcut object, or <code>null</code> if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,target,class,if,any,param,target,class,the,class,to,introspect,return,the,applicable,pointcut,object,or,code,null,code,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1335774711;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or <code>null</code> if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,code,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1337516454;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or <code>null</code> if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,code,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1356735495;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1357119239;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1362408075;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1368482696;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1388872053;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = AnnotationMatchingPointcut.forMethodAnnotation(asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,annotation,matching,pointcut,for,method,annotation,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1396443880;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = AnnotationMatchingPointcut.forMethodAnnotation(asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,annotation,matching,pointcut,for,method,annotation,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1398290143;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = AnnotationMatchingPointcut.forMethodAnnotation(asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,annotation,matching,pointcut,for,method,annotation,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1398638841;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = AnnotationMatchingPointcut.forMethodAnnotation(asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,annotation,matching,pointcut,for,method,annotation,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1403799291;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = AnnotationMatchingPointcut.forMethodAnnotation(asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,annotation,matching,pointcut,for,method,annotation,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1457735038;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = AnnotationMatchingPointcut.forMethodAnnotation(asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,annotation,matching,pointcut,for,method,annotation,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1467730834;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = AnnotationMatchingPointcut.forMethodAnnotation(asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc).union(mpc)__			}_			else {_				result.union(cpc).union(mpc)__			}_		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,annotation,matching,pointcut,for,method,annotation,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,union,mpc,else,result,union,cpc,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1488284003;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = AnnotationMatchingPointcut.forMethodAnnotation(asyncAnnotationType)__			if (result == null) {_				result = new ComposablePointcut(cpc)__			}_			else {_				result.union(cpc)__			}_			result = result.union(mpc)__		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,annotation,matching,pointcut,for,method,annotation,async,annotation,type,if,result,null,result,new,composable,pointcut,cpc,else,result,union,cpc,result,result,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1493223400;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType, true)__			if (result == null) {_				result = new ComposablePointcut(cpc)__			}_			else {_				result.union(cpc)__			}_			result = result.union(mpc)__		}_		return result__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,true,if,result,null,result,new,composable,pointcut,cpc,else,result,union,cpc,result,result,union,mpc,return,result
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1498780456;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType, true)__			if (result == null) {_				result = new ComposablePointcut(cpc)__			}_			else {_				result.union(cpc)__			}_			result = result.union(mpc)__		}_		return (result != null ? result : Pointcut.TRUE)__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,true,if,result,null,result,new,composable,pointcut,cpc,else,result,union,cpc,result,result,union,mpc,return,result,null,result,pointcut,true
AsyncAnnotationAdvisor -> protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes);1531589372;Calculate a pointcut for the given async annotation types, if any._@param asyncAnnotationTypes the async annotation types to introspect_@return the applicable Pointcut object, or {@code null} if none;protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {_		ComposablePointcut result = null__		for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {_			Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true)__			Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType, true)__			if (result == null) {_				result = new ComposablePointcut(cpc)__			}_			else {_				result.union(cpc)__			}_			result = result.union(mpc)__		}_		return (result != null ? result : Pointcut.TRUE)__	};calculate,a,pointcut,for,the,given,async,annotation,types,if,any,param,async,annotation,types,the,async,annotation,types,to,introspect,return,the,applicable,pointcut,object,or,code,null,if,none;protected,pointcut,build,pointcut,set,class,extends,annotation,async,annotation,types,composable,pointcut,result,null,for,class,extends,annotation,async,annotation,type,async,annotation,types,pointcut,cpc,new,annotation,matching,pointcut,async,annotation,type,true,pointcut,mpc,new,annotation,matching,pointcut,null,async,annotation,type,true,if,result,null,result,new,composable,pointcut,cpc,else,result,union,cpc,result,result,union,mpc,return,result,null,result,pointcut,true
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(@Nullable Executor executor, @Nullable AsyncUncaughtExceptionHandler exceptionHandler);1496837955;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_(can be {@code null} to trigger default executor resolution)_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions_@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory);@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(@Nullable Executor executor, @Nullable AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<>(2)__		asyncAnnotationTypes.add(Async.class)__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,can,be,code,null,to,trigger,default,executor,resolution,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions,see,annotation,async,execution,interceptor,get,default,executor,bean,factory;suppress,warnings,unchecked,public,async,annotation,advisor,nullable,executor,executor,nullable,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,2,async,annotation,types,add,async,class,try,async,annotation,types,add,class,extends,annotation,class,utils,for,name,javax,ejb,asynchronous,async,annotation,advisor,class,get,class,loader,catch,class,not,found,exception,ex,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
AsyncAnnotationAdvisor -> @SuppressWarnings("unchecked") 	public AsyncAnnotationAdvisor(@Nullable Executor executor, @Nullable AsyncUncaughtExceptionHandler exceptionHandler);1498780456;Create a new {@code AsyncAnnotationAdvisor} for the given task executor._@param executor the task executor to use for asynchronous methods_(can be {@code null} to trigger default executor resolution)_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle unexpected exception thrown by asynchronous method executions_@see AnnotationAsyncExecutionInterceptor#getDefaultExecutor(BeanFactory);@SuppressWarnings("unchecked")_	public AsyncAnnotationAdvisor(@Nullable Executor executor, @Nullable AsyncUncaughtExceptionHandler exceptionHandler) {_		Set<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<>(2)__		asyncAnnotationTypes.add(Async.class)__		try {_			asyncAnnotationTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_		if (exceptionHandler != null) {_			this.exceptionHandler = exceptionHandler__		}_		else {_			this.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler()__		}_		this.advice = buildAdvice(executor, this.exceptionHandler)__		this.pointcut = buildPointcut(asyncAnnotationTypes)__	};create,a,new,code,async,annotation,advisor,for,the,given,task,executor,param,executor,the,task,executor,to,use,for,asynchronous,methods,can,be,code,null,to,trigger,default,executor,resolution,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,unexpected,exception,thrown,by,asynchronous,method,executions,see,annotation,async,execution,interceptor,get,default,executor,bean,factory;suppress,warnings,unchecked,public,async,annotation,advisor,nullable,executor,executor,nullable,async,uncaught,exception,handler,exception,handler,set,class,extends,annotation,async,annotation,types,new,linked,hash,set,2,async,annotation,types,add,async,class,try,async,annotation,types,add,class,extends,annotation,class,utils,for,name,javax,ejb,asynchronous,async,annotation,advisor,class,get,class,loader,catch,class,not,found,exception,ex,if,exception,handler,null,this,exception,handler,exception,handler,else,this,exception,handler,new,simple,async,uncaught,exception,handler,this,advice,build,advice,executor,this,exception,handler,this,pointcut,build,pointcut,async,annotation,types
