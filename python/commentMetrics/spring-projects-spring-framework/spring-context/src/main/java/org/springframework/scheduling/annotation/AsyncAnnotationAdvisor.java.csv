commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Set the 'async' annotation type.  * <p>The default async annotation type is the {@link Async} annotation, as well  * as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present).  * <p>This setter property exists so that developers can provide their own  * (non-Spring-specific) annotation type to indicate that a method is to  * be executed asynchronously.  * @param asyncAnnotationType the desired annotation type  */ ;/**  * Set the 'async' annotation type.  * <p>The default async annotation type is the {@link Async} annotation, as well  * as the EJB 3.1 {@code javax.ejb.Asynchronous} annotation (if present).  * <p>This setter property exists so that developers can provide their own  * (non-Spring-specific) annotation type to indicate that a method is to  * be executed asynchronously.  * @param asyncAnnotationType the desired annotation type  */ public void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType) {     Assert.notNull(asyncAnnotationType, "'asyncAnnotationType' must not be null").     Set<Class<? extends Annotation>> asyncAnnotationTypes = new HashSet<>().     asyncAnnotationTypes.add(asyncAnnotationType).     this.pointcut = buildPointcut(asyncAnnotationTypes). }
true;public;1;6;/**  * Set the {@code BeanFactory} to be used when looking up executors by qualifier.  */ ;/**  * Set the {@code BeanFactory} to be used when looking up executors by qualifier.  */ @Override public void setBeanFactory(BeanFactory beanFactory) {     if (this.advice instanceof BeanFactoryAware) {         ((BeanFactoryAware) this.advice).setBeanFactory(beanFactory).     } }
false;public;0;4;;@Override public Advice getAdvice() {     return this.advice. }
false;public;0;4;;@Override public Pointcut getPointcut() {     return this.pointcut. }
false;protected;2;7;;protected Advice buildAdvice(@Nullable Supplier<Executor> executor, @Nullable Supplier<AsyncUncaughtExceptionHandler> exceptionHandler) {     AnnotationAsyncExecutionInterceptor interceptor = new AnnotationAsyncExecutionInterceptor(null).     interceptor.configure(executor, exceptionHandler).     return interceptor. }
true;protected;1;15;/**  * Calculate a pointcut for the given async annotation types, if any.  * @param asyncAnnotationTypes the async annotation types to introspect  * @return the applicable Pointcut object, or {@code null} if none  */ ;/**  * Calculate a pointcut for the given async annotation types, if any.  * @param asyncAnnotationTypes the async annotation types to introspect  * @return the applicable Pointcut object, or {@code null} if none  */ protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {     ComposablePointcut result = null.     for (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {         Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true).         Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType, true).         if (result == null) {             result = new ComposablePointcut(cpc).         } else {             result.union(cpc).         }         result = result.union(mpc).     }     return (result != null ? result : Pointcut.TRUE). }
