# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary();1362408075;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary() {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!this.executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,if,this,await,termination,seconds,0,try,if,this,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary();1364421156;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary() {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!this.executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,if,this,await,termination,seconds,0,try,if,this,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary();1368482696;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary() {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!this.executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,if,this,await,termination,seconds,0,try,if,this,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary();1378149646;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary() {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!this.executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,if,this,await,termination,seconds,0,try,if,this,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary();1383419642;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary() {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!this.executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,if,this,await,termination,seconds,0,try,if,this,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary();1496837955;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary() {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!this.executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,if,this,await,termination,seconds,0,try,if,this,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1328020251;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by <code>afterPropertiesSet</code>._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,code,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1356735495;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1357119239;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1362408075;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1364421156;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1368482696;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1378149646;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1383419642;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1496837955;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1498780456;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1521420322;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1521459769;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> protected abstract ExecutorService initializeExecutor( 			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;1536780763;Create the target {@link java.util.concurrent.ExecutorService} instance._Called by {@code afterPropertiesSet}._@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ExecutorService instance_@see #afterPropertiesSet();protected abstract ExecutorService initializeExecutor(_			ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)_;create,the,target,link,java,util,concurrent,executor,service,instance,called,by,code,after,properties,set,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,executor,service,instance,see,after,properties,set;protected,abstract,executor,service,initialize,executor,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1362408075;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1364421156;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1368482696;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1378149646;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1383419642;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1496837955;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1498780456;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1521420322;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1521459769;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> public void setAwaitTerminationSeconds(int awaitTerminationSeconds);1536780763;Set the maximum number of seconds that this executor is supposed to block_on shutdown in order to wait for remaining tasks to complete their execution_before the rest of the container continues to shut down. This is particularly_useful if your remaining tasks are likely to need access to other resources_that are also managed by the container._<p>By default, this executor won't wait for the termination of tasks at all._It will either shut down immediately, interrupting ongoing tasks and clearing_the remaining task queue - or, if the_{@link #setWaitForTasksToCompleteOnShutdown "waitForTasksToCompleteOnShutdown"}_flag has been set to {@code true}, it will continue to fully execute all_ongoing tasks as well as all remaining tasks in the queue, in parallel to_the rest of the container shutting down._<p>In either case, if you specify an await-termination period using this property,_this executor will wait for the given time (max) for the termination of tasks._As a rule of thumb, specify a significantly higher timeout here if you set_"waitForTasksToCompleteOnShutdown" to {@code true} at the same time,_since all remaining tasks in the queue will still get executed - in contrast_to the default shutdown behavior where it's just about waiting for currently_executing tasks that aren't reacting to thread interruption._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#awaitTermination;public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {_		this.awaitTerminationSeconds = awaitTerminationSeconds__	};set,the,maximum,number,of,seconds,that,this,executor,is,supposed,to,block,on,shutdown,in,order,to,wait,for,remaining,tasks,to,complete,their,execution,before,the,rest,of,the,container,continues,to,shut,down,this,is,particularly,useful,if,your,remaining,tasks,are,likely,to,need,access,to,other,resources,that,are,also,managed,by,the,container,p,by,default,this,executor,won,t,wait,for,the,termination,of,tasks,at,all,it,will,either,shut,down,immediately,interrupting,ongoing,tasks,and,clearing,the,remaining,task,queue,or,if,the,link,set,wait,for,tasks,to,complete,on,shutdown,wait,for,tasks,to,complete,on,shutdown,flag,has,been,set,to,code,true,it,will,continue,to,fully,execute,all,ongoing,tasks,as,well,as,all,remaining,tasks,in,the,queue,in,parallel,to,the,rest,of,the,container,shutting,down,p,in,either,case,if,you,specify,an,await,termination,period,using,this,property,this,executor,will,wait,for,the,given,time,max,for,the,termination,of,tasks,as,a,rule,of,thumb,specify,a,significantly,higher,timeout,here,if,you,set,wait,for,tasks,to,complete,on,shutdown,to,code,true,at,the,same,time,since,all,remaining,tasks,in,the,queue,will,still,get,executed,in,contrast,to,the,default,shutdown,behavior,where,it,s,just,about,waiting,for,currently,executing,tasks,that,aren,t,reacting,to,thread,interruption,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,await,termination;public,void,set,await,termination,seconds,int,await,termination,seconds,this,await,termination,seconds,await,termination,seconds
ExecutorConfigurationSupport -> protected void cancelRemainingTask(Runnable task);1521420322;Cancel the given remaining task which never commended execution,_as returned from {@link ExecutorService#shutdownNow()}._@param task the task to cancel (potentially a {@link RunnableFuture})_@since 5.0.5_@see #shutdown()_@see RunnableFuture#cancel(boolean);protected void cancelRemainingTask(Runnable task) {_		if (task instanceof RunnableFuture) {_			((RunnableFuture<?>) task).cancel(true)__		}_	};cancel,the,given,remaining,task,which,never,commended,execution,as,returned,from,link,executor,service,shutdown,now,param,task,the,task,to,cancel,potentially,a,link,runnable,future,since,5,0,5,see,shutdown,see,runnable,future,cancel,boolean;protected,void,cancel,remaining,task,runnable,task,if,task,instanceof,runnable,future,runnable,future,task,cancel,true
ExecutorConfigurationSupport -> protected void cancelRemainingTask(Runnable task);1521459769;Cancel the given remaining task which never commended execution,_as returned from {@link ExecutorService#shutdownNow()}._@param task the task to cancel (typically a {@link RunnableFuture})_@since 5.0.5_@see #shutdown()_@see RunnableFuture#cancel(boolean);protected void cancelRemainingTask(Runnable task) {_		if (task instanceof Future) {_			((Future<?>) task).cancel(true)__		}_	};cancel,the,given,remaining,task,which,never,commended,execution,as,returned,from,link,executor,service,shutdown,now,param,task,the,task,to,cancel,typically,a,link,runnable,future,since,5,0,5,see,shutdown,see,runnable,future,cancel,boolean;protected,void,cancel,remaining,task,runnable,task,if,task,instanceof,future,future,task,cancel,true
ExecutorConfigurationSupport -> protected void cancelRemainingTask(Runnable task);1536780763;Cancel the given remaining task which never commended execution,_as returned from {@link ExecutorService#shutdownNow()}._@param task the task to cancel (typically a {@link RunnableFuture})_@since 5.0.5_@see #shutdown()_@see RunnableFuture#cancel(boolean);protected void cancelRemainingTask(Runnable task) {_		if (task instanceof Future) {_			((Future<?>) task).cancel(true)__		}_	};cancel,the,given,remaining,task,which,never,commended,execution,as,returned,from,link,executor,service,shutdown,now,param,task,the,task,to,cancel,typically,a,link,runnable,future,since,5,0,5,see,shutdown,see,runnable,future,cancel,boolean;protected,void,cancel,remaining,task,runnable,task,if,task,instanceof,future,future,task,cancel,true
ExecutorConfigurationSupport -> public void destroy();1328020251;Calls <code>shutdown</code> when the BeanFactory destroys_the task executor instance._@see #shutdown();public void destroy() {_		shutdown()__	};calls,code,shutdown,code,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;public,void,destroy,shutdown
ExecutorConfigurationSupport -> public void destroy();1357119239;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;public,void,destroy,shutdown
ExecutorConfigurationSupport -> public void destroy();1362408075;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;public,void,destroy,shutdown
ExecutorConfigurationSupport -> public void destroy();1364421156;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;public,void,destroy,shutdown
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler);1328020251;Set the RejectedExecutionHandler to use for the ThreadPoolExecutor._Default is the ThreadPoolExecutor's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,thread,pool,executor,default,is,the,thread,pool,executor,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler);1356735495;Set the RejectedExecutionHandler to use for the ThreadPoolExecutor._Default is the ThreadPoolExecutor's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,thread,pool,executor,default,is,the,thread,pool,executor,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler);1357119239;Set the RejectedExecutionHandler to use for the ThreadPoolExecutor._Default is the ThreadPoolExecutor's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,thread,pool,executor,default,is,the,thread,pool,executor,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler);1362408075;Set the RejectedExecutionHandler to use for the ThreadPoolExecutor._Default is the ThreadPoolExecutor's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,thread,pool,executor,default,is,the,thread,pool,executor,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler);1364421156;Set the RejectedExecutionHandler to use for the ThreadPoolExecutor._Default is the ThreadPoolExecutor's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,thread,pool,executor,default,is,the,thread,pool,executor,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler);1368482696;Set the RejectedExecutionHandler to use for the ThreadPoolExecutor._Default is the ThreadPoolExecutor's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,thread,pool,executor,default,is,the,thread,pool,executor,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler);1378149646;Set the RejectedExecutionHandler to use for the ExecutorService._Default is the ExecutorService's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,executor,service,default,is,the,executor,service,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler);1383419642;Set the RejectedExecutionHandler to use for the ExecutorService._Default is the ExecutorService's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,executor,service,default,is,the,executor,service,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void shutdown();1328020251;Perform a shutdown on the ThreadPoolExecutor._@see java.util.concurrent.ExecutorService#shutdown();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_	};perform,a,shutdown,on,the,thread,pool,executor,see,java,util,concurrent,executor,service,shutdown;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now
ExecutorConfigurationSupport -> public void shutdown();1356735495;Perform a shutdown on the ThreadPoolExecutor._@see java.util.concurrent.ExecutorService#shutdown();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_	};perform,a,shutdown,on,the,thread,pool,executor,see,java,util,concurrent,executor,service,shutdown;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now
ExecutorConfigurationSupport -> public void shutdown();1357119239;Perform a shutdown on the ThreadPoolExecutor._@see java.util.concurrent.ExecutorService#shutdown();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_	};perform,a,shutdown,on,the,thread,pool,executor,see,java,util,concurrent,executor,service,shutdown;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now
ExecutorConfigurationSupport -> public void shutdown();1362408075;Perform a shutdown on the ThreadPoolExecutor._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow()_@see #awaitTerminationIfNecessary();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_		awaitTerminationIfNecessary()__	};perform,a,shutdown,on,the,thread,pool,executor,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now,see,await,termination,if,necessary;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now,await,termination,if,necessary
ExecutorConfigurationSupport -> public void shutdown();1364421156;Perform a shutdown on the ThreadPoolExecutor._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow()_@see #awaitTerminationIfNecessary();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_		awaitTerminationIfNecessary()__	};perform,a,shutdown,on,the,thread,pool,executor,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now,see,await,termination,if,necessary;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now,await,termination,if,necessary
ExecutorConfigurationSupport -> public void shutdown();1368482696;Perform a shutdown on the ThreadPoolExecutor._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow()_@see #awaitTerminationIfNecessary();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_		awaitTerminationIfNecessary()__	};perform,a,shutdown,on,the,thread,pool,executor,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now,see,await,termination,if,necessary;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now,await,termination,if,necessary
ExecutorConfigurationSupport -> public void shutdown();1378149646;Perform a shutdown on the underlying ExecutorService._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow()_@see #awaitTerminationIfNecessary();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_		awaitTerminationIfNecessary()__	};perform,a,shutdown,on,the,underlying,executor,service,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now,see,await,termination,if,necessary;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now,await,termination,if,necessary
ExecutorConfigurationSupport -> public void shutdown();1383419642;Perform a shutdown on the underlying ExecutorService._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow()_@see #awaitTerminationIfNecessary();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_		awaitTerminationIfNecessary()__	};perform,a,shutdown,on,the,underlying,executor,service,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now,see,await,termination,if,necessary;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now,await,termination,if,necessary
ExecutorConfigurationSupport -> public void shutdown();1496837955;Perform a shutdown on the underlying ExecutorService._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow()_@see #awaitTerminationIfNecessary();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.waitForTasksToCompleteOnShutdown) {_			this.executor.shutdown()__		}_		else {_			this.executor.shutdownNow()__		}_		awaitTerminationIfNecessary()__	};perform,a,shutdown,on,the,underlying,executor,service,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now,see,await,termination,if,necessary;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now,await,termination,if,necessary
ExecutorConfigurationSupport -> public void shutdown();1498780456;Perform a shutdown on the underlying ExecutorService._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.executor != null) {_			if (this.waitForTasksToCompleteOnShutdown) {_				this.executor.shutdown()__			}_			else {_				this.executor.shutdownNow()__			}_			awaitTerminationIfNecessary(this.executor)__		}_	};perform,a,shutdown,on,the,underlying,executor,service,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,executor,null,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,this,executor,shutdown,now,await,termination,if,necessary,this,executor
ExecutorConfigurationSupport -> public void shutdown();1521420322;Perform a shutdown on the underlying ExecutorService._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.executor != null) {_			if (this.waitForTasksToCompleteOnShutdown) {_				this.executor.shutdown()__			}_			else {_				for (Runnable remainingTask : this.executor.shutdownNow()) {_					cancelRemainingTask(remainingTask)__				}_			}_			awaitTerminationIfNecessary(this.executor)__		}_	};perform,a,shutdown,on,the,underlying,executor,service,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,executor,null,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,for,runnable,remaining,task,this,executor,shutdown,now,cancel,remaining,task,remaining,task,await,termination,if,necessary,this,executor
ExecutorConfigurationSupport -> public void shutdown();1521459769;Perform a shutdown on the underlying ExecutorService._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.executor != null) {_			if (this.waitForTasksToCompleteOnShutdown) {_				this.executor.shutdown()__			}_			else {_				for (Runnable remainingTask : this.executor.shutdownNow()) {_					cancelRemainingTask(remainingTask)__				}_			}_			awaitTerminationIfNecessary(this.executor)__		}_	};perform,a,shutdown,on,the,underlying,executor,service,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,executor,null,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,for,runnable,remaining,task,this,executor,shutdown,now,cancel,remaining,task,remaining,task,await,termination,if,necessary,this,executor
ExecutorConfigurationSupport -> public void shutdown();1536780763;Perform a shutdown on the underlying ExecutorService._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void shutdown() {_		if (logger.isInfoEnabled()) {_			logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (this.executor != null) {_			if (this.waitForTasksToCompleteOnShutdown) {_				this.executor.shutdown()__			}_			else {_				for (Runnable remainingTask : this.executor.shutdownNow()) {_					cancelRemainingTask(remainingTask)__				}_			}_			awaitTerminationIfNecessary(this.executor)__		}_	};perform,a,shutdown,on,the,underlying,executor,service,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,shutdown,if,logger,is,info,enabled,logger,info,shutting,down,executor,service,this,bean,name,null,this,bean,name,if,this,executor,null,if,this,wait,for,tasks,to,complete,on,shutdown,this,executor,shutdown,else,for,runnable,remaining,task,this,executor,shutdown,now,cancel,remaining,task,remaining,task,await,termination,if,necessary,this,executor
ExecutorConfigurationSupport -> public void afterPropertiesSet();1328020251;Calls <code>initialize()</code> after the container applied all property values._@see #initialize();public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,code,after,the,container,applied,all,property,values,see,initialize;public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> public void afterPropertiesSet();1357119239;Calls {@code initialize()} after the container applied all property values._@see #initialize();public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> public void afterPropertiesSet();1362408075;Calls {@code initialize()} after the container applied all property values._@see #initialize();public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> public void afterPropertiesSet();1364421156;Calls {@code initialize()} after the container applied all property values._@see #initialize();public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler);1496837955;Set the RejectedExecutionHandler to use for the ExecutorService._Default is the ExecutorService's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,executor,service,default,is,the,executor,service,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,nullable,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler);1498780456;Set the RejectedExecutionHandler to use for the ExecutorService._Default is the ExecutorService's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,executor,service,default,is,the,executor,service,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,nullable,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler);1521420322;Set the RejectedExecutionHandler to use for the ExecutorService._Default is the ExecutorService's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,executor,service,default,is,the,executor,service,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,nullable,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler);1521459769;Set the RejectedExecutionHandler to use for the ExecutorService._Default is the ExecutorService's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,executor,service,default,is,the,executor,service,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,nullable,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler);1536780763;Set the RejectedExecutionHandler to use for the ExecutorService._Default is the ExecutorService's default abort policy._@see java.util.concurrent.ThreadPoolExecutor.AbortPolicy;public void setRejectedExecutionHandler(@Nullable RejectedExecutionHandler rejectedExecutionHandler) {_		this.rejectedExecutionHandler =_				(rejectedExecutionHandler != null ? rejectedExecutionHandler : new ThreadPoolExecutor.AbortPolicy())__	};set,the,rejected,execution,handler,to,use,for,the,executor,service,default,is,the,executor,service,s,default,abort,policy,see,java,util,concurrent,thread,pool,executor,abort,policy;public,void,set,rejected,execution,handler,nullable,rejected,execution,handler,rejected,execution,handler,this,rejected,execution,handler,rejected,execution,handler,null,rejected,execution,handler,new,thread,pool,executor,abort,policy
ExecutorConfigurationSupport -> public void setThreadFactory(@Nullable ThreadFactory threadFactory);1496837955;Set the ThreadFactory to use for the ExecutorService's thread pool._Default is the underlying ExecutorService's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/DefaultManagedThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._Alternatively, consider using Spring's {@link DefaultManagedAwareThreadFactory}_with its fallback to local threads in case of no managed thread factory found._@see java.util.concurrent.Executors#defaultThreadFactory()_@see javax.enterprise.concurrent.ManagedThreadFactory_@see DefaultManagedAwareThreadFactory;public void setThreadFactory(@Nullable ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,executor,service,s,thread,pool,default,is,the,underlying,executor,service,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,default,managed,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,alternatively,consider,using,spring,s,link,default,managed,aware,thread,factory,with,its,fallback,to,local,threads,in,case,of,no,managed,thread,factory,found,see,java,util,concurrent,executors,default,thread,factory,see,javax,enterprise,concurrent,managed,thread,factory,see,default,managed,aware,thread,factory;public,void,set,thread,factory,nullable,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(@Nullable ThreadFactory threadFactory);1498780456;Set the ThreadFactory to use for the ExecutorService's thread pool._Default is the underlying ExecutorService's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/DefaultManagedThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._Alternatively, consider using Spring's {@link DefaultManagedAwareThreadFactory}_with its fallback to local threads in case of no managed thread factory found._@see java.util.concurrent.Executors#defaultThreadFactory()_@see javax.enterprise.concurrent.ManagedThreadFactory_@see DefaultManagedAwareThreadFactory;public void setThreadFactory(@Nullable ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,executor,service,s,thread,pool,default,is,the,underlying,executor,service,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,default,managed,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,alternatively,consider,using,spring,s,link,default,managed,aware,thread,factory,with,its,fallback,to,local,threads,in,case,of,no,managed,thread,factory,found,see,java,util,concurrent,executors,default,thread,factory,see,javax,enterprise,concurrent,managed,thread,factory,see,default,managed,aware,thread,factory;public,void,set,thread,factory,nullable,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(@Nullable ThreadFactory threadFactory);1521420322;Set the ThreadFactory to use for the ExecutorService's thread pool._Default is the underlying ExecutorService's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/DefaultManagedThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._Alternatively, consider using Spring's {@link DefaultManagedAwareThreadFactory}_with its fallback to local threads in case of no managed thread factory found._@see java.util.concurrent.Executors#defaultThreadFactory()_@see javax.enterprise.concurrent.ManagedThreadFactory_@see DefaultManagedAwareThreadFactory;public void setThreadFactory(@Nullable ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,executor,service,s,thread,pool,default,is,the,underlying,executor,service,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,default,managed,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,alternatively,consider,using,spring,s,link,default,managed,aware,thread,factory,with,its,fallback,to,local,threads,in,case,of,no,managed,thread,factory,found,see,java,util,concurrent,executors,default,thread,factory,see,javax,enterprise,concurrent,managed,thread,factory,see,default,managed,aware,thread,factory;public,void,set,thread,factory,nullable,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(@Nullable ThreadFactory threadFactory);1521459769;Set the ThreadFactory to use for the ExecutorService's thread pool._Default is the underlying ExecutorService's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/DefaultManagedThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._Alternatively, consider using Spring's {@link DefaultManagedAwareThreadFactory}_with its fallback to local threads in case of no managed thread factory found._@see java.util.concurrent.Executors#defaultThreadFactory()_@see javax.enterprise.concurrent.ManagedThreadFactory_@see DefaultManagedAwareThreadFactory;public void setThreadFactory(@Nullable ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,executor,service,s,thread,pool,default,is,the,underlying,executor,service,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,default,managed,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,alternatively,consider,using,spring,s,link,default,managed,aware,thread,factory,with,its,fallback,to,local,threads,in,case,of,no,managed,thread,factory,found,see,java,util,concurrent,executors,default,thread,factory,see,javax,enterprise,concurrent,managed,thread,factory,see,default,managed,aware,thread,factory;public,void,set,thread,factory,nullable,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(@Nullable ThreadFactory threadFactory);1536780763;Set the ThreadFactory to use for the ExecutorService's thread pool._Default is the underlying ExecutorService's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/DefaultManagedThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._Alternatively, consider using Spring's {@link DefaultManagedAwareThreadFactory}_with its fallback to local threads in case of no managed thread factory found._@see java.util.concurrent.Executors#defaultThreadFactory()_@see javax.enterprise.concurrent.ManagedThreadFactory_@see DefaultManagedAwareThreadFactory;public void setThreadFactory(@Nullable ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,executor,service,s,thread,pool,default,is,the,underlying,executor,service,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,default,managed,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,alternatively,consider,using,spring,s,link,default,managed,aware,thread,factory,with,its,fallback,to,local,threads,in,case,of,no,managed,thread,factory,found,see,java,util,concurrent,executors,default,thread,factory,see,javax,enterprise,concurrent,managed,thread,factory,see,default,managed,aware,thread,factory;public,void,set,thread,factory,nullable,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1356735495;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1368482696;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1378149646;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1383419642;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1496837955;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1498780456;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1521420322;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1521459769;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void afterPropertiesSet();1536780763;Calls {@code initialize()} after the container applied all property values._@see #initialize();@Override_	public void afterPropertiesSet() {_		initialize()__	};calls,code,initialize,after,the,container,applied,all,property,values,see,initialize;override,public,void,after,properties,set,initialize
ExecutorConfigurationSupport -> @Override 	public void destroy();1356735495;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> @Override 	public void destroy();1368482696;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> @Override 	public void destroy();1378149646;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> @Override 	public void destroy();1383419642;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> @Override 	public void destroy();1496837955;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> @Override 	public void destroy();1498780456;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> @Override 	public void destroy();1521420322;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> @Override 	public void destroy();1521459769;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> @Override 	public void destroy();1536780763;Calls {@code shutdown} when the BeanFactory destroys_the task executor instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,code,shutdown,when,the,bean,factory,destroys,the,task,executor,instance,see,shutdown;override,public,void,destroy,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1328020251;Set whether to wait for scheduled tasks to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed tasks at the expense of a longer shutdown phase._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1356735495;Set whether to wait for scheduled tasks to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed tasks at the expense of a longer shutdown phase._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1357119239;Set whether to wait for scheduled tasks to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed tasks at the expense of a longer shutdown phase._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1362408075;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1364421156;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1368482696;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1378149646;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1383419642;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1496837955;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1498780456;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1521420322;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1521459769;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1536780763;Set whether to wait for scheduled tasks to complete on shutdown,_not interrupting running tasks and executing all tasks in the queue._<p>Default is "false", shutting down immediately through interrupting_ongoing tasks and clearing the queue. Switch this flag to "true" if you_prefer fully completed tasks at the expense of a longer shutdown phase._<p>Note that Spring's container shutdown continues while ongoing tasks_are being completed. If you want this executor to block and wait for the_termination of tasks before the rest of the container continues to shut_down - e.g. in order to keep up other resources that your tasks may need -,_set the {@link #setAwaitTerminationSeconds "awaitTerminationSeconds"}_property instead of or in addition to this property._@see java.util.concurrent.ExecutorService#shutdown()_@see java.util.concurrent.ExecutorService#shutdownNow();public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForTasksToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,scheduled,tasks,to,complete,on,shutdown,not,interrupting,running,tasks,and,executing,all,tasks,in,the,queue,p,default,is,false,shutting,down,immediately,through,interrupting,ongoing,tasks,and,clearing,the,queue,switch,this,flag,to,true,if,you,prefer,fully,completed,tasks,at,the,expense,of,a,longer,shutdown,phase,p,note,that,spring,s,container,shutdown,continues,while,ongoing,tasks,are,being,completed,if,you,want,this,executor,to,block,and,wait,for,the,termination,of,tasks,before,the,rest,of,the,container,continues,to,shut,down,e,g,in,order,to,keep,up,other,resources,that,your,tasks,may,need,set,the,link,set,await,termination,seconds,await,termination,seconds,property,instead,of,or,in,addition,to,this,property,see,java,util,concurrent,executor,service,shutdown,see,java,util,concurrent,executor,service,shutdown,now;public,void,set,wait,for,tasks,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,tasks,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary(ExecutorService executor);1498780456;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary(ExecutorService executor) {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,executor,service,executor,if,this,await,termination,seconds,0,try,if,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary(ExecutorService executor);1521420322;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary(ExecutorService executor) {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,executor,service,executor,if,this,await,termination,seconds,0,try,if,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary(ExecutorService executor);1521459769;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary(ExecutorService executor) {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,executor,service,executor,if,this,await,termination,seconds,0,try,if,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> private void awaitTerminationIfNecessary(ExecutorService executor);1536780763;Wait for the executor to terminate, according to the value of the_{@link #setAwaitTerminationSeconds "awaitTerminationSeconds"} property.;private void awaitTerminationIfNecessary(ExecutorService executor) {_		if (this.awaitTerminationSeconds > 0) {_			try {_				if (!executor.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Timed out while waiting for executor" +_								(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__					}_				}_			}_			catch (InterruptedException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Interrupted while waiting for executor" +_							(this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate")__				}_				Thread.currentThread().interrupt()__			}_		}_	};wait,for,the,executor,to,terminate,according,to,the,value,of,the,link,set,await,termination,seconds,await,termination,seconds,property;private,void,await,termination,if,necessary,executor,service,executor,if,this,await,termination,seconds,0,try,if,executor,await,termination,this,await,termination,seconds,time,unit,seconds,if,logger,is,warn,enabled,logger,warn,timed,out,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,catch,interrupted,exception,ex,if,logger,is,warn,enabled,logger,warn,interrupted,while,waiting,for,executor,this,bean,name,null,this,bean,name,to,terminate,thread,current,thread,interrupt
ExecutorConfigurationSupport -> public void setThreadFactory(ThreadFactory threadFactory);1328020251;Set the ThreadFactory to use for the ThreadPoolExecutor's thread pool._Default is the ThreadPoolExecutor's default thread factory._@see java.util.concurrent.Executors#defaultThreadFactory();public void setThreadFactory(ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,thread,pool,executor,s,thread,pool,default,is,the,thread,pool,executor,s,default,thread,factory,see,java,util,concurrent,executors,default,thread,factory;public,void,set,thread,factory,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(ThreadFactory threadFactory);1356735495;Set the ThreadFactory to use for the ThreadPoolExecutor's thread pool._Default is the ThreadPoolExecutor's default thread factory._@see java.util.concurrent.Executors#defaultThreadFactory();public void setThreadFactory(ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,thread,pool,executor,s,thread,pool,default,is,the,thread,pool,executor,s,default,thread,factory,see,java,util,concurrent,executors,default,thread,factory;public,void,set,thread,factory,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(ThreadFactory threadFactory);1357119239;Set the ThreadFactory to use for the ThreadPoolExecutor's thread pool._Default is the ThreadPoolExecutor's default thread factory._@see java.util.concurrent.Executors#defaultThreadFactory();public void setThreadFactory(ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,thread,pool,executor,s,thread,pool,default,is,the,thread,pool,executor,s,default,thread,factory,see,java,util,concurrent,executors,default,thread,factory;public,void,set,thread,factory,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(ThreadFactory threadFactory);1362408075;Set the ThreadFactory to use for the ThreadPoolExecutor's thread pool._Default is the ThreadPoolExecutor's default thread factory._@see java.util.concurrent.Executors#defaultThreadFactory();public void setThreadFactory(ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,thread,pool,executor,s,thread,pool,default,is,the,thread,pool,executor,s,default,thread,factory,see,java,util,concurrent,executors,default,thread,factory;public,void,set,thread,factory,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(ThreadFactory threadFactory);1364421156;Set the ThreadFactory to use for the ThreadPoolExecutor's thread pool._Default is the ThreadPoolExecutor's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/env/concurrent/tf/DefaultThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._@see java.util.concurrent.Executors#defaultThreadFactory();public void setThreadFactory(ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,thread,pool,executor,s,thread,pool,default,is,the,thread,pool,executor,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,env,concurrent,tf,default,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,see,java,util,concurrent,executors,default,thread,factory;public,void,set,thread,factory,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(ThreadFactory threadFactory);1368482696;Set the ThreadFactory to use for the ThreadPoolExecutor's thread pool._Default is the ThreadPoolExecutor's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/env/concurrent/tf/DefaultThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._@see java.util.concurrent.Executors#defaultThreadFactory();public void setThreadFactory(ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,thread,pool,executor,s,thread,pool,default,is,the,thread,pool,executor,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,env,concurrent,tf,default,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,see,java,util,concurrent,executors,default,thread,factory;public,void,set,thread,factory,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(ThreadFactory threadFactory);1378149646;Set the ThreadFactory to use for the ExecutorService's thread pool._Default is the underlying ExecutorService's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/env/concurrent/tf/DefaultThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._@see java.util.concurrent.Executors#defaultThreadFactory();public void setThreadFactory(ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,executor,service,s,thread,pool,default,is,the,underlying,executor,service,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,env,concurrent,tf,default,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,see,java,util,concurrent,executors,default,thread,factory;public,void,set,thread,factory,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void setThreadFactory(ThreadFactory threadFactory);1383419642;Set the ThreadFactory to use for the ExecutorService's thread pool._Default is the underlying ExecutorService's default thread factory._<p>In a Java EE 7 or other managed environment with JSR-236 support,_consider specifying a JNDI-located ManagedThreadFactory: by default,_to be found at "java:comp/DefaultManagedThreadFactory"._Use the "jee:jndi-lookup" namespace element in XML or the programmatic_{@link org.springframework.jndi.JndiLocatorDelegate} for convenient lookup._Alternatively, consider using Spring's {@link DefaultManagedAwareThreadFactory}_with its fallback to local threads in case of no managed thread factory found._@see java.util.concurrent.Executors#defaultThreadFactory()_@see javax.enterprise.concurrent.ManagedThreadFactory_@see DefaultManagedAwareThreadFactory;public void setThreadFactory(ThreadFactory threadFactory) {_		this.threadFactory = (threadFactory != null ? threadFactory : this)__	};set,the,thread,factory,to,use,for,the,executor,service,s,thread,pool,default,is,the,underlying,executor,service,s,default,thread,factory,p,in,a,java,ee,7,or,other,managed,environment,with,jsr,236,support,consider,specifying,a,jndi,located,managed,thread,factory,by,default,to,be,found,at,java,comp,default,managed,thread,factory,use,the,jee,jndi,lookup,namespace,element,in,xml,or,the,programmatic,link,org,springframework,jndi,jndi,locator,delegate,for,convenient,lookup,alternatively,consider,using,spring,s,link,default,managed,aware,thread,factory,with,its,fallback,to,local,threads,in,case,of,no,managed,thread,factory,found,see,java,util,concurrent,executors,default,thread,factory,see,javax,enterprise,concurrent,managed,thread,factory,see,default,managed,aware,thread,factory;public,void,set,thread,factory,thread,factory,thread,factory,this,thread,factory,thread,factory,null,thread,factory,this
ExecutorConfigurationSupport -> public void initialize();1328020251;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1356735495;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1357119239;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1362408075;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1364421156;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1368482696;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1378149646;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1383419642;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1496837955;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1498780456;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1521420322;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1521459769;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
ExecutorConfigurationSupport -> public void initialize();1536780763;Set up the ExecutorService.;public void initialize() {_		if (logger.isInfoEnabled()) {_			logger.info("Initializing ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""))__		}_		if (!this.threadNamePrefixSet && this.beanName != null) {_			setThreadNamePrefix(this.beanName + "-")__		}_		this.executor = initializeExecutor(this.threadFactory, this.rejectedExecutionHandler)__	};set,up,the,executor,service;public,void,initialize,if,logger,is,info,enabled,logger,info,initializing,executor,service,this,bean,name,null,this,bean,name,if,this,thread,name,prefix,set,this,bean,name,null,set,thread,name,prefix,this,bean,name,this,executor,initialize,executor,this,thread,factory,this,rejected,execution,handler
