# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1377640854;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1377720874;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1382746896;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1383520795;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1383604440;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1385978370;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1400245582;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1400371518;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1404161605;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1409741991;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1411735569;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1417456496;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1423592779;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1424886328;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1426267086;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1427794760;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1432125256;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1432135182;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1434204449;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1437853989;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1347311780;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		String className = metadata.getClassName()__		configBeanDef.setBeanClassName(className)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(className, configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,string,class,name,metadata,get,class,name,config,bean,def,set,bean,class,name,class,name,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1356735495;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		String className = metadata.getClassName()__		configBeanDef.setBeanClassName(className)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(className, configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,string,class,name,metadata,get,class,name,config,bean,def,set,bean,class,name,class,name,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1357119239;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		String className = metadata.getClassName()__		configBeanDef.setBeanClassName(className)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(className, configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,string,class,name,metadata,get,class,name,config,bean,def,set,bean,class,name,class,name,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1362408075;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		String className = metadata.getClassName()__		configBeanDef.setBeanClassName(className)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(className, configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,string,class,name,metadata,get,class,name,config,bean,def,set,bean,class,name,class,name,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1366717765;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1368068203;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1368482696;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1372363092;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1377269365;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1377562322;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1377625191;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1377640854;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1377720874;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1382746896;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1383520795;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1383604440;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1385978370;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1400245582;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1400371518;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1404161605;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1409716050;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1409741991;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1411735569;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1417456496;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__			configBeanDef.setScope(scopeMetadata.getScopeName())__			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)__			BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__			definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__			this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1423592779;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__			configBeanDef.setScope(scopeMetadata.getScopeName())__			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)__			BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__			definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__			this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1424886328;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__			configBeanDef.setScope(scopeMetadata.getScopeName())__			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)__			BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__			definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__			this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1426267086;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__			configBeanDef.setScope(scopeMetadata.getScopeName())__			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__			AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)__			BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__			definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__			this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,metadata,get,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1427794760;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1432125256;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1432135182;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1434204449;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1437853989;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1438078134;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1467730834;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1468583965;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1481292081;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1490114687;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1492434334;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1496263893;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1496837955;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1497250713;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1500332089;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1522103912;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1525267242;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1530188116;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1530736865;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1532091916;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1532706365;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isDebugEnabled()) {_			logger.debug("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1533908746;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isTraceEnabled()) {_			logger.trace("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,trace,enabled,logger,trace,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass);1537388389;Register the {@link Configuration} class itself as a bean definition.;private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {_		AnnotationMetadata metadata = configClass.getMetadata()__		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)___		ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef)__		configBeanDef.setScope(scopeMetadata.getScopeName())__		String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry)__		AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata)___		BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName)__		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)__		this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition())__		configClass.setBeanName(configBeanName)___		if (logger.isTraceEnabled()) {_			logger.trace("Registered bean definition for imported class '" + configBeanName + "'")__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,register,bean,definition,for,imported,configuration,class,configuration,class,config,class,annotation,metadata,metadata,config,class,get,metadata,annotated,generic,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,scope,metadata,scope,metadata,scope,metadata,resolver,resolve,scope,metadata,config,bean,def,config,bean,def,set,scope,scope,metadata,get,scope,name,string,config,bean,name,this,import,bean,name,generator,generate,bean,name,config,bean,def,this,registry,annotation,config,utils,process,common,definition,annotations,config,bean,def,metadata,bean,definition,holder,definition,holder,new,bean,definition,holder,config,bean,def,config,bean,name,definition,holder,annotation,config,utils,apply,scoped,proxy,mode,scope,metadata,definition,holder,this,registry,this,registry,register,bean,definition,definition,holder,get,bean,name,definition,holder,get,bean,definition,config,class,set,bean,name,config,bean,name,if,logger,is,trace,enabled,logger,trace,registered,bean,definition,for,imported,class,config,bean,name
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1438078134;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1467730834;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1468583965;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1481292081;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1490114687;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1492434334;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1496263893;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1496837955;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1497250713;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1500332089;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1522103912;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1525267242;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1530188116;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1530736865;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1532091916;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1532706365;Create a new {@link ConfigurationClassBeanDefinitionReader} instance_that will be used to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1533908746;Create a new {@link ConfigurationClassBeanDefinitionReader} instance_that will be used to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator, 			ImportRegistry importRegistry);1537388389;Create a new {@link ConfigurationClassBeanDefinitionReader} instance_that will be used to populate the given {@link BeanDefinitionRegistry}.;ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,_			ImportRegistry importRegistry) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.importRegistry = importRegistry__		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,import,registry,import,registry,this,registry,registry,this,source,extractor,source,extractor,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,import,registry,import,registry,this,condition,evaluator,new,condition,evaluator,registry,environment,resource,loader
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1328020251;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		Map<String, Object> roleAttributes = metadata.getAnnotationAttributes(Role.class.getName())__		if (roleAttributes != null) {_			int role = (Integer) roleAttributes.get("value")__			beanDef.setRole(role)__		}__		_		Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName())__		List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get("value")__			if (dependsOn.length > 0) {_				beanDef.setDependsOn(dependsOn)__			}_		}__		Autowire autowire = (Autowire) beanAttributes.get("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = (String) beanAttributes.get("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = (String) beanAttributes.get("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName())__		if (scopeAttributes != null) {_			beanDef.setScope((String) scopeAttributes.get("value"))__			proxyMode = (ScopedProxyMode) scopeAttributes.get("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = proxyDef.getBeanDefinition()__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,map,string,object,role,attributes,metadata,get,annotation,attributes,role,class,get,name,if,role,attributes,null,int,role,integer,role,attributes,get,value,bean,def,set,role,role,map,string,object,bean,attributes,metadata,get,annotation,attributes,bean,class,get,name,list,string,names,new,array,list,string,arrays,as,list,string,bean,attributes,get,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,bean,def,set,lazy,init,boolean,metadata,get,annotation,attributes,lazy,class,get,name,get,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,bean,def,set,lazy,init,boolean,config,class,get,metadata,get,annotation,attributes,lazy,class,get,name,get,value,if,metadata,is,annotated,depends,on,class,get,name,string,depends,on,string,metadata,get,annotation,attributes,depends,on,class,get,name,get,value,if,depends,on,length,0,bean,def,set,depends,on,depends,on,autowire,autowire,autowire,bean,attributes,get,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,string,bean,attributes,get,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,string,bean,attributes,get,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,map,string,object,scope,attributes,metadata,get,annotation,attributes,scope,class,get,name,if,scope,attributes,null,bean,def,set,scope,string,scope,attributes,get,value,proxy,mode,scoped,proxy,mode,scope,attributes,get,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,proxy,def,get,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1329142650;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = proxyDef.getBeanDefinition()__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,proxy,def,get,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1329393628;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = proxyDef.getBeanDefinition()__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,proxy,def,get,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1347311780;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = proxyDef.getBeanDefinition()__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,proxy,def,get,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1356735495;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = proxyDef.getBeanDefinition()__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,proxy,def,get,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1357119239;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = proxyDef.getBeanDefinition()__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,proxy,def,get,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1362408075;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1366717765;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1368068203;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (ConditionalAnnotationHelper.shouldSkip(beanMethod, this.registry,_				this.environment, this.importBeanNameGenerator)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,conditional,annotation,helper,should,skip,bean,method,this,registry,this,environment,this,import,bean,name,generator,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1368482696;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (ConditionalAnnotationHelper.shouldSkip(beanMethod, this.registry,_				this.environment, this.importBeanNameGenerator)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,conditional,annotation,helper,should,skip,bean,method,this,registry,this,environment,this,import,bean,name,generator,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1372363092;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (conditionEvaluator.shouldSkip(beanMethod.getMetadata(),_				ConfigurationPhase.REGISTER_BEAN)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes role = attributesFor(metadata, Role.class)__		if (role != null) {_			beanDef.setRole(role.<Integer>getNumber("value"))__		}__		_		AnnotationAttributes bean = attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		if (metadata.isAnnotated(Primary.class.getName())) {_			beanDef.setPrimary(true)__		}__		_		if (metadata.isAnnotated(Lazy.class.getName())) {_			AnnotationAttributes lazy = attributesFor(metadata, Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}_		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){_			AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class)__			beanDef.setLazyInit(lazy.getBoolean("value"))__		}__		if (metadata.isAnnotated(DependsOn.class.getName())) {_			AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class)__			String[] otherBeans = dependsOn.getStringArray("value")__			if (otherBeans.length > 0) {_				beanDef.setDependsOn(otherBeans)__			}_		}__		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,root,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,role,attributes,for,metadata,role,class,if,role,null,bean,def,set,role,role,integer,get,number,value,annotation,attributes,bean,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,if,metadata,is,annotated,primary,class,get,name,bean,def,set,primary,true,if,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,else,if,config,class,get,metadata,is,annotated,lazy,class,get,name,annotation,attributes,lazy,attributes,for,config,class,get,metadata,lazy,class,bean,def,set,lazy,init,lazy,get,boolean,value,if,metadata,is,annotated,depends,on,class,get,name,annotation,attributes,depends,on,attributes,for,metadata,depends,on,class,string,other,beans,depends,on,get,string,array,value,if,other,beans,length,0,bean,def,set,depends,on,other,beans,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1377269365;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1377562322;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1377625191;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1377640854;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (this.registry.containsBeanDefinition(beanName)) {_			BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName)__			_			if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {_				_				_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " +_							"'%s' already exists. This is likely due to an override in XML.", beanMethod, beanName))__				}_				return__			}_		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))__		}__		registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,this,registry,contains,bean,definition,bean,name,bean,definition,existing,bean,def,registry,get,bean,definition,bean,name,if,existing,bean,def,instanceof,configuration,class,bean,definition,if,logger,is,debug,enabled,logger,debug,string,format,skipping,loading,bean,definition,for,s,a,definition,for,bean,s,already,exists,this,is,likely,due,to,an,override,in,xml,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1377720874;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1382746896;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1383520795;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1383604440;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1385978370;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1400245582;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1400371518;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1404161605;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1409716050;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1409741991;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister =_					new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1411735569;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1417456496;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {_			return__		}__		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))__		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())__		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,if,this,condition,evaluator,should,skip,bean,method,get,metadata,configuration,phase,return,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1423592779;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()___		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName())___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeans.add(beanName)__			return__		}_		if (configClass.skippedBeans.contains(beanName)) {_			return__		}__		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(metadata.getMethodName())__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(metadata.getMethodName())__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,bean,method,get,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,beans,add,bean,name,return,if,config,class,skipped,beans,contains,bean,name,return,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,metadata,get,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,metadata,get,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1424886328;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1426267086;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1427794760;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1432125256;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (StringUtils.hasText(destroyMethodName)) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,string,utils,has,text,destroy,method,name,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1432135182;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (scope != null) {_			beanDef.setScope(scope.getString("value"))__			proxyMode = scope.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,scope,annotation,config,utils,attributes,for,metadata,scope,class,if,scope,null,bean,def,set,scope,scope,get,string,value,proxy,mode,scope,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1434204449;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		_		_		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,aliased,string,value,scope,class,config,class,get,resource,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1437853989;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		_		_		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,aliased,string,value,scope,class,config,class,get,resource,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1438078134;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,string,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,aliased,string,value,scope,class,config,class,get,resource,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1467730834;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,aliased,string,value,scope,class,config,class,get,resource,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1468583965;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1481292081;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (names.size() > 0 ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,size,0,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1490114687;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1492434334;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1496263893;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		_		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		if (destroyMethodName != null) {_			beanDef.setDestroyMethodName(destroyMethodName)__		}__		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,if,destroy,method,name,null,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1496837955;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1497250713;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1500332089;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1522103912;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1525267242;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, ApplicationContext applicationContext, 			SourceExtractor sourceExtractor, ProblemReporter problemReporter, 			MetadataReaderFactory metadataReaderFactory, ResourceLoader resourceLoader, 			Environment environment, BeanNameGenerator importBeanNameGenerator);1372363092;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, ApplicationContext applicationContext,_			SourceExtractor sourceExtractor, ProblemReporter problemReporter,_			MetadataReaderFactory metadataReaderFactory, ResourceLoader resourceLoader,_			Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment,_				applicationContext, null, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,application,context,application,context,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,application,context,null,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, ApplicationContext applicationContext, 			SourceExtractor sourceExtractor, ProblemReporter problemReporter, 			MetadataReaderFactory metadataReaderFactory, ResourceLoader resourceLoader, 			Environment environment, BeanNameGenerator importBeanNameGenerator);1377269365;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, ApplicationContext applicationContext,_			SourceExtractor sourceExtractor, ProblemReporter problemReporter,_			MetadataReaderFactory metadataReaderFactory, ResourceLoader resourceLoader,_			Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment,_				applicationContext, null, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,application,context,application,context,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,application,context,null,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, ApplicationContext applicationContext, 			SourceExtractor sourceExtractor, ProblemReporter problemReporter, 			MetadataReaderFactory metadataReaderFactory, ResourceLoader resourceLoader, 			Environment environment, BeanNameGenerator importBeanNameGenerator);1377562322;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, ApplicationContext applicationContext,_			SourceExtractor sourceExtractor, ProblemReporter problemReporter,_			MetadataReaderFactory metadataReaderFactory, ResourceLoader resourceLoader,_			Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment,_				applicationContext, null, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,application,context,application,context,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,application,context,null,resource,loader
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, ApplicationContext applicationContext, 			SourceExtractor sourceExtractor, ProblemReporter problemReporter, 			MetadataReaderFactory metadataReaderFactory, ResourceLoader resourceLoader, 			Environment environment, BeanNameGenerator importBeanNameGenerator);1377625191;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, ApplicationContext applicationContext,_			SourceExtractor sourceExtractor, ProblemReporter problemReporter,_			MetadataReaderFactory metadataReaderFactory, ResourceLoader resourceLoader,_			Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__		this.conditionEvaluator = new ConditionEvaluator(registry, environment,_				applicationContext, null, resourceLoader)__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,application,context,application,context,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator,this,condition,evaluator,new,condition,evaluator,registry,environment,application,context,null,resource,loader
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass( 			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator);1525267242;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(_			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}__		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass( 			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator);1530188116;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(_			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}__		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass( 			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator);1530736865;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(_			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}__		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass( 			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator);1532091916;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(_			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}__		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass( 			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator);1532706365;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(_			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}__		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass( 			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator);1533908746;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(_			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}__		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass( 			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator);1537388389;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(_			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}__		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void doLoadBeanDefinitionForConfigurationClassIfNecessary(ConfigurationClass configClass);1328020251;Register the {@link Configuration} class itself as a bean definition.;private void doLoadBeanDefinitionForConfigurationClassIfNecessary(ConfigurationClass configClass) {_		if (configClass.getBeanName() != null) {_			_			return__		}__		_		BeanDefinition configBeanDef = new GenericBeanDefinition()__		String className = configClass.getMetadata().getClassName()__		configBeanDef.setBeanClassName(className)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = BeanDefinitionReaderUtils.registerWithGeneratedName((AbstractBeanDefinition)configBeanDef, this.registry)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			try {_				MetadataReader reader = this.metadataReaderFactory.getMetadataReader(className)__				AnnotationMetadata metadata = reader.getAnnotationMetadata()__				this.problemReporter.error(_						new InvalidConfigurationImportProblem(className, reader.getResource(), metadata))__			}_			catch (IOException ex) {_				throw new IllegalStateException("Could not create MetadataReader for class " + className)__			}_		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,do,load,bean,definition,for,configuration,class,if,necessary,configuration,class,config,class,if,config,class,get,bean,name,null,return,bean,definition,config,bean,def,new,generic,bean,definition,string,class,name,config,class,get,metadata,get,class,name,config,bean,def,set,bean,class,name,class,name,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,bean,definition,reader,utils,register,with,generated,name,abstract,bean,definition,config,bean,def,this,registry,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,try,metadata,reader,reader,this,metadata,reader,factory,get,metadata,reader,class,name,annotation,metadata,metadata,reader,get,annotation,metadata,this,problem,reporter,error,new,invalid,configuration,import,problem,class,name,reader,get,resource,metadata,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,create,metadata,reader,for,class,class,name
ConfigurationClassBeanDefinitionReader -> private void doLoadBeanDefinitionForConfigurationClassIfNecessary(ConfigurationClass configClass);1329142650;Register the {@link Configuration} class itself as a bean definition.;private void doLoadBeanDefinitionForConfigurationClassIfNecessary(ConfigurationClass configClass) {_		if (!configClass.isImported()) {_			return__		}__		BeanDefinition configBeanDef = new GenericBeanDefinition()__		String className = configClass.getMetadata().getClassName()__		configBeanDef.setBeanClassName(className)__		MetadataReader reader__		try {_			reader = this.metadataReaderFactory.getMetadataReader(className)__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not create MetadataReader for class " + className)__		}_		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			Map<String, Object> configAttributes =_					reader.getAnnotationMetadata().getAnnotationAttributes(Configuration.class.getName())___			_			String configBeanName = (String) configAttributes.get("value")__			if (StringUtils.hasText(configBeanName)) {_				_				this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			}_			else {_				_				configBeanName = BeanDefinitionReaderUtils.registerWithGeneratedName((AbstractBeanDefinition)configBeanDef, this.registry)__			}_			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			AnnotationMetadata metadata = reader.getAnnotationMetadata()__			this.problemReporter.error(_					new InvalidConfigurationImportProblem(className, reader.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,do,load,bean,definition,for,configuration,class,if,necessary,configuration,class,config,class,if,config,class,is,imported,return,bean,definition,config,bean,def,new,generic,bean,definition,string,class,name,config,class,get,metadata,get,class,name,config,bean,def,set,bean,class,name,class,name,metadata,reader,reader,try,reader,this,metadata,reader,factory,get,metadata,reader,class,name,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,create,metadata,reader,for,class,class,name,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,map,string,object,config,attributes,reader,get,annotation,metadata,get,annotation,attributes,configuration,class,get,name,string,config,bean,name,string,config,attributes,get,value,if,string,utils,has,text,config,bean,name,this,registry,register,bean,definition,config,bean,name,config,bean,def,else,config,bean,name,bean,definition,reader,utils,register,with,generated,name,abstract,bean,definition,config,bean,def,this,registry,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,annotation,metadata,metadata,reader,get,annotation,metadata,this,problem,reporter,error,new,invalid,configuration,import,problem,class,name,reader,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> private void doLoadBeanDefinitionForConfigurationClassIfNecessary(ConfigurationClass configClass);1329393628;Register the {@link Configuration} class itself as a bean definition.;private void doLoadBeanDefinitionForConfigurationClassIfNecessary(ConfigurationClass configClass) {_		if (!configClass.isImported()) {_			return__		}__		AnnotationMetadata metadata = configClass.getMetadata()__		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata)__		String className = metadata.getClassName()__		configBeanDef.setBeanClassName(className)__		if (ConfigurationClassUtils.checkConfigurationClassCandidate(configBeanDef, this.metadataReaderFactory)) {_			String configBeanName = this.beanNameGenerator.generateBeanName(configBeanDef, this.registry)__			this.registry.registerBeanDefinition(configBeanName, configBeanDef)__			configClass.setBeanName(configBeanName)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Registered bean definition for imported @Configuration class %s", configBeanName))__			}_		}_		else {_			this.problemReporter.error(_					new InvalidConfigurationImportProblem(className, configClass.getResource(), metadata))__		}_	};register,the,link,configuration,class,itself,as,a,bean,definition;private,void,do,load,bean,definition,for,configuration,class,if,necessary,configuration,class,config,class,if,config,class,is,imported,return,annotation,metadata,metadata,config,class,get,metadata,bean,definition,config,bean,def,new,annotated,generic,bean,definition,metadata,string,class,name,metadata,get,class,name,config,bean,def,set,bean,class,name,class,name,if,configuration,class,utils,check,configuration,class,candidate,config,bean,def,this,metadata,reader,factory,string,config,bean,name,this,bean,name,generator,generate,bean,name,config,bean,def,this,registry,this,registry,register,bean,definition,config,bean,name,config,bean,def,config,class,set,bean,name,config,bean,name,if,logger,is,debug,enabled,logger,debug,string,format,registered,bean,definition,for,imported,configuration,class,s,config,bean,name,else,this,problem,reporter,error,new,invalid,configuration,import,problem,class,name,config,class,get,resource,metadata
ConfigurationClassBeanDefinitionReader -> @SuppressWarnings("deprecation")   	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1530188116;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;@SuppressWarnings("deprecation")  _	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor._				SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;suppress,warnings,deprecation,private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,org,springframework,beans,factory,annotation,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> @SuppressWarnings("deprecation")   	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1530736865;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;@SuppressWarnings("deprecation")  _	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor._				SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		boolean autowireCandidate = bean.getBoolean("autowireCandidate")__		if (!autowireCandidate) {_			beanDef.setAutowireCandidate(false)__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;suppress,warnings,deprecation,private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,org,springframework,beans,factory,annotation,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,boolean,autowire,candidate,bean,get,boolean,autowire,candidate,if,autowire,candidate,bean,def,set,autowire,candidate,false,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> @SuppressWarnings("deprecation")   	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1532091916;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;@SuppressWarnings("deprecation")  _	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor._				SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		boolean autowireCandidate = bean.getBoolean("autowireCandidate")__		if (!autowireCandidate) {_			beanDef.setAutowireCandidate(false)__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}__		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;suppress,warnings,deprecation,private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,org,springframework,beans,factory,annotation,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,boolean,autowire,candidate,bean,get,boolean,autowire,candidate,if,autowire,candidate,bean,def,set,autowire,candidate,false,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,debug,enabled,logger,debug,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> @SuppressWarnings("deprecation")   	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1532706365;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;@SuppressWarnings("deprecation")  _	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor._				SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		boolean autowireCandidate = bean.getBoolean("autowireCandidate")__		if (!autowireCandidate) {_			beanDef.setAutowireCandidate(false)__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}_		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;suppress,warnings,deprecation,private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,org,springframework,beans,factory,annotation,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,boolean,autowire,candidate,bean,get,boolean,autowire,candidate,if,autowire,candidate,bean,def,set,autowire,candidate,false,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,trace,enabled,logger,trace,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> @SuppressWarnings("deprecation")   	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1533908746;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;@SuppressWarnings("deprecation")  _	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor._				SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		boolean autowireCandidate = bean.getBoolean("autowireCandidate")__		if (!autowireCandidate) {_			beanDef.setAutowireCandidate(false)__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}_		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;suppress,warnings,deprecation,private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,root,bean,definition,bean,def,set,attribute,org,springframework,beans,factory,annotation,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,boolean,autowire,candidate,bean,get,boolean,autowire,candidate,if,autowire,candidate,bean,def,set,autowire,candidate,false,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,trace,enabled,logger,trace,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> @SuppressWarnings("deprecation")   	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod);1537388389;Read the given {@link BeanMethod}, registering bean definitions_with the BeanDefinitionRegistry based on its contents.;@SuppressWarnings("deprecation")  _	private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {_		ConfigurationClass configClass = beanMethod.getConfigurationClass()__		MethodMetadata metadata = beanMethod.getMetadata()__		String methodName = metadata.getMethodName()___		_		if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {_			configClass.skippedBeanMethods.add(methodName)__			return__		}_		if (configClass.skippedBeanMethods.contains(methodName)) {_			return__		}__		AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)__		Assert.state(bean != null, "No @Bean annotation attributes")___		_		List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray("name")))__		String beanName = (!names.isEmpty() ? names.remove(0) : methodName)___		_		for (String alias : names) {_			this.registry.registerAlias(beanName, alias)__		}__		_		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {_			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {_				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),_						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +_						"' clashes with bean name for containing configuration class_ please make those names unique!")__			}_			return__		}__		ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)__		beanDef.setResource(configClass.getResource())__		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))___		if (metadata.isStatic()) {_			_			beanDef.setBeanClassName(configClass.getMetadata().getClassName())__			beanDef.setFactoryMethodName(methodName)__		}_		else {_			_			beanDef.setFactoryBeanName(configClass.getBeanName())__			beanDef.setUniqueFactoryMethodName(methodName)__		}_		beanDef.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR)__		beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor._				SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)___		AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)___		Autowire autowire = bean.getEnum("autowire")__		if (autowire.isAutowire()) {_			beanDef.setAutowireMode(autowire.value())__		}__		boolean autowireCandidate = bean.getBoolean("autowireCandidate")__		if (!autowireCandidate) {_			beanDef.setAutowireCandidate(false)__		}__		String initMethodName = bean.getString("initMethod")__		if (StringUtils.hasText(initMethodName)) {_			beanDef.setInitMethodName(initMethodName)__		}__		String destroyMethodName = bean.getString("destroyMethod")__		beanDef.setDestroyMethodName(destroyMethodName)___		_		ScopedProxyMode proxyMode = ScopedProxyMode.NO__		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)__		if (attributes != null) {_			beanDef.setScope(attributes.getString("value"))__			proxyMode = attributes.getEnum("proxyMode")__			if (proxyMode == ScopedProxyMode.DEFAULT) {_				proxyMode = ScopedProxyMode.NO__			}_		}__		_		BeanDefinition beanDefToRegister = beanDef__		if (proxyMode != ScopedProxyMode.NO) {_			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(_					new BeanDefinitionHolder(beanDef, beanName), this.registry,_					proxyMode == ScopedProxyMode.TARGET_CLASS)__			beanDefToRegister = new ConfigurationClassBeanDefinition(_					(RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)__		}__		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Registering bean definition for @Bean method %s.%s()",_					configClass.getMetadata().getClassName(), beanName))__		}_		this.registry.registerBeanDefinition(beanName, beanDefToRegister)__	};read,the,given,link,bean,method,registering,bean,definitions,with,the,bean,definition,registry,based,on,its,contents;suppress,warnings,deprecation,private,void,load,bean,definitions,for,bean,method,bean,method,bean,method,configuration,class,config,class,bean,method,get,configuration,class,method,metadata,metadata,bean,method,get,metadata,string,method,name,metadata,get,method,name,if,this,condition,evaluator,should,skip,metadata,configuration,phase,config,class,skipped,bean,methods,add,method,name,return,if,config,class,skipped,bean,methods,contains,method,name,return,annotation,attributes,bean,annotation,config,utils,attributes,for,metadata,bean,class,assert,state,bean,null,no,bean,annotation,attributes,list,string,names,new,array,list,arrays,as,list,bean,get,string,array,name,string,bean,name,names,is,empty,names,remove,0,method,name,for,string,alias,names,this,registry,register,alias,bean,name,alias,if,is,overridden,by,existing,definition,bean,method,bean,name,if,bean,name,equals,bean,method,get,configuration,class,get,bean,name,throw,new,bean,definition,store,exception,bean,method,get,configuration,class,get,resource,get,description,bean,name,bean,name,derived,from,bean,method,bean,method,get,metadata,get,method,name,clashes,with,bean,name,for,containing,configuration,class,please,make,those,names,unique,return,configuration,class,bean,definition,bean,def,new,configuration,class,bean,definition,config,class,metadata,bean,def,set,resource,config,class,get,resource,bean,def,set,source,this,source,extractor,extract,source,metadata,config,class,get,resource,if,metadata,is,static,bean,def,set,bean,class,name,config,class,get,metadata,get,class,name,bean,def,set,factory,method,name,method,name,else,bean,def,set,factory,bean,name,config,class,get,bean,name,bean,def,set,unique,factory,method,name,method,name,bean,def,set,autowire,mode,abstract,bean,definition,bean,def,set,attribute,org,springframework,beans,factory,annotation,required,annotation,bean,post,processor,boolean,true,annotation,config,utils,process,common,definition,annotations,bean,def,metadata,autowire,autowire,bean,get,enum,autowire,if,autowire,is,autowire,bean,def,set,autowire,mode,autowire,value,boolean,autowire,candidate,bean,get,boolean,autowire,candidate,if,autowire,candidate,bean,def,set,autowire,candidate,false,string,init,method,name,bean,get,string,init,method,if,string,utils,has,text,init,method,name,bean,def,set,init,method,name,init,method,name,string,destroy,method,name,bean,get,string,destroy,method,bean,def,set,destroy,method,name,destroy,method,name,scoped,proxy,mode,proxy,mode,scoped,proxy,mode,no,annotation,attributes,attributes,annotation,config,utils,attributes,for,metadata,scope,class,if,attributes,null,bean,def,set,scope,attributes,get,string,value,proxy,mode,attributes,get,enum,proxy,mode,if,proxy,mode,scoped,proxy,mode,default,proxy,mode,scoped,proxy,mode,no,bean,definition,bean,def,to,register,bean,def,if,proxy,mode,scoped,proxy,mode,no,bean,definition,holder,proxy,def,scoped,proxy,creator,create,scoped,proxy,new,bean,definition,holder,bean,def,bean,name,this,registry,proxy,mode,scoped,proxy,mode,bean,def,to,register,new,configuration,class,bean,definition,root,bean,definition,proxy,def,get,bean,definition,config,class,metadata,if,logger,is,trace,enabled,logger,trace,string,format,registering,bean,definition,for,bean,method,s,s,config,class,get,metadata,get,class,name,bean,name,this,registry,register,bean,definition,bean,name,bean,def,to,register
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1328020251;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		doLoadBeanDefinitionForConfigurationClassIfNecessary(configClass)__		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,do,load,bean,definition,for,configuration,class,if,necessary,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1329142650;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		doLoadBeanDefinitionForConfigurationClassIfNecessary(configClass)__		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,do,load,bean,definition,for,configuration,class,if,necessary,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1329393628;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		doLoadBeanDefinitionForConfigurationClassIfNecessary(configClass)__		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,do,load,bean,definition,for,configuration,class,if,necessary,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1347311780;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1356735495;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1357119239;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1362408075;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1366717765;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1368068203;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;public void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;public,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass);1368482696;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;public void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass) {_		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;public,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1372363092;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {_		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1377269365;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {_		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1377562322;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {_		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1377625191;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {_		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1377640854;Read a particular {@link ConfigurationClass}, registering bean definitions for the_class itself, all its {@link Bean} methods;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {_		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,all,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1377720874;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1382746896;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1383520795;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1383604440;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getMetadata(), configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,metadata,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1385978370;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1400245582;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1400371518;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1404161605;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1409716050;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			removeBeanDefinition(configClass)__			importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,remove,bean,definition,config,class,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1409741991;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1411735569;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1417456496;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1423592779;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1424886328;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1426267086;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1427794760;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1432125256;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1432135182;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1434204449;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1437853989;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1438078134;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1467730834;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1468583965;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,for,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1481292081;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1490114687;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1492434334;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1496263893;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1496837955;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1497250713;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1500332089;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, 			TrackedConditionEvaluator trackedConditionEvaluator);1522103912;Read a particular {@link ConfigurationClass}, registering bean definitions_for the class itself and all of its {@link Bean} methods.;private void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass,_			TrackedConditionEvaluator trackedConditionEvaluator) {__		if (trackedConditionEvaluator.shouldSkip(configClass)) {_			String beanName = configClass.getBeanName()__			if (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {_				this.registry.removeBeanDefinition(beanName)__			}_			this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName())__			return__		}__		if (configClass.isImported()) {_			registerBeanDefinitionForImportedConfigurationClass(configClass)__		}_		for (BeanMethod beanMethod : configClass.getBeanMethods()) {_			loadBeanDefinitionsForBeanMethod(beanMethod)__		}_		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources())__		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars())__	};read,a,particular,link,configuration,class,registering,bean,definitions,for,the,class,itself,and,all,of,its,link,bean,methods;private,void,load,bean,definitions,for,configuration,class,configuration,class,config,class,tracked,condition,evaluator,tracked,condition,evaluator,if,tracked,condition,evaluator,should,skip,config,class,string,bean,name,config,class,get,bean,name,if,string,utils,has,length,bean,name,this,registry,contains,bean,definition,bean,name,this,registry,remove,bean,definition,bean,name,this,import,registry,remove,importing,class,config,class,get,metadata,get,class,name,return,if,config,class,is,imported,register,bean,definition,for,imported,configuration,class,config,class,for,bean,method,bean,method,config,class,get,bean,methods,load,bean,definitions,for,bean,method,bean,method,load,bean,definitions,from,imported,resources,config,class,get,imported,resources,load,bean,definitions,from,registrars,config,class,get,import,bean,definition,registrars
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1328020251;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1329142650;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1329393628;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1347311780;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1356735495;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1357119239;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1362408075;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1366717765;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1368068203;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1368482696;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1372363092;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1377269365;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1377562322;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1377625191;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1377640854;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1377720874;Read {@code configurationModel}, registering bean definitions with {@link #registry}_based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,link,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1382746896;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1383520795;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1383604440;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1385978370;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1400245582;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1400371518;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1404161605;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1409716050;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1409741991;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1411735569;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1417456496;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1423592779;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1424886328;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1426267086;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1427794760;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1432125256;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1432135182;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1434204449;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1437853989;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1438078134;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1467730834;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1468583965;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1481292081;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1490114687;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1492434334;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1496263893;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1496837955;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1497250713;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1500332089;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1522103912;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1525267242;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1530188116;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1530736865;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1532091916;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1532706365;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1533908746;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel);1537388389;Read {@code configurationModel}, registering bean definitions_with the registry based on its contents.;public void loadBeanDefinitions(Set<ConfigurationClass> configurationModel) {_		TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator()__		for (ConfigurationClass configClass : configurationModel) {_			loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator)__		}_	};read,code,configuration,model,registering,bean,definitions,with,the,registry,based,on,its,contents;public,void,load,bean,definitions,set,configuration,class,configuration,model,tracked,condition,evaluator,tracked,condition,evaluator,new,tracked,condition,evaluator,for,configuration,class,config,class,configuration,model,load,bean,definitions,for,configuration,class,config,class,tracked,condition,evaluator
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1347311780;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1356735495;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1357119239;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1362408075;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1366717765;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1368068203;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator
ConfigurationClassBeanDefinitionReader -> public ConfigurationClassBeanDefinitionReader( 			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor, 			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory, 			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator);1368482696;Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used_to populate the given {@link BeanDefinitionRegistry}.;public ConfigurationClassBeanDefinitionReader(_			BeanDefinitionRegistry registry, SourceExtractor sourceExtractor,_			ProblemReporter problemReporter, MetadataReaderFactory metadataReaderFactory,_			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {__		this.registry = registry__		this.sourceExtractor = sourceExtractor__		this.problemReporter = problemReporter__		this.metadataReaderFactory = metadataReaderFactory__		this.resourceLoader = resourceLoader__		this.environment = environment__		this.importBeanNameGenerator = importBeanNameGenerator__	};create,a,new,link,configuration,class,bean,definition,reader,instance,that,will,be,used,to,populate,the,given,link,bean,definition,registry;public,configuration,class,bean,definition,reader,bean,definition,registry,registry,source,extractor,source,extractor,problem,reporter,problem,reporter,metadata,reader,factory,metadata,reader,factory,resource,loader,resource,loader,environment,environment,bean,name,generator,import,bean,name,generator,this,registry,registry,this,source,extractor,source,extractor,this,problem,reporter,problem,reporter,this,metadata,reader,factory,metadata,reader,factory,this,resource,loader,resource,loader,this,environment,environment,this,import,bean,name,generator,import,bean,name,generator
