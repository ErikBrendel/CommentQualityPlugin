# id;timestamp;commentText;codeText;commentWords;codeWords
SmartLifecycle -> boolean isAutoStartup()_;1328020251;Return whether this Lifecycle component should be started automatically_by the container when the ApplicationContext is refreshed. A value of_"false" indicates that the component is intended to be started manually.;boolean isAutoStartup()_;return,whether,this,lifecycle,component,should,be,started,automatically,by,the,container,when,the,application,context,is,refreshed,a,value,of,false,indicates,that,the,component,is,intended,to,be,started,manually;boolean,is,auto,startup
SmartLifecycle -> boolean isAutoStartup()_;1427742372;Returns {@code true} if this {@code Lifecycle} component should get_started automatically by the container at the time that the containing_{@link ApplicationContext} gets refreshed._<p>A value of {@code false} indicates that the component is intended to_be started through an explicit {@link #start()} call instead, analogous_to a plain {@link Lifecycle} implementation._@see #start()_@see #getPhase()_@see LifecycleProcessor#onRefresh()_@see ConfigurableApplicationContext#refresh();boolean isAutoStartup()_;returns,code,true,if,this,code,lifecycle,component,should,get,started,automatically,by,the,container,at,the,time,that,the,containing,link,application,context,gets,refreshed,p,a,value,of,code,false,indicates,that,the,component,is,intended,to,be,started,through,an,explicit,link,start,call,instead,analogous,to,a,plain,link,lifecycle,implementation,see,start,see,get,phase,see,lifecycle,processor,on,refresh,see,configurable,application,context,refresh;boolean,is,auto,startup
SmartLifecycle -> void stop(Runnable callback)_;1328020251;Indicates that a Lifecycle component must stop if it is currently running._<p>The provided callback is used by the {@link LifecycleProcessor} to support an_ordered, and potentially concurrent, shutdown of all components having a_common shutdown order value. The callback <b>must</b> be executed after_the SmartLifecycle component does indeed stop._<p>The {@code LifecycleProcessor} will call <i>only</i> this variant of the_{@code stop} method_ i.e. {@link Lifecycle#stop()} will not be called for_{@link SmartLifecycle} implementations unless explicitly delegated to within_this method.;void stop(Runnable callback)_;indicates,that,a,lifecycle,component,must,stop,if,it,is,currently,running,p,the,provided,callback,is,used,by,the,link,lifecycle,processor,to,support,an,ordered,and,potentially,concurrent,shutdown,of,all,components,having,a,common,shutdown,order,value,the,callback,b,must,b,be,executed,after,the,smart,lifecycle,component,does,indeed,stop,p,the,code,lifecycle,processor,will,call,i,only,i,this,variant,of,the,code,stop,method,i,e,link,lifecycle,stop,will,not,be,called,for,link,smart,lifecycle,implementations,unless,explicitly,delegated,to,within,this,method;void,stop,runnable,callback
SmartLifecycle -> void stop(Runnable callback)_;1427742372;Indicates that a Lifecycle component must stop if it is currently running._<p>The provided callback is used by the {@link LifecycleProcessor} to support_an ordered, and potentially concurrent, shutdown of all components having a_common shutdown order value. The callback <b>must</b> be executed after_the {@code SmartLifecycle} component does indeed stop._<p>The {@link LifecycleProcessor} will call <i>only</i> this variant of the_{@code stop} method_ i.e. {@link Lifecycle#stop()} will not be called for_{@code SmartLifecycle} implementations unless explicitly delegated to within_the implementation of this method._@see #stop()_@see #getPhase();void stop(Runnable callback)_;indicates,that,a,lifecycle,component,must,stop,if,it,is,currently,running,p,the,provided,callback,is,used,by,the,link,lifecycle,processor,to,support,an,ordered,and,potentially,concurrent,shutdown,of,all,components,having,a,common,shutdown,order,value,the,callback,b,must,b,be,executed,after,the,code,smart,lifecycle,component,does,indeed,stop,p,the,link,lifecycle,processor,will,call,i,only,i,this,variant,of,the,code,stop,method,i,e,link,lifecycle,stop,will,not,be,called,for,code,smart,lifecycle,implementations,unless,explicitly,delegated,to,within,the,implementation,of,this,method,see,stop,see,get,phase;void,stop,runnable,callback
