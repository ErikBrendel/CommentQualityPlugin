# id;timestamp;commentText;codeText;commentWords;codeWords
Cacheable -> String cacheManager() default ""_;1396268274;The bean name of the custom {@link org.springframework.cache.CacheManager} to use.;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1396272050;The bean name of the custom {@link org.springframework.cache.CacheManager} to use.;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1396878069;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver()}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1398850854;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver()}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1429832293;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver()}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1433105513;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1433105521;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1438176426;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1449656693;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1449663004;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1450368333;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1450701275;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1459274683;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String cacheManager() default ""_;1471347910;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
Cacheable -> String unless() default ""_;1362408075;Spring Expression Language (SpEL) attribute used to veto method caching._<p>Unlike {@link #condition()}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}. Default is "",_meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,attribute,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,default,is,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1396268127;Spring Expression Language (SpEL) attribute used to veto method caching._<p>Unlike {@link #condition()}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}. Default is "",_meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,attribute,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,default,is,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1396268274;Spring Expression Language (SpEL) attribute used to veto method caching._<p>Unlike {@link #condition()}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}. Default is "",_meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,attribute,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,default,is,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1396272050;Spring Expression Language (SpEL) attribute used to veto method caching._<p>Unlike {@link #condition()}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}. Default is "",_meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,attribute,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,default,is,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1396878069;Spring Expression Language (SpEL) attribute used to veto method caching._<p>Unlike {@link #condition()}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}. Default is "",_meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,attribute,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,default,is,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1398850854;Spring Expression Language (SpEL) attribute used to veto method caching._<p>Unlike {@link #condition()}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}. Default is "",_meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,attribute,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,default,is,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1429832293;Spring Expression Language (SpEL) attribute used to veto method caching._<p>Unlike {@link #condition()}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}. Default is "",_meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,attribute,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,default,is,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1433105513;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1433105521;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1438176426;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1449656693;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation.</li>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>_@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,li,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1449663004;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation.</li>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>_@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,li,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1450368333;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation.</li>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>_@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,li,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1450701275;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation.</li>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>_@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,li,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1459274683;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation.</li>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>_@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,li,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul,since,3,2;string,unless,default
Cacheable -> String unless() default ""_;1471347910;Spring Expression Language (SpEL) expression used to veto method caching._<p>Unlike {@link #condition}, this expression is evaluated after the method_has been called and can therefore refer to the {@code result}._<p>Default is {@code ""}, meaning that caching is never vetoed._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation. For_supported wrappers such as {@code Optional}, {@code #result} refers to the actual_object, not the wrapper</li>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>_@since 3.2;String unless() default ""_;spring,expression,language,sp,el,expression,used,to,veto,method,caching,p,unlike,link,condition,this,expression,is,evaluated,after,the,method,has,been,called,and,can,therefore,refer,to,the,code,result,p,default,is,code,meaning,that,caching,is,never,vetoed,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,for,supported,wrappers,such,as,code,optional,code,result,refers,to,the,actual,object,not,the,wrapper,li,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul,since,3,2;string,unless,default
Cacheable -> String keyGenerator() default ""_;1396268127;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1396268274;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1396272050;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1396878069;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1398850854;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1429832293;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1433105513;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1433105521;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1438176426;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1449656693;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1449663004;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1450368333;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1450701275;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1459274683;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String keyGenerator() default ""_;1471347910;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
Cacheable -> String key() default ""_;1328020251;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key;string,key,default
Cacheable -> String key() default ""_;1356735495;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key;string,key,default
Cacheable -> String key() default ""_;1362408075;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key;string,key,default
Cacheable -> String key() default ""_;1396268127;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
Cacheable -> String key() default ""_;1396268274;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
Cacheable -> String key() default ""_;1396272050;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
Cacheable -> String key() default ""_;1396878069;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
Cacheable -> String key() default ""_;1398850854;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
Cacheable -> String key() default ""_;1429832293;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
Cacheable -> String key() default ""_;1433105513;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured.;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured;string,key,default
Cacheable -> String key() default ""_;1433105521;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured.;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured;string,key,default
Cacheable -> String key() default ""_;1438176426;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured.;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured;string,key,default
Cacheable -> String key() default ""_;1449656693;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
Cacheable -> String key() default ""_;1449663004;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
Cacheable -> String key() default ""_;1450368333;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
Cacheable -> String key() default ""_;1450701275;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
Cacheable -> String key() default ""_;1459274683;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
Cacheable -> String key() default ""_;1471347910;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been configured._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,configured,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
Cacheable -> @AliasFor("cacheNames") 	String[] value() default {}_;1438176426;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
Cacheable -> @AliasFor("cacheNames") 	String[] value() default {}_;1449656693;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
Cacheable -> @AliasFor("cacheNames") 	String[] value() default {}_;1449663004;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
Cacheable -> @AliasFor("cacheNames") 	String[] value() default {}_;1450368333;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
Cacheable -> @AliasFor("cacheNames") 	String[] value() default {}_;1450701275;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
Cacheable -> @AliasFor("cacheNames") 	String[] value() default {}_;1459274683;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
Cacheable -> @AliasFor("cacheNames") 	String[] value() default {}_;1471347910;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
Cacheable -> @AliasFor("value") 	String[] cacheNames() default {}_;1438176426;Names of the caches in which method invocation results are stored._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,in,which,method,invocation,results,are,stored,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
Cacheable -> @AliasFor("value") 	String[] cacheNames() default {}_;1449656693;Names of the caches in which method invocation results are stored._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,in,which,method,invocation,results,are,stored,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
Cacheable -> @AliasFor("value") 	String[] cacheNames() default {}_;1449663004;Names of the caches in which method invocation results are stored._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,in,which,method,invocation,results,are,stored,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
Cacheable -> @AliasFor("value") 	String[] cacheNames() default {}_;1450368333;Names of the caches in which method invocation results are stored._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,in,which,method,invocation,results,are,stored,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
Cacheable -> @AliasFor("value") 	String[] cacheNames() default {}_;1450701275;Names of the caches in which method invocation results are stored._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,in,which,method,invocation,results,are,stored,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
Cacheable -> @AliasFor("value") 	String[] cacheNames() default {}_;1459274683;Names of the caches in which method invocation results are stored._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,in,which,method,invocation,results,are,stored,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
Cacheable -> @AliasFor("value") 	String[] cacheNames() default {}_;1471347910;Names of the caches in which method invocation results are stored._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,in,which,method,invocation,results,are,stored,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
Cacheable -> boolean sync() default false_;1450701275;Synchronize the invocation of the underlying method if several threads are_attempting to load a value for the same key. The synchronization leads to_a couple of limitations:_<ol>_<li>{@link #unless()} is not supported</li>_<li>Only one cache may be specified</li>_<li>No other cache-related operation can be combined</li>_</ol>_This is effectively a hint and the actual cache provider that you are_using may not support it in a synchronized fashion. Check your provider_documentation for more details on the actual semantics._@since 4.3_@see org.springframework.cache.Cache#get(Object, Callable);boolean sync() default false_;synchronize,the,invocation,of,the,underlying,method,if,several,threads,are,attempting,to,load,a,value,for,the,same,key,the,synchronization,leads,to,a,couple,of,limitations,ol,li,link,unless,is,not,supported,li,li,only,one,cache,may,be,specified,li,li,no,other,cache,related,operation,can,be,combined,li,ol,this,is,effectively,a,hint,and,the,actual,cache,provider,that,you,are,using,may,not,support,it,in,a,synchronized,fashion,check,your,provider,documentation,for,more,details,on,the,actual,semantics,since,4,3,see,org,springframework,cache,cache,get,object,callable;boolean,sync,default,false
Cacheable -> boolean sync() default false_;1459274683;Synchronize the invocation of the underlying method if several threads are_attempting to load a value for the same key. The synchronization leads to_a couple of limitations:_<ol>_<li>{@link #unless()} is not supported</li>_<li>Only one cache may be specified</li>_<li>No other cache-related operation can be combined</li>_</ol>_This is effectively a hint and the actual cache provider that you are_using may not support it in a synchronized fashion. Check your provider_documentation for more details on the actual semantics._@since 4.3_@see org.springframework.cache.Cache#get(Object, Callable);boolean sync() default false_;synchronize,the,invocation,of,the,underlying,method,if,several,threads,are,attempting,to,load,a,value,for,the,same,key,the,synchronization,leads,to,a,couple,of,limitations,ol,li,link,unless,is,not,supported,li,li,only,one,cache,may,be,specified,li,li,no,other,cache,related,operation,can,be,combined,li,ol,this,is,effectively,a,hint,and,the,actual,cache,provider,that,you,are,using,may,not,support,it,in,a,synchronized,fashion,check,your,provider,documentation,for,more,details,on,the,actual,semantics,since,4,3,see,org,springframework,cache,cache,get,object,callable;boolean,sync,default,false
Cacheable -> boolean sync() default false_;1471347910;Synchronize the invocation of the underlying method if several threads are_attempting to load a value for the same key. The synchronization leads to_a couple of limitations:_<ol>_<li>{@link #unless()} is not supported</li>_<li>Only one cache may be specified</li>_<li>No other cache-related operation can be combined</li>_</ol>_This is effectively a hint and the actual cache provider that you are_using may not support it in a synchronized fashion. Check your provider_documentation for more details on the actual semantics._@since 4.3_@see org.springframework.cache.Cache#get(Object, Callable);boolean sync() default false_;synchronize,the,invocation,of,the,underlying,method,if,several,threads,are,attempting,to,load,a,value,for,the,same,key,the,synchronization,leads,to,a,couple,of,limitations,ol,li,link,unless,is,not,supported,li,li,only,one,cache,may,be,specified,li,li,no,other,cache,related,operation,can,be,combined,li,ol,this,is,effectively,a,hint,and,the,actual,cache,provider,that,you,are,using,may,not,support,it,in,a,synchronized,fashion,check,your,provider,documentation,for,more,details,on,the,actual,semantics,since,4,3,see,org,springframework,cache,cache,get,object,callable;boolean,sync,default,false
Cacheable -> String cacheResolver() default ""_;1396878069;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use.;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1398850854;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use.;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1429832293;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use.;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1433105513;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1433105521;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1438176426;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1449656693;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1449663004;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1450368333;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1450701275;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1459274683;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String cacheResolver() default ""_;1471347910;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
Cacheable -> String condition() default ""_;1328020251;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1356735495;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1362408075;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1396268127;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1396268274;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1396272050;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1396878069;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1398850854;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1429832293;Spring Expression Language (SpEL) attribute used for making the method_caching conditional._<p>Default is "", meaning the method result is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,method,caching,conditional,p,default,is,meaning,the,method,result,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1433105513;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached.;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1433105521;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached.;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1438176426;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached.;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached;string,condition,default
Cacheable -> String condition() default ""_;1449656693;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
Cacheable -> String condition() default ""_;1449663004;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
Cacheable -> String condition() default ""_;1450368333;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
Cacheable -> String condition() default ""_;1450701275;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
Cacheable -> String condition() default ""_;1459274683;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
Cacheable -> String condition() default ""_;1471347910;Spring Expression Language (SpEL) expression used for making the method_caching conditional._<p>Default is {@code ""}, meaning the method result is always cached._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,method,caching,conditional,p,default,is,code,meaning,the,method,result,is,always,cached,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
Cacheable -> String[] value() default {}_;1396272050;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value() default {}_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value,default
Cacheable -> String[] value() default {}_;1396878069;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value() default {}_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value,default
Cacheable -> String[] value() default {}_;1398850854;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value() default {}_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value,default
Cacheable -> String[] value() default {}_;1429832293;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value() default {}_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value,default
Cacheable -> String[] value() default {}_;1433105513;Names of the caches in which method invocation results are stored._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition.;String[] value() default {}_;names,of,the,caches,in,which,method,invocation,results,are,stored,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition;string,value,default
Cacheable -> String[] value()_;1328020251;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
Cacheable -> String[] value()_;1356735495;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
Cacheable -> String[] value()_;1362408075;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
Cacheable -> String[] value()_;1396268127;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
Cacheable -> String[] value()_;1396268274;Name of the caches in which the update takes place._<p>May be used to determine the target cache (or caches), matching the_qualifier value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;name,of,the,caches,in,which,the,update,takes,place,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
