commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Class<?>[] getSpecificTargetClasses() {     return new Class<?>[] { Environment.class }. }
true;public;3;4;/**  * Can read any {@link Environment}, thus always returns true.  * @return true  */ ;/**  * Can read any {@link Environment}, thus always returns true.  * @return true  */ @Override public boolean canRead(EvaluationContext context, @Nullable Object target, String name) throws AccessException {     return true. }
true;public;3;5;/**  * Access the given target object by resolving the given property name against the given target  * environment.  */ ;/**  * Access the given target object by resolving the given property name against the given target  * environment.  */ @Override public TypedValue read(EvaluationContext context, @Nullable Object target, String name) throws AccessException {     Assert.state(target instanceof Environment, "Target must be of type Environment").     return new TypedValue(((Environment) target).getProperty(name)). }
true;public;3;4;/**  * Read-only: returns {@code false}.  */ ;/**  * Read-only: returns {@code false}.  */ @Override public boolean canWrite(EvaluationContext context, @Nullable Object target, String name) throws AccessException {     return false. }
true;public;4;4;/**  * Read-only: no-op.  */ ;/**  * Read-only: no-op.  */ @Override public void write(EvaluationContext context, @Nullable Object target, String name, @Nullable Object newValue) throws AccessException { }
