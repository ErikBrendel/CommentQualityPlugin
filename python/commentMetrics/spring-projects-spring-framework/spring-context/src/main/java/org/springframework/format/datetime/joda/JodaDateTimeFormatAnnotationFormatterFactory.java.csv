commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final Set<Class<?>> getFieldTypes() {     return FIELD_TYPES. }
false;public;2;15;;@Override public Printer<?> getPrinter(DateTimeFormat annotation, Class<?> fieldType) {     DateTimeFormatter formatter = getFormatter(annotation, fieldType).     if (ReadablePartial.class.isAssignableFrom(fieldType)) {         return new ReadablePartialPrinter(formatter).     } else if (ReadableInstant.class.isAssignableFrom(fieldType) || Calendar.class.isAssignableFrom(fieldType)) {         // assumes Calendar->ReadableInstant converter is registered         return new ReadableInstantPrinter(formatter).     } else {         // assumes Date->Long converter is registered         return new MillisecondInstantPrinter(formatter).     } }
false;public;2;15;;@Override public Parser<?> getParser(DateTimeFormat annotation, Class<?> fieldType) {     if (LocalDate.class == fieldType) {         return new LocalDateParser(getFormatter(annotation, fieldType)).     } else if (LocalTime.class == fieldType) {         return new LocalTimeParser(getFormatter(annotation, fieldType)).     } else if (LocalDateTime.class == fieldType) {         return new LocalDateTimeParser(getFormatter(annotation, fieldType)).     } else {         return new DateTimeParser(getFormatter(annotation, fieldType)).     } }
true;protected;2;13;/**  * Factory method used to create a {@link DateTimeFormatter}.  * @param annotation the format annotation for the field  * @param fieldType the type of field  * @return a {@link DateTimeFormatter} instance  * @since 3.2  */ ;/**  * Factory method used to create a {@link DateTimeFormatter}.  * @param annotation the format annotation for the field  * @param fieldType the type of field  * @return a {@link DateTimeFormatter} instance  * @since 3.2  */ protected DateTimeFormatter getFormatter(DateTimeFormat annotation, Class<?> fieldType) {     DateTimeFormatterFactory factory = new DateTimeFormatterFactory().     String style = resolveEmbeddedValue(annotation.style()).     if (StringUtils.hasLength(style)) {         factory.setStyle(style).     }     factory.setIso(annotation.iso()).     String pattern = resolveEmbeddedValue(annotation.pattern()).     if (StringUtils.hasLength(pattern)) {         factory.setPattern(pattern).     }     return factory.createDateTimeFormatter(). }
