commented;modifiers;parameterAmount;loc;comment;code
true;public;1;16;/**  * Send the supplied {@link Notification} using the wrapped  * {@link ModelMBean} instance.  * @param notification the {@link Notification} to be sent  * @throws IllegalArgumentException if the supplied {@code notification} is {@code null}  * @throws UnableToSendNotificationException if the supplied {@code notification} could not be sent  */ ;/**  * Send the supplied {@link Notification} using the wrapped  * {@link ModelMBean} instance.  * @param notification the {@link Notification} to be sent  * @throws IllegalArgumentException if the supplied {@code notification} is {@code null}  * @throws UnableToSendNotificationException if the supplied {@code notification} could not be sent  */ @Override public void sendNotification(Notification notification) {     Assert.notNull(notification, "Notification must not be null").     replaceNotificationSourceIfNecessary(notification).     try {         if (notification instanceof AttributeChangeNotification) {             this.modelMBean.sendAttributeChangeNotification((AttributeChangeNotification) notification).         } else {             this.modelMBean.sendNotification(notification).         }     } catch (MBeanException ex) {         throw new UnableToSendNotificationException("Unable to send notification [" + notification + "]", ex).     } }
true;private;1;5;/**  * Replaces the notification source if necessary to do so.  * From the {@link Notification javadoc}:  * <i>"It is strongly recommended that notification senders use the object name  * rather than a reference to the MBean object as the source."</i>  * @param notification the {@link Notification} whose  * {@link javax.management.Notification#getSource()} might need massaging  */ ;/**  * Replaces the notification source if necessary to do so.  * From the {@link Notification javadoc}:  * <i>"It is strongly recommended that notification senders use the object name  * rather than a reference to the MBean object as the source."</i>  * @param notification the {@link Notification} whose  * {@link javax.management.Notification#getSource()} might need massaging  */ private void replaceNotificationSourceIfNecessary(Notification notification) {     if (notification.getSource() == null || notification.getSource().equals(this.managedResource)) {         notification.setSource(this.objectName).     } }
