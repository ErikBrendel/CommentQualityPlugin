# id;timestamp;commentText;codeText;commentWords;codeWords
ModelMBeanNotificationPublisher -> private void replaceNotificationSourceIfNecessary(Notification notification);1328020251;From the {@link Notification javadoc}:_<p><i>"It is strongly recommended that notification senders use the object name_rather than a reference to the MBean object as the source."</i>_@param notification the {@link Notification} whose_{@link javax.management.Notification#getSource()} might need massaging;private void replaceNotificationSourceIfNecessary(Notification notification) {_		if (notification.getSource() == null || notification.getSource().equals(this.managedResource)) {_			notification.setSource(this.objectName)__		}_	};from,the,link,notification,javadoc,p,i,it,is,strongly,recommended,that,notification,senders,use,the,object,name,rather,than,a,reference,to,the,mbean,object,as,the,source,i,param,notification,the,link,notification,whose,link,javax,management,notification,get,source,might,need,massaging;private,void,replace,notification,source,if,necessary,notification,notification,if,notification,get,source,null,notification,get,source,equals,this,managed,resource,notification,set,source,this,object,name
ModelMBeanNotificationPublisher -> private void replaceNotificationSourceIfNecessary(Notification notification);1356735495;From the {@link Notification javadoc}:_<p><i>"It is strongly recommended that notification senders use the object name_rather than a reference to the MBean object as the source."</i>_@param notification the {@link Notification} whose_{@link javax.management.Notification#getSource()} might need massaging;private void replaceNotificationSourceIfNecessary(Notification notification) {_		if (notification.getSource() == null || notification.getSource().equals(this.managedResource)) {_			notification.setSource(this.objectName)__		}_	};from,the,link,notification,javadoc,p,i,it,is,strongly,recommended,that,notification,senders,use,the,object,name,rather,than,a,reference,to,the,mbean,object,as,the,source,i,param,notification,the,link,notification,whose,link,javax,management,notification,get,source,might,need,massaging;private,void,replace,notification,source,if,necessary,notification,notification,if,notification,get,source,null,notification,get,source,equals,this,managed,resource,notification,set,source,this,object,name
ModelMBeanNotificationPublisher -> private void replaceNotificationSourceIfNecessary(Notification notification);1357119239;From the {@link Notification javadoc}:_<p><i>"It is strongly recommended that notification senders use the object name_rather than a reference to the MBean object as the source."</i>_@param notification the {@link Notification} whose_{@link javax.management.Notification#getSource()} might need massaging;private void replaceNotificationSourceIfNecessary(Notification notification) {_		if (notification.getSource() == null || notification.getSource().equals(this.managedResource)) {_			notification.setSource(this.objectName)__		}_	};from,the,link,notification,javadoc,p,i,it,is,strongly,recommended,that,notification,senders,use,the,object,name,rather,than,a,reference,to,the,mbean,object,as,the,source,i,param,notification,the,link,notification,whose,link,javax,management,notification,get,source,might,need,massaging;private,void,replace,notification,source,if,necessary,notification,notification,if,notification,get,source,null,notification,get,source,equals,this,managed,resource,notification,set,source,this,object,name
ModelMBeanNotificationPublisher -> private void replaceNotificationSourceIfNecessary(Notification notification);1368482696;From the {@link Notification javadoc}:_<p><i>"It is strongly recommended that notification senders use the object name_rather than a reference to the MBean object as the source."</i>_@param notification the {@link Notification} whose_{@link javax.management.Notification#getSource()} might need massaging;private void replaceNotificationSourceIfNecessary(Notification notification) {_		if (notification.getSource() == null || notification.getSource().equals(this.managedResource)) {_			notification.setSource(this.objectName)__		}_	};from,the,link,notification,javadoc,p,i,it,is,strongly,recommended,that,notification,senders,use,the,object,name,rather,than,a,reference,to,the,mbean,object,as,the,source,i,param,notification,the,link,notification,whose,link,javax,management,notification,get,source,might,need,massaging;private,void,replace,notification,source,if,necessary,notification,notification,if,notification,get,source,null,notification,get,source,equals,this,managed,resource,notification,set,source,this,object,name
ModelMBeanNotificationPublisher -> private void replaceNotificationSourceIfNecessary(Notification notification);1530174524;Replaces the notification source if necessary to do so._From the {@link Notification javadoc}:_<i>"It is strongly recommended that notification senders use the object name_rather than a reference to the MBean object as the source."</i>_@param notification the {@link Notification} whose_{@link javax.management.Notification#getSource()} might need massaging;private void replaceNotificationSourceIfNecessary(Notification notification) {_		if (notification.getSource() == null || notification.getSource().equals(this.managedResource)) {_			notification.setSource(this.objectName)__		}_	};replaces,the,notification,source,if,necessary,to,do,so,from,the,link,notification,javadoc,i,it,is,strongly,recommended,that,notification,senders,use,the,object,name,rather,than,a,reference,to,the,mbean,object,as,the,source,i,param,notification,the,link,notification,whose,link,javax,management,notification,get,source,might,need,massaging;private,void,replace,notification,source,if,necessary,notification,notification,if,notification,get,source,null,notification,get,source,equals,this,managed,resource,notification,set,source,this,object,name
ModelMBeanNotificationPublisher -> @Override 	public void sendNotification(Notification notification);1356735495;Send the supplied {@link Notification} using the wrapped_{@link ModelMBean} instance._@param notification the {@link Notification} to be sent_@throws IllegalArgumentException if the supplied {@code notification} is {@code null}_@throws UnableToSendNotificationException if the supplied {@code notification} could not be sent;@Override_	public void sendNotification(Notification notification) {_		Assert.notNull(notification, "Notification must not be null")__		replaceNotificationSourceIfNecessary(notification)__		try {_			if (notification instanceof AttributeChangeNotification) {_				this.modelMBean.sendAttributeChangeNotification((AttributeChangeNotification) notification)__			}_			else {_				this.modelMBean.sendNotification(notification)__			}_		}_		catch (MBeanException ex) {_			throw new UnableToSendNotificationException("Unable to send notification [" + notification + "]", ex)__		}_	};send,the,supplied,link,notification,using,the,wrapped,link,model,mbean,instance,param,notification,the,link,notification,to,be,sent,throws,illegal,argument,exception,if,the,supplied,code,notification,is,code,null,throws,unable,to,send,notification,exception,if,the,supplied,code,notification,could,not,be,sent;override,public,void,send,notification,notification,notification,assert,not,null,notification,notification,must,not,be,null,replace,notification,source,if,necessary,notification,try,if,notification,instanceof,attribute,change,notification,this,model,mbean,send,attribute,change,notification,attribute,change,notification,notification,else,this,model,mbean,send,notification,notification,catch,mbean,exception,ex,throw,new,unable,to,send,notification,exception,unable,to,send,notification,notification,ex
ModelMBeanNotificationPublisher -> @Override 	public void sendNotification(Notification notification);1368482696;Send the supplied {@link Notification} using the wrapped_{@link ModelMBean} instance._@param notification the {@link Notification} to be sent_@throws IllegalArgumentException if the supplied {@code notification} is {@code null}_@throws UnableToSendNotificationException if the supplied {@code notification} could not be sent;@Override_	public void sendNotification(Notification notification) {_		Assert.notNull(notification, "Notification must not be null")__		replaceNotificationSourceIfNecessary(notification)__		try {_			if (notification instanceof AttributeChangeNotification) {_				this.modelMBean.sendAttributeChangeNotification((AttributeChangeNotification) notification)__			}_			else {_				this.modelMBean.sendNotification(notification)__			}_		}_		catch (MBeanException ex) {_			throw new UnableToSendNotificationException("Unable to send notification [" + notification + "]", ex)__		}_	};send,the,supplied,link,notification,using,the,wrapped,link,model,mbean,instance,param,notification,the,link,notification,to,be,sent,throws,illegal,argument,exception,if,the,supplied,code,notification,is,code,null,throws,unable,to,send,notification,exception,if,the,supplied,code,notification,could,not,be,sent;override,public,void,send,notification,notification,notification,assert,not,null,notification,notification,must,not,be,null,replace,notification,source,if,necessary,notification,try,if,notification,instanceof,attribute,change,notification,this,model,mbean,send,attribute,change,notification,attribute,change,notification,notification,else,this,model,mbean,send,notification,notification,catch,mbean,exception,ex,throw,new,unable,to,send,notification,exception,unable,to,send,notification,notification,ex
ModelMBeanNotificationPublisher -> @Override 	public void sendNotification(Notification notification);1530174524;Send the supplied {@link Notification} using the wrapped_{@link ModelMBean} instance._@param notification the {@link Notification} to be sent_@throws IllegalArgumentException if the supplied {@code notification} is {@code null}_@throws UnableToSendNotificationException if the supplied {@code notification} could not be sent;@Override_	public void sendNotification(Notification notification) {_		Assert.notNull(notification, "Notification must not be null")__		replaceNotificationSourceIfNecessary(notification)__		try {_			if (notification instanceof AttributeChangeNotification) {_				this.modelMBean.sendAttributeChangeNotification((AttributeChangeNotification) notification)__			}_			else {_				this.modelMBean.sendNotification(notification)__			}_		}_		catch (MBeanException ex) {_			throw new UnableToSendNotificationException("Unable to send notification [" + notification + "]", ex)__		}_	};send,the,supplied,link,notification,using,the,wrapped,link,model,mbean,instance,param,notification,the,link,notification,to,be,sent,throws,illegal,argument,exception,if,the,supplied,code,notification,is,code,null,throws,unable,to,send,notification,exception,if,the,supplied,code,notification,could,not,be,sent;override,public,void,send,notification,notification,notification,assert,not,null,notification,notification,must,not,be,null,replace,notification,source,if,necessary,notification,try,if,notification,instanceof,attribute,change,notification,this,model,mbean,send,attribute,change,notification,attribute,change,notification,notification,else,this,model,mbean,send,notification,notification,catch,mbean,exception,ex,throw,new,unable,to,send,notification,exception,unable,to,send,notification,notification,ex
ModelMBeanNotificationPublisher -> public ModelMBeanNotificationPublisher( 			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource);1328020251;Create a new instance of the {@link ModelMBeanNotificationPublisher} class_that will publish all {@link javax.management.Notification Notifications}_to the supplied {@link ModelMBean}._@param modelMBean the target {@link ModelMBean}_ must not be <code>null</code>_@param objectName the {@link ObjectName} of the source {@link ModelMBean}_@param managedResource the managed resource exposed by the supplied {@link ModelMBean}_@throws IllegalArgumentException if any of the parameters is <code>null</code>;public ModelMBeanNotificationPublisher(_			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource) {__		Assert.notNull(modelMBean, "'modelMBean' must not be null")__		Assert.notNull(objectName, "'objectName' must not be null")__		Assert.notNull(managedResource, "'managedResource' must not be null")__		this.modelMBean = modelMBean__		this.objectName = objectName__		this.managedResource = managedResource__	};create,a,new,instance,of,the,link,model,mbean,notification,publisher,class,that,will,publish,all,link,javax,management,notification,notifications,to,the,supplied,link,model,mbean,param,model,mbean,the,target,link,model,mbean,must,not,be,code,null,code,param,object,name,the,link,object,name,of,the,source,link,model,mbean,param,managed,resource,the,managed,resource,exposed,by,the,supplied,link,model,mbean,throws,illegal,argument,exception,if,any,of,the,parameters,is,code,null,code;public,model,mbean,notification,publisher,model,mbean,notification,broadcaster,model,mbean,object,name,object,name,object,managed,resource,assert,not,null,model,mbean,model,mbean,must,not,be,null,assert,not,null,object,name,object,name,must,not,be,null,assert,not,null,managed,resource,managed,resource,must,not,be,null,this,model,mbean,model,mbean,this,object,name,object,name,this,managed,resource,managed,resource
ModelMBeanNotificationPublisher -> public ModelMBeanNotificationPublisher( 			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource);1356735495;Create a new instance of the {@link ModelMBeanNotificationPublisher} class_that will publish all {@link javax.management.Notification Notifications}_to the supplied {@link ModelMBean}._@param modelMBean the target {@link ModelMBean}_ must not be {@code null}_@param objectName the {@link ObjectName} of the source {@link ModelMBean}_@param managedResource the managed resource exposed by the supplied {@link ModelMBean}_@throws IllegalArgumentException if any of the parameters is {@code null};public ModelMBeanNotificationPublisher(_			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource) {__		Assert.notNull(modelMBean, "'modelMBean' must not be null")__		Assert.notNull(objectName, "'objectName' must not be null")__		Assert.notNull(managedResource, "'managedResource' must not be null")__		this.modelMBean = modelMBean__		this.objectName = objectName__		this.managedResource = managedResource__	};create,a,new,instance,of,the,link,model,mbean,notification,publisher,class,that,will,publish,all,link,javax,management,notification,notifications,to,the,supplied,link,model,mbean,param,model,mbean,the,target,link,model,mbean,must,not,be,code,null,param,object,name,the,link,object,name,of,the,source,link,model,mbean,param,managed,resource,the,managed,resource,exposed,by,the,supplied,link,model,mbean,throws,illegal,argument,exception,if,any,of,the,parameters,is,code,null;public,model,mbean,notification,publisher,model,mbean,notification,broadcaster,model,mbean,object,name,object,name,object,managed,resource,assert,not,null,model,mbean,model,mbean,must,not,be,null,assert,not,null,object,name,object,name,must,not,be,null,assert,not,null,managed,resource,managed,resource,must,not,be,null,this,model,mbean,model,mbean,this,object,name,object,name,this,managed,resource,managed,resource
ModelMBeanNotificationPublisher -> public ModelMBeanNotificationPublisher( 			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource);1357119239;Create a new instance of the {@link ModelMBeanNotificationPublisher} class_that will publish all {@link javax.management.Notification Notifications}_to the supplied {@link ModelMBean}._@param modelMBean the target {@link ModelMBean}_ must not be {@code null}_@param objectName the {@link ObjectName} of the source {@link ModelMBean}_@param managedResource the managed resource exposed by the supplied {@link ModelMBean}_@throws IllegalArgumentException if any of the parameters is {@code null};public ModelMBeanNotificationPublisher(_			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource) {__		Assert.notNull(modelMBean, "'modelMBean' must not be null")__		Assert.notNull(objectName, "'objectName' must not be null")__		Assert.notNull(managedResource, "'managedResource' must not be null")__		this.modelMBean = modelMBean__		this.objectName = objectName__		this.managedResource = managedResource__	};create,a,new,instance,of,the,link,model,mbean,notification,publisher,class,that,will,publish,all,link,javax,management,notification,notifications,to,the,supplied,link,model,mbean,param,model,mbean,the,target,link,model,mbean,must,not,be,code,null,param,object,name,the,link,object,name,of,the,source,link,model,mbean,param,managed,resource,the,managed,resource,exposed,by,the,supplied,link,model,mbean,throws,illegal,argument,exception,if,any,of,the,parameters,is,code,null;public,model,mbean,notification,publisher,model,mbean,notification,broadcaster,model,mbean,object,name,object,name,object,managed,resource,assert,not,null,model,mbean,model,mbean,must,not,be,null,assert,not,null,object,name,object,name,must,not,be,null,assert,not,null,managed,resource,managed,resource,must,not,be,null,this,model,mbean,model,mbean,this,object,name,object,name,this,managed,resource,managed,resource
ModelMBeanNotificationPublisher -> public ModelMBeanNotificationPublisher( 			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource);1368482696;Create a new instance of the {@link ModelMBeanNotificationPublisher} class_that will publish all {@link javax.management.Notification Notifications}_to the supplied {@link ModelMBean}._@param modelMBean the target {@link ModelMBean}_ must not be {@code null}_@param objectName the {@link ObjectName} of the source {@link ModelMBean}_@param managedResource the managed resource exposed by the supplied {@link ModelMBean}_@throws IllegalArgumentException if any of the parameters is {@code null};public ModelMBeanNotificationPublisher(_			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource) {__		Assert.notNull(modelMBean, "'modelMBean' must not be null")__		Assert.notNull(objectName, "'objectName' must not be null")__		Assert.notNull(managedResource, "'managedResource' must not be null")__		this.modelMBean = modelMBean__		this.objectName = objectName__		this.managedResource = managedResource__	};create,a,new,instance,of,the,link,model,mbean,notification,publisher,class,that,will,publish,all,link,javax,management,notification,notifications,to,the,supplied,link,model,mbean,param,model,mbean,the,target,link,model,mbean,must,not,be,code,null,param,object,name,the,link,object,name,of,the,source,link,model,mbean,param,managed,resource,the,managed,resource,exposed,by,the,supplied,link,model,mbean,throws,illegal,argument,exception,if,any,of,the,parameters,is,code,null;public,model,mbean,notification,publisher,model,mbean,notification,broadcaster,model,mbean,object,name,object,name,object,managed,resource,assert,not,null,model,mbean,model,mbean,must,not,be,null,assert,not,null,object,name,object,name,must,not,be,null,assert,not,null,managed,resource,managed,resource,must,not,be,null,this,model,mbean,model,mbean,this,object,name,object,name,this,managed,resource,managed,resource
ModelMBeanNotificationPublisher -> public ModelMBeanNotificationPublisher( 			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource);1530174524;Create a new instance of the {@link ModelMBeanNotificationPublisher} class_that will publish all {@link javax.management.Notification Notifications}_to the supplied {@link ModelMBean}._@param modelMBean the target {@link ModelMBean}_ must not be {@code null}_@param objectName the {@link ObjectName} of the source {@link ModelMBean}_@param managedResource the managed resource exposed by the supplied {@link ModelMBean}_@throws IllegalArgumentException if any of the parameters is {@code null};public ModelMBeanNotificationPublisher(_			ModelMBeanNotificationBroadcaster modelMBean, ObjectName objectName, Object managedResource) {__		Assert.notNull(modelMBean, "'modelMBean' must not be null")__		Assert.notNull(objectName, "'objectName' must not be null")__		Assert.notNull(managedResource, "'managedResource' must not be null")__		this.modelMBean = modelMBean__		this.objectName = objectName__		this.managedResource = managedResource__	};create,a,new,instance,of,the,link,model,mbean,notification,publisher,class,that,will,publish,all,link,javax,management,notification,notifications,to,the,supplied,link,model,mbean,param,model,mbean,the,target,link,model,mbean,must,not,be,code,null,param,object,name,the,link,object,name,of,the,source,link,model,mbean,param,managed,resource,the,managed,resource,exposed,by,the,supplied,link,model,mbean,throws,illegal,argument,exception,if,any,of,the,parameters,is,code,null;public,model,mbean,notification,publisher,model,mbean,notification,broadcaster,model,mbean,object,name,object,name,object,managed,resource,assert,not,null,model,mbean,model,mbean,must,not,be,null,assert,not,null,object,name,object,name,must,not,be,null,assert,not,null,managed,resource,managed,resource,must,not,be,null,this,model,mbean,model,mbean,this,object,name,object,name,this,managed,resource,managed,resource
ModelMBeanNotificationPublisher -> public void sendNotification(Notification notification);1328020251;Send the supplied {@link Notification} using the wrapped_{@link ModelMBean} instance._@param notification the {@link Notification} to be sent_@throws IllegalArgumentException if the supplied <code>notification</code> is <code>null</code>_@throws UnableToSendNotificationException if the supplied <code>notification</code> could not be sent;public void sendNotification(Notification notification) {_		Assert.notNull(notification, "Notification must not be null")__		replaceNotificationSourceIfNecessary(notification)__		try {_			if (notification instanceof AttributeChangeNotification) {_				this.modelMBean.sendAttributeChangeNotification((AttributeChangeNotification) notification)__			}_			else {_				this.modelMBean.sendNotification(notification)__			}_		}_		catch (MBeanException ex) {_			throw new UnableToSendNotificationException("Unable to send notification [" + notification + "]", ex)__		}_	};send,the,supplied,link,notification,using,the,wrapped,link,model,mbean,instance,param,notification,the,link,notification,to,be,sent,throws,illegal,argument,exception,if,the,supplied,code,notification,code,is,code,null,code,throws,unable,to,send,notification,exception,if,the,supplied,code,notification,code,could,not,be,sent;public,void,send,notification,notification,notification,assert,not,null,notification,notification,must,not,be,null,replace,notification,source,if,necessary,notification,try,if,notification,instanceof,attribute,change,notification,this,model,mbean,send,attribute,change,notification,attribute,change,notification,notification,else,this,model,mbean,send,notification,notification,catch,mbean,exception,ex,throw,new,unable,to,send,notification,exception,unable,to,send,notification,notification,ex
ModelMBeanNotificationPublisher -> public void sendNotification(Notification notification);1357119239;Send the supplied {@link Notification} using the wrapped_{@link ModelMBean} instance._@param notification the {@link Notification} to be sent_@throws IllegalArgumentException if the supplied {@code notification} is {@code null}_@throws UnableToSendNotificationException if the supplied {@code notification} could not be sent;public void sendNotification(Notification notification) {_		Assert.notNull(notification, "Notification must not be null")__		replaceNotificationSourceIfNecessary(notification)__		try {_			if (notification instanceof AttributeChangeNotification) {_				this.modelMBean.sendAttributeChangeNotification((AttributeChangeNotification) notification)__			}_			else {_				this.modelMBean.sendNotification(notification)__			}_		}_		catch (MBeanException ex) {_			throw new UnableToSendNotificationException("Unable to send notification [" + notification + "]", ex)__		}_	};send,the,supplied,link,notification,using,the,wrapped,link,model,mbean,instance,param,notification,the,link,notification,to,be,sent,throws,illegal,argument,exception,if,the,supplied,code,notification,is,code,null,throws,unable,to,send,notification,exception,if,the,supplied,code,notification,could,not,be,sent;public,void,send,notification,notification,notification,assert,not,null,notification,notification,must,not,be,null,replace,notification,source,if,necessary,notification,try,if,notification,instanceof,attribute,change,notification,this,model,mbean,send,attribute,change,notification,attribute,change,notification,notification,else,this,model,mbean,send,notification,notification,catch,mbean,exception,ex,throw,new,unable,to,send,notification,exception,unable,to,send,notification,notification,ex
