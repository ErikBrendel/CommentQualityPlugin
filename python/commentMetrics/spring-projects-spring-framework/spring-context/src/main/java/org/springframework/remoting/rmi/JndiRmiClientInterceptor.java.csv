# id;timestamp;commentText;codeText;commentWords;codeWords
JndiRmiClientInterceptor -> public Class<?> getServiceInterface();1385412762;Return the interface of the service to access.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public Class<?> getServiceInterface();1469481969;Return the interface of the service to access.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public Class<?> getServiceInterface();1495868221;Return the interface of the service to access.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public Class<?> getServiceInterface();1497970235;Return the interface of the service to access.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public Class<?> getServiceInterface();1532091916;Return the interface of the service to access.;public Class<?> getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1328020251;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1356735495;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1357119239;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1362408075;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1368482696;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1385412762;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1469481969;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1495868221;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1497970235;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(RemoteException ex);1532091916;Determine whether the given RMI exception indicates a connect failure._<p>The default implementation delegates to_{@link RmiClientInterceptorUtils#isConnectFailure}._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(RemoteException ex) {_		return RmiClientInterceptorUtils.isConnectFailure(ex)__	};determine,whether,the,given,rmi,exception,indicates,a,connect,failure,p,the,default,implementation,delegates,to,link,rmi,client,interceptor,utils,is,connect,failure,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,remote,exception,ex,return,rmi,client,interceptor,utils,is,connect,failure,ex
JndiRmiClientInterceptor -> protected boolean isConnectFailure(SystemException ex);1328020251;Determine whether the given CORBA exception indicates a connect failure._<p>The default implementation checks for CORBA's_{@link org.omg.CORBA.OBJECT_NOT_EXIST} exception._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(SystemException ex) {_		return (ex instanceof OBJECT_NOT_EXIST)__	};determine,whether,the,given,corba,exception,indicates,a,connect,failure,p,the,default,implementation,checks,for,corba,s,link,org,omg,corba,exception,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,system,exception,ex,return,ex,instanceof
JndiRmiClientInterceptor -> protected boolean isConnectFailure(SystemException ex);1356735495;Determine whether the given CORBA exception indicates a connect failure._<p>The default implementation checks for CORBA's_{@link org.omg.CORBA.OBJECT_NOT_EXIST} exception._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(SystemException ex) {_		return (ex instanceof OBJECT_NOT_EXIST)__	};determine,whether,the,given,corba,exception,indicates,a,connect,failure,p,the,default,implementation,checks,for,corba,s,link,org,omg,corba,exception,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,system,exception,ex,return,ex,instanceof
JndiRmiClientInterceptor -> protected boolean isConnectFailure(SystemException ex);1357119239;Determine whether the given CORBA exception indicates a connect failure._<p>The default implementation checks for CORBA's_{@link org.omg.CORBA.OBJECT_NOT_EXIST} exception._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(SystemException ex) {_		return (ex instanceof OBJECT_NOT_EXIST)__	};determine,whether,the,given,corba,exception,indicates,a,connect,failure,p,the,default,implementation,checks,for,corba,s,link,org,omg,corba,exception,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,system,exception,ex,return,ex,instanceof
JndiRmiClientInterceptor -> protected boolean isConnectFailure(SystemException ex);1362408075;Determine whether the given CORBA exception indicates a connect failure._<p>The default implementation checks for CORBA's_{@link org.omg.CORBA.OBJECT_NOT_EXIST} exception._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(SystemException ex) {_		return (ex instanceof OBJECT_NOT_EXIST)__	};determine,whether,the,given,corba,exception,indicates,a,connect,failure,p,the,default,implementation,checks,for,corba,s,link,org,omg,corba,exception,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,system,exception,ex,return,ex,instanceof
JndiRmiClientInterceptor -> protected boolean isConnectFailure(SystemException ex);1368482696;Determine whether the given CORBA exception indicates a connect failure._<p>The default implementation checks for CORBA's_{@link org.omg.CORBA.OBJECT_NOT_EXIST} exception._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(SystemException ex) {_		return (ex instanceof OBJECT_NOT_EXIST)__	};determine,whether,the,given,corba,exception,indicates,a,connect,failure,p,the,default,implementation,checks,for,corba,s,link,org,omg,corba,exception,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,system,exception,ex,return,ex,instanceof
JndiRmiClientInterceptor -> protected boolean isConnectFailure(SystemException ex);1385412762;Determine whether the given CORBA exception indicates a connect failure._<p>The default implementation checks for CORBA's_{@link org.omg.CORBA.OBJECT_NOT_EXIST} exception._@param ex the RMI exception to check_@return whether the exception should be treated as connect failure;protected boolean isConnectFailure(SystemException ex) {_		return (ex instanceof OBJECT_NOT_EXIST)__	};determine,whether,the,given,corba,exception,indicates,a,connect,failure,p,the,default,implementation,checks,for,corba,s,link,org,omg,corba,exception,param,ex,the,rmi,exception,to,check,return,whether,the,exception,should,be,treated,as,connect,failure;protected,boolean,is,connect,failure,system,exception,ex,return,ex,instanceof
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1328020251;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (SystemException ex) {_				throw convertCorbaAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else if (targetEx instanceof SystemException) {_					throw convertCorbaAccessException((SystemException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,system,exception,ex,throw,convert,corba,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,if,target,ex,instanceof,system,exception,throw,convert,corba,access,exception,system,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1356735495;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (SystemException ex) {_				throw convertCorbaAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else if (targetEx instanceof SystemException) {_					throw convertCorbaAccessException((SystemException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,system,exception,ex,throw,convert,corba,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,if,target,ex,instanceof,system,exception,throw,convert,corba,access,exception,system,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1357119239;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (SystemException ex) {_				throw convertCorbaAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else if (targetEx instanceof SystemException) {_					throw convertCorbaAccessException((SystemException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,system,exception,ex,throw,convert,corba,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,if,target,ex,instanceof,system,exception,throw,convert,corba,access,exception,system,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1362408075;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (SystemException ex) {_				throw convertCorbaAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else if (targetEx instanceof SystemException) {_					throw convertCorbaAccessException((SystemException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,system,exception,ex,throw,convert,corba,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,if,target,ex,instanceof,system,exception,throw,convert,corba,access,exception,system,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1368482696;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (SystemException ex) {_				throw convertCorbaAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else if (targetEx instanceof SystemException) {_					throw convertCorbaAccessException((SystemException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,system,exception,ex,throw,convert,corba,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,if,target,ex,instanceof,system,exception,throw,convert,corba,access,exception,system,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1385412762;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (SystemException ex) {_				throw convertCorbaAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else if (targetEx instanceof SystemException) {_					throw convertCorbaAccessException((SystemException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,system,exception,ex,throw,convert,corba,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,if,target,ex,instanceof,system,exception,throw,convert,corba,access,exception,system,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1469481969;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1362408075;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1368482696;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1385412762;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1469481969;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1495868221;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1497970235;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1532091916;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_			throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1328020251;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub = null__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		catch (SystemException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,null,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,catch,system,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
JndiRmiClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1357119239;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub = null__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		catch (SystemException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,null,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,catch,system,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
JndiRmiClientInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1362408075;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}__		Context ctx = (this.exposeAccessContext ? getJndiTemplate().getContext() : null)__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		catch (SystemException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		finally {_			getJndiTemplate().releaseContext(ctx)__		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,context,ctx,this,expose,access,context,get,jndi,template,get,context,null,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,catch,system,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,finally,get,jndi,template,release,context,ctx
JndiRmiClientInterceptor -> public void setExposeAccessContext(boolean exposeAccessContext);1362408075;Set whether to expose the JNDI environment context for all access to the target_RMI stub, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each RMI invocation, as needed by WebLogic_for RMI stubs with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,rmi,stub,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,rmi,invocation,as,needed,by,web,logic,for,rmi,stubs,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiRmiClientInterceptor -> public void setExposeAccessContext(boolean exposeAccessContext);1368482696;Set whether to expose the JNDI environment context for all access to the target_RMI stub, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each RMI invocation, as needed by WebLogic_for RMI stubs with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,rmi,stub,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,rmi,invocation,as,needed,by,web,logic,for,rmi,stubs,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiRmiClientInterceptor -> public void setExposeAccessContext(boolean exposeAccessContext);1385412762;Set whether to expose the JNDI environment context for all access to the target_RMI stub, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each RMI invocation, as needed by WebLogic_for RMI stubs with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,rmi,stub,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,rmi,invocation,as,needed,by,web,logic,for,rmi,stubs,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiRmiClientInterceptor -> public void setExposeAccessContext(boolean exposeAccessContext);1469481969;Set whether to expose the JNDI environment context for all access to the target_RMI stub, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each RMI invocation, as needed by WebLogic_for RMI stubs with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,rmi,stub,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,rmi,invocation,as,needed,by,web,logic,for,rmi,stubs,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiRmiClientInterceptor -> public void setExposeAccessContext(boolean exposeAccessContext);1495868221;Set whether to expose the JNDI environment context for all access to the target_RMI stub, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each RMI invocation, as needed by WebLogic_for RMI stubs with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,rmi,stub,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,rmi,invocation,as,needed,by,web,logic,for,rmi,stubs,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiRmiClientInterceptor -> public void setExposeAccessContext(boolean exposeAccessContext);1497970235;Set whether to expose the JNDI environment context for all access to the target_RMI stub, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each RMI invocation, as needed by WebLogic_for RMI stubs with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,rmi,stub,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,rmi,invocation,as,needed,by,web,logic,for,rmi,stubs,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiRmiClientInterceptor -> public void setExposeAccessContext(boolean exposeAccessContext);1532091916;Set whether to expose the JNDI environment context for all access to the target_RMI stub, i.e. for all method invocations on the exposed object reference._<p>Default is "false", i.e. to only expose the JNDI context for object lookup._Switch this flag to "true" in order to expose the JNDI environment (including_the authorization context) for each RMI invocation, as needed by WebLogic_for RMI stubs with authorization requirements.;public void setExposeAccessContext(boolean exposeAccessContext) {_		this.exposeAccessContext = exposeAccessContext__	};set,whether,to,expose,the,jndi,environment,context,for,all,access,to,the,target,rmi,stub,i,e,for,all,method,invocations,on,the,exposed,object,reference,p,default,is,false,i,e,to,only,expose,the,jndi,context,for,object,lookup,switch,this,flag,to,true,in,order,to,expose,the,jndi,environment,including,the,authorization,context,for,each,rmi,invocation,as,needed,by,web,logic,for,rmi,stubs,with,authorization,requirements;public,void,set,expose,access,context,boolean,expose,access,context,this,expose,access,context,expose,access,context
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1328020251;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1356735495;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1357119239;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1362408075;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1368482696;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1385412762;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1469481969;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1495868221;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1497970235;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> private Exception convertRmiAccessException(RemoteException ex, Method method);1532091916;Convert the given RMI RemoteException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the original RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertRmiAccessException(RemoteException ex, Method method) {_		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure(ex), getJndiName())__	};convert,the,given,rmi,remote,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,original,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,rmi,access,exception,remote,exception,ex,method,method,return,rmi,client,interceptor,utils,convert,rmi,access,exception,method,ex,is,connect,failure,ex,get,jndi,name
JndiRmiClientInterceptor -> public Class getServiceInterface();1328020251;Return the interface of the service to access.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public Class getServiceInterface();1356735495;Return the interface of the service to access.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public Class getServiceInterface();1357119239;Return the interface of the service to access.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public Class getServiceInterface();1362408075;Return the interface of the service to access.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public Class getServiceInterface();1368482696;Return the interface of the service to access.;public Class getServiceInterface() {_		return this.serviceInterface__	};return,the,interface,of,the,service,to,access;public,class,get,service,interface,return,this,service,interface
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1328020251;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1356735495;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1357119239;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1362408075;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1368482696;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1385412762;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1469481969;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1495868221;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1497970235;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setLookupStubOnStartup(boolean lookupStubOnStartup);1532091916;Set whether to look up the RMI stub on startup. Default is "true"._<p>Can be turned off to allow for late start of the RMI server._In this case, the RMI stub will be fetched on first access._@see #setCacheStub;public void setLookupStubOnStartup(boolean lookupStubOnStartup) {_		this.lookupStubOnStartup = lookupStubOnStartup__	};set,whether,to,look,up,the,rmi,stub,on,startup,default,is,true,p,can,be,turned,off,to,allow,for,late,start,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,on,first,access,see,set,cache,stub;public,void,set,lookup,stub,on,startup,boolean,lookup,stub,on,startup,this,lookup,stub,on,startup,lookup,stub,on,startup
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1328020251;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1356735495;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1357119239;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1362408075;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1368482696;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1385412762;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1469481969;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1495868221;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1497970235;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> public void setCacheStub(boolean cacheStub);1532091916;Set whether to cache the RMI stub once it has been located._Default is "true"._<p>Can be turned off to allow for hot restart of the RMI server._In this case, the RMI stub will be fetched for each invocation._@see #setLookupStubOnStartup;public void setCacheStub(boolean cacheStub) {_		this.cacheStub = cacheStub__	};set,whether,to,cache,the,rmi,stub,once,it,has,been,located,default,is,true,p,can,be,turned,off,to,allow,for,hot,restart,of,the,rmi,server,in,this,case,the,rmi,stub,will,be,fetched,for,each,invocation,see,set,lookup,stub,on,startup;public,void,set,cache,stub,boolean,cache,stub,this,cache,stub,cache,stub
JndiRmiClientInterceptor -> @Nullable 	protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1495868221;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;@Nullable_	protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;nullable,protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> @Nullable 	protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1497970235;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;@Nullable_	protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;nullable,protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> @Nullable 	protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1532091916;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;@Nullable_	protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;nullable,protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> private Exception convertCorbaAccessException(SystemException ex, Method method);1328020251;Convert the given CORBA SystemException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the SystemException wrapped in a RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertCorbaAccessException(SystemException ex, Method method) {_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			_			return new RemoteException("Failed to access CORBA service [" + getJndiName() + "]", ex)__		}_		else {_			if (isConnectFailure(ex)) {_				return new RemoteConnectFailureException("Could not connect to CORBA service [" + getJndiName() + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access CORBA service [" + getJndiName() + "]", ex)__			}_		}_	};convert,the,given,corba,system,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,system,exception,wrapped,in,a,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,corba,access,exception,system,exception,ex,method,method,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,failed,to,access,corba,service,get,jndi,name,ex,else,if,is,connect,failure,ex,return,new,remote,connect,failure,exception,could,not,connect,to,corba,service,get,jndi,name,ex,else,return,new,remote,access,exception,could,not,access,corba,service,get,jndi,name,ex
JndiRmiClientInterceptor -> private Exception convertCorbaAccessException(SystemException ex, Method method);1356735495;Convert the given CORBA SystemException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the SystemException wrapped in a RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertCorbaAccessException(SystemException ex, Method method) {_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			_			return new RemoteException("Failed to access CORBA service [" + getJndiName() + "]", ex)__		}_		else {_			if (isConnectFailure(ex)) {_				return new RemoteConnectFailureException("Could not connect to CORBA service [" + getJndiName() + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access CORBA service [" + getJndiName() + "]", ex)__			}_		}_	};convert,the,given,corba,system,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,system,exception,wrapped,in,a,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,corba,access,exception,system,exception,ex,method,method,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,failed,to,access,corba,service,get,jndi,name,ex,else,if,is,connect,failure,ex,return,new,remote,connect,failure,exception,could,not,connect,to,corba,service,get,jndi,name,ex,else,return,new,remote,access,exception,could,not,access,corba,service,get,jndi,name,ex
JndiRmiClientInterceptor -> private Exception convertCorbaAccessException(SystemException ex, Method method);1357119239;Convert the given CORBA SystemException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the SystemException wrapped in a RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertCorbaAccessException(SystemException ex, Method method) {_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			_			return new RemoteException("Failed to access CORBA service [" + getJndiName() + "]", ex)__		}_		else {_			if (isConnectFailure(ex)) {_				return new RemoteConnectFailureException("Could not connect to CORBA service [" + getJndiName() + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access CORBA service [" + getJndiName() + "]", ex)__			}_		}_	};convert,the,given,corba,system,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,system,exception,wrapped,in,a,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,corba,access,exception,system,exception,ex,method,method,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,failed,to,access,corba,service,get,jndi,name,ex,else,if,is,connect,failure,ex,return,new,remote,connect,failure,exception,could,not,connect,to,corba,service,get,jndi,name,ex,else,return,new,remote,access,exception,could,not,access,corba,service,get,jndi,name,ex
JndiRmiClientInterceptor -> private Exception convertCorbaAccessException(SystemException ex, Method method);1362408075;Convert the given CORBA SystemException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the SystemException wrapped in a RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertCorbaAccessException(SystemException ex, Method method) {_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			_			return new RemoteException("Failed to access CORBA service [" + getJndiName() + "]", ex)__		}_		else {_			if (isConnectFailure(ex)) {_				return new RemoteConnectFailureException("Could not connect to CORBA service [" + getJndiName() + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access CORBA service [" + getJndiName() + "]", ex)__			}_		}_	};convert,the,given,corba,system,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,system,exception,wrapped,in,a,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,corba,access,exception,system,exception,ex,method,method,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,failed,to,access,corba,service,get,jndi,name,ex,else,if,is,connect,failure,ex,return,new,remote,connect,failure,exception,could,not,connect,to,corba,service,get,jndi,name,ex,else,return,new,remote,access,exception,could,not,access,corba,service,get,jndi,name,ex
JndiRmiClientInterceptor -> private Exception convertCorbaAccessException(SystemException ex, Method method);1368482696;Convert the given CORBA SystemException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the SystemException wrapped in a RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertCorbaAccessException(SystemException ex, Method method) {_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			_			return new RemoteException("Failed to access CORBA service [" + getJndiName() + "]", ex)__		}_		else {_			if (isConnectFailure(ex)) {_				return new RemoteConnectFailureException("Could not connect to CORBA service [" + getJndiName() + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access CORBA service [" + getJndiName() + "]", ex)__			}_		}_	};convert,the,given,corba,system,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,system,exception,wrapped,in,a,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,corba,access,exception,system,exception,ex,method,method,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,failed,to,access,corba,service,get,jndi,name,ex,else,if,is,connect,failure,ex,return,new,remote,connect,failure,exception,could,not,connect,to,corba,service,get,jndi,name,ex,else,return,new,remote,access,exception,could,not,access,corba,service,get,jndi,name,ex
JndiRmiClientInterceptor -> private Exception convertCorbaAccessException(SystemException ex, Method method);1385412762;Convert the given CORBA SystemException that happened during remote access_to Spring's RemoteAccessException if the method signature does not declare_RemoteException. Else, return the SystemException wrapped in a RemoteException._@param method the invoked method_@param ex the RemoteException that happened_@return the exception to be thrown to the caller;private Exception convertCorbaAccessException(SystemException ex, Method method) {_		if (ReflectionUtils.declaresException(method, RemoteException.class)) {_			_			return new RemoteException("Failed to access CORBA service [" + getJndiName() + "]", ex)__		}_		else {_			if (isConnectFailure(ex)) {_				return new RemoteConnectFailureException("Could not connect to CORBA service [" + getJndiName() + "]", ex)__			}_			else {_				return new RemoteAccessException("Could not access CORBA service [" + getJndiName() + "]", ex)__			}_		}_	};convert,the,given,corba,system,exception,that,happened,during,remote,access,to,spring,s,remote,access,exception,if,the,method,signature,does,not,declare,remote,exception,else,return,the,system,exception,wrapped,in,a,remote,exception,param,method,the,invoked,method,param,ex,the,remote,exception,that,happened,return,the,exception,to,be,thrown,to,the,caller;private,exception,convert,corba,access,exception,system,exception,ex,method,method,if,reflection,utils,declares,exception,method,remote,exception,class,return,new,remote,exception,failed,to,access,corba,service,get,jndi,name,ex,else,if,is,connect,failure,ex,return,new,remote,connect,failure,exception,could,not,connect,to,corba,service,get,jndi,name,ex,else,return,new,remote,access,exception,could,not,access,corba,service,get,jndi,name,ex
JndiRmiClientInterceptor -> public void setServiceInterface(Class serviceInterface);1328020251;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setServiceInterface(Class serviceInterface);1356735495;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setServiceInterface(Class serviceInterface);1357119239;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setServiceInterface(Class serviceInterface);1362408075;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setServiceInterface(Class serviceInterface);1368482696;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1328020251;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub = null__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,null,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1356735495;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub = null__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,null,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1357119239;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub = null__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,null,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1362408075;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1368482696;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1385412762;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable;1469481969;Refresh the RMI stub and retry the given invocation._Called by invoke on connect failure._@param invocation the AOP method invocation_@return the invocation result, if any_@throws Throwable in case of invocation failure_@see #invoke;protected Object refreshAndRetry(MethodInvocation invocation) throws Throwable {_		Object freshStub__		synchronized (this.stubMonitor) {_			this.cachedStub = null__			freshStub = lookupStub()__			if (this.cacheStub) {_				this.cachedStub = freshStub__			}_		}_		return doInvoke(invocation, freshStub)__	};refresh,the,rmi,stub,and,retry,the,given,invocation,called,by,invoke,on,connect,failure,param,invocation,the,aop,method,invocation,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure,see,invoke;protected,object,refresh,and,retry,method,invocation,invocation,throws,throwable,object,fresh,stub,synchronized,this,stub,monitor,this,cached,stub,null,fresh,stub,lookup,stub,if,this,cache,stub,this,cached,stub,fresh,stub,return,do,invoke,invocation,fresh,stub
JndiRmiClientInterceptor -> public void setServiceInterface(Class<?> serviceInterface);1385412762;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class<?> serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setServiceInterface(Class<?> serviceInterface);1469481969;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class<?> serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setServiceInterface(Class<?> serviceInterface);1495868221;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class<?> serviceInterface) {_		if (serviceInterface != null && !serviceInterface.isInterface()) {_			throw new IllegalArgumentException("'serviceInterface' must be an interface")__		}_		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,if,service,interface,null,service,interface,is,interface,throw,new,illegal,argument,exception,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setServiceInterface(Class<?> serviceInterface);1497970235;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class<?> serviceInterface) {_		Assert.notNull(serviceInterface, "'serviceInterface' must not be null")__		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface")__		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,assert,not,null,service,interface,service,interface,must,not,be,null,assert,is,true,service,interface,is,interface,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setServiceInterface(Class<?> serviceInterface);1532091916;Set the interface of the service to access._The interface must be suitable for the particular service and remoting tool._<p>Typically required to be able to create a suitable service proxy,_but can also be optional if the lookup returns a typed stub.;public void setServiceInterface(Class<?> serviceInterface) {_		Assert.notNull(serviceInterface, "'serviceInterface' must not be null")__		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface")__		this.serviceInterface = serviceInterface__	};set,the,interface,of,the,service,to,access,the,interface,must,be,suitable,for,the,particular,service,and,remoting,tool,p,typically,required,to,be,able,to,create,a,suitable,service,proxy,but,can,also,be,optional,if,the,lookup,returns,a,typed,stub;public,void,set,service,interface,class,service,interface,assert,not,null,service,interface,service,interface,must,not,be,null,assert,is,true,service,interface,is,interface,service,interface,must,be,an,interface,this,service,interface,service,interface
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1328020251;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1356735495;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1357119239;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1362408075;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1368482696;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1385412762;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1469481969;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1495868221;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1497970235;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1532091916;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory = remoteInvocationFactory__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1356735495;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1357119239;Apply the given AOP method invocation to the given {@link RmiInvocationHandler}._<p>The default implementation delegates to {@link #createRemoteInvocation}._@param methodInvocation the current AOP method invocation_@param invocationHandler the RmiInvocationHandler to apply the invocation to_@return the invocation result_@throws RemoteException in case of communication errors_@throws NoSuchMethodException if the method name could not be resolved_@throws IllegalAccessException if the method could not be accessed_@throws InvocationTargetException if the method invocation resulted in an exception_@see org.springframework.remoting.support.RemoteInvocation;protected Object doInvoke(MethodInvocation methodInvocation, RmiInvocationHandler invocationHandler)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {_			return "RMI invoker proxy for service URL [" + getJndiName() + "]"__		}__		return invocationHandler.invoke(createRemoteInvocation(methodInvocation))__	};apply,the,given,aop,method,invocation,to,the,given,link,rmi,invocation,handler,p,the,default,implementation,delegates,to,link,create,remote,invocation,param,method,invocation,the,current,aop,method,invocation,param,invocation,handler,the,rmi,invocation,handler,to,apply,the,invocation,to,return,the,invocation,result,throws,remote,exception,in,case,of,communication,errors,throws,no,such,method,exception,if,the,method,name,could,not,be,resolved,throws,illegal,access,exception,if,the,method,could,not,be,accessed,throws,invocation,target,exception,if,the,method,invocation,resulted,in,an,exception,see,org,springframework,remoting,support,remote,invocation;protected,object,do,invoke,method,invocation,method,invocation,rmi,invocation,handler,invocation,handler,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,if,aop,utils,is,to,string,method,method,invocation,get,method,return,rmi,invoker,proxy,for,service,url,get,jndi,name,return,invocation,handler,invoke,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1328020251;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1356735495;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1357119239;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1362408075;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1368482696;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1385412762;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1469481969;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1495868221;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1497970235;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isWarnEnabled()) {_				logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,warn,enabled,logger,warn,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable;1532091916;Refresh the stub and retry the remote invocation if necessary._<p>If not configured to refresh on connect failure, this method_simply rethrows the original exception._@param invocation the invocation that failed_@param ex the exception raised on remote invocation_@return the result value of the new invocation, if succeeded_@throws Throwable an exception raised by the new invocation, if failed too.;private Object handleRemoteConnectFailure(MethodInvocation invocation, Exception ex) throws Throwable {_		if (this.refreshStubOnConnectFailure) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex)__			}_			else if (logger.isInfoEnabled()) {_				logger.info("Could not connect to RMI service [" + getJndiName() + "] - retrying")__			}_			return refreshAndRetry(invocation)__		}_		else {_			throw ex__		}_	};refresh,the,stub,and,retry,the,remote,invocation,if,necessary,p,if,not,configured,to,refresh,on,connect,failure,this,method,simply,rethrows,the,original,exception,param,invocation,the,invocation,that,failed,param,ex,the,exception,raised,on,remote,invocation,return,the,result,value,of,the,new,invocation,if,succeeded,throws,throwable,an,exception,raised,by,the,new,invocation,if,failed,too;private,object,handle,remote,connect,failure,method,invocation,invocation,exception,ex,throws,throwable,if,this,refresh,stub,on,connect,failure,if,logger,is,debug,enabled,logger,debug,could,not,connect,to,rmi,service,get,jndi,name,retrying,ex,else,if,logger,is,info,enabled,logger,info,could,not,connect,to,rmi,service,get,jndi,name,retrying,return,refresh,and,retry,invocation,else,throw,ex
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1328020251;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1356735495;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1357119239;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1362408075;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1368482696;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1385412762;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1469481969;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1495868221;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1497970235;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure);1532091916;Set whether to refresh the RMI stub on connect failure._Default is "false"._<p>Can be turned on to allow for hot restart of the RMI server._If a cached RMI stub throws an RMI exception that indicates a_remote connect failure, a fresh proxy will be fetched and the_invocation will be retried._@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;public void setRefreshStubOnConnectFailure(boolean refreshStubOnConnectFailure) {_		this.refreshStubOnConnectFailure = refreshStubOnConnectFailure__	};set,whether,to,refresh,the,rmi,stub,on,connect,failure,default,is,false,p,can,be,turned,on,to,allow,for,hot,restart,of,the,rmi,server,if,a,cached,rmi,stub,throws,an,rmi,exception,that,indicates,a,remote,connect,failure,a,fresh,proxy,will,be,fetched,and,the,invocation,will,be,retried,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;public,void,set,refresh,stub,on,connect,failure,boolean,refresh,stub,on,connect,failure,this,refresh,stub,on,connect,failure,refresh,stub,on,connect,failure
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1328020251;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1356735495;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1357119239;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1362408075;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1368482696;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1385412762;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1469481969;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1495868221;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1497970235;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> public RemoteInvocationFactory getRemoteInvocationFactory();1532091916;Return the RemoteInvocationFactory used by this accessor.;public RemoteInvocationFactory getRemoteInvocationFactory() {_		return this.remoteInvocationFactory__	};return,the,remote,invocation,factory,used,by,this,accessor;public,remote,invocation,factory,get,remote,invocation,factory,return,this,remote,invocation,factory
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1328020251;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1356735495;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1357119239;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1362408075;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1368482696;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1385412762;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1469481969;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1495868221;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1497970235;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1532091916;Create a new RemoteInvocation object for the given AOP method invocation._<p>The default implementation delegates to the configured_{@link #setRemoteInvocationFactory RemoteInvocationFactory}._This can be overridden in subclasses in order to provide custom RemoteInvocation_subclasses, containing additional invocation parameters (e.g. user credentials)._<p>Note that it is preferable to build a custom RemoteInvocationFactory_as a reusable strategy, instead of overriding this method._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,configured,link,set,remote,invocation,factory,remote,invocation,factory,this,can,be,overridden,in,subclasses,in,order,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,e,g,user,credentials,p,note,that,it,is,preferable,to,build,a,custom,remote,invocation,factory,as,a,reusable,strategy,instead,of,overriding,this,method,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,get,remote,invocation,factory,create,remote,invocation,method,invocation
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1328020251;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_					    "] for JNDI RMI object [" + getJndiName() + "] - " +_					    (!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1356735495;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_						"] for JNDI RMI object [" + getJndiName() + "] - " +_						(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1357119239;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_						"] for JNDI RMI object [" + getJndiName() + "] - " +_						(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1362408075;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_							"] for JNDI RMI object [" + getJndiName() + "] - " +_							(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1368482696;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_							"] for JNDI RMI object [" + getJndiName() + "] - " +_							(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1385412762;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_							"] for JNDI RMI object [" + getJndiName() + "] - " +_							(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1469481969;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_							"] for JNDI RMI object [" + getJndiName() + "] - " +_							(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1495868221;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_							"] for JNDI RMI object [" + getJndiName() + "] - " +_							(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1497970235;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_							"] for JNDI RMI object [" + getJndiName() + "] - " +_							(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1532091916;Fetches the RMI stub on startup, if necessary._@throws RemoteLookupFailureException if RMI stub creation failed_@see #setLookupStubOnStartup_@see #lookupStub;public void prepare() throws RemoteLookupFailureException {_		_		if (this.lookupStubOnStartup) {_			Object remoteObj = lookupStub()__			if (logger.isDebugEnabled()) {_				if (remoteObj instanceof RmiInvocationHandler) {_					logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker")__				}_				else if (getServiceInterface() != null) {_					boolean isImpl = getServiceInterface().isInstance(remoteObj)__					logger.debug("Using service interface [" + getServiceInterface().getName() +_							"] for JNDI RMI object [" + getJndiName() + "] - " +_							(!isImpl ? "not " : "") + "directly implemented")__				}_			}_			if (this.cacheStub) {_				this.cachedStub = remoteObj__			}_		}_	};fetches,the,rmi,stub,on,startup,if,necessary,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,lookup,stub,on,startup,see,lookup,stub;public,void,prepare,throws,remote,lookup,failure,exception,if,this,lookup,stub,on,startup,object,remote,obj,lookup,stub,if,logger,is,debug,enabled,if,remote,obj,instanceof,rmi,invocation,handler,logger,debug,jndi,rmi,object,get,jndi,name,is,an,rmi,invoker,else,if,get,service,interface,null,boolean,is,impl,get,service,interface,is,instance,remote,obj,logger,debug,using,service,interface,get,service,interface,get,name,for,jndi,rmi,object,get,jndi,name,is,impl,not,directly,implemented,if,this,cache,stub,this,cached,stub,remote,obj
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1328020251;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			Object stub = lookup()__			if (getServiceInterface() != null && !(stub instanceof RmiInvocationHandler)) {_				try {_					stub = PortableRemoteObject.narrow(stub, getServiceInterface())__				}_				catch (ClassCastException ex) {_					throw new RemoteLookupFailureException(_							"Could not narrow RMI stub to service interface [" + getServiceInterface().getName() + "]", ex)__				}_			}_			return stub__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,object,stub,lookup,if,get,service,interface,null,stub,instanceof,rmi,invocation,handler,try,stub,portable,remote,object,narrow,stub,get,service,interface,catch,class,cast,exception,ex,throw,new,remote,lookup,failure,exception,could,not,narrow,rmi,stub,to,service,interface,get,service,interface,get,name,ex,return,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1356735495;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			Object stub = lookup()__			if (getServiceInterface() != null && !(stub instanceof RmiInvocationHandler)) {_				try {_					stub = PortableRemoteObject.narrow(stub, getServiceInterface())__				}_				catch (ClassCastException ex) {_					throw new RemoteLookupFailureException(_							"Could not narrow RMI stub to service interface [" + getServiceInterface().getName() + "]", ex)__				}_			}_			return stub__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,object,stub,lookup,if,get,service,interface,null,stub,instanceof,rmi,invocation,handler,try,stub,portable,remote,object,narrow,stub,get,service,interface,catch,class,cast,exception,ex,throw,new,remote,lookup,failure,exception,could,not,narrow,rmi,stub,to,service,interface,get,service,interface,get,name,ex,return,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1357119239;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			Object stub = lookup()__			if (getServiceInterface() != null && !(stub instanceof RmiInvocationHandler)) {_				try {_					stub = PortableRemoteObject.narrow(stub, getServiceInterface())__				}_				catch (ClassCastException ex) {_					throw new RemoteLookupFailureException(_							"Could not narrow RMI stub to service interface [" + getServiceInterface().getName() + "]", ex)__				}_			}_			return stub__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,object,stub,lookup,if,get,service,interface,null,stub,instanceof,rmi,invocation,handler,try,stub,portable,remote,object,narrow,stub,get,service,interface,catch,class,cast,exception,ex,throw,new,remote,lookup,failure,exception,could,not,narrow,rmi,stub,to,service,interface,get,service,interface,get,name,ex,return,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1362408075;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			Object stub = lookup()__			if (getServiceInterface() != null && !(stub instanceof RmiInvocationHandler)) {_				try {_					stub = PortableRemoteObject.narrow(stub, getServiceInterface())__				}_				catch (ClassCastException ex) {_					throw new RemoteLookupFailureException(_							"Could not narrow RMI stub to service interface [" + getServiceInterface().getName() + "]", ex)__				}_			}_			return stub__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,object,stub,lookup,if,get,service,interface,null,stub,instanceof,rmi,invocation,handler,try,stub,portable,remote,object,narrow,stub,get,service,interface,catch,class,cast,exception,ex,throw,new,remote,lookup,failure,exception,could,not,narrow,rmi,stub,to,service,interface,get,service,interface,get,name,ex,return,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1368482696;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			Object stub = lookup()__			if (getServiceInterface() != null && !(stub instanceof RmiInvocationHandler)) {_				try {_					stub = PortableRemoteObject.narrow(stub, getServiceInterface())__				}_				catch (ClassCastException ex) {_					throw new RemoteLookupFailureException(_							"Could not narrow RMI stub to service interface [" + getServiceInterface().getName() + "]", ex)__				}_			}_			return stub__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,object,stub,lookup,if,get,service,interface,null,stub,instanceof,rmi,invocation,handler,try,stub,portable,remote,object,narrow,stub,get,service,interface,catch,class,cast,exception,ex,throw,new,remote,lookup,failure,exception,could,not,narrow,rmi,stub,to,service,interface,get,service,interface,get,name,ex,return,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1385412762;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			Object stub = lookup()__			if (getServiceInterface() != null && !(stub instanceof RmiInvocationHandler)) {_				try {_					stub = PortableRemoteObject.narrow(stub, getServiceInterface())__				}_				catch (ClassCastException ex) {_					throw new RemoteLookupFailureException(_							"Could not narrow RMI stub to service interface [" + getServiceInterface().getName() + "]", ex)__				}_			}_			return stub__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,object,stub,lookup,if,get,service,interface,null,stub,instanceof,rmi,invocation,handler,try,stub,portable,remote,object,narrow,stub,get,service,interface,catch,class,cast,exception,ex,throw,new,remote,lookup,failure,exception,could,not,narrow,rmi,stub,to,service,interface,get,service,interface,get,name,ex,return,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1469481969;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			return lookup()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,return,lookup,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1495868221;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			return lookup()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,return,lookup,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1497970235;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			return lookup()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,return,lookup,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> protected Object lookupStub() throws RemoteLookupFailureException;1532091916;Create the RMI stub, typically by looking it up._<p>Called on interceptor initialization if "cacheStub" is "true"__else called for each invocation by {@link #getStub()}._<p>The default implementation retrieves the service from the_JNDI environment. This can be overridden in subclasses._@return the RMI stub to store in this interceptor_@throws RemoteLookupFailureException if RMI stub creation failed_@see #setCacheStub_@see #lookup;protected Object lookupStub() throws RemoteLookupFailureException {_		try {_			return lookup()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_	};create,the,rmi,stub,typically,by,looking,it,up,p,called,on,interceptor,initialization,if,cache,stub,is,true,else,called,for,each,invocation,by,link,get,stub,p,the,default,implementation,retrieves,the,service,from,the,jndi,environment,this,can,be,overridden,in,subclasses,return,the,rmi,stub,to,store,in,this,interceptor,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed,see,set,cache,stub,see,lookup;protected,object,lookup,stub,throws,remote,lookup,failure,exception,try,return,lookup,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex
JndiRmiClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1495868221;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;@Nullable_	protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;nullable,protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1497970235;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;@Nullable_	protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;nullable,protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> @Nullable 	protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable;1532091916;Perform the given invocation on the given RMI stub._@param invocation the AOP method invocation_@param stub the RMI stub to invoke_@return the invocation result, if any_@throws Throwable in case of invocation failure;@Nullable_	protected Object doInvoke(MethodInvocation invocation, Object stub) throws Throwable {_		if (stub instanceof RmiInvocationHandler) {_			_			try {_				return doInvoke(invocation, (RmiInvocationHandler) stub)__			}_			catch (RemoteException ex) {_				throw convertRmiAccessException(ex, invocation.getMethod())__			}_			catch (InvocationTargetException ex) {_				throw ex.getTargetException()__			}_			catch (Throwable ex) {_				throw new RemoteInvocationFailureException("Invocation of method [" + invocation.getMethod() +_						"] failed in RMI service [" + getJndiName() + "]", ex)__			}_		}_		else {_			_			try {_				return RmiClientInterceptorUtils.invokeRemoteMethod(invocation, stub)__			}_			catch (InvocationTargetException ex) {_				Throwable targetEx = ex.getTargetException()__				if (targetEx instanceof RemoteException) {_					throw convertRmiAccessException((RemoteException) targetEx, invocation.getMethod())__				}_				else {_					throw targetEx__				}_			}_		}_	};perform,the,given,invocation,on,the,given,rmi,stub,param,invocation,the,aop,method,invocation,param,stub,the,rmi,stub,to,invoke,return,the,invocation,result,if,any,throws,throwable,in,case,of,invocation,failure;nullable,protected,object,do,invoke,method,invocation,invocation,object,stub,throws,throwable,if,stub,instanceof,rmi,invocation,handler,try,return,do,invoke,invocation,rmi,invocation,handler,stub,catch,remote,exception,ex,throw,convert,rmi,access,exception,ex,invocation,get,method,catch,invocation,target,exception,ex,throw,ex,get,target,exception,catch,throwable,ex,throw,new,remote,invocation,failure,exception,invocation,of,method,invocation,get,method,failed,in,rmi,service,get,jndi,name,ex,else,try,return,rmi,client,interceptor,utils,invoke,remote,method,invocation,stub,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,remote,exception,throw,convert,rmi,access,exception,remote,exception,target,ex,invocation,get,method,else,throw,target,ex
JndiRmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1356735495;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub = null__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}_		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		catch (SystemException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,null,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,catch,system,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex
JndiRmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1368482696;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}__		Context ctx = (this.exposeAccessContext ? getJndiTemplate().getContext() : null)__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		catch (SystemException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		finally {_			getJndiTemplate().releaseContext(ctx)__		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,context,ctx,this,expose,access,context,get,jndi,template,get,context,null,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,catch,system,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,finally,get,jndi,template,release,context,ctx
JndiRmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1385412762;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}__		Context ctx = (this.exposeAccessContext ? getJndiTemplate().getContext() : null)__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		catch (SystemException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		finally {_			getJndiTemplate().releaseContext(ctx)__		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,context,ctx,this,expose,access,context,get,jndi,template,get,context,null,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,catch,system,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,finally,get,jndi,template,release,context,ctx
JndiRmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1469481969;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}__		Context ctx = (this.exposeAccessContext ? getJndiTemplate().getContext() : null)__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		finally {_			getJndiTemplate().releaseContext(ctx)__		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,context,ctx,this,expose,access,context,get,jndi,template,get,context,null,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,finally,get,jndi,template,release,context,ctx
JndiRmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1495868221;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}__		Context ctx = (this.exposeAccessContext ? getJndiTemplate().getContext() : null)__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		finally {_			getJndiTemplate().releaseContext(ctx)__		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,context,ctx,this,expose,access,context,get,jndi,template,get,context,null,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,finally,get,jndi,template,release,context,ctx
JndiRmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1497970235;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}__		Context ctx = (this.exposeAccessContext ? getJndiTemplate().getContext() : null)__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		finally {_			getJndiTemplate().releaseContext(ctx)__		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,context,ctx,this,expose,access,context,get,jndi,template,get,context,null,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,finally,get,jndi,template,release,context,ctx
JndiRmiClientInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1532091916;Fetches an RMI stub and delegates to {@link #doInvoke}._If configured to refresh on connect failure, it will call_{@link #refreshAndRetry} on corresponding RMI exceptions._@see #getStub_@see #doInvoke_@see #refreshAndRetry_@see java.rmi.ConnectException_@see java.rmi.ConnectIOException_@see java.rmi.NoSuchObjectException;@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Object stub__		try {_			stub = getStub()__		}_		catch (NamingException ex) {_			throw new RemoteLookupFailureException("JNDI lookup for RMI service [" + getJndiName() + "] failed", ex)__		}__		Context ctx = (this.exposeAccessContext ? getJndiTemplate().getContext() : null)__		try {_			return doInvoke(invocation, stub)__		}_		catch (RemoteConnectFailureException ex) {_			return handleRemoteConnectFailure(invocation, ex)__		}_		catch (RemoteException ex) {_			if (isConnectFailure(ex)) {_				return handleRemoteConnectFailure(invocation, ex)__			}_			else {_				throw ex__			}_		}_		finally {_			getJndiTemplate().releaseContext(ctx)__		}_	};fetches,an,rmi,stub,and,delegates,to,link,do,invoke,if,configured,to,refresh,on,connect,failure,it,will,call,link,refresh,and,retry,on,corresponding,rmi,exceptions,see,get,stub,see,do,invoke,see,refresh,and,retry,see,java,rmi,connect,exception,see,java,rmi,connect,ioexception,see,java,rmi,no,such,object,exception;override,public,object,invoke,method,invocation,invocation,throws,throwable,object,stub,try,stub,get,stub,catch,naming,exception,ex,throw,new,remote,lookup,failure,exception,jndi,lookup,for,rmi,service,get,jndi,name,failed,ex,context,ctx,this,expose,access,context,get,jndi,template,get,context,null,try,return,do,invoke,invocation,stub,catch,remote,connect,failure,exception,ex,return,handle,remote,connect,failure,invocation,ex,catch,remote,exception,ex,if,is,connect,failure,ex,return,handle,remote,connect,failure,invocation,ex,else,throw,ex,finally,get,jndi,template,release,context,ctx
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1328020251;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1356735495;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1357119239;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1362408075;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1368482696;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1385412762;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1469481969;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1495868221;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1497970235;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
JndiRmiClientInterceptor -> protected Object getStub() throws NamingException, RemoteLookupFailureException;1532091916;Return the RMI stub to use. Called for each invocation._<p>The default implementation returns the stub created on initialization,_if any. Else, it invokes {@link #lookupStub} to get a new stub for_each invocation. This can be overridden in subclasses, for example in_order to cache a stub for a given amount of time before recreating it,_or to test the stub whether it is still alive._@return the RMI stub to use for an invocation_@throws NamingException if stub creation failed_@throws RemoteLookupFailureException if RMI stub creation failed;protected Object getStub() throws NamingException, RemoteLookupFailureException {_		if (!this.cacheStub || (this.lookupStubOnStartup && !this.refreshStubOnConnectFailure)) {_			return (this.cachedStub != null ? this.cachedStub : lookupStub())__		}_		else {_			synchronized (this.stubMonitor) {_				if (this.cachedStub == null) {_					this.cachedStub = lookupStub()__				}_				return this.cachedStub__			}_		}_	};return,the,rmi,stub,to,use,called,for,each,invocation,p,the,default,implementation,returns,the,stub,created,on,initialization,if,any,else,it,invokes,link,lookup,stub,to,get,a,new,stub,for,each,invocation,this,can,be,overridden,in,subclasses,for,example,in,order,to,cache,a,stub,for,a,given,amount,of,time,before,recreating,it,or,to,test,the,stub,whether,it,is,still,alive,return,the,rmi,stub,to,use,for,an,invocation,throws,naming,exception,if,stub,creation,failed,throws,remote,lookup,failure,exception,if,rmi,stub,creation,failed;protected,object,get,stub,throws,naming,exception,remote,lookup,failure,exception,if,this,cache,stub,this,lookup,stub,on,startup,this,refresh,stub,on,connect,failure,return,this,cached,stub,null,this,cached,stub,lookup,stub,else,synchronized,this,stub,monitor,if,this,cached,stub,null,this,cached,stub,lookup,stub,return,this,cached,stub
