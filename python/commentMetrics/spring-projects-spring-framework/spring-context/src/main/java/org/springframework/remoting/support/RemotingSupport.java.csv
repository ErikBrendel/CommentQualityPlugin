commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
true;protected;0;3;/**  * Return the ClassLoader that this accessor operates in,  * to be used for deserializing and for generating proxies.  */ ;/**  * Return the ClassLoader that this accessor operates in,  * to be used for deserializing and for generating proxies.  */ protected ClassLoader getBeanClassLoader() {     return this.beanClassLoader. }
true;protected;0;4;/**  * Override the thread context ClassLoader with the environment's bean ClassLoader  * if necessary, i.e. if the bean ClassLoader is not equivalent to the thread  * context ClassLoader already.  * @return the original thread context ClassLoader, or {@code null} if not overridden  */ ;/**  * Override the thread context ClassLoader with the environment's bean ClassLoader  * if necessary, i.e. if the bean ClassLoader is not equivalent to the thread  * context ClassLoader already.  * @return the original thread context ClassLoader, or {@code null} if not overridden  */ @Nullable protected ClassLoader overrideThreadContextClassLoader() {     return ClassUtils.overrideThreadContextClassLoader(getBeanClassLoader()). }
true;protected;1;5;/**  * Reset the original thread context ClassLoader if necessary.  * @param original the original thread context ClassLoader,  * or {@code null} if not overridden (and hence nothing to reset)  */ ;/**  * Reset the original thread context ClassLoader if necessary.  * @param original the original thread context ClassLoader,  * or {@code null} if not overridden (and hence nothing to reset)  */ protected void resetThreadContextClassLoader(@Nullable ClassLoader original) {     if (original != null) {         Thread.currentThread().setContextClassLoader(original).     } }
