commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the JNDI template to use for JNDI lookups.  * You can also specify JNDI environment settings via "jndiEnvironment".  * @see #setJndiEnvironment  */ ;/**  * Set the JNDI template to use for JNDI lookups.  * You can also specify JNDI environment settings via "jndiEnvironment".  * @see #setJndiEnvironment  */ public void setJndiTemplate(JndiTemplate jndiTemplate) {     this.jndiTemplate = (jndiTemplate != null ? jndiTemplate : new JndiTemplate()). }
true;public;1;3;/**  * Set the JNDI environment to use for JNDI lookups.  * Creates a JndiTemplate with the given environment settings.  * @see #setJndiTemplate  */ ;/**  * Set the JNDI environment to use for JNDI lookups.  * Creates a JndiTemplate with the given environment settings.  * @see #setJndiTemplate  */ public void setJndiEnvironment(Properties jndiEnvironment) {     this.jndiTemplate = new JndiTemplate(jndiEnvironment). }
true;public;1;3;/**  * Set the JNDI name of the exported RMI service.  */ ;/**  * Set the JNDI name of the exported RMI service.  */ public void setJndiName(String jndiName) {     this.jndiName = jndiName. }
false;public;0;4;;@Override public void afterPropertiesSet() throws NamingException, RemoteException {     prepare(). }
true;public;0;11;/**  * Initialize this service exporter, binding the specified service to JNDI.  * @throws NamingException if service binding failed  * @throws RemoteException if service export failed  */ ;/**  * Initialize this service exporter, binding the specified service to JNDI.  * @throws NamingException if service binding failed  * @throws RemoteException if service export failed  */ public void prepare() throws NamingException, RemoteException {     if (this.jndiName == null) {         throw new IllegalArgumentException("Property 'jndiName' is required").     }     // Initialize and cache exported object.     this.exportedObject = getObjectToExport().     invokePortableRemoteObject(exportObject).     rebind(). }
true;public;0;6;/**  * Rebind the specified service to JNDI, for recovering in case  * of the target registry having been restarted.  * @throws NamingException if service binding failed  */ ;/**  * Rebind the specified service to JNDI, for recovering in case  * of the target registry having been restarted.  * @throws NamingException if service binding failed  */ public void rebind() throws NamingException {     if (logger.isDebugEnabled()) {         logger.debug("Binding RMI service to JNDI location [" + this.jndiName + "]").     }     this.jndiTemplate.rebind(this.jndiName, this.exportedObject). }
true;public;0;8;/**  * Unbind the RMI service from JNDI on bean factory shutdown.  */ ;/**  * Unbind the RMI service from JNDI on bean factory shutdown.  */ @Override public void destroy() throws NamingException, RemoteException {     if (logger.isDebugEnabled()) {         logger.debug("Unbinding RMI service from JNDI location [" + this.jndiName + "]").     }     this.jndiTemplate.unbind(this.jndiName).     invokePortableRemoteObject(unexportObject). }
false;private;1;17;;private void invokePortableRemoteObject(@Nullable Method method) throws RemoteException {     if (method != null) {         try {             method.invoke(null, this.exportedObject).         } catch (InvocationTargetException ex) {             Throwable targetEx = ex.getTargetException().             if (targetEx instanceof RemoteException) {                 throw (RemoteException) targetEx.             }             ReflectionUtils.rethrowRuntimeException(targetEx).         } catch (Throwable ex) {             throw new IllegalStateException("PortableRemoteObject invocation failed", ex).         }     } }
