# id;timestamp;commentText;codeText;commentWords;codeWords
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1328020251;Provide an {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};provide,an,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1356735495;Provide an {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};provide,an,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1357119239;Provide an {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};provide,an,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1368482696;Provide an {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};provide,an,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1378149521;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1385412762;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1388782627;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1404066532;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1404070239;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1404097013;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		Assert.notNull(errorHandler, "'errorHandler' must not be null")__		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,assert,not,null,error,handler,error,handler,must,not,be,null,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1411601053;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1411763921;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1467677340;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1467730834;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1496837955;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1498780456;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1502974979;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1521420322;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1530174524;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1530174524;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1532091916;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1533213413;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setErrorHandler(ErrorHandler errorHandler);1533667007;Set a custom {@link ErrorHandler} strategy.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,a,custom,link,error,handler,strategy;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1404070239;Set the same property on ScheduledExecutorService (JDK 1.7+)._There is no default. If not set, the executor property is not set._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_	};set,the,same,property,on,scheduled,executor,service,jdk,1,7,there,is,no,default,if,not,set,the,executor,property,is,not,set,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1467677340;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1467730834;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1496837955;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1498780456;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1502974979;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1521420322;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1530174524;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1530174524;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1532091916;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.debug("Could not apply remove-on-cancel policy - not a ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,debug,could,not,apply,remove,on,cancel,policy,not,a,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1533213413;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.debug("Could not apply remove-on-cancel policy - not a ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,debug,could,not,apply,remove,on,cancel,policy,not,a,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1533667007;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor}._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.debug("Could not apply remove-on-cancel policy - not a ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,debug,could,not,apply,remove,on,cancel,policy,not,a,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> @UsesJava7 	public boolean isRemoveOnCancelPolicy();1404097013;Return the current setting of removeOnCancelPolicy._<p>Requires an underlying {@link ScheduledThreadPoolExecutor} and JDK 1.7+.;@UsesJava7_	public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return false__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,of,remove,on,cancel,policy,p,requires,an,underlying,link,scheduled,thread,pool,executor,and,jdk,1,7;uses,java7,public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,false,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> @UsesJava7 	public boolean isRemoveOnCancelPolicy();1411601053;Return the current setting of removeOnCancelPolicy._<p>Requires an underlying {@link ScheduledThreadPoolExecutor} and JDK 1.7+.;@UsesJava7_	public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return (setRemoveOnCancelPolicyAvailable && this.removeOnCancelPolicy)__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,of,remove,on,cancel,policy,p,requires,an,underlying,link,scheduled,thread,pool,executor,and,jdk,1,7;uses,java7,public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,set,remove,on,cancel,policy,available,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> @UsesJava7 	public boolean isRemoveOnCancelPolicy();1411763921;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;@UsesJava7_	public boolean isRemoveOnCancelPolicy() {_		if (!setRemoveOnCancelPolicyAvailable) {_			return false__		}_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;uses,java7,public,boolean,is,remove,on,cancel,policy,if,set,remove,on,cancel,policy,available,return,false,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1404066532;Return the current setting of removeOnCancelPolicy._<p>Requires an underlying {@link ScheduledThreadPoolExecutor} and JDK 1.7+.;public boolean isRemoveOnCancelPolicy() {_		return this.removeOnCancelPolicy__	};return,the,current,setting,of,remove,on,cancel,policy,p,requires,an,underlying,link,scheduled,thread,pool,executor,and,jdk,1,7;public,boolean,is,remove,on,cancel,policy,return,this,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1404070239;Return the current setting of removeOnCancelPolicy._<p>Requires an underlying {@link ScheduledThreadPoolExecutor} and JDK 1.7+.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return false__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,of,remove,on,cancel,policy,p,requires,an,underlying,link,scheduled,thread,pool,executor,and,jdk,1,7;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,false,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1467677340;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1467730834;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1496837955;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1498780456;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1502974979;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1521420322;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1530174524;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1530174524;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1532091916;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1533213413;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public boolean isRemoveOnCancelPolicy();1533667007;Return the current setting for the remove-on-cancel mode._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}.;public boolean isRemoveOnCancelPolicy() {_		if (this.scheduledExecutor == null) {_			_			return this.removeOnCancelPolicy__		}_		return getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy()__	};return,the,current,setting,for,the,remove,on,cancel,mode,p,requires,an,underlying,link,scheduled,thread,pool,executor;public,boolean,is,remove,on,cancel,policy,if,this,scheduled,executor,null,return,this,remove,on,cancel,policy,return,get,scheduled,thread,pool,executor,get,remove,on,cancel,policy
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1378149521;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1385412762;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1388782627;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1404066532;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1404070239;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1404097013;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1411601053;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1411763921;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1467677340;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1467730834;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1496837955;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1498780456;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1502974979;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1521420322;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1530174524;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1530174524;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1532091916;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1533213413;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException;1533667007;Return the underlying ScheduledThreadPoolExecutor, if available._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet_or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor_@see #getScheduledExecutor();public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,_				"No ScheduledThreadPoolExecutor available")__		return (ScheduledThreadPoolExecutor) this.scheduledExecutor__	};return,the,underlying,scheduled,thread,pool,executor,if,available,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet,or,if,the,underlying,scheduled,executor,service,isn,t,a,scheduled,thread,pool,executor,see,get,scheduled,executor;public,scheduled,thread,pool,executor,get,scheduled,thread,pool,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,no,scheduled,thread,pool,executor,available,return,scheduled,thread,pool,executor,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1328020251;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never <code>null</code>)_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,code,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1356735495;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1357119239;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1368482696;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1378149521;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1385412762;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1388782627;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1404066532;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1404070239;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1404097013;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1411601053;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1411763921;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1467677340;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1467730834;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1496837955;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1498780456;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1502974979;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1521420322;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1530174524;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1530174524;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1532091916;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1533213413;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException;1533667007;Return the underlying ScheduledExecutorService for native access._@return the underlying ScheduledExecutorService (never {@code null})_@throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet;public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {_		Assert.state(this.scheduledExecutor != null, "ThreadPoolTaskScheduler not initialized")__		return this.scheduledExecutor__	};return,the,underlying,scheduled,executor,service,for,native,access,return,the,underlying,scheduled,executor,service,never,code,null,throws,illegal,state,exception,if,the,thread,pool,task,scheduler,hasn,t,been,initialized,yet;public,scheduled,executor,service,get,scheduled,executor,throws,illegal,state,exception,assert,state,this,scheduled,executor,null,thread,pool,task,scheduler,not,initialized,return,this,scheduled,executor
ThreadPoolTaskScheduler -> public int getPoolSize();1378149521;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1385412762;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1388782627;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1404066532;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1404070239;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1404097013;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1411601053;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1411763921;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1467677340;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1467730834;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1496837955;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1498780456;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1502974979;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1521420322;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1530174524;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1530174524;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1532091916;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1533213413;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getPoolSize();1533667007;Return the current pool size._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize();public int getPoolSize() {_		if (this.scheduledExecutor == null) {_			_			return this.poolSize__		}_		return getScheduledThreadPoolExecutor().getPoolSize()__	};return,the,current,pool,size,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,pool,size;public,int,get,pool,size,if,this,scheduled,executor,null,return,this,pool,size,return,get,scheduled,thread,pool,executor,get,pool,size
ThreadPoolTaskScheduler -> public int getActiveCount();1378149521;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1385412762;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1388782627;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1404066532;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1404070239;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1404097013;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1411601053;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1411763921;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1467677340;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1467730834;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1496837955;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1498780456;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1502974979;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1521420322;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1530174524;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1530174524;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1532091916;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1533213413;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> public int getActiveCount();1533667007;Return the number of currently active threads._<p>Requires an underlying {@link ScheduledThreadPoolExecutor}._@see #getScheduledThreadPoolExecutor()_@see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount();public int getActiveCount() {_		if (this.scheduledExecutor == null) {_			_			return 0__		}_		return getScheduledThreadPoolExecutor().getActiveCount()__	};return,the,number,of,currently,active,threads,p,requires,an,underlying,link,scheduled,thread,pool,executor,see,get,scheduled,thread,pool,executor,see,java,util,concurrent,scheduled,thread,pool,executor,get,active,count;public,int,get,active,count,if,this,scheduled,executor,null,return,0,return,get,scheduled,thread,pool,executor,get,active,count
ThreadPoolTaskScheduler -> @UsesJava7 	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1404097013;Set the same property on ScheduledExecutorService (JDK 1.7+)._There is no default. If not set, the executor property is not set._<p><b>This setting can be modified at runtime, for example through JMX.</b>;@UsesJava7_	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_	};set,the,same,property,on,scheduled,executor,service,jdk,1,7,there,is,no,default,if,not,set,the,executor,property,is,not,set,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;uses,java7,public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy
ThreadPoolTaskScheduler -> @UsesJava7 	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1411601053;Set the same property on ScheduledExecutorService (JDK 1.7+)._There is no default. If not set, the executor property is not set._<p><b>This setting can be modified at runtime, for example through JMX.</b>;@UsesJava7_	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (setRemoveOnCancelPolicyAvailable && this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,same,property,on,scheduled,executor,service,jdk,1,7,there,is,no,default,if,not,set,the,executor,property,is,not,set,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;uses,java7,public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,set,remove,on,cancel,policy,available,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> @UsesJava7 	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy);1411763921;Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)._<p>Default is {@code false}. If set to {@code true}, the target executor will be_switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)._<p><b>This setting can be modified at runtime, for example through JMX.</b>;@UsesJava7_	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {_		this.removeOnCancelPolicy = removeOnCancelPolicy__		if (setRemoveOnCancelPolicyAvailable && this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setRemoveOnCancelPolicy(removeOnCancelPolicy)__		}_		else if (removeOnCancelPolicy && this.scheduledExecutor != null) {_			logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor")__		}_	};set,the,remove,on,cancel,mode,on,link,scheduled,thread,pool,executor,jdk,7,p,default,is,code,false,if,set,to,code,true,the,target,executor,will,be,switched,into,remove,on,cancel,mode,if,possible,with,a,soft,fallback,otherwise,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;uses,java7,public,void,set,remove,on,cancel,policy,boolean,remove,on,cancel,policy,this,remove,on,cancel,policy,remove,on,cancel,policy,if,set,remove,on,cancel,policy,available,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,remove,on,cancel,policy,remove,on,cancel,policy,else,if,remove,on,cancel,policy,this,scheduled,executor,null,logger,info,could,not,apply,remove,on,cancel,policy,not,a,java,7,scheduled,thread,pool,executor
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1328020251;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1356735495;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1357119239;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1368482696;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1378149521;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1385412762;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1388782627;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1404066532;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1404070239;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1404097013;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1411601053;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1411763921;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1467677340;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1467730834;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1496837955;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1498780456;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1502974979;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1521420322;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1530174524;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1530174524;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1532091916;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1533213413;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> protected ScheduledExecutorService createExecutor( 			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler);1533667007;Create a new {@link ScheduledExecutorService} instance._<p>The default implementation creates a {@link ScheduledThreadPoolExecutor}._Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances._@param poolSize the specified pool size_@param threadFactory the ThreadFactory to use_@param rejectedExecutionHandler the RejectedExecutionHandler to use_@return a new ScheduledExecutorService instance_@see #afterPropertiesSet()_@see java.util.concurrent.ScheduledThreadPoolExecutor;protected ScheduledExecutorService createExecutor(_			int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {__		return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler)__	};create,a,new,link,scheduled,executor,service,instance,p,the,default,implementation,creates,a,link,scheduled,thread,pool,executor,can,be,overridden,in,subclasses,to,provide,custom,link,scheduled,executor,service,instances,param,pool,size,the,specified,pool,size,param,thread,factory,the,thread,factory,to,use,param,rejected,execution,handler,the,rejected,execution,handler,to,use,return,a,new,scheduled,executor,service,instance,see,after,properties,set,see,java,util,concurrent,scheduled,thread,pool,executor;protected,scheduled,executor,service,create,executor,int,pool,size,thread,factory,thread,factory,rejected,execution,handler,rejected,execution,handler,return,new,scheduled,thread,pool,executor,pool,size,thread,factory,rejected,execution,handler
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1328020251;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1356735495;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1357119239;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1368482696;Set the ScheduledExecutorService's pool size._Default is 1.;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__	};set,the,scheduled,executor,service,s,pool,size,default,is,1;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1378149521;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1385412762;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1388782627;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1404066532;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1404070239;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1404097013;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1411601053;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1411763921;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1467677340;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1467730834;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1496837955;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1498780456;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1502974979;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1521420322;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1530174524;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1530174524;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1532091916;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1533213413;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
ThreadPoolTaskScheduler -> public void setPoolSize(int poolSize);1533667007;Set the ScheduledExecutorService's pool size._Default is 1._<p><b>This setting can be modified at runtime, for example through JMX.</b>;public void setPoolSize(int poolSize) {_		Assert.isTrue(poolSize > 0, "'poolSize' must be 1 or higher")__		this.poolSize = poolSize__		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {_			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize)__		}_	};set,the,scheduled,executor,service,s,pool,size,default,is,1,p,b,this,setting,can,be,modified,at,runtime,for,example,through,jmx,b;public,void,set,pool,size,int,pool,size,assert,is,true,pool,size,0,pool,size,must,be,1,or,higher,this,pool,size,pool,size,if,this,scheduled,executor,instanceof,scheduled,thread,pool,executor,scheduled,thread,pool,executor,this,scheduled,executor,set,core,pool,size,pool,size
