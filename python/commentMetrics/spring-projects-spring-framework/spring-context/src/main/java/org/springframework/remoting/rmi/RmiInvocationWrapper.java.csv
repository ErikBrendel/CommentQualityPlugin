commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;/**  * Exposes the exporter's service interface, if any, as target interface.  * @see RmiBasedExporter#getServiceInterface()  */ ;/**  * Exposes the exporter's service interface, if any, as target interface.  * @see RmiBasedExporter#getServiceInterface()  */ @Override @Nullable public String getTargetInterfaceName() {     Class<?> ifc = this.rmiExporter.getServiceInterface().     return (ifc != null ? ifc.getName() : null). }
true;public;1;7;/**  * Delegates the actual invocation handling to the RMI exporter.  * @see RmiBasedExporter#invoke(org.springframework.remoting.support.RemoteInvocation, Object)  */ ;/**  * Delegates the actual invocation handling to the RMI exporter.  * @see RmiBasedExporter#invoke(org.springframework.remoting.support.RemoteInvocation, Object)  */ @Override @Nullable public Object invoke(RemoteInvocation invocation) throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {     return this.rmiExporter.invoke(invocation, this.wrappedObject). }
