# id;timestamp;commentText;codeText;commentWords;codeWords
RmiInvocationWrapper -> public String getTargetInterfaceName();1328020251;Exposes the exporter's service interface, if any, as target interface._@see RmiBasedExporter#getServiceInterface();public String getTargetInterfaceName() {_		Class ifc = this.rmiExporter.getServiceInterface()__		return (ifc != null ? ifc.getName() : null)__	};exposes,the,exporter,s,service,interface,if,any,as,target,interface,see,rmi,based,exporter,get,service,interface;public,string,get,target,interface,name,class,ifc,this,rmi,exporter,get,service,interface,return,ifc,null,ifc,get,name,null
RmiInvocationWrapper -> public String getTargetInterfaceName();1357119239;Exposes the exporter's service interface, if any, as target interface._@see RmiBasedExporter#getServiceInterface();public String getTargetInterfaceName() {_		Class ifc = this.rmiExporter.getServiceInterface()__		return (ifc != null ? ifc.getName() : null)__	};exposes,the,exporter,s,service,interface,if,any,as,target,interface,see,rmi,based,exporter,get,service,interface;public,string,get,target,interface,name,class,ifc,this,rmi,exporter,get,service,interface,return,ifc,null,ifc,get,name,null
RmiInvocationWrapper -> @Override 	@Nullable 	public String getTargetInterfaceName();1502974979;Exposes the exporter's service interface, if any, as target interface._@see RmiBasedExporter#getServiceInterface();@Override_	@Nullable_	public String getTargetInterfaceName() {_		Class<?> ifc = this.rmiExporter.getServiceInterface()__		return (ifc != null ? ifc.getName() : null)__	};exposes,the,exporter,s,service,interface,if,any,as,target,interface,see,rmi,based,exporter,get,service,interface;override,nullable,public,string,get,target,interface,name,class,ifc,this,rmi,exporter,get,service,interface,return,ifc,null,ifc,get,name,null
RmiInvocationWrapper -> @Override 	@Nullable 	public String getTargetInterfaceName();1530174524;Exposes the exporter's service interface, if any, as target interface._@see RmiBasedExporter#getServiceInterface();@Override_	@Nullable_	public String getTargetInterfaceName() {_		Class<?> ifc = this.rmiExporter.getServiceInterface()__		return (ifc != null ? ifc.getName() : null)__	};exposes,the,exporter,s,service,interface,if,any,as,target,interface,see,rmi,based,exporter,get,service,interface;override,nullable,public,string,get,target,interface,name,class,ifc,this,rmi,exporter,get,service,interface,return,ifc,null,ifc,get,name,null
RmiInvocationWrapper -> public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter);1328020251;Create a new RmiInvocationWrapper for the given object_@param wrappedObject the object to wrap with an RmiInvocationHandler_@param rmiExporter the RMI exporter to handle the actual invocation;public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter) {_		Assert.notNull(wrappedObject, "Object to wrap is required")__		Assert.notNull(rmiExporter, "RMI exporter is required")__		this.wrappedObject = wrappedObject__		this.rmiExporter = rmiExporter__	};create,a,new,rmi,invocation,wrapper,for,the,given,object,param,wrapped,object,the,object,to,wrap,with,an,rmi,invocation,handler,param,rmi,exporter,the,rmi,exporter,to,handle,the,actual,invocation;public,rmi,invocation,wrapper,object,wrapped,object,rmi,based,exporter,rmi,exporter,assert,not,null,wrapped,object,object,to,wrap,is,required,assert,not,null,rmi,exporter,rmi,exporter,is,required,this,wrapped,object,wrapped,object,this,rmi,exporter,rmi,exporter
RmiInvocationWrapper -> public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter);1356735495;Create a new RmiInvocationWrapper for the given object_@param wrappedObject the object to wrap with an RmiInvocationHandler_@param rmiExporter the RMI exporter to handle the actual invocation;public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter) {_		Assert.notNull(wrappedObject, "Object to wrap is required")__		Assert.notNull(rmiExporter, "RMI exporter is required")__		this.wrappedObject = wrappedObject__		this.rmiExporter = rmiExporter__	};create,a,new,rmi,invocation,wrapper,for,the,given,object,param,wrapped,object,the,object,to,wrap,with,an,rmi,invocation,handler,param,rmi,exporter,the,rmi,exporter,to,handle,the,actual,invocation;public,rmi,invocation,wrapper,object,wrapped,object,rmi,based,exporter,rmi,exporter,assert,not,null,wrapped,object,object,to,wrap,is,required,assert,not,null,rmi,exporter,rmi,exporter,is,required,this,wrapped,object,wrapped,object,this,rmi,exporter,rmi,exporter
RmiInvocationWrapper -> public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter);1357119239;Create a new RmiInvocationWrapper for the given object_@param wrappedObject the object to wrap with an RmiInvocationHandler_@param rmiExporter the RMI exporter to handle the actual invocation;public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter) {_		Assert.notNull(wrappedObject, "Object to wrap is required")__		Assert.notNull(rmiExporter, "RMI exporter is required")__		this.wrappedObject = wrappedObject__		this.rmiExporter = rmiExporter__	};create,a,new,rmi,invocation,wrapper,for,the,given,object,param,wrapped,object,the,object,to,wrap,with,an,rmi,invocation,handler,param,rmi,exporter,the,rmi,exporter,to,handle,the,actual,invocation;public,rmi,invocation,wrapper,object,wrapped,object,rmi,based,exporter,rmi,exporter,assert,not,null,wrapped,object,object,to,wrap,is,required,assert,not,null,rmi,exporter,rmi,exporter,is,required,this,wrapped,object,wrapped,object,this,rmi,exporter,rmi,exporter
RmiInvocationWrapper -> public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter);1368482696;Create a new RmiInvocationWrapper for the given object_@param wrappedObject the object to wrap with an RmiInvocationHandler_@param rmiExporter the RMI exporter to handle the actual invocation;public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter) {_		Assert.notNull(wrappedObject, "Object to wrap is required")__		Assert.notNull(rmiExporter, "RMI exporter is required")__		this.wrappedObject = wrappedObject__		this.rmiExporter = rmiExporter__	};create,a,new,rmi,invocation,wrapper,for,the,given,object,param,wrapped,object,the,object,to,wrap,with,an,rmi,invocation,handler,param,rmi,exporter,the,rmi,exporter,to,handle,the,actual,invocation;public,rmi,invocation,wrapper,object,wrapped,object,rmi,based,exporter,rmi,exporter,assert,not,null,wrapped,object,object,to,wrap,is,required,assert,not,null,rmi,exporter,rmi,exporter,is,required,this,wrapped,object,wrapped,object,this,rmi,exporter,rmi,exporter
RmiInvocationWrapper -> public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter);1385412762;Create a new RmiInvocationWrapper for the given object_@param wrappedObject the object to wrap with an RmiInvocationHandler_@param rmiExporter the RMI exporter to handle the actual invocation;public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter) {_		Assert.notNull(wrappedObject, "Object to wrap is required")__		Assert.notNull(rmiExporter, "RMI exporter is required")__		this.wrappedObject = wrappedObject__		this.rmiExporter = rmiExporter__	};create,a,new,rmi,invocation,wrapper,for,the,given,object,param,wrapped,object,the,object,to,wrap,with,an,rmi,invocation,handler,param,rmi,exporter,the,rmi,exporter,to,handle,the,actual,invocation;public,rmi,invocation,wrapper,object,wrapped,object,rmi,based,exporter,rmi,exporter,assert,not,null,wrapped,object,object,to,wrap,is,required,assert,not,null,rmi,exporter,rmi,exporter,is,required,this,wrapped,object,wrapped,object,this,rmi,exporter,rmi,exporter
RmiInvocationWrapper -> public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter);1502974979;Create a new RmiInvocationWrapper for the given object_@param wrappedObject the object to wrap with an RmiInvocationHandler_@param rmiExporter the RMI exporter to handle the actual invocation;public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter) {_		Assert.notNull(wrappedObject, "Object to wrap is required")__		Assert.notNull(rmiExporter, "RMI exporter is required")__		this.wrappedObject = wrappedObject__		this.rmiExporter = rmiExporter__	};create,a,new,rmi,invocation,wrapper,for,the,given,object,param,wrapped,object,the,object,to,wrap,with,an,rmi,invocation,handler,param,rmi,exporter,the,rmi,exporter,to,handle,the,actual,invocation;public,rmi,invocation,wrapper,object,wrapped,object,rmi,based,exporter,rmi,exporter,assert,not,null,wrapped,object,object,to,wrap,is,required,assert,not,null,rmi,exporter,rmi,exporter,is,required,this,wrapped,object,wrapped,object,this,rmi,exporter,rmi,exporter
RmiInvocationWrapper -> public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter);1530174524;Create a new RmiInvocationWrapper for the given object._@param wrappedObject the object to wrap with an RmiInvocationHandler_@param rmiExporter the RMI exporter to handle the actual invocation;public RmiInvocationWrapper(Object wrappedObject, RmiBasedExporter rmiExporter) {_		Assert.notNull(wrappedObject, "Object to wrap is required")__		Assert.notNull(rmiExporter, "RMI exporter is required")__		this.wrappedObject = wrappedObject__		this.rmiExporter = rmiExporter__	};create,a,new,rmi,invocation,wrapper,for,the,given,object,param,wrapped,object,the,object,to,wrap,with,an,rmi,invocation,handler,param,rmi,exporter,the,rmi,exporter,to,handle,the,actual,invocation;public,rmi,invocation,wrapper,object,wrapped,object,rmi,based,exporter,rmi,exporter,assert,not,null,wrapped,object,object,to,wrap,is,required,assert,not,null,rmi,exporter,rmi,exporter,is,required,this,wrapped,object,wrapped,object,this,rmi,exporter,rmi,exporter
RmiInvocationWrapper -> @Override 	public Object invoke(RemoteInvocation invocation) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1356735495;Delegates the actual invocation handling to the RMI exporter._@see RmiBasedExporter#invoke(org.springframework.remoting.support.RemoteInvocation, Object);@Override_	public Object invoke(RemoteInvocation invocation)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		return this.rmiExporter.invoke(invocation, this.wrappedObject)__	};delegates,the,actual,invocation,handling,to,the,rmi,exporter,see,rmi,based,exporter,invoke,org,springframework,remoting,support,remote,invocation,object;override,public,object,invoke,remote,invocation,invocation,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,return,this,rmi,exporter,invoke,invocation,this,wrapped,object
RmiInvocationWrapper -> @Override 	public Object invoke(RemoteInvocation invocation) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1368482696;Delegates the actual invocation handling to the RMI exporter._@see RmiBasedExporter#invoke(org.springframework.remoting.support.RemoteInvocation, Object);@Override_	public Object invoke(RemoteInvocation invocation)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		return this.rmiExporter.invoke(invocation, this.wrappedObject)__	};delegates,the,actual,invocation,handling,to,the,rmi,exporter,see,rmi,based,exporter,invoke,org,springframework,remoting,support,remote,invocation,object;override,public,object,invoke,remote,invocation,invocation,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,return,this,rmi,exporter,invoke,invocation,this,wrapped,object
RmiInvocationWrapper -> @Override 	public Object invoke(RemoteInvocation invocation) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1385412762;Delegates the actual invocation handling to the RMI exporter._@see RmiBasedExporter#invoke(org.springframework.remoting.support.RemoteInvocation, Object);@Override_	public Object invoke(RemoteInvocation invocation)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		return this.rmiExporter.invoke(invocation, this.wrappedObject)__	};delegates,the,actual,invocation,handling,to,the,rmi,exporter,see,rmi,based,exporter,invoke,org,springframework,remoting,support,remote,invocation,object;override,public,object,invoke,remote,invocation,invocation,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,return,this,rmi,exporter,invoke,invocation,this,wrapped,object
RmiInvocationWrapper -> @Override 	public String getTargetInterfaceName();1356735495;Exposes the exporter's service interface, if any, as target interface._@see RmiBasedExporter#getServiceInterface();@Override_	public String getTargetInterfaceName() {_		Class ifc = this.rmiExporter.getServiceInterface()__		return (ifc != null ? ifc.getName() : null)__	};exposes,the,exporter,s,service,interface,if,any,as,target,interface,see,rmi,based,exporter,get,service,interface;override,public,string,get,target,interface,name,class,ifc,this,rmi,exporter,get,service,interface,return,ifc,null,ifc,get,name,null
RmiInvocationWrapper -> @Override 	public String getTargetInterfaceName();1368482696;Exposes the exporter's service interface, if any, as target interface._@see RmiBasedExporter#getServiceInterface();@Override_	public String getTargetInterfaceName() {_		Class ifc = this.rmiExporter.getServiceInterface()__		return (ifc != null ? ifc.getName() : null)__	};exposes,the,exporter,s,service,interface,if,any,as,target,interface,see,rmi,based,exporter,get,service,interface;override,public,string,get,target,interface,name,class,ifc,this,rmi,exporter,get,service,interface,return,ifc,null,ifc,get,name,null
RmiInvocationWrapper -> @Override 	public String getTargetInterfaceName();1385412762;Exposes the exporter's service interface, if any, as target interface._@see RmiBasedExporter#getServiceInterface();@Override_	public String getTargetInterfaceName() {_		Class<?> ifc = this.rmiExporter.getServiceInterface()__		return (ifc != null ? ifc.getName() : null)__	};exposes,the,exporter,s,service,interface,if,any,as,target,interface,see,rmi,based,exporter,get,service,interface;override,public,string,get,target,interface,name,class,ifc,this,rmi,exporter,get,service,interface,return,ifc,null,ifc,get,name,null
RmiInvocationWrapper -> @Override 	@Nullable 	public Object invoke(RemoteInvocation invocation) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1502974979;Delegates the actual invocation handling to the RMI exporter._@see RmiBasedExporter#invoke(org.springframework.remoting.support.RemoteInvocation, Object);@Override_	@Nullable_	public Object invoke(RemoteInvocation invocation)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		return this.rmiExporter.invoke(invocation, this.wrappedObject)__	};delegates,the,actual,invocation,handling,to,the,rmi,exporter,see,rmi,based,exporter,invoke,org,springframework,remoting,support,remote,invocation,object;override,nullable,public,object,invoke,remote,invocation,invocation,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,return,this,rmi,exporter,invoke,invocation,this,wrapped,object
RmiInvocationWrapper -> @Override 	@Nullable 	public Object invoke(RemoteInvocation invocation) 		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException;1530174524;Delegates the actual invocation handling to the RMI exporter._@see RmiBasedExporter#invoke(org.springframework.remoting.support.RemoteInvocation, Object);@Override_	@Nullable_	public Object invoke(RemoteInvocation invocation)_		throws RemoteException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {__		return this.rmiExporter.invoke(invocation, this.wrappedObject)__	};delegates,the,actual,invocation,handling,to,the,rmi,exporter,see,rmi,based,exporter,invoke,org,springframework,remoting,support,remote,invocation,object;override,nullable,public,object,invoke,remote,invocation,invocation,throws,remote,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,return,this,rmi,exporter,invoke,invocation,this,wrapped,object
