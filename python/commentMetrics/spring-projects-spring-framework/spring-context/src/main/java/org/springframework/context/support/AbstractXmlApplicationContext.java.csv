commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to use XML validation. Default is {@code true}.  */ ;/**  * Set whether to use XML validation. Default is {@code true}.  */ public void setValidating(boolean validating) {     this.validating = validating. }
true;protected;1;16;/**  * Loads the bean definitions via an XmlBeanDefinitionReader.  * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader  * @see #initBeanDefinitionReader  * @see #loadBeanDefinitions  */ ;/**  * Loads the bean definitions via an XmlBeanDefinitionReader.  * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader  * @see #initBeanDefinitionReader  * @see #loadBeanDefinitions  */ @Override protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {     // Create a new XmlBeanDefinitionReader for the given BeanFactory.     XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory).     // Configure the bean definition reader with this context's     // resource loading environment.     beanDefinitionReader.setEnvironment(this.getEnvironment()).     beanDefinitionReader.setResourceLoader(this).     beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this)).     // Allow a subclass to provide custom initialization of the reader,     // then proceed with actually loading the bean definitions.     initBeanDefinitionReader(beanDefinitionReader).     loadBeanDefinitions(beanDefinitionReader). }
true;protected;1;3;/**  * Initialize the bean definition reader used for loading the bean  * definitions of this context. Default implementation is empty.  * <p>Can be overridden in subclasses, e.g. for turning off XML validation  * or using a different XmlBeanDefinitionParser implementation.  * @param reader the bean definition reader used by this context  * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader#setDocumentReaderClass  */ ;/**  * Initialize the bean definition reader used for loading the bean  * definitions of this context. Default implementation is empty.  * <p>Can be overridden in subclasses, e.g. for turning off XML validation  * or using a different XmlBeanDefinitionParser implementation.  * @param reader the bean definition reader used by this context  * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader#setDocumentReaderClass  */ protected void initBeanDefinitionReader(XmlBeanDefinitionReader reader) {     reader.setValidating(this.validating). }
true;protected;1;10;/**  * Load the bean definitions with the given XmlBeanDefinitionReader.  * <p>The lifecycle of the bean factory is handled by the {@link #refreshBeanFactory}  * method. hence this method is just supposed to load and/or register bean definitions.  * @param reader the XmlBeanDefinitionReader to use  * @throws BeansException in case of bean registration errors  * @throws IOException if the required XML document isn't found  * @see #refreshBeanFactory  * @see #getConfigLocations  * @see #getResources  * @see #getResourcePatternResolver  */ ;/**  * Load the bean definitions with the given XmlBeanDefinitionReader.  * <p>The lifecycle of the bean factory is handled by the {@link #refreshBeanFactory}  * method. hence this method is just supposed to load and/or register bean definitions.  * @param reader the XmlBeanDefinitionReader to use  * @throws BeansException in case of bean registration errors  * @throws IOException if the required XML document isn't found  * @see #refreshBeanFactory  * @see #getConfigLocations  * @see #getResources  * @see #getResourcePatternResolver  */ protected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException {     Resource[] configResources = getConfigResources().     if (configResources != null) {         reader.loadBeanDefinitions(configResources).     }     String[] configLocations = getConfigLocations().     if (configLocations != null) {         reader.loadBeanDefinitions(configLocations).     } }
true;protected;0;4;/**  * Return an array of Resource objects, referring to the XML bean definition  * files that this context should be built with.  * <p>The default implementation returns {@code null}. Subclasses can override  * this to provide pre-built Resource objects rather than location Strings.  * @return an array of Resource objects, or {@code null} if none  * @see #getConfigLocations()  */ ;/**  * Return an array of Resource objects, referring to the XML bean definition  * files that this context should be built with.  * <p>The default implementation returns {@code null}. Subclasses can override  * this to provide pre-built Resource objects rather than location Strings.  * @return an array of Resource objects, or {@code null} if none  * @see #getConfigLocations()  */ @Nullable protected Resource[] getConfigResources() {     return null. }
