commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * Return the {@link SpelExpressionParser} to use.  */ ;/**  * Return the {@link SpelExpressionParser} to use.  */ protected SpelExpressionParser getParser() {     return this.parser. }
true;protected;0;3;/**  * Return a shared parameter name discoverer which caches data internally.  * @since 4.3  */ ;/**  * Return a shared parameter name discoverer which caches data internally.  * @since 4.3  */ protected ParameterNameDiscoverer getParameterNameDiscoverer() {     return this.parameterNameDiscoverer. }
true;protected;3;11;/**  * Return the {@link Expression} for the specified SpEL value  * <p>Parse the expression if it hasn't been already.  * @param cache the cache to use  * @param elementKey the element on which the expression is defined  * @param expression the expression to parse  */ ;/**  * Return the {@link Expression} for the specified SpEL value  * <p>Parse the expression if it hasn't been already.  * @param cache the cache to use  * @param elementKey the element on which the expression is defined  * @param expression the expression to parse  */ protected Expression getExpression(Map<ExpressionKey, Expression> cache, AnnotatedElementKey elementKey, String expression) {     ExpressionKey expressionKey = createKey(elementKey, expression).     Expression expr = cache.get(expressionKey).     if (expr == null) {         expr = getParser().parseExpression(expression).         cache.put(expressionKey, expr).     }     return expr. }
false;private;2;3;;private ExpressionKey createKey(AnnotatedElementKey elementKey, String expression) {     return new ExpressionKey(elementKey, expression). }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof ExpressionKey)) {         return false.     }     ExpressionKey otherKey = (ExpressionKey) other.     return (this.element.equals(otherKey.element) && ObjectUtils.nullSafeEquals(this.expression, otherKey.expression)). }
false;public;0;4;;@Override public int hashCode() {     return this.element.hashCode() * 29 + this.expression.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.element + " with expression \"" + this.expression + "\"". }
false;public;1;8;;@Override public int compareTo(ExpressionKey other) {     int result = this.element.toString().compareTo(other.element.toString()).     if (result == 0) {         result = this.expression.compareTo(other.expression).     }     return result. }
