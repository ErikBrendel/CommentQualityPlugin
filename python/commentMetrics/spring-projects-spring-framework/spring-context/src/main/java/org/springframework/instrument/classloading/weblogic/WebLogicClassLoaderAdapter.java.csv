commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;public void addTransformer(ClassFileTransformer transformer) {     Assert.notNull(transformer, "ClassFileTransformer must not be null").     try {         InvocationHandler adapter = new WebLogicClassPreProcessorAdapter(transformer, this.classLoader).         Object adapterInstance = Proxy.newProxyInstance(this.wlPreProcessorClass.getClassLoader(), new Class<?>[] { this.wlPreProcessorClass }, adapter).         this.addPreProcessorMethod.invoke(this.classLoader, adapterInstance).     } catch (InvocationTargetException ex) {         throw new IllegalStateException("WebLogic addInstanceClassPreProcessor method threw exception", ex.getCause()).     } catch (Throwable ex) {         throw new IllegalStateException("Could not invoke WebLogic addInstanceClassPreProcessor method", ex).     } }
false;public;0;3;;public ClassLoader getClassLoader() {     return this.classLoader. }
false;public;0;14;;public ClassLoader getThrowawayClassLoader() {     try {         Object classFinder = this.getClassFinderMethod.invoke(this.classLoader).         Object parent = this.getParentMethod.invoke(this.classLoader).         // arguments for 'clone'-like method         return (ClassLoader) this.wlGenericClassLoaderConstructor.newInstance(classFinder, parent).     } catch (InvocationTargetException ex) {         throw new IllegalStateException("WebLogic GenericClassLoader constructor failed", ex.getCause()).     } catch (Throwable ex) {         throw new IllegalStateException("Could not construct WebLogic GenericClassLoader", ex).     } }
