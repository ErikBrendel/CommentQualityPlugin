commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the pattern to use to format date values.  * @param pattern the format pattern  */ ;/**  * Set the pattern to use to format date values.  * @param pattern the format pattern  */ public void setPattern(String pattern) {     this.pattern = pattern. }
true;public;1;3;/**  * Set the ISO format used to format date values.  * @param iso the ISO format  */ ;/**  * Set the ISO format used to format date values.  * @param iso the ISO format  */ public void setIso(ISO iso) {     this.iso = iso. }
true;public;1;3;/**  * Set the two characters to use to format date values, in Joda-Time style.  * <p>The first character is used for the date style. the second is for  * the time style. Supported characters are:  * <ul>  * <li>'S' = Small</li>  * <li>'M' = Medium</li>  * <li>'L' = Long</li>  * <li>'F' = Full</li>  * <li>'-' = Omitted</li>  * </ul>  * @param style two characters from the set {"S", "M", "L", "F", "-"}  */ ;/**  * Set the two characters to use to format date values, in Joda-Time style.  * <p>The first character is used for the date style. the second is for  * the time style. Supported characters are:  * <ul>  * <li>'S' = Small</li>  * <li>'M' = Medium</li>  * <li>'L' = Long</li>  * <li>'F' = Full</li>  * <li>'-' = Omitted</li>  * </ul>  * @param style two characters from the set {"S", "M", "L", "F", "-"}  */ public void setStyle(String style) {     this.style = style. }
true;public;1;3;/**  * Set the {@code TimeZone} to normalize the date values into, if any.  * @param timeZone the time zone  */ ;/**  * Set the {@code TimeZone} to normalize the date values into, if any.  * @param timeZone the time zone  */ public void setTimeZone(TimeZone timeZone) {     this.timeZone = timeZone. }
true;public;0;3;/**  * Create a new {@code DateTimeFormatter} using this factory.  * <p>If no specific pattern or style has been defined,  * {@link DateTimeFormat#mediumDateTime() medium date time format} will be used.  * @return a new date time formatter  * @see #createDateTimeFormatter(DateTimeFormatter)  */ ;/**  * Create a new {@code DateTimeFormatter} using this factory.  * <p>If no specific pattern or style has been defined,  * {@link DateTimeFormat#mediumDateTime() medium date time format} will be used.  * @return a new date time formatter  * @see #createDateTimeFormatter(DateTimeFormatter)  */ public DateTimeFormatter createDateTimeFormatter() {     return createDateTimeFormatter(DateTimeFormat.mediumDateTime()). }
true;public;1;29;/**  * Create a new {@code DateTimeFormatter} using this factory.  * <p>If no specific pattern or style has been defined,  * the supplied {@code fallbackFormatter} will be used.  * @param fallbackFormatter the fall-back formatter to use  * when no specific factory properties have been set  * @return a new date time formatter  */ ;/**  * Create a new {@code DateTimeFormatter} using this factory.  * <p>If no specific pattern or style has been defined,  * the supplied {@code fallbackFormatter} will be used.  * @param fallbackFormatter the fall-back formatter to use  * when no specific factory properties have been set  * @return a new date time formatter  */ public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {     DateTimeFormatter dateTimeFormatter = null.     if (StringUtils.hasLength(this.pattern)) {         dateTimeFormatter = DateTimeFormat.forPattern(this.pattern).     } else if (this.iso != null && this.iso != ISO.NONE) {         switch(this.iso) {             case DATE:                 dateTimeFormatter = ISODateTimeFormat.date().                 break.             case TIME:                 dateTimeFormatter = ISODateTimeFormat.time().                 break.             case DATE_TIME:                 dateTimeFormatter = ISODateTimeFormat.dateTime().                 break.             default:                 throw new IllegalStateException("Unsupported ISO format: " + this.iso).         }     } else if (StringUtils.hasLength(this.style)) {         dateTimeFormatter = DateTimeFormat.forStyle(this.style).     }     if (dateTimeFormatter != null && this.timeZone != null) {         dateTimeFormatter = dateTimeFormatter.withZone(DateTimeZone.forTimeZone(this.timeZone)).     }     return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter). }
