commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the JNDI name to look up. If it doesn't begin with "java:comp/env/"  * this prefix is added automatically if "resourceRef" is set to "true".  * @param jndiName the JNDI name to look up  * @see #setResourceRef  */ ;/**  * Specify the JNDI name to look up. If it doesn't begin with "java:comp/env/"  * this prefix is added automatically if "resourceRef" is set to "true".  * @param jndiName the JNDI name to look up  * @see #setResourceRef  */ public void setJndiName(@Nullable String jndiName) {     this.jndiName = jndiName. }
true;public;0;4;/**  * Return the JNDI name to look up.  */ ;/**  * Return the JNDI name to look up.  */ @Nullable public String getJndiName() {     return this.jndiName. }
true;public;1;3;/**  * Specify the type that the located JNDI object is supposed  * to be assignable to, if any.  */ ;/**  * Specify the type that the located JNDI object is supposed  * to be assignable to, if any.  */ public void setExpectedType(@Nullable Class<?> expectedType) {     this.expectedType = expectedType. }
true;public;0;4;/**  * Return the type that the located JNDI object is supposed  * to be assignable to, if any.  */ ;/**  * Return the type that the located JNDI object is supposed  * to be assignable to, if any.  */ @Nullable public Class<?> getExpectedType() {     return this.expectedType. }
false;public;0;6;;@Override public void afterPropertiesSet() throws IllegalArgumentException, NamingException {     if (!StringUtils.hasLength(getJndiName())) {         throw new IllegalArgumentException("Property 'jndiName' is required").     } }
true;protected;0;5;/**  * Perform the actual JNDI lookup for this locator's target resource.  * @return the located target object  * @throws NamingException if the JNDI lookup failed or if the  * located JNDI object is not assignable to the expected type  * @see #setJndiName  * @see #setExpectedType  * @see #lookup(String, Class)  */ ;/**  * Perform the actual JNDI lookup for this locator's target resource.  * @return the located target object  * @throws NamingException if the JNDI lookup failed or if the  * located JNDI object is not assignable to the expected type  * @see #setJndiName  * @see #setExpectedType  * @see #lookup(String, Class)  */ protected Object lookup() throws NamingException {     String jndiName = getJndiName().     Assert.state(jndiName != null, "No JNDI name specified").     return lookup(jndiName, getExpectedType()). }
