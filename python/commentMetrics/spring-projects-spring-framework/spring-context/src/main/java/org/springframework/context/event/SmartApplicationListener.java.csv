commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Determine whether this listener actually supports the given event type.  * @param eventType the event type (never {@code null})  */ ;/**  * Determine whether this listener actually supports the given event type.  * @param eventType the event type (never {@code null})  */ boolean supportsEventType(Class<? extends ApplicationEvent> eventType).
true;default;1;3;/**  * Determine whether this listener actually supports the given source type.  * <p>The default implementation always returns {@code true}.  * @param sourceType the source type, or {@code null} if no source  */ ;/**  * Determine whether this listener actually supports the given source type.  * <p>The default implementation always returns {@code true}.  * @param sourceType the source type, or {@code null} if no source  */ default boolean supportsSourceType(@Nullable Class<?> sourceType) {     return true. }
true;default;0;4;/**  * Determine this listener's order in a set of listeners for the same event.  * <p>The default implementation returns {@link #LOWEST_PRECEDENCE}.  */ ;/**  * Determine this listener's order in a set of listeners for the same event.  * <p>The default implementation returns {@link #LOWEST_PRECEDENCE}.  */ @Override default int getOrder() {     return LOWEST_PRECEDENCE. }
