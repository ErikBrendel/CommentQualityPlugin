# id;timestamp;commentText;codeText;commentWords;codeWords
EventPublicationInterceptor -> public void setApplicationEventClass(Class applicationEventClass);1328020251;Set the application event class to publish._<p>The event class <b>must</b> have a constructor with a single_<code>Object</code> argument for the event source. The interceptor_will pass in the invoked object._@throws IllegalArgumentException if the supplied <code>Class</code> is_<code>null</code> or if it is not an <code>ApplicationEvent</code> subclass or_if it does not expose a constructor that takes a single <code>Object</code> argument;public void setApplicationEventClass(Class applicationEventClass) {_		if (ApplicationEvent.class.equals(applicationEventClass) ||_			!ApplicationEvent.class.isAssignableFrom(applicationEventClass)) {_			throw new IllegalArgumentException("applicationEventClass needs to extend ApplicationEvent")__		}_		try {_			this.applicationEventClassConstructor =_					applicationEventClass.getConstructor(new Class[] {Object.class})__		}_		catch (NoSuchMethodException ex) {_			throw new IllegalArgumentException("applicationEventClass [" +_					applicationEventClass.getName() + "] does not have the required Object constructor: " + ex)__		}_	};set,the,application,event,class,to,publish,p,the,event,class,b,must,b,have,a,constructor,with,a,single,code,object,code,argument,for,the,event,source,the,interceptor,will,pass,in,the,invoked,object,throws,illegal,argument,exception,if,the,supplied,code,class,code,is,code,null,code,or,if,it,is,not,an,code,application,event,code,subclass,or,if,it,does,not,expose,a,constructor,that,takes,a,single,code,object,code,argument;public,void,set,application,event,class,class,application,event,class,if,application,event,class,equals,application,event,class,application,event,class,is,assignable,from,application,event,class,throw,new,illegal,argument,exception,application,event,class,needs,to,extend,application,event,try,this,application,event,class,constructor,application,event,class,get,constructor,new,class,object,class,catch,no,such,method,exception,ex,throw,new,illegal,argument,exception,application,event,class,application,event,class,get,name,does,not,have,the,required,object,constructor,ex
EventPublicationInterceptor -> public void setApplicationEventClass(Class applicationEventClass);1356735495;Set the application event class to publish._<p>The event class <b>must</b> have a constructor with a single_{@code Object} argument for the event source. The interceptor_will pass in the invoked object._@throws IllegalArgumentException if the supplied {@code Class} is_{@code null} or if it is not an {@code ApplicationEvent} subclass or_if it does not expose a constructor that takes a single {@code Object} argument;public void setApplicationEventClass(Class applicationEventClass) {_		if (ApplicationEvent.class.equals(applicationEventClass) ||_			!ApplicationEvent.class.isAssignableFrom(applicationEventClass)) {_			throw new IllegalArgumentException("applicationEventClass needs to extend ApplicationEvent")__		}_		try {_			this.applicationEventClassConstructor =_					applicationEventClass.getConstructor(new Class[] {Object.class})__		}_		catch (NoSuchMethodException ex) {_			throw new IllegalArgumentException("applicationEventClass [" +_					applicationEventClass.getName() + "] does not have the required Object constructor: " + ex)__		}_	};set,the,application,event,class,to,publish,p,the,event,class,b,must,b,have,a,constructor,with,a,single,code,object,argument,for,the,event,source,the,interceptor,will,pass,in,the,invoked,object,throws,illegal,argument,exception,if,the,supplied,code,class,is,code,null,or,if,it,is,not,an,code,application,event,subclass,or,if,it,does,not,expose,a,constructor,that,takes,a,single,code,object,argument;public,void,set,application,event,class,class,application,event,class,if,application,event,class,equals,application,event,class,application,event,class,is,assignable,from,application,event,class,throw,new,illegal,argument,exception,application,event,class,needs,to,extend,application,event,try,this,application,event,class,constructor,application,event,class,get,constructor,new,class,object,class,catch,no,such,method,exception,ex,throw,new,illegal,argument,exception,application,event,class,application,event,class,get,name,does,not,have,the,required,object,constructor,ex
EventPublicationInterceptor -> public void setApplicationEventClass(Class applicationEventClass);1357119239;Set the application event class to publish._<p>The event class <b>must</b> have a constructor with a single_{@code Object} argument for the event source. The interceptor_will pass in the invoked object._@throws IllegalArgumentException if the supplied {@code Class} is_{@code null} or if it is not an {@code ApplicationEvent} subclass or_if it does not expose a constructor that takes a single {@code Object} argument;public void setApplicationEventClass(Class applicationEventClass) {_		if (ApplicationEvent.class.equals(applicationEventClass) ||_			!ApplicationEvent.class.isAssignableFrom(applicationEventClass)) {_			throw new IllegalArgumentException("applicationEventClass needs to extend ApplicationEvent")__		}_		try {_			this.applicationEventClassConstructor =_					applicationEventClass.getConstructor(new Class[] {Object.class})__		}_		catch (NoSuchMethodException ex) {_			throw new IllegalArgumentException("applicationEventClass [" +_					applicationEventClass.getName() + "] does not have the required Object constructor: " + ex)__		}_	};set,the,application,event,class,to,publish,p,the,event,class,b,must,b,have,a,constructor,with,a,single,code,object,argument,for,the,event,source,the,interceptor,will,pass,in,the,invoked,object,throws,illegal,argument,exception,if,the,supplied,code,class,is,code,null,or,if,it,is,not,an,code,application,event,subclass,or,if,it,does,not,expose,a,constructor,that,takes,a,single,code,object,argument;public,void,set,application,event,class,class,application,event,class,if,application,event,class,equals,application,event,class,application,event,class,is,assignable,from,application,event,class,throw,new,illegal,argument,exception,application,event,class,needs,to,extend,application,event,try,this,application,event,class,constructor,application,event,class,get,constructor,new,class,object,class,catch,no,such,method,exception,ex,throw,new,illegal,argument,exception,application,event,class,application,event,class,get,name,does,not,have,the,required,object,constructor,ex
EventPublicationInterceptor -> public void setApplicationEventClass(Class applicationEventClass);1368482696;Set the application event class to publish._<p>The event class <b>must</b> have a constructor with a single_{@code Object} argument for the event source. The interceptor_will pass in the invoked object._@throws IllegalArgumentException if the supplied {@code Class} is_{@code null} or if it is not an {@code ApplicationEvent} subclass or_if it does not expose a constructor that takes a single {@code Object} argument;public void setApplicationEventClass(Class applicationEventClass) {_		if (ApplicationEvent.class.equals(applicationEventClass) ||_			!ApplicationEvent.class.isAssignableFrom(applicationEventClass)) {_			throw new IllegalArgumentException("applicationEventClass needs to extend ApplicationEvent")__		}_		try {_			this.applicationEventClassConstructor =_					applicationEventClass.getConstructor(new Class[] {Object.class})__		}_		catch (NoSuchMethodException ex) {_			throw new IllegalArgumentException("applicationEventClass [" +_					applicationEventClass.getName() + "] does not have the required Object constructor: " + ex)__		}_	};set,the,application,event,class,to,publish,p,the,event,class,b,must,b,have,a,constructor,with,a,single,code,object,argument,for,the,event,source,the,interceptor,will,pass,in,the,invoked,object,throws,illegal,argument,exception,if,the,supplied,code,class,is,code,null,or,if,it,is,not,an,code,application,event,subclass,or,if,it,does,not,expose,a,constructor,that,takes,a,single,code,object,argument;public,void,set,application,event,class,class,application,event,class,if,application,event,class,equals,application,event,class,application,event,class,is,assignable,from,application,event,class,throw,new,illegal,argument,exception,application,event,class,needs,to,extend,application,event,try,this,application,event,class,constructor,application,event,class,get,constructor,new,class,object,class,catch,no,such,method,exception,ex,throw,new,illegal,argument,exception,application,event,class,application,event,class,get,name,does,not,have,the,required,object,constructor,ex
EventPublicationInterceptor -> public void setApplicationEventClass(Class<?> applicationEventClass);1385412762;Set the application event class to publish._<p>The event class <b>must</b> have a constructor with a single_{@code Object} argument for the event source. The interceptor_will pass in the invoked object._@throws IllegalArgumentException if the supplied {@code Class} is_{@code null} or if it is not an {@code ApplicationEvent} subclass or_if it does not expose a constructor that takes a single {@code Object} argument;public void setApplicationEventClass(Class<?> applicationEventClass) {_		if (ApplicationEvent.class.equals(applicationEventClass) ||_			!ApplicationEvent.class.isAssignableFrom(applicationEventClass)) {_			throw new IllegalArgumentException("applicationEventClass needs to extend ApplicationEvent")__		}_		try {_			this.applicationEventClassConstructor =_					applicationEventClass.getConstructor(new Class<?>[] {Object.class})__		}_		catch (NoSuchMethodException ex) {_			throw new IllegalArgumentException("applicationEventClass [" +_					applicationEventClass.getName() + "] does not have the required Object constructor: " + ex)__		}_	};set,the,application,event,class,to,publish,p,the,event,class,b,must,b,have,a,constructor,with,a,single,code,object,argument,for,the,event,source,the,interceptor,will,pass,in,the,invoked,object,throws,illegal,argument,exception,if,the,supplied,code,class,is,code,null,or,if,it,is,not,an,code,application,event,subclass,or,if,it,does,not,expose,a,constructor,that,takes,a,single,code,object,argument;public,void,set,application,event,class,class,application,event,class,if,application,event,class,equals,application,event,class,application,event,class,is,assignable,from,application,event,class,throw,new,illegal,argument,exception,application,event,class,needs,to,extend,application,event,try,this,application,event,class,constructor,application,event,class,get,constructor,new,class,object,class,catch,no,such,method,exception,ex,throw,new,illegal,argument,exception,application,event,class,application,event,class,get,name,does,not,have,the,required,object,constructor,ex
EventPublicationInterceptor -> public void setApplicationEventClass(Class<?> applicationEventClass);1432125256;Set the application event class to publish._<p>The event class <b>must</b> have a constructor with a single_{@code Object} argument for the event source. The interceptor_will pass in the invoked object._@throws IllegalArgumentException if the supplied {@code Class} is_{@code null} or if it is not an {@code ApplicationEvent} subclass or_if it does not expose a constructor that takes a single {@code Object} argument;public void setApplicationEventClass(Class<?> applicationEventClass) {_		if (ApplicationEvent.class == applicationEventClass ||_			!ApplicationEvent.class.isAssignableFrom(applicationEventClass)) {_			throw new IllegalArgumentException("applicationEventClass needs to extend ApplicationEvent")__		}_		try {_			this.applicationEventClassConstructor =_					applicationEventClass.getConstructor(new Class<?>[] {Object.class})__		}_		catch (NoSuchMethodException ex) {_			throw new IllegalArgumentException("applicationEventClass [" +_					applicationEventClass.getName() + "] does not have the required Object constructor: " + ex)__		}_	};set,the,application,event,class,to,publish,p,the,event,class,b,must,b,have,a,constructor,with,a,single,code,object,argument,for,the,event,source,the,interceptor,will,pass,in,the,invoked,object,throws,illegal,argument,exception,if,the,supplied,code,class,is,code,null,or,if,it,is,not,an,code,application,event,subclass,or,if,it,does,not,expose,a,constructor,that,takes,a,single,code,object,argument;public,void,set,application,event,class,class,application,event,class,if,application,event,class,application,event,class,application,event,class,is,assignable,from,application,event,class,throw,new,illegal,argument,exception,application,event,class,needs,to,extend,application,event,try,this,application,event,class,constructor,application,event,class,get,constructor,new,class,object,class,catch,no,such,method,exception,ex,throw,new,illegal,argument,exception,application,event,class,application,event,class,get,name,does,not,have,the,required,object,constructor,ex
EventPublicationInterceptor -> public void setApplicationEventClass(Class<?> applicationEventClass);1498780456;Set the application event class to publish._<p>The event class <b>must</b> have a constructor with a single_{@code Object} argument for the event source. The interceptor_will pass in the invoked object._@throws IllegalArgumentException if the supplied {@code Class} is_{@code null} or if it is not an {@code ApplicationEvent} subclass or_if it does not expose a constructor that takes a single {@code Object} argument;public void setApplicationEventClass(Class<?> applicationEventClass) {_		if (ApplicationEvent.class == applicationEventClass ||_				!ApplicationEvent.class.isAssignableFrom(applicationEventClass)) {_			throw new IllegalArgumentException("'applicationEventClass' needs to extend ApplicationEvent")__		}_		try {_			this.applicationEventClassConstructor = applicationEventClass.getConstructor(Object.class)__		}_		catch (NoSuchMethodException ex) {_			throw new IllegalArgumentException("ApplicationEvent class [" +_					applicationEventClass.getName() + "] does not have the required Object constructor: " + ex)__		}_	};set,the,application,event,class,to,publish,p,the,event,class,b,must,b,have,a,constructor,with,a,single,code,object,argument,for,the,event,source,the,interceptor,will,pass,in,the,invoked,object,throws,illegal,argument,exception,if,the,supplied,code,class,is,code,null,or,if,it,is,not,an,code,application,event,subclass,or,if,it,does,not,expose,a,constructor,that,takes,a,single,code,object,argument;public,void,set,application,event,class,class,application,event,class,if,application,event,class,application,event,class,application,event,class,is,assignable,from,application,event,class,throw,new,illegal,argument,exception,application,event,class,needs,to,extend,application,event,try,this,application,event,class,constructor,application,event,class,get,constructor,object,class,catch,no,such,method,exception,ex,throw,new,illegal,argument,exception,application,event,class,application,event,class,get,name,does,not,have,the,required,object,constructor,ex
