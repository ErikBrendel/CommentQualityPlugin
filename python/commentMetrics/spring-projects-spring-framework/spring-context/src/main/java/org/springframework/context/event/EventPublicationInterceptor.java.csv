commented;modifiers;parameterAmount;loc;comment;code
true;public;1;13;/**  * Set the application event class to publish.  * <p>The event class <b>must</b> have a constructor with a single  * {@code Object} argument for the event source. The interceptor  * will pass in the invoked object.  * @throws IllegalArgumentException if the supplied {@code Class} is  * {@code null} or if it is not an {@code ApplicationEvent} subclass or  * if it does not expose a constructor that takes a single {@code Object} argument  */ ;/**  * Set the application event class to publish.  * <p>The event class <b>must</b> have a constructor with a single  * {@code Object} argument for the event source. The interceptor  * will pass in the invoked object.  * @throws IllegalArgumentException if the supplied {@code Class} is  * {@code null} or if it is not an {@code ApplicationEvent} subclass or  * if it does not expose a constructor that takes a single {@code Object} argument  */ public void setApplicationEventClass(Class<?> applicationEventClass) {     if (ApplicationEvent.class == applicationEventClass || !ApplicationEvent.class.isAssignableFrom(applicationEventClass)) {         throw new IllegalArgumentException("'applicationEventClass' needs to extend ApplicationEvent").     }     try {         this.applicationEventClassConstructor = applicationEventClass.getConstructor(Object.class).     } catch (NoSuchMethodException ex) {         throw new IllegalArgumentException("ApplicationEvent class [" + applicationEventClass.getName() + "] does not have the required Object constructor: " + ex).     } }
false;public;1;4;;@Override public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {     this.applicationEventPublisher = applicationEventPublisher. }
false;public;0;6;;@Override public void afterPropertiesSet() throws Exception {     if (this.applicationEventClassConstructor == null) {         throw new IllegalArgumentException("Property 'applicationEventClass' is required").     } }
false;public;1;13;;@Override public Object invoke(MethodInvocation invocation) throws Throwable {     Object retVal = invocation.proceed().     Assert.state(this.applicationEventClassConstructor != null, "No ApplicationEvent class set").     ApplicationEvent event = (ApplicationEvent) this.applicationEventClassConstructor.newInstance(invocation.getThis()).     Assert.state(this.applicationEventPublisher != null, "No ApplicationEventPublisher available").     this.applicationEventPublisher.publishEvent(event).     return retVal. }
