commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure the set of custom converter objects that should be added:  * implementing {@link org.springframework.core.convert.converter.Converter},  * {@link org.springframework.core.convert.converter.ConverterFactory},  * or {@link org.springframework.core.convert.converter.GenericConverter}.  */ ;/**  * Configure the set of custom converter objects that should be added:  * implementing {@link org.springframework.core.convert.converter.Converter},  * {@link org.springframework.core.convert.converter.ConverterFactory},  * or {@link org.springframework.core.convert.converter.GenericConverter}.  */ public void setConverters(Set<?> converters) {     this.converters = converters. }
false;public;0;5;;@Override public void afterPropertiesSet() {     this.conversionService = createConversionService().     ConversionServiceFactory.registerConverters(this.converters, this.conversionService). }
true;protected;0;3;/**  * Create the ConversionService instance returned by this factory bean.  * <p>Creates a simple {@link GenericConversionService} instance by default.  * Subclasses may override to customize the ConversionService instance that  * gets created.  */ ;/**  * Create the ConversionService instance returned by this factory bean.  * <p>Creates a simple {@link GenericConversionService} instance by default.  * Subclasses may override to customize the ConversionService instance that  * gets created.  */ protected GenericConversionService createConversionService() {     return new DefaultConversionService(). }
false;public;0;5;;// implementing FactoryBean @Override @Nullable public ConversionService getObject() {     return this.conversionService. }
false;public;0;4;;@Override public Class<? extends ConversionService> getObjectType() {     return GenericConversionService.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
