# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1328020251;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (configurers == null || configurers.isEmpty()) {_			return__		}__		if (configurers.size() > 1) {_			throw new IllegalStateException("only one AsyncConfigurer may exist")__		}__		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,configurers,null,configurers,is,empty,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1329142650;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (configurers == null || configurers.isEmpty()) {_			return__		}__		if (configurers.size() > 1) {_			throw new IllegalStateException("only one AsyncConfigurer may exist")__		}__		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,configurers,null,configurers,is,empty,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1356735495;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (configurers == null || configurers.isEmpty()) {_			return__		}__		if (configurers.size() > 1) {_			throw new IllegalStateException("only one AsyncConfigurer may exist")__		}__		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,configurers,null,configurers,is,empty,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1357119239;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (configurers == null || configurers.isEmpty()) {_			return__		}__		if (configurers.size() > 1) {_			throw new IllegalStateException("only one AsyncConfigurer may exist")__		}__		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,configurers,null,configurers,is,empty,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1368482696;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (configurers == null || configurers.isEmpty()) {_			return__		}__		if (configurers.size() > 1) {_			throw new IllegalStateException("only one AsyncConfigurer may exist")__		}__		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,configurers,null,configurers,is,empty,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1374665819;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (configurers == null || configurers.isEmpty()) {_			return__		}__		if (configurers.size() > 1) {_			throw new IllegalStateException("only one AsyncConfigurer may exist")__		}__		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,configurers,null,configurers,is,empty,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1385159394;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (CollectionUtils.isEmpty(configurers)) {_			return__		}_		if (configurers.size() > 1) {_			throw new IllegalStateException("Only one AsyncConfigurer may exist")__		}_		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,collection,utils,is,empty,configurers,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1425072582;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (CollectionUtils.isEmpty(configurers)) {_			return__		}_		if (configurers.size() > 1) {_			throw new IllegalStateException("Only one AsyncConfigurer may exist")__		}_		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__		this.exceptionHandler = configurer.getAsyncUncaughtExceptionHandler()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,collection,utils,is,empty,configurers,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor,this,exception,handler,configurer,get,async,uncaught,exception,handler
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1425330316;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (CollectionUtils.isEmpty(configurers)) {_			return__		}_		if (configurers.size() > 1) {_			throw new IllegalStateException("Only one AsyncConfigurer may exist")__		}_		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__		this.exceptionHandler = configurer.getAsyncUncaughtExceptionHandler()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,collection,utils,is,empty,configurers,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor,this,exception,handler,configurer,get,async,uncaught,exception,handler
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1498780456;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (CollectionUtils.isEmpty(configurers)) {_			return__		}_		if (configurers.size() > 1) {_			throw new IllegalStateException("Only one AsyncConfigurer may exist")__		}_		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__		this.exceptionHandler = configurer.getAsyncUncaughtExceptionHandler()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,collection,utils,is,empty,configurers,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor,this,exception,handler,configurer,get,async,uncaught,exception,handler
AbstractAsyncConfiguration -> @Autowired(required = false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1531589372;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required = false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (CollectionUtils.isEmpty(configurers)) {_			return__		}_		if (configurers.size() > 1) {_			throw new IllegalStateException("Only one AsyncConfigurer may exist")__		}_		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer::getAsyncExecutor__		this.exceptionHandler = configurer::getAsyncUncaughtExceptionHandler__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,collection,utils,is,empty,configurers,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor,this,exception,handler,configurer,get,async,uncaught,exception,handler
AbstractAsyncConfiguration -> @Autowired(required=false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1388887304;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required=false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (CollectionUtils.isEmpty(configurers)) {_			return__		}_		if (configurers.size() > 1) {_			throw new IllegalStateException("Only one AsyncConfigurer may exist")__		}_		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,collection,utils,is,empty,configurers,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor
AbstractAsyncConfiguration -> @Autowired(required=false) 	void setConfigurers(Collection<AsyncConfigurer> configurers);1396443880;Collect any {@link AsyncConfigurer} beans through autowiring.;@Autowired(required=false)_	void setConfigurers(Collection<AsyncConfigurer> configurers) {_		if (CollectionUtils.isEmpty(configurers)) {_			return__		}_		if (configurers.size() > 1) {_			throw new IllegalStateException("Only one AsyncConfigurer may exist")__		}_		AsyncConfigurer configurer = configurers.iterator().next()__		this.executor = configurer.getAsyncExecutor()__		this.exceptionHandler = configurer.getAsyncUncaughtExceptionHandler()__	};collect,any,link,async,configurer,beans,through,autowiring;autowired,required,false,void,set,configurers,collection,async,configurer,configurers,if,collection,utils,is,empty,configurers,return,if,configurers,size,1,throw,new,illegal,state,exception,only,one,async,configurer,may,exist,async,configurer,configurer,configurers,iterator,next,this,executor,configurer,get,async,executor,this,exception,handler,configurer,get,async,uncaught,exception,handler
AbstractAsyncConfiguration -> public abstract Object asyncAdvisor()_;1328020251;The component that will apply async execution advice to beans annotated with_the async annotation. Subclasses will provide either a BeanPostProcessor in_the case of proxy-based advice, or an AspectJ aspect if weaving is preferred.;public abstract Object asyncAdvisor()_;the,component,that,will,apply,async,execution,advice,to,beans,annotated,with,the,async,annotation,subclasses,will,provide,either,a,bean,post,processor,in,the,case,of,proxy,based,advice,or,an,aspect,j,aspect,if,weaving,is,preferred;public,abstract,object,async,advisor
AbstractAsyncConfiguration -> public abstract Object asyncAdvisor()_;1329142650;The component that will apply async execution advice to beans annotated with_the async annotation. Subclasses will provide either a BeanPostProcessor in_the case of proxy-based advice, or an AspectJ aspect if weaving is preferred.;public abstract Object asyncAdvisor()_;the,component,that,will,apply,async,execution,advice,to,beans,annotated,with,the,async,annotation,subclasses,will,provide,either,a,bean,post,processor,in,the,case,of,proxy,based,advice,or,an,aspect,j,aspect,if,weaving,is,preferred;public,abstract,object,async,advisor
AbstractAsyncConfiguration -> public abstract Object asyncAdvisor()_;1356735495;The component that will apply async execution advice to beans annotated with_the async annotation. Subclasses will provide either a BeanPostProcessor in_the case of proxy-based advice, or an AspectJ aspect if weaving is preferred.;public abstract Object asyncAdvisor()_;the,component,that,will,apply,async,execution,advice,to,beans,annotated,with,the,async,annotation,subclasses,will,provide,either,a,bean,post,processor,in,the,case,of,proxy,based,advice,or,an,aspect,j,aspect,if,weaving,is,preferred;public,abstract,object,async,advisor
AbstractAsyncConfiguration -> public abstract Object asyncAdvisor()_;1357119239;The component that will apply async execution advice to beans annotated with_the async annotation. Subclasses will provide either a BeanPostProcessor in_the case of proxy-based advice, or an AspectJ aspect if weaving is preferred.;public abstract Object asyncAdvisor()_;the,component,that,will,apply,async,execution,advice,to,beans,annotated,with,the,async,annotation,subclasses,will,provide,either,a,bean,post,processor,in,the,case,of,proxy,based,advice,or,an,aspect,j,aspect,if,weaving,is,preferred;public,abstract,object,async,advisor
AbstractAsyncConfiguration -> public abstract Object asyncAdvisor()_;1368482696;The component that will apply async execution advice to beans annotated with_the async annotation. Subclasses will provide either a BeanPostProcessor in_the case of proxy-based advice, or an AspectJ aspect if weaving is preferred.;public abstract Object asyncAdvisor()_;the,component,that,will,apply,async,execution,advice,to,beans,annotated,with,the,async,annotation,subclasses,will,provide,either,a,bean,post,processor,in,the,case,of,proxy,based,advice,or,an,aspect,j,aspect,if,weaving,is,preferred;public,abstract,object,async,advisor
