# id;timestamp;commentText;codeText;commentWords;codeWords
EventListener -> @AliasFor(attribute = "value") 	Class<?>[] classes() default {}_;1436359867;The event classes that this listener handles. When this attribute is specified_with one value, the method parameter may or may not be specified. When this_attribute is specified with more than one value, the method must not have a_parameter.;@AliasFor(attribute = "value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,when,this,attribute,is,specified,with,one,value,the,method,parameter,may,or,may,not,be,specified,when,this,attribute,is,specified,with,more,than,one,value,the,method,must,not,have,a,parameter;alias,for,attribute,value,class,classes,default
EventListener -> @AliasFor(attribute = "value") 	Class<?>[] classes() default {}_;1436360909;The event classes that this listener handles._<p>When this attribute is specified with one value, the method parameter_may or may not be specified. When this attribute is specified with more_than one value, the method must not have a parameter.;@AliasFor(attribute = "value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,when,this,attribute,is,specified,with,one,value,the,method,parameter,may,or,may,not,be,specified,when,this,attribute,is,specified,with,more,than,one,value,the,method,must,not,have,a,parameter;alias,for,attribute,value,class,classes,default
EventListener -> @AliasFor(attribute = "value") 	Class<?>[] classes() default {}_;1436361587;The event classes that this listener handles._<p>When this attribute is specified with one value, the method parameter_may or may not be specified. When this attribute is specified with more_than one value, the method must not have a parameter.;@AliasFor(attribute = "value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,when,this,attribute,is,specified,with,one,value,the,method,parameter,may,or,may,not,be,specified,when,this,attribute,is,specified,with,more,than,one,value,the,method,must,not,have,a,parameter;alias,for,attribute,value,class,classes,default
EventListener -> @AliasFor(attribute = "value") 	Class<?>[] classes() default {}_;1436371756;The event classes that this listener handles._<p>When this attribute is specified with one value, the method parameter_may or may not be specified. When this attribute is specified with more_than one value, the method must not have a parameter.;@AliasFor(attribute = "value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,when,this,attribute,is,specified,with,one,value,the,method,parameter,may,or,may,not,be,specified,when,this,attribute,is,specified,with,more,than,one,value,the,method,must,not,have,a,parameter;alias,for,attribute,value,class,classes,default
EventListener -> @AliasFor(attribute = "value") 	Class<?>[] classes() default {}_;1436373215;The event classes that this listener handles._<p>If this attribute is specified with a single value, the annotated_method may optionally accept a single parameter. However, if this_attribute is specified with multiple values, the annotated method_must <em>not</em> declare any parameters.;@AliasFor(attribute = "value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,if,this,attribute,is,specified,with,a,single,value,the,annotated,method,may,optionally,accept,a,single,parameter,however,if,this,attribute,is,specified,with,multiple,values,the,annotated,method,must,em,not,em,declare,any,parameters;alias,for,attribute,value,class,classes,default
EventListener -> @AliasFor(attribute = "value") 	Class<?>[] classes() default {}_;1436373608;The event classes that this listener handles._<p>If this attribute is specified with a single value, the annotated_method may optionally accept a single parameter. However, if this_attribute is specified with multiple values, the annotated method_must <em>not</em> declare any parameters.;@AliasFor(attribute = "value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,if,this,attribute,is,specified,with,a,single,value,the,annotated,method,may,optionally,accept,a,single,parameter,however,if,this,attribute,is,specified,with,multiple,values,the,annotated,method,must,em,not,em,declare,any,parameters;alias,for,attribute,value,class,classes,default
EventListener -> @AliasFor("classes") 	Class<?>[] value() default {}_;1438176426;Alias for {@link #classes}.;@AliasFor("classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,classes,class,value,default
EventListener -> @AliasFor("classes") 	Class<?>[] value() default {}_;1444217141;Alias for {@link #classes}.;@AliasFor("classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,classes,class,value,default
EventListener -> @AliasFor("classes") 	Class<?>[] value() default {}_;1449489104;Alias for {@link #classes}.;@AliasFor("classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,classes,class,value,default
EventListener -> @AliasFor("classes") 	Class<?>[] value() default {}_;1477410312;Alias for {@link #classes}.;@AliasFor("classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,classes,class,value,default
EventListener -> String condition() default ""_;1423555982;Spring Expression Language (SpEL) attribute used for conditioning the event handling._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,event,handling,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1429832293;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1436359867;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1436360909;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1436361587;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1436371756;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1436373215;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1436373608;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1438176426;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1444217141;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1449489104;Spring Expression Language (SpEL) attribute used for making the_event handling conditional._<p>Default is "", meaning the event is always handled.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled;string,condition,default
EventListener -> String condition() default ""_;1477410312;Spring Expression Language (SpEL) attribute used for making the_event handling conditional._<p>Default is {@code ""}, meaning the event is always handled._<p>The SpEL expression evaluates against a dedicated context that_provides the following meta-data:_<ul>_<li>{@code #root.event}, {@code #root.args} for_references to the {@link ApplicationEvent} and method arguments_respectively.</li>_<li>Method arguments can be accessed by index. For instance the_first argument can be accessed via {@code #root.args[0]}, {@code #p0}_or {@code #a0}. Arguments can also be accessed by name if that_information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,code,meaning,the,event,is,always,handled,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,event,code,root,args,for,references,to,the,link,application,event,and,method,arguments,respectively,li,li,method,arguments,can,be,accessed,by,index,for,instance,the,first,argument,can,be,accessed,via,code,root,args,0,code,p0,or,code,a0,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
EventListener -> @AliasFor(attribute = "classes") 	Class<?>[] value() default {}_;1436359867;Alias for {@link #classes()}.;@AliasFor(attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,attribute,classes,class,value,default
EventListener -> @AliasFor(attribute = "classes") 	Class<?>[] value() default {}_;1436360909;Alias for {@link #classes}.;@AliasFor(attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,attribute,classes,class,value,default
EventListener -> @AliasFor(attribute = "classes") 	Class<?>[] value() default {}_;1436361587;Alias for {@link #classes}.;@AliasFor(attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,attribute,classes,class,value,default
EventListener -> @AliasFor(attribute = "classes") 	Class<?>[] value() default {}_;1436371756;Alias for {@link #classes}.;@AliasFor(attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,attribute,classes,class,value,default
EventListener -> @AliasFor(attribute = "classes") 	Class<?>[] value() default {}_;1436373215;Alias for {@link #classes}.;@AliasFor(attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,attribute,classes,class,value,default
EventListener -> @AliasFor(attribute = "classes") 	Class<?>[] value() default {}_;1436373608;Alias for {@link #classes}.;@AliasFor(attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,attribute,classes,class,value,default
EventListener -> @AliasFor("value") 	Class<?>[] classes() default {}_;1438176426;The event classes that this listener handles._<p>If this attribute is specified with a single value, the annotated_method may optionally accept a single parameter. However, if this_attribute is specified with multiple values, the annotated method_must <em>not</em> declare any parameters.;@AliasFor("value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,if,this,attribute,is,specified,with,a,single,value,the,annotated,method,may,optionally,accept,a,single,parameter,however,if,this,attribute,is,specified,with,multiple,values,the,annotated,method,must,em,not,em,declare,any,parameters;alias,for,value,class,classes,default
EventListener -> @AliasFor("value") 	Class<?>[] classes() default {}_;1444217141;The event classes that this listener handles._<p>If this attribute is specified with a single value, the annotated_method may optionally accept a single parameter. However, if this_attribute is specified with multiple values, the annotated method_must <em>not</em> declare any parameters.;@AliasFor("value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,if,this,attribute,is,specified,with,a,single,value,the,annotated,method,may,optionally,accept,a,single,parameter,however,if,this,attribute,is,specified,with,multiple,values,the,annotated,method,must,em,not,em,declare,any,parameters;alias,for,value,class,classes,default
EventListener -> @AliasFor("value") 	Class<?>[] classes() default {}_;1449489104;The event classes that this listener handles._<p>If this attribute is specified with a single value, the_annotated method may optionally accept a single parameter._However, if this attribute is specified with multiple values,_the annotated method must <em>not</em> declare any parameters.;@AliasFor("value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,if,this,attribute,is,specified,with,a,single,value,the,annotated,method,may,optionally,accept,a,single,parameter,however,if,this,attribute,is,specified,with,multiple,values,the,annotated,method,must,em,not,em,declare,any,parameters;alias,for,value,class,classes,default
EventListener -> @AliasFor("value") 	Class<?>[] classes() default {}_;1477410312;The event classes that this listener handles._<p>If this attribute is specified with a single value, the_annotated method may optionally accept a single parameter._However, if this attribute is specified with multiple values,_the annotated method must <em>not</em> declare any parameters.;@AliasFor("value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,if,this,attribute,is,specified,with,a,single,value,the,annotated,method,may,optionally,accept,a,single,parameter,however,if,this,attribute,is,specified,with,multiple,values,the,annotated,method,must,em,not,em,declare,any,parameters;alias,for,value,class,classes,default
