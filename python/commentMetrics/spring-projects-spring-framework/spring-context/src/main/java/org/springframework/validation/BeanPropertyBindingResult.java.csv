commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;5;;@Override @Nullable public final Object getTarget() {     return this.target. }
true;public,final;0;10;/**  * Returns the {@link BeanWrapper} that this instance uses.  * Creates a new one if none existed before.  * @see #createBeanWrapper()  */ ;/**  * Returns the {@link BeanWrapper} that this instance uses.  * Creates a new one if none existed before.  * @see #createBeanWrapper()  */ @Override public final ConfigurablePropertyAccessor getPropertyAccessor() {     if (this.beanWrapper == null) {         this.beanWrapper = createBeanWrapper().         this.beanWrapper.setExtractOldValueForEditor(true).         this.beanWrapper.setAutoGrowNestedPaths(this.autoGrowNestedPaths).         this.beanWrapper.setAutoGrowCollectionLimit(this.autoGrowCollectionLimit).     }     return this.beanWrapper. }
true;protected;0;6;/**  * Create a new {@link BeanWrapper} for the underlying target object.  * @see #getTarget()  */ ;/**  * Create a new {@link BeanWrapper} for the underlying target object.  * @see #getTarget()  */ protected BeanWrapper createBeanWrapper() {     if (this.target == null) {         throw new IllegalStateException("Cannot access properties on null bean instance '" + getObjectName() + "'").     }     return PropertyAccessorFactory.forBeanPropertyAccess(this.target). }
