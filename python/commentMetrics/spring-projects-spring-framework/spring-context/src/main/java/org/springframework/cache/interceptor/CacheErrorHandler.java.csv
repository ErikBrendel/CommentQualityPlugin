commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Handle the given runtime exception thrown by the cache provider when  * retrieving an item with the specified {@code key}, possibly  * rethrowing it as a fatal exception.  * @param exception the exception thrown by the cache provider  * @param cache the cache  * @param key the key used to get the item  * @see Cache#get(Object)  */ ;/**  * Handle the given runtime exception thrown by the cache provider when  * retrieving an item with the specified {@code key}, possibly  * rethrowing it as a fatal exception.  * @param exception the exception thrown by the cache provider  * @param cache the cache  * @param key the key used to get the item  * @see Cache#get(Object)  */ void handleCacheGetError(RuntimeException exception, Cache cache, Object key).
true;;4;1;/**  * Handle the given runtime exception thrown by the cache provider when  * updating an item with the specified {@code key} and {@code value},  * possibly rethrowing it as a fatal exception.  * @param exception the exception thrown by the cache provider  * @param cache the cache  * @param key the key used to update the item  * @param value the value to associate with the key  * @see Cache#put(Object, Object)  */ ;/**  * Handle the given runtime exception thrown by the cache provider when  * updating an item with the specified {@code key} and {@code value},  * possibly rethrowing it as a fatal exception.  * @param exception the exception thrown by the cache provider  * @param cache the cache  * @param key the key used to update the item  * @param value the value to associate with the key  * @see Cache#put(Object, Object)  */ void handleCachePutError(RuntimeException exception, Cache cache, Object key, @Nullable Object value).
true;;3;1;/**  * Handle the given runtime exception thrown by the cache provider when  * clearing an item with the specified {@code key}, possibly rethrowing  * it as a fatal exception.  * @param exception the exception thrown by the cache provider  * @param cache the cache  * @param key the key used to clear the item  */ ;/**  * Handle the given runtime exception thrown by the cache provider when  * clearing an item with the specified {@code key}, possibly rethrowing  * it as a fatal exception.  * @param exception the exception thrown by the cache provider  * @param cache the cache  * @param key the key used to clear the item  */ void handleCacheEvictError(RuntimeException exception, Cache cache, Object key).
true;;2;1;/**  * Handle the given runtime exception thrown by the cache provider when  * clearing the specified {@link Cache}, possibly rethrowing it as a  * fatal exception.  * @param exception the exception thrown by the cache provider  * @param cache the cache to clear  */ ;/**  * Handle the given runtime exception thrown by the cache provider when  * clearing the specified {@link Cache}, possibly rethrowing it as a  * fatal exception.  * @param exception the exception thrown by the cache provider  * @param cache the cache to clear  */ void handleCacheClearError(RuntimeException exception, Cache cache).
