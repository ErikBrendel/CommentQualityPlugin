commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;10;/**  * This implementation resolves the code in the MessageSource.  * Returns {@code null} if the message could not be resolved.  */ ;/**  * This implementation resolves the code in the MessageSource.  * Returns {@code null} if the message could not be resolved.  */ @Override @Nullable protected Object handleGetObject(String key) {     try {         return this.messageSource.getMessage(key, null, this.locale).     } catch (NoSuchMessageException ex) {         return null.     } }
true;public;1;10;/**  * This implementation checks whether the target MessageSource can resolve  * a message for the given key, translating {@code NoSuchMessageException}  * accordingly. In contrast to ResourceBundle's default implementation in  * JDK 1.6, this does not rely on the capability to enumerate message keys.  */ ;/**  * This implementation checks whether the target MessageSource can resolve  * a message for the given key, translating {@code NoSuchMessageException}  * accordingly. In contrast to ResourceBundle's default implementation in  * JDK 1.6, this does not rely on the capability to enumerate message keys.  */ @Override public boolean containsKey(String key) {     try {         this.messageSource.getMessage(key, null, this.locale).         return true.     } catch (NoSuchMessageException ex) {         return false.     } }
true;public;0;4;/**  * This implementation throws {@code UnsupportedOperationException},  * as a MessageSource does not allow for enumerating the defined message codes.  */ ;/**  * This implementation throws {@code UnsupportedOperationException},  * as a MessageSource does not allow for enumerating the defined message codes.  */ @Override public Enumeration<String> getKeys() {     throw new UnsupportedOperationException("MessageSourceResourceBundle does not support enumerating its keys"). }
true;public;0;4;/**  * This implementation exposes the specified Locale for introspection  * through the standard {@code ResourceBundle.getLocale()} method.  */ ;/**  * This implementation exposes the specified Locale for introspection  * through the standard {@code ResourceBundle.getLocale()} method.  */ @Override public Locale getLocale() {     return this.locale. }
