commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether it should be allowed to override bean definitions by registering  * a different definition with the same name, automatically replacing the former.  * If not, an exception will be thrown. Default is "true".  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding  */ ;/**  * Set whether it should be allowed to override bean definitions by registering  * a different definition with the same name, automatically replacing the former.  * If not, an exception will be thrown. Default is "true".  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding  */ public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {     this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding. }
true;public;1;3;/**  * Set whether to allow circular references between beans - and automatically  * try to resolve them.  * <p>Default is "true". Turn this off to throw an exception when encountering  * a circular reference, disallowing them completely.  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences  */ ;/**  * Set whether to allow circular references between beans - and automatically  * try to resolve them.  * <p>Default is "true". Turn this off to throw an exception when encountering  * a circular reference, disallowing them completely.  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences  */ public void setAllowCircularReferences(boolean allowCircularReferences) {     this.allowCircularReferences = allowCircularReferences. }
true;protected,final;0;19;/**  * This implementation performs an actual refresh of this context's underlying  * bean factory, shutting down the previous bean factory (if any) and  * initializing a fresh bean factory for the next phase of the context's lifecycle.  */ ;/**  * This implementation performs an actual refresh of this context's underlying  * bean factory, shutting down the previous bean factory (if any) and  * initializing a fresh bean factory for the next phase of the context's lifecycle.  */ @Override protected final void refreshBeanFactory() throws BeansException {     if (hasBeanFactory()) {         destroyBeans().         closeBeanFactory().     }     try {         DefaultListableBeanFactory beanFactory = createBeanFactory().         beanFactory.setSerializationId(getId()).         customizeBeanFactory(beanFactory).         loadBeanDefinitions(beanFactory).         synchronized (this.beanFactoryMonitor) {             this.beanFactory = beanFactory.         }     } catch (IOException ex) {         throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex).     } }
false;protected;1;9;;@Override protected void cancelRefresh(BeansException ex) {     synchronized (this.beanFactoryMonitor) {         if (this.beanFactory != null) {             this.beanFactory.setSerializationId(null).         }     }     super.cancelRefresh(ex). }
false;protected,final;0;9;;@Override protected final void closeBeanFactory() {     synchronized (this.beanFactoryMonitor) {         if (this.beanFactory != null) {             this.beanFactory.setSerializationId(null).             this.beanFactory = null.         }     } }
true;protected,final;0;5;/**  * Determine whether this context currently holds a bean factory,  * i.e. has been refreshed at least once and not been closed yet.  */ ;/**  * Determine whether this context currently holds a bean factory,  * i.e. has been refreshed at least once and not been closed yet.  */ protected final boolean hasBeanFactory() {     synchronized (this.beanFactoryMonitor) {         return (this.beanFactory != null).     } }
false;public,final;0;10;;@Override public final ConfigurableListableBeanFactory getBeanFactory() {     synchronized (this.beanFactoryMonitor) {         if (this.beanFactory == null) {             throw new IllegalStateException("BeanFactory not initialized or already closed - " + "call 'refresh' before accessing beans via the ApplicationContext").         }         return this.beanFactory.     } }
true;protected;0;3;/**  * Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,  * {@link #getBeanFactory()} serves a strong assertion for an active context anyway.  */ ;/**  * Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,  * {@link #getBeanFactory()} serves a strong assertion for an active context anyway.  */ @Override protected void assertBeanFactoryActive() { }
true;protected;0;3;/**  * Create an internal bean factory for this context.  * Called for each {@link #refresh()} attempt.  * <p>The default implementation creates a  * {@link org.springframework.beans.factory.support.DefaultListableBeanFactory}  * with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this  * context's parent as parent bean factory. Can be overridden in subclasses,  * for example to customize DefaultListableBeanFactory's settings.  * @return the bean factory for this context  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping  */ ;/**  * Create an internal bean factory for this context.  * Called for each {@link #refresh()} attempt.  * <p>The default implementation creates a  * {@link org.springframework.beans.factory.support.DefaultListableBeanFactory}  * with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this  * context's parent as parent bean factory. Can be overridden in subclasses,  * for example to customize DefaultListableBeanFactory's settings.  * @return the bean factory for this context  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences  * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping  */ protected DefaultListableBeanFactory createBeanFactory() {     return new DefaultListableBeanFactory(getInternalParentBeanFactory()). }
true;protected;1;8;/**  * Customize the internal bean factory used by this context.  * Called for each {@link #refresh()} attempt.  * <p>The default implementation applies this context's  * {@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}  * and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,  * if specified. Can be overridden in subclasses to customize any of  * {@link DefaultListableBeanFactory}'s settings.  * @param beanFactory the newly created bean factory for this context  * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding  * @see DefaultListableBeanFactory#setAllowCircularReferences  * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping  * @see DefaultListableBeanFactory#setAllowEagerClassLoading  */ ;/**  * Customize the internal bean factory used by this context.  * Called for each {@link #refresh()} attempt.  * <p>The default implementation applies this context's  * {@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}  * and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,  * if specified. Can be overridden in subclasses to customize any of  * {@link DefaultListableBeanFactory}'s settings.  * @param beanFactory the newly created bean factory for this context  * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding  * @see DefaultListableBeanFactory#setAllowCircularReferences  * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping  * @see DefaultListableBeanFactory#setAllowEagerClassLoading  */ protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {     if (this.allowBeanDefinitionOverriding != null) {         beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding).     }     if (this.allowCircularReferences != null) {         beanFactory.setAllowCircularReferences(this.allowCircularReferences).     } }
true;protected,abstract;1;2;/**  * Load bean definitions into the given bean factory, typically through  * delegating to one or more bean definition readers.  * @param beanFactory the bean factory to load bean definitions into  * @throws BeansException if parsing of the bean definitions failed  * @throws IOException if loading of bean definition files failed  * @see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader  * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader  */ ;/**  * Load bean definitions into the given bean factory, typically through  * delegating to one or more bean definition readers.  * @param beanFactory the bean factory to load bean definitions into  * @throws BeansException if parsing of the bean definitions failed  * @throws IOException if loading of bean definition files failed  * @see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader  * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader  */ protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException.
