# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractRefreshableApplicationContext -> @Override 	protected void assertBeanFactoryActive();1368142320;Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,_{@link #getBeanFactory()} serves a strong assertion for an active context anyway.;@Override_	protected void assertBeanFactoryActive() {_	};overridden,to,turn,it,into,a,no,op,with,abstract,refreshable,application,context,link,get,bean,factory,serves,a,strong,assertion,for,an,active,context,anyway;override,protected,void,assert,bean,factory,active
AbstractRefreshableApplicationContext -> @Override 	protected void assertBeanFactoryActive();1377641679;Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,_{@link #getBeanFactory()} serves a strong assertion for an active context anyway.;@Override_	protected void assertBeanFactoryActive() {_	};overridden,to,turn,it,into,a,no,op,with,abstract,refreshable,application,context,link,get,bean,factory,serves,a,strong,assertion,for,an,active,context,anyway;override,protected,void,assert,bean,factory,active
AbstractRefreshableApplicationContext -> @Override 	protected void assertBeanFactoryActive();1496837955;Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,_{@link #getBeanFactory()} serves a strong assertion for an active context anyway.;@Override_	protected void assertBeanFactoryActive() {_	};overridden,to,turn,it,into,a,no,op,with,abstract,refreshable,application,context,link,get,bean,factory,serves,a,strong,assertion,for,an,active,context,anyway;override,protected,void,assert,bean,factory,active
AbstractRefreshableApplicationContext -> @Override 	protected void assertBeanFactoryActive();1498780456;Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,_{@link #getBeanFactory()} serves a strong assertion for an active context anyway.;@Override_	protected void assertBeanFactoryActive() {_	};overridden,to,turn,it,into,a,no,op,with,abstract,refreshable,application,context,link,get,bean,factory,serves,a,strong,assertion,for,an,active,context,anyway;override,protected,void,assert,bean,factory,active
AbstractRefreshableApplicationContext -> @Override 	protected void assertBeanFactoryActive();1530174524;Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,_{@link #getBeanFactory()} serves a strong assertion for an active context anyway.;@Override_	protected void assertBeanFactoryActive() {_	};overridden,to,turn,it,into,a,no,op,with,abstract,refreshable,application,context,link,get,bean,factory,serves,a,strong,assertion,for,an,active,context,anyway;override,protected,void,assert,bean,factory,active
AbstractRefreshableApplicationContext -> @Override 	protected void assertBeanFactoryActive();1530174524;Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,_{@link #getBeanFactory()} serves a strong assertion for an active context anyway.;@Override_	protected void assertBeanFactoryActive() {_	};overridden,to,turn,it,into,a,no,op,with,abstract,refreshable,application,context,link,get,bean,factory,serves,a,strong,assertion,for,an,active,context,anyway;override,protected,void,assert,bean,factory,active
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext(ApplicationContext parent);1328020251;Create a new AbstractRefreshableApplicationContext with the given parent context._@param parent the parent context;public AbstractRefreshableApplicationContext(ApplicationContext parent) {_		super(parent)__	};create,a,new,abstract,refreshable,application,context,with,the,given,parent,context,param,parent,the,parent,context;public,abstract,refreshable,application,context,application,context,parent,super,parent
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext(ApplicationContext parent);1356735495;Create a new AbstractRefreshableApplicationContext with the given parent context._@param parent the parent context;public AbstractRefreshableApplicationContext(ApplicationContext parent) {_		super(parent)__	};create,a,new,abstract,refreshable,application,context,with,the,given,parent,context,param,parent,the,parent,context;public,abstract,refreshable,application,context,application,context,parent,super,parent
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext(ApplicationContext parent);1368142320;Create a new AbstractRefreshableApplicationContext with the given parent context._@param parent the parent context;public AbstractRefreshableApplicationContext(ApplicationContext parent) {_		super(parent)__	};create,a,new,abstract,refreshable,application,context,with,the,given,parent,context,param,parent,the,parent,context;public,abstract,refreshable,application,context,application,context,parent,super,parent
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext(ApplicationContext parent);1377641679;Create a new AbstractRefreshableApplicationContext with the given parent context._@param parent the parent context;public AbstractRefreshableApplicationContext(ApplicationContext parent) {_		super(parent)__	};create,a,new,abstract,refreshable,application,context,with,the,given,parent,context,param,parent,the,parent,context;public,abstract,refreshable,application,context,application,context,parent,super,parent
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext(@Nullable ApplicationContext parent);1496837955;Create a new AbstractRefreshableApplicationContext with the given parent context._@param parent the parent context;public AbstractRefreshableApplicationContext(@Nullable ApplicationContext parent) {_		super(parent)__	};create,a,new,abstract,refreshable,application,context,with,the,given,parent,context,param,parent,the,parent,context;public,abstract,refreshable,application,context,nullable,application,context,parent,super,parent
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext(@Nullable ApplicationContext parent);1498780456;Create a new AbstractRefreshableApplicationContext with the given parent context._@param parent the parent context;public AbstractRefreshableApplicationContext(@Nullable ApplicationContext parent) {_		super(parent)__	};create,a,new,abstract,refreshable,application,context,with,the,given,parent,context,param,parent,the,parent,context;public,abstract,refreshable,application,context,nullable,application,context,parent,super,parent
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext(@Nullable ApplicationContext parent);1530174524;Create a new AbstractRefreshableApplicationContext with the given parent context._@param parent the parent context;public AbstractRefreshableApplicationContext(@Nullable ApplicationContext parent) {_		super(parent)__	};create,a,new,abstract,refreshable,application,context,with,the,given,parent,context,param,parent,the,parent,context;public,abstract,refreshable,application,context,nullable,application,context,parent,super,parent
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext(@Nullable ApplicationContext parent);1530174524;Create a new AbstractRefreshableApplicationContext with the given parent context._@param parent the parent context;public AbstractRefreshableApplicationContext(@Nullable ApplicationContext parent) {_		super(parent)__	};create,a,new,abstract,refreshable,application,context,with,the,given,parent,context,param,parent,the,parent,context;public,abstract,refreshable,application,context,nullable,application,context,parent,super,parent
AbstractRefreshableApplicationContext -> protected DefaultListableBeanFactory createBeanFactory();1328020251;Create an internal bean factory for this context._Called for each {@link #refresh()} attempt._<p>The default implementation creates a_{@link org.springframework.beans.factory.support.DefaultListableBeanFactory}_with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this_context's parent as parent bean factory. Can be overridden in subclasses,_for example to customize DefaultListableBeanFactory's settings._@return the bean factory for this context_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping;protected DefaultListableBeanFactory createBeanFactory() {_		return new DefaultListableBeanFactory(getInternalParentBeanFactory())__	};create,an,internal,bean,factory,for,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,creates,a,link,org,springframework,beans,factory,support,default,listable,bean,factory,with,the,linkplain,get,internal,parent,bean,factory,internal,bean,factory,of,this,context,s,parent,as,parent,bean,factory,can,be,overridden,in,subclasses,for,example,to,customize,default,listable,bean,factory,s,settings,return,the,bean,factory,for,this,context,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,eager,class,loading,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping;protected,default,listable,bean,factory,create,bean,factory,return,new,default,listable,bean,factory,get,internal,parent,bean,factory
AbstractRefreshableApplicationContext -> protected DefaultListableBeanFactory createBeanFactory();1356735495;Create an internal bean factory for this context._Called for each {@link #refresh()} attempt._<p>The default implementation creates a_{@link org.springframework.beans.factory.support.DefaultListableBeanFactory}_with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this_context's parent as parent bean factory. Can be overridden in subclasses,_for example to customize DefaultListableBeanFactory's settings._@return the bean factory for this context_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping;protected DefaultListableBeanFactory createBeanFactory() {_		return new DefaultListableBeanFactory(getInternalParentBeanFactory())__	};create,an,internal,bean,factory,for,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,creates,a,link,org,springframework,beans,factory,support,default,listable,bean,factory,with,the,linkplain,get,internal,parent,bean,factory,internal,bean,factory,of,this,context,s,parent,as,parent,bean,factory,can,be,overridden,in,subclasses,for,example,to,customize,default,listable,bean,factory,s,settings,return,the,bean,factory,for,this,context,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,eager,class,loading,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping;protected,default,listable,bean,factory,create,bean,factory,return,new,default,listable,bean,factory,get,internal,parent,bean,factory
AbstractRefreshableApplicationContext -> protected DefaultListableBeanFactory createBeanFactory();1368142320;Create an internal bean factory for this context._Called for each {@link #refresh()} attempt._<p>The default implementation creates a_{@link org.springframework.beans.factory.support.DefaultListableBeanFactory}_with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this_context's parent as parent bean factory. Can be overridden in subclasses,_for example to customize DefaultListableBeanFactory's settings._@return the bean factory for this context_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping;protected DefaultListableBeanFactory createBeanFactory() {_		return new DefaultListableBeanFactory(getInternalParentBeanFactory())__	};create,an,internal,bean,factory,for,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,creates,a,link,org,springframework,beans,factory,support,default,listable,bean,factory,with,the,linkplain,get,internal,parent,bean,factory,internal,bean,factory,of,this,context,s,parent,as,parent,bean,factory,can,be,overridden,in,subclasses,for,example,to,customize,default,listable,bean,factory,s,settings,return,the,bean,factory,for,this,context,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,eager,class,loading,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping;protected,default,listable,bean,factory,create,bean,factory,return,new,default,listable,bean,factory,get,internal,parent,bean,factory
AbstractRefreshableApplicationContext -> protected DefaultListableBeanFactory createBeanFactory();1377641679;Create an internal bean factory for this context._Called for each {@link #refresh()} attempt._<p>The default implementation creates a_{@link org.springframework.beans.factory.support.DefaultListableBeanFactory}_with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this_context's parent as parent bean factory. Can be overridden in subclasses,_for example to customize DefaultListableBeanFactory's settings._@return the bean factory for this context_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping;protected DefaultListableBeanFactory createBeanFactory() {_		return new DefaultListableBeanFactory(getInternalParentBeanFactory())__	};create,an,internal,bean,factory,for,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,creates,a,link,org,springframework,beans,factory,support,default,listable,bean,factory,with,the,linkplain,get,internal,parent,bean,factory,internal,bean,factory,of,this,context,s,parent,as,parent,bean,factory,can,be,overridden,in,subclasses,for,example,to,customize,default,listable,bean,factory,s,settings,return,the,bean,factory,for,this,context,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,eager,class,loading,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping;protected,default,listable,bean,factory,create,bean,factory,return,new,default,listable,bean,factory,get,internal,parent,bean,factory
AbstractRefreshableApplicationContext -> protected DefaultListableBeanFactory createBeanFactory();1496837955;Create an internal bean factory for this context._Called for each {@link #refresh()} attempt._<p>The default implementation creates a_{@link org.springframework.beans.factory.support.DefaultListableBeanFactory}_with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this_context's parent as parent bean factory. Can be overridden in subclasses,_for example to customize DefaultListableBeanFactory's settings._@return the bean factory for this context_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping;protected DefaultListableBeanFactory createBeanFactory() {_		return new DefaultListableBeanFactory(getInternalParentBeanFactory())__	};create,an,internal,bean,factory,for,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,creates,a,link,org,springframework,beans,factory,support,default,listable,bean,factory,with,the,linkplain,get,internal,parent,bean,factory,internal,bean,factory,of,this,context,s,parent,as,parent,bean,factory,can,be,overridden,in,subclasses,for,example,to,customize,default,listable,bean,factory,s,settings,return,the,bean,factory,for,this,context,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,eager,class,loading,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping;protected,default,listable,bean,factory,create,bean,factory,return,new,default,listable,bean,factory,get,internal,parent,bean,factory
AbstractRefreshableApplicationContext -> protected DefaultListableBeanFactory createBeanFactory();1498780456;Create an internal bean factory for this context._Called for each {@link #refresh()} attempt._<p>The default implementation creates a_{@link org.springframework.beans.factory.support.DefaultListableBeanFactory}_with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this_context's parent as parent bean factory. Can be overridden in subclasses,_for example to customize DefaultListableBeanFactory's settings._@return the bean factory for this context_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping;protected DefaultListableBeanFactory createBeanFactory() {_		return new DefaultListableBeanFactory(getInternalParentBeanFactory())__	};create,an,internal,bean,factory,for,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,creates,a,link,org,springframework,beans,factory,support,default,listable,bean,factory,with,the,linkplain,get,internal,parent,bean,factory,internal,bean,factory,of,this,context,s,parent,as,parent,bean,factory,can,be,overridden,in,subclasses,for,example,to,customize,default,listable,bean,factory,s,settings,return,the,bean,factory,for,this,context,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,eager,class,loading,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping;protected,default,listable,bean,factory,create,bean,factory,return,new,default,listable,bean,factory,get,internal,parent,bean,factory
AbstractRefreshableApplicationContext -> protected DefaultListableBeanFactory createBeanFactory();1530174524;Create an internal bean factory for this context._Called for each {@link #refresh()} attempt._<p>The default implementation creates a_{@link org.springframework.beans.factory.support.DefaultListableBeanFactory}_with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this_context's parent as parent bean factory. Can be overridden in subclasses,_for example to customize DefaultListableBeanFactory's settings._@return the bean factory for this context_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping;protected DefaultListableBeanFactory createBeanFactory() {_		return new DefaultListableBeanFactory(getInternalParentBeanFactory())__	};create,an,internal,bean,factory,for,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,creates,a,link,org,springframework,beans,factory,support,default,listable,bean,factory,with,the,linkplain,get,internal,parent,bean,factory,internal,bean,factory,of,this,context,s,parent,as,parent,bean,factory,can,be,overridden,in,subclasses,for,example,to,customize,default,listable,bean,factory,s,settings,return,the,bean,factory,for,this,context,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,eager,class,loading,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping;protected,default,listable,bean,factory,create,bean,factory,return,new,default,listable,bean,factory,get,internal,parent,bean,factory
AbstractRefreshableApplicationContext -> protected DefaultListableBeanFactory createBeanFactory();1530174524;Create an internal bean factory for this context._Called for each {@link #refresh()} attempt._<p>The default implementation creates a_{@link org.springframework.beans.factory.support.DefaultListableBeanFactory}_with the {@linkplain #getInternalParentBeanFactory() internal bean factory} of this_context's parent as parent bean factory. Can be overridden in subclasses,_for example to customize DefaultListableBeanFactory's settings._@return the bean factory for this context_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowEagerClassLoading_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences_@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping;protected DefaultListableBeanFactory createBeanFactory() {_		return new DefaultListableBeanFactory(getInternalParentBeanFactory())__	};create,an,internal,bean,factory,for,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,creates,a,link,org,springframework,beans,factory,support,default,listable,bean,factory,with,the,linkplain,get,internal,parent,bean,factory,internal,bean,factory,of,this,context,s,parent,as,parent,bean,factory,can,be,overridden,in,subclasses,for,example,to,customize,default,listable,bean,factory,s,settings,return,the,bean,factory,for,this,context,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,eager,class,loading,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping;protected,default,listable,bean,factory,create,bean,factory,return,new,default,listable,bean,factory,get,internal,parent,bean,factory
AbstractRefreshableApplicationContext -> protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory);1328020251;Customize the internal bean factory used by this context._Called for each {@link #refresh()} attempt._<p>The default implementation applies this context's_{@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}_and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,_if specified. Can be overridden in subclasses to customize any of_{@link DefaultListableBeanFactory}'s settings._@param beanFactory the newly created bean factory for this context_@see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see DefaultListableBeanFactory#setAllowCircularReferences_@see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping_@see DefaultListableBeanFactory#setAllowEagerClassLoading;protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {_		if (this.allowBeanDefinitionOverriding != null) {_			beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding)__		}_		if (this.allowCircularReferences != null) {_			beanFactory.setAllowCircularReferences(this.allowCircularReferences)__		}_		beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())__	};customize,the,internal,bean,factory,used,by,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,applies,this,context,s,linkplain,set,allow,bean,definition,overriding,allow,bean,definition,overriding,and,linkplain,set,allow,circular,references,allow,circular,references,settings,if,specified,can,be,overridden,in,subclasses,to,customize,any,of,link,default,listable,bean,factory,s,settings,param,bean,factory,the,newly,created,bean,factory,for,this,context,see,default,listable,bean,factory,set,allow,bean,definition,overriding,see,default,listable,bean,factory,set,allow,circular,references,see,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping,see,default,listable,bean,factory,set,allow,eager,class,loading;protected,void,customize,bean,factory,default,listable,bean,factory,bean,factory,if,this,allow,bean,definition,overriding,null,bean,factory,set,allow,bean,definition,overriding,this,allow,bean,definition,overriding,if,this,allow,circular,references,null,bean,factory,set,allow,circular,references,this,allow,circular,references,bean,factory,set,autowire,candidate,resolver,new,qualifier,annotation,autowire,candidate,resolver
AbstractRefreshableApplicationContext -> protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory);1356735495;Customize the internal bean factory used by this context._Called for each {@link #refresh()} attempt._<p>The default implementation applies this context's_{@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}_and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,_if specified. Can be overridden in subclasses to customize any of_{@link DefaultListableBeanFactory}'s settings._@param beanFactory the newly created bean factory for this context_@see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see DefaultListableBeanFactory#setAllowCircularReferences_@see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping_@see DefaultListableBeanFactory#setAllowEagerClassLoading;protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {_		if (this.allowBeanDefinitionOverriding != null) {_			beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding)__		}_		if (this.allowCircularReferences != null) {_			beanFactory.setAllowCircularReferences(this.allowCircularReferences)__		}_		beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())__	};customize,the,internal,bean,factory,used,by,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,applies,this,context,s,linkplain,set,allow,bean,definition,overriding,allow,bean,definition,overriding,and,linkplain,set,allow,circular,references,allow,circular,references,settings,if,specified,can,be,overridden,in,subclasses,to,customize,any,of,link,default,listable,bean,factory,s,settings,param,bean,factory,the,newly,created,bean,factory,for,this,context,see,default,listable,bean,factory,set,allow,bean,definition,overriding,see,default,listable,bean,factory,set,allow,circular,references,see,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping,see,default,listable,bean,factory,set,allow,eager,class,loading;protected,void,customize,bean,factory,default,listable,bean,factory,bean,factory,if,this,allow,bean,definition,overriding,null,bean,factory,set,allow,bean,definition,overriding,this,allow,bean,definition,overriding,if,this,allow,circular,references,null,bean,factory,set,allow,circular,references,this,allow,circular,references,bean,factory,set,autowire,candidate,resolver,new,qualifier,annotation,autowire,candidate,resolver
AbstractRefreshableApplicationContext -> protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory);1368142320;Customize the internal bean factory used by this context._Called for each {@link #refresh()} attempt._<p>The default implementation applies this context's_{@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}_and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,_if specified. Can be overridden in subclasses to customize any of_{@link DefaultListableBeanFactory}'s settings._@param beanFactory the newly created bean factory for this context_@see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see DefaultListableBeanFactory#setAllowCircularReferences_@see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping_@see DefaultListableBeanFactory#setAllowEagerClassLoading;protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {_		if (this.allowBeanDefinitionOverriding != null) {_			beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding)__		}_		if (this.allowCircularReferences != null) {_			beanFactory.setAllowCircularReferences(this.allowCircularReferences)__		}_		beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())__	};customize,the,internal,bean,factory,used,by,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,applies,this,context,s,linkplain,set,allow,bean,definition,overriding,allow,bean,definition,overriding,and,linkplain,set,allow,circular,references,allow,circular,references,settings,if,specified,can,be,overridden,in,subclasses,to,customize,any,of,link,default,listable,bean,factory,s,settings,param,bean,factory,the,newly,created,bean,factory,for,this,context,see,default,listable,bean,factory,set,allow,bean,definition,overriding,see,default,listable,bean,factory,set,allow,circular,references,see,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping,see,default,listable,bean,factory,set,allow,eager,class,loading;protected,void,customize,bean,factory,default,listable,bean,factory,bean,factory,if,this,allow,bean,definition,overriding,null,bean,factory,set,allow,bean,definition,overriding,this,allow,bean,definition,overriding,if,this,allow,circular,references,null,bean,factory,set,allow,circular,references,this,allow,circular,references,bean,factory,set,autowire,candidate,resolver,new,qualifier,annotation,autowire,candidate,resolver
AbstractRefreshableApplicationContext -> protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory);1377641679;Customize the internal bean factory used by this context._Called for each {@link #refresh()} attempt._<p>The default implementation applies this context's_{@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}_and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,_if specified. Can be overridden in subclasses to customize any of_{@link DefaultListableBeanFactory}'s settings._@param beanFactory the newly created bean factory for this context_@see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see DefaultListableBeanFactory#setAllowCircularReferences_@see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping_@see DefaultListableBeanFactory#setAllowEagerClassLoading;protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {_		if (this.allowBeanDefinitionOverriding != null) {_			beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding)__		}_		if (this.allowCircularReferences != null) {_			beanFactory.setAllowCircularReferences(this.allowCircularReferences)__		}_	};customize,the,internal,bean,factory,used,by,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,applies,this,context,s,linkplain,set,allow,bean,definition,overriding,allow,bean,definition,overriding,and,linkplain,set,allow,circular,references,allow,circular,references,settings,if,specified,can,be,overridden,in,subclasses,to,customize,any,of,link,default,listable,bean,factory,s,settings,param,bean,factory,the,newly,created,bean,factory,for,this,context,see,default,listable,bean,factory,set,allow,bean,definition,overriding,see,default,listable,bean,factory,set,allow,circular,references,see,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping,see,default,listable,bean,factory,set,allow,eager,class,loading;protected,void,customize,bean,factory,default,listable,bean,factory,bean,factory,if,this,allow,bean,definition,overriding,null,bean,factory,set,allow,bean,definition,overriding,this,allow,bean,definition,overriding,if,this,allow,circular,references,null,bean,factory,set,allow,circular,references,this,allow,circular,references
AbstractRefreshableApplicationContext -> protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory);1496837955;Customize the internal bean factory used by this context._Called for each {@link #refresh()} attempt._<p>The default implementation applies this context's_{@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}_and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,_if specified. Can be overridden in subclasses to customize any of_{@link DefaultListableBeanFactory}'s settings._@param beanFactory the newly created bean factory for this context_@see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see DefaultListableBeanFactory#setAllowCircularReferences_@see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping_@see DefaultListableBeanFactory#setAllowEagerClassLoading;protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {_		if (this.allowBeanDefinitionOverriding != null) {_			beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding)__		}_		if (this.allowCircularReferences != null) {_			beanFactory.setAllowCircularReferences(this.allowCircularReferences)__		}_	};customize,the,internal,bean,factory,used,by,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,applies,this,context,s,linkplain,set,allow,bean,definition,overriding,allow,bean,definition,overriding,and,linkplain,set,allow,circular,references,allow,circular,references,settings,if,specified,can,be,overridden,in,subclasses,to,customize,any,of,link,default,listable,bean,factory,s,settings,param,bean,factory,the,newly,created,bean,factory,for,this,context,see,default,listable,bean,factory,set,allow,bean,definition,overriding,see,default,listable,bean,factory,set,allow,circular,references,see,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping,see,default,listable,bean,factory,set,allow,eager,class,loading;protected,void,customize,bean,factory,default,listable,bean,factory,bean,factory,if,this,allow,bean,definition,overriding,null,bean,factory,set,allow,bean,definition,overriding,this,allow,bean,definition,overriding,if,this,allow,circular,references,null,bean,factory,set,allow,circular,references,this,allow,circular,references
AbstractRefreshableApplicationContext -> protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory);1498780456;Customize the internal bean factory used by this context._Called for each {@link #refresh()} attempt._<p>The default implementation applies this context's_{@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}_and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,_if specified. Can be overridden in subclasses to customize any of_{@link DefaultListableBeanFactory}'s settings._@param beanFactory the newly created bean factory for this context_@see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see DefaultListableBeanFactory#setAllowCircularReferences_@see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping_@see DefaultListableBeanFactory#setAllowEagerClassLoading;protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {_		if (this.allowBeanDefinitionOverriding != null) {_			beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding)__		}_		if (this.allowCircularReferences != null) {_			beanFactory.setAllowCircularReferences(this.allowCircularReferences)__		}_	};customize,the,internal,bean,factory,used,by,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,applies,this,context,s,linkplain,set,allow,bean,definition,overriding,allow,bean,definition,overriding,and,linkplain,set,allow,circular,references,allow,circular,references,settings,if,specified,can,be,overridden,in,subclasses,to,customize,any,of,link,default,listable,bean,factory,s,settings,param,bean,factory,the,newly,created,bean,factory,for,this,context,see,default,listable,bean,factory,set,allow,bean,definition,overriding,see,default,listable,bean,factory,set,allow,circular,references,see,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping,see,default,listable,bean,factory,set,allow,eager,class,loading;protected,void,customize,bean,factory,default,listable,bean,factory,bean,factory,if,this,allow,bean,definition,overriding,null,bean,factory,set,allow,bean,definition,overriding,this,allow,bean,definition,overriding,if,this,allow,circular,references,null,bean,factory,set,allow,circular,references,this,allow,circular,references
AbstractRefreshableApplicationContext -> protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory);1530174524;Customize the internal bean factory used by this context._Called for each {@link #refresh()} attempt._<p>The default implementation applies this context's_{@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}_and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,_if specified. Can be overridden in subclasses to customize any of_{@link DefaultListableBeanFactory}'s settings._@param beanFactory the newly created bean factory for this context_@see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see DefaultListableBeanFactory#setAllowCircularReferences_@see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping_@see DefaultListableBeanFactory#setAllowEagerClassLoading;protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {_		if (this.allowBeanDefinitionOverriding != null) {_			beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding)__		}_		if (this.allowCircularReferences != null) {_			beanFactory.setAllowCircularReferences(this.allowCircularReferences)__		}_	};customize,the,internal,bean,factory,used,by,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,applies,this,context,s,linkplain,set,allow,bean,definition,overriding,allow,bean,definition,overriding,and,linkplain,set,allow,circular,references,allow,circular,references,settings,if,specified,can,be,overridden,in,subclasses,to,customize,any,of,link,default,listable,bean,factory,s,settings,param,bean,factory,the,newly,created,bean,factory,for,this,context,see,default,listable,bean,factory,set,allow,bean,definition,overriding,see,default,listable,bean,factory,set,allow,circular,references,see,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping,see,default,listable,bean,factory,set,allow,eager,class,loading;protected,void,customize,bean,factory,default,listable,bean,factory,bean,factory,if,this,allow,bean,definition,overriding,null,bean,factory,set,allow,bean,definition,overriding,this,allow,bean,definition,overriding,if,this,allow,circular,references,null,bean,factory,set,allow,circular,references,this,allow,circular,references
AbstractRefreshableApplicationContext -> protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory);1530174524;Customize the internal bean factory used by this context._Called for each {@link #refresh()} attempt._<p>The default implementation applies this context's_{@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}_and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,_if specified. Can be overridden in subclasses to customize any of_{@link DefaultListableBeanFactory}'s settings._@param beanFactory the newly created bean factory for this context_@see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding_@see DefaultListableBeanFactory#setAllowCircularReferences_@see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping_@see DefaultListableBeanFactory#setAllowEagerClassLoading;protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {_		if (this.allowBeanDefinitionOverriding != null) {_			beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding)__		}_		if (this.allowCircularReferences != null) {_			beanFactory.setAllowCircularReferences(this.allowCircularReferences)__		}_	};customize,the,internal,bean,factory,used,by,this,context,called,for,each,link,refresh,attempt,p,the,default,implementation,applies,this,context,s,linkplain,set,allow,bean,definition,overriding,allow,bean,definition,overriding,and,linkplain,set,allow,circular,references,allow,circular,references,settings,if,specified,can,be,overridden,in,subclasses,to,customize,any,of,link,default,listable,bean,factory,s,settings,param,bean,factory,the,newly,created,bean,factory,for,this,context,see,default,listable,bean,factory,set,allow,bean,definition,overriding,see,default,listable,bean,factory,set,allow,circular,references,see,default,listable,bean,factory,set,allow,raw,injection,despite,wrapping,see,default,listable,bean,factory,set,allow,eager,class,loading;protected,void,customize,bean,factory,default,listable,bean,factory,bean,factory,if,this,allow,bean,definition,overriding,null,bean,factory,set,allow,bean,definition,overriding,this,allow,bean,definition,overriding,if,this,allow,circular,references,null,bean,factory,set,allow,circular,references,this,allow,circular,references
AbstractRefreshableApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1328020251;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.allowCircularReferences = allowCircularReferences__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,allow,circular,references,allow,circular,references
AbstractRefreshableApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1356735495;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.allowCircularReferences = allowCircularReferences__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,allow,circular,references,allow,circular,references
AbstractRefreshableApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1368142320;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.allowCircularReferences = allowCircularReferences__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,allow,circular,references,allow,circular,references
AbstractRefreshableApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1377641679;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.allowCircularReferences = allowCircularReferences__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,allow,circular,references,allow,circular,references
AbstractRefreshableApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1496837955;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.allowCircularReferences = allowCircularReferences__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,allow,circular,references,allow,circular,references
AbstractRefreshableApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1498780456;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.allowCircularReferences = allowCircularReferences__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,allow,circular,references,allow,circular,references
AbstractRefreshableApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1530174524;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.allowCircularReferences = allowCircularReferences__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,allow,circular,references,allow,circular,references
AbstractRefreshableApplicationContext -> public void setAllowCircularReferences(boolean allowCircularReferences);1530174524;Set whether to allow circular references between beans - and automatically_try to resolve them._<p>Default is "true". Turn this off to throw an exception when encountering_a circular reference, disallowing them completely._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences;public void setAllowCircularReferences(boolean allowCircularReferences) {_		this.allowCircularReferences = allowCircularReferences__	};set,whether,to,allow,circular,references,between,beans,and,automatically,try,to,resolve,them,p,default,is,true,turn,this,off,to,throw,an,exception,when,encountering,a,circular,reference,disallowing,them,completely,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,circular,references;public,void,set,allow,circular,references,boolean,allow,circular,references,this,allow,circular,references,allow,circular,references
AbstractRefreshableApplicationContext -> @Override 	protected final void refreshBeanFactory() throws BeansException;1328020251;This implementation performs an actual refresh of this context's underlying_bean factory, shutting down the previous bean factory (if any) and_initializing a fresh bean factory for the next phase of the context's lifecycle.;@Override_	protected final void refreshBeanFactory() throws BeansException {_		if (hasBeanFactory()) {_			destroyBeans()__			closeBeanFactory()__		}_		try {_			DefaultListableBeanFactory beanFactory = createBeanFactory()__			beanFactory.setSerializationId(getId())__			customizeBeanFactory(beanFactory)__			loadBeanDefinitions(beanFactory)__			synchronized (this.beanFactoryMonitor) {_				this.beanFactory = beanFactory__			}_		}_		catch (IOException ex) {_			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex)__		}_	};this,implementation,performs,an,actual,refresh,of,this,context,s,underlying,bean,factory,shutting,down,the,previous,bean,factory,if,any,and,initializing,a,fresh,bean,factory,for,the,next,phase,of,the,context,s,lifecycle;override,protected,final,void,refresh,bean,factory,throws,beans,exception,if,has,bean,factory,destroy,beans,close,bean,factory,try,default,listable,bean,factory,bean,factory,create,bean,factory,bean,factory,set,serialization,id,get,id,customize,bean,factory,bean,factory,load,bean,definitions,bean,factory,synchronized,this,bean,factory,monitor,this,bean,factory,bean,factory,catch,ioexception,ex,throw,new,application,context,exception,i,o,error,parsing,bean,definition,source,for,get,display,name,ex
AbstractRefreshableApplicationContext -> @Override 	protected final void refreshBeanFactory() throws BeansException;1356735495;This implementation performs an actual refresh of this context's underlying_bean factory, shutting down the previous bean factory (if any) and_initializing a fresh bean factory for the next phase of the context's lifecycle.;@Override_	protected final void refreshBeanFactory() throws BeansException {_		if (hasBeanFactory()) {_			destroyBeans()__			closeBeanFactory()__		}_		try {_			DefaultListableBeanFactory beanFactory = createBeanFactory()__			beanFactory.setSerializationId(getId())__			customizeBeanFactory(beanFactory)__			loadBeanDefinitions(beanFactory)__			synchronized (this.beanFactoryMonitor) {_				this.beanFactory = beanFactory__			}_		}_		catch (IOException ex) {_			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex)__		}_	};this,implementation,performs,an,actual,refresh,of,this,context,s,underlying,bean,factory,shutting,down,the,previous,bean,factory,if,any,and,initializing,a,fresh,bean,factory,for,the,next,phase,of,the,context,s,lifecycle;override,protected,final,void,refresh,bean,factory,throws,beans,exception,if,has,bean,factory,destroy,beans,close,bean,factory,try,default,listable,bean,factory,bean,factory,create,bean,factory,bean,factory,set,serialization,id,get,id,customize,bean,factory,bean,factory,load,bean,definitions,bean,factory,synchronized,this,bean,factory,monitor,this,bean,factory,bean,factory,catch,ioexception,ex,throw,new,application,context,exception,i,o,error,parsing,bean,definition,source,for,get,display,name,ex
AbstractRefreshableApplicationContext -> @Override 	protected final void refreshBeanFactory() throws BeansException;1368142320;This implementation performs an actual refresh of this context's underlying_bean factory, shutting down the previous bean factory (if any) and_initializing a fresh bean factory for the next phase of the context's lifecycle.;@Override_	protected final void refreshBeanFactory() throws BeansException {_		if (hasBeanFactory()) {_			destroyBeans()__			closeBeanFactory()__		}_		try {_			DefaultListableBeanFactory beanFactory = createBeanFactory()__			beanFactory.setSerializationId(getId())__			customizeBeanFactory(beanFactory)__			loadBeanDefinitions(beanFactory)__			synchronized (this.beanFactoryMonitor) {_				this.beanFactory = beanFactory__			}_		}_		catch (IOException ex) {_			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex)__		}_	};this,implementation,performs,an,actual,refresh,of,this,context,s,underlying,bean,factory,shutting,down,the,previous,bean,factory,if,any,and,initializing,a,fresh,bean,factory,for,the,next,phase,of,the,context,s,lifecycle;override,protected,final,void,refresh,bean,factory,throws,beans,exception,if,has,bean,factory,destroy,beans,close,bean,factory,try,default,listable,bean,factory,bean,factory,create,bean,factory,bean,factory,set,serialization,id,get,id,customize,bean,factory,bean,factory,load,bean,definitions,bean,factory,synchronized,this,bean,factory,monitor,this,bean,factory,bean,factory,catch,ioexception,ex,throw,new,application,context,exception,i,o,error,parsing,bean,definition,source,for,get,display,name,ex
AbstractRefreshableApplicationContext -> @Override 	protected final void refreshBeanFactory() throws BeansException;1377641679;This implementation performs an actual refresh of this context's underlying_bean factory, shutting down the previous bean factory (if any) and_initializing a fresh bean factory for the next phase of the context's lifecycle.;@Override_	protected final void refreshBeanFactory() throws BeansException {_		if (hasBeanFactory()) {_			destroyBeans()__			closeBeanFactory()__		}_		try {_			DefaultListableBeanFactory beanFactory = createBeanFactory()__			beanFactory.setSerializationId(getId())__			customizeBeanFactory(beanFactory)__			loadBeanDefinitions(beanFactory)__			synchronized (this.beanFactoryMonitor) {_				this.beanFactory = beanFactory__			}_		}_		catch (IOException ex) {_			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex)__		}_	};this,implementation,performs,an,actual,refresh,of,this,context,s,underlying,bean,factory,shutting,down,the,previous,bean,factory,if,any,and,initializing,a,fresh,bean,factory,for,the,next,phase,of,the,context,s,lifecycle;override,protected,final,void,refresh,bean,factory,throws,beans,exception,if,has,bean,factory,destroy,beans,close,bean,factory,try,default,listable,bean,factory,bean,factory,create,bean,factory,bean,factory,set,serialization,id,get,id,customize,bean,factory,bean,factory,load,bean,definitions,bean,factory,synchronized,this,bean,factory,monitor,this,bean,factory,bean,factory,catch,ioexception,ex,throw,new,application,context,exception,i,o,error,parsing,bean,definition,source,for,get,display,name,ex
AbstractRefreshableApplicationContext -> @Override 	protected final void refreshBeanFactory() throws BeansException;1496837955;This implementation performs an actual refresh of this context's underlying_bean factory, shutting down the previous bean factory (if any) and_initializing a fresh bean factory for the next phase of the context's lifecycle.;@Override_	protected final void refreshBeanFactory() throws BeansException {_		if (hasBeanFactory()) {_			destroyBeans()__			closeBeanFactory()__		}_		try {_			DefaultListableBeanFactory beanFactory = createBeanFactory()__			beanFactory.setSerializationId(getId())__			customizeBeanFactory(beanFactory)__			loadBeanDefinitions(beanFactory)__			synchronized (this.beanFactoryMonitor) {_				this.beanFactory = beanFactory__			}_		}_		catch (IOException ex) {_			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex)__		}_	};this,implementation,performs,an,actual,refresh,of,this,context,s,underlying,bean,factory,shutting,down,the,previous,bean,factory,if,any,and,initializing,a,fresh,bean,factory,for,the,next,phase,of,the,context,s,lifecycle;override,protected,final,void,refresh,bean,factory,throws,beans,exception,if,has,bean,factory,destroy,beans,close,bean,factory,try,default,listable,bean,factory,bean,factory,create,bean,factory,bean,factory,set,serialization,id,get,id,customize,bean,factory,bean,factory,load,bean,definitions,bean,factory,synchronized,this,bean,factory,monitor,this,bean,factory,bean,factory,catch,ioexception,ex,throw,new,application,context,exception,i,o,error,parsing,bean,definition,source,for,get,display,name,ex
AbstractRefreshableApplicationContext -> @Override 	protected final void refreshBeanFactory() throws BeansException;1498780456;This implementation performs an actual refresh of this context's underlying_bean factory, shutting down the previous bean factory (if any) and_initializing a fresh bean factory for the next phase of the context's lifecycle.;@Override_	protected final void refreshBeanFactory() throws BeansException {_		if (hasBeanFactory()) {_			destroyBeans()__			closeBeanFactory()__		}_		try {_			DefaultListableBeanFactory beanFactory = createBeanFactory()__			beanFactory.setSerializationId(getId())__			customizeBeanFactory(beanFactory)__			loadBeanDefinitions(beanFactory)__			synchronized (this.beanFactoryMonitor) {_				this.beanFactory = beanFactory__			}_		}_		catch (IOException ex) {_			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex)__		}_	};this,implementation,performs,an,actual,refresh,of,this,context,s,underlying,bean,factory,shutting,down,the,previous,bean,factory,if,any,and,initializing,a,fresh,bean,factory,for,the,next,phase,of,the,context,s,lifecycle;override,protected,final,void,refresh,bean,factory,throws,beans,exception,if,has,bean,factory,destroy,beans,close,bean,factory,try,default,listable,bean,factory,bean,factory,create,bean,factory,bean,factory,set,serialization,id,get,id,customize,bean,factory,bean,factory,load,bean,definitions,bean,factory,synchronized,this,bean,factory,monitor,this,bean,factory,bean,factory,catch,ioexception,ex,throw,new,application,context,exception,i,o,error,parsing,bean,definition,source,for,get,display,name,ex
AbstractRefreshableApplicationContext -> @Override 	protected final void refreshBeanFactory() throws BeansException;1530174524;This implementation performs an actual refresh of this context's underlying_bean factory, shutting down the previous bean factory (if any) and_initializing a fresh bean factory for the next phase of the context's lifecycle.;@Override_	protected final void refreshBeanFactory() throws BeansException {_		if (hasBeanFactory()) {_			destroyBeans()__			closeBeanFactory()__		}_		try {_			DefaultListableBeanFactory beanFactory = createBeanFactory()__			beanFactory.setSerializationId(getId())__			customizeBeanFactory(beanFactory)__			loadBeanDefinitions(beanFactory)__			synchronized (this.beanFactoryMonitor) {_				this.beanFactory = beanFactory__			}_		}_		catch (IOException ex) {_			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex)__		}_	};this,implementation,performs,an,actual,refresh,of,this,context,s,underlying,bean,factory,shutting,down,the,previous,bean,factory,if,any,and,initializing,a,fresh,bean,factory,for,the,next,phase,of,the,context,s,lifecycle;override,protected,final,void,refresh,bean,factory,throws,beans,exception,if,has,bean,factory,destroy,beans,close,bean,factory,try,default,listable,bean,factory,bean,factory,create,bean,factory,bean,factory,set,serialization,id,get,id,customize,bean,factory,bean,factory,load,bean,definitions,bean,factory,synchronized,this,bean,factory,monitor,this,bean,factory,bean,factory,catch,ioexception,ex,throw,new,application,context,exception,i,o,error,parsing,bean,definition,source,for,get,display,name,ex
AbstractRefreshableApplicationContext -> @Override 	protected final void refreshBeanFactory() throws BeansException;1530174524;This implementation performs an actual refresh of this context's underlying_bean factory, shutting down the previous bean factory (if any) and_initializing a fresh bean factory for the next phase of the context's lifecycle.;@Override_	protected final void refreshBeanFactory() throws BeansException {_		if (hasBeanFactory()) {_			destroyBeans()__			closeBeanFactory()__		}_		try {_			DefaultListableBeanFactory beanFactory = createBeanFactory()__			beanFactory.setSerializationId(getId())__			customizeBeanFactory(beanFactory)__			loadBeanDefinitions(beanFactory)__			synchronized (this.beanFactoryMonitor) {_				this.beanFactory = beanFactory__			}_		}_		catch (IOException ex) {_			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex)__		}_	};this,implementation,performs,an,actual,refresh,of,this,context,s,underlying,bean,factory,shutting,down,the,previous,bean,factory,if,any,and,initializing,a,fresh,bean,factory,for,the,next,phase,of,the,context,s,lifecycle;override,protected,final,void,refresh,bean,factory,throws,beans,exception,if,has,bean,factory,destroy,beans,close,bean,factory,try,default,listable,bean,factory,bean,factory,create,bean,factory,bean,factory,set,serialization,id,get,id,customize,bean,factory,bean,factory,load,bean,definitions,bean,factory,synchronized,this,bean,factory,monitor,this,bean,factory,bean,factory,catch,ioexception,ex,throw,new,application,context,exception,i,o,error,parsing,bean,definition,source,for,get,display,name,ex
AbstractRefreshableApplicationContext -> protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 			throws BeansException, IOException_;1328020251;Load bean definitions into the given bean factory, typically through_delegating to one or more bean definition readers._@param beanFactory the bean factory to load bean definitions into_@throws BeansException if parsing of the bean definitions failed_@throws IOException if loading of bean definition files failed_@see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader_@see org.springframework.beans.factory.xml.XmlBeanDefinitionReader;protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)_			throws BeansException, IOException_;load,bean,definitions,into,the,given,bean,factory,typically,through,delegating,to,one,or,more,bean,definition,readers,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,throws,beans,exception,if,parsing,of,the,bean,definitions,failed,throws,ioexception,if,loading,of,bean,definition,files,failed,see,org,springframework,beans,factory,support,properties,bean,definition,reader,see,org,springframework,beans,factory,xml,xml,bean,definition,reader;protected,abstract,void,load,bean,definitions,default,listable,bean,factory,bean,factory,throws,beans,exception,ioexception
AbstractRefreshableApplicationContext -> protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 			throws BeansException, IOException_;1356735495;Load bean definitions into the given bean factory, typically through_delegating to one or more bean definition readers._@param beanFactory the bean factory to load bean definitions into_@throws BeansException if parsing of the bean definitions failed_@throws IOException if loading of bean definition files failed_@see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader_@see org.springframework.beans.factory.xml.XmlBeanDefinitionReader;protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)_			throws BeansException, IOException_;load,bean,definitions,into,the,given,bean,factory,typically,through,delegating,to,one,or,more,bean,definition,readers,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,throws,beans,exception,if,parsing,of,the,bean,definitions,failed,throws,ioexception,if,loading,of,bean,definition,files,failed,see,org,springframework,beans,factory,support,properties,bean,definition,reader,see,org,springframework,beans,factory,xml,xml,bean,definition,reader;protected,abstract,void,load,bean,definitions,default,listable,bean,factory,bean,factory,throws,beans,exception,ioexception
AbstractRefreshableApplicationContext -> protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 			throws BeansException, IOException_;1368142320;Load bean definitions into the given bean factory, typically through_delegating to one or more bean definition readers._@param beanFactory the bean factory to load bean definitions into_@throws BeansException if parsing of the bean definitions failed_@throws IOException if loading of bean definition files failed_@see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader_@see org.springframework.beans.factory.xml.XmlBeanDefinitionReader;protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)_			throws BeansException, IOException_;load,bean,definitions,into,the,given,bean,factory,typically,through,delegating,to,one,or,more,bean,definition,readers,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,throws,beans,exception,if,parsing,of,the,bean,definitions,failed,throws,ioexception,if,loading,of,bean,definition,files,failed,see,org,springframework,beans,factory,support,properties,bean,definition,reader,see,org,springframework,beans,factory,xml,xml,bean,definition,reader;protected,abstract,void,load,bean,definitions,default,listable,bean,factory,bean,factory,throws,beans,exception,ioexception
AbstractRefreshableApplicationContext -> protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 			throws BeansException, IOException_;1377641679;Load bean definitions into the given bean factory, typically through_delegating to one or more bean definition readers._@param beanFactory the bean factory to load bean definitions into_@throws BeansException if parsing of the bean definitions failed_@throws IOException if loading of bean definition files failed_@see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader_@see org.springframework.beans.factory.xml.XmlBeanDefinitionReader;protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)_			throws BeansException, IOException_;load,bean,definitions,into,the,given,bean,factory,typically,through,delegating,to,one,or,more,bean,definition,readers,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,throws,beans,exception,if,parsing,of,the,bean,definitions,failed,throws,ioexception,if,loading,of,bean,definition,files,failed,see,org,springframework,beans,factory,support,properties,bean,definition,reader,see,org,springframework,beans,factory,xml,xml,bean,definition,reader;protected,abstract,void,load,bean,definitions,default,listable,bean,factory,bean,factory,throws,beans,exception,ioexception
AbstractRefreshableApplicationContext -> protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 			throws BeansException, IOException_;1496837955;Load bean definitions into the given bean factory, typically through_delegating to one or more bean definition readers._@param beanFactory the bean factory to load bean definitions into_@throws BeansException if parsing of the bean definitions failed_@throws IOException if loading of bean definition files failed_@see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader_@see org.springframework.beans.factory.xml.XmlBeanDefinitionReader;protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)_			throws BeansException, IOException_;load,bean,definitions,into,the,given,bean,factory,typically,through,delegating,to,one,or,more,bean,definition,readers,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,throws,beans,exception,if,parsing,of,the,bean,definitions,failed,throws,ioexception,if,loading,of,bean,definition,files,failed,see,org,springframework,beans,factory,support,properties,bean,definition,reader,see,org,springframework,beans,factory,xml,xml,bean,definition,reader;protected,abstract,void,load,bean,definitions,default,listable,bean,factory,bean,factory,throws,beans,exception,ioexception
AbstractRefreshableApplicationContext -> protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 			throws BeansException, IOException_;1498780456;Load bean definitions into the given bean factory, typically through_delegating to one or more bean definition readers._@param beanFactory the bean factory to load bean definitions into_@throws BeansException if parsing of the bean definitions failed_@throws IOException if loading of bean definition files failed_@see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader_@see org.springframework.beans.factory.xml.XmlBeanDefinitionReader;protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)_			throws BeansException, IOException_;load,bean,definitions,into,the,given,bean,factory,typically,through,delegating,to,one,or,more,bean,definition,readers,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,throws,beans,exception,if,parsing,of,the,bean,definitions,failed,throws,ioexception,if,loading,of,bean,definition,files,failed,see,org,springframework,beans,factory,support,properties,bean,definition,reader,see,org,springframework,beans,factory,xml,xml,bean,definition,reader;protected,abstract,void,load,bean,definitions,default,listable,bean,factory,bean,factory,throws,beans,exception,ioexception
AbstractRefreshableApplicationContext -> protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 			throws BeansException, IOException_;1530174524;Load bean definitions into the given bean factory, typically through_delegating to one or more bean definition readers._@param beanFactory the bean factory to load bean definitions into_@throws BeansException if parsing of the bean definitions failed_@throws IOException if loading of bean definition files failed_@see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader_@see org.springframework.beans.factory.xml.XmlBeanDefinitionReader;protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)_			throws BeansException, IOException_;load,bean,definitions,into,the,given,bean,factory,typically,through,delegating,to,one,or,more,bean,definition,readers,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,throws,beans,exception,if,parsing,of,the,bean,definitions,failed,throws,ioexception,if,loading,of,bean,definition,files,failed,see,org,springframework,beans,factory,support,properties,bean,definition,reader,see,org,springframework,beans,factory,xml,xml,bean,definition,reader;protected,abstract,void,load,bean,definitions,default,listable,bean,factory,bean,factory,throws,beans,exception,ioexception
AbstractRefreshableApplicationContext -> protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 			throws BeansException, IOException_;1530174524;Load bean definitions into the given bean factory, typically through_delegating to one or more bean definition readers._@param beanFactory the bean factory to load bean definitions into_@throws BeansException if parsing of the bean definitions failed_@throws IOException if loading of bean definition files failed_@see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader_@see org.springframework.beans.factory.xml.XmlBeanDefinitionReader;protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)_			throws BeansException, IOException_;load,bean,definitions,into,the,given,bean,factory,typically,through,delegating,to,one,or,more,bean,definition,readers,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,throws,beans,exception,if,parsing,of,the,bean,definitions,failed,throws,ioexception,if,loading,of,bean,definition,files,failed,see,org,springframework,beans,factory,support,properties,bean,definition,reader,see,org,springframework,beans,factory,xml,xml,bean,definition,reader;protected,abstract,void,load,bean,definitions,default,listable,bean,factory,bean,factory,throws,beans,exception,ioexception
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext();1328020251;Create a new AbstractRefreshableApplicationContext with no parent.;public AbstractRefreshableApplicationContext() {_	};create,a,new,abstract,refreshable,application,context,with,no,parent;public,abstract,refreshable,application,context
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext();1356735495;Create a new AbstractRefreshableApplicationContext with no parent.;public AbstractRefreshableApplicationContext() {_	};create,a,new,abstract,refreshable,application,context,with,no,parent;public,abstract,refreshable,application,context
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext();1368142320;Create a new AbstractRefreshableApplicationContext with no parent.;public AbstractRefreshableApplicationContext() {_	};create,a,new,abstract,refreshable,application,context,with,no,parent;public,abstract,refreshable,application,context
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext();1377641679;Create a new AbstractRefreshableApplicationContext with no parent.;public AbstractRefreshableApplicationContext() {_	};create,a,new,abstract,refreshable,application,context,with,no,parent;public,abstract,refreshable,application,context
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext();1496837955;Create a new AbstractRefreshableApplicationContext with no parent.;public AbstractRefreshableApplicationContext() {_	};create,a,new,abstract,refreshable,application,context,with,no,parent;public,abstract,refreshable,application,context
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext();1498780456;Create a new AbstractRefreshableApplicationContext with no parent.;public AbstractRefreshableApplicationContext() {_	};create,a,new,abstract,refreshable,application,context,with,no,parent;public,abstract,refreshable,application,context
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext();1530174524;Create a new AbstractRefreshableApplicationContext with no parent.;public AbstractRefreshableApplicationContext() {_	};create,a,new,abstract,refreshable,application,context,with,no,parent;public,abstract,refreshable,application,context
AbstractRefreshableApplicationContext -> public AbstractRefreshableApplicationContext();1530174524;Create a new AbstractRefreshableApplicationContext with no parent.;public AbstractRefreshableApplicationContext() {_	};create,a,new,abstract,refreshable,application,context,with,no,parent;public,abstract,refreshable,application,context
AbstractRefreshableApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1328020251;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,allow,bean,definition,overriding,allow,bean,definition,overriding
AbstractRefreshableApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1356735495;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,allow,bean,definition,overriding,allow,bean,definition,overriding
AbstractRefreshableApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1368142320;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,allow,bean,definition,overriding,allow,bean,definition,overriding
AbstractRefreshableApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1377641679;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,allow,bean,definition,overriding,allow,bean,definition,overriding
AbstractRefreshableApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1496837955;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,allow,bean,definition,overriding,allow,bean,definition,overriding
AbstractRefreshableApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1498780456;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,allow,bean,definition,overriding,allow,bean,definition,overriding
AbstractRefreshableApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1530174524;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,allow,bean,definition,overriding,allow,bean,definition,overriding
AbstractRefreshableApplicationContext -> public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding);1530174524;Set whether it should be allowed to override bean definitions by registering_a different definition with the same name, automatically replacing the former._If not, an exception will be thrown. Default is "true"._@see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding;public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {_		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding__	};set,whether,it,should,be,allowed,to,override,bean,definitions,by,registering,a,different,definition,with,the,same,name,automatically,replacing,the,former,if,not,an,exception,will,be,thrown,default,is,true,see,org,springframework,beans,factory,support,default,listable,bean,factory,set,allow,bean,definition,overriding;public,void,set,allow,bean,definition,overriding,boolean,allow,bean,definition,overriding,this,allow,bean,definition,overriding,allow,bean,definition,overriding
AbstractRefreshableApplicationContext -> protected final boolean hasBeanFactory();1328020251;Determine whether this context currently holds a bean factory,_i.e. has been refreshed at least once and not been closed yet.;protected final boolean hasBeanFactory() {_		synchronized (this.beanFactoryMonitor) {_			return (this.beanFactory != null)__		}_	};determine,whether,this,context,currently,holds,a,bean,factory,i,e,has,been,refreshed,at,least,once,and,not,been,closed,yet;protected,final,boolean,has,bean,factory,synchronized,this,bean,factory,monitor,return,this,bean,factory,null
AbstractRefreshableApplicationContext -> protected final boolean hasBeanFactory();1356735495;Determine whether this context currently holds a bean factory,_i.e. has been refreshed at least once and not been closed yet.;protected final boolean hasBeanFactory() {_		synchronized (this.beanFactoryMonitor) {_			return (this.beanFactory != null)__		}_	};determine,whether,this,context,currently,holds,a,bean,factory,i,e,has,been,refreshed,at,least,once,and,not,been,closed,yet;protected,final,boolean,has,bean,factory,synchronized,this,bean,factory,monitor,return,this,bean,factory,null
AbstractRefreshableApplicationContext -> protected final boolean hasBeanFactory();1368142320;Determine whether this context currently holds a bean factory,_i.e. has been refreshed at least once and not been closed yet.;protected final boolean hasBeanFactory() {_		synchronized (this.beanFactoryMonitor) {_			return (this.beanFactory != null)__		}_	};determine,whether,this,context,currently,holds,a,bean,factory,i,e,has,been,refreshed,at,least,once,and,not,been,closed,yet;protected,final,boolean,has,bean,factory,synchronized,this,bean,factory,monitor,return,this,bean,factory,null
AbstractRefreshableApplicationContext -> protected final boolean hasBeanFactory();1377641679;Determine whether this context currently holds a bean factory,_i.e. has been refreshed at least once and not been closed yet.;protected final boolean hasBeanFactory() {_		synchronized (this.beanFactoryMonitor) {_			return (this.beanFactory != null)__		}_	};determine,whether,this,context,currently,holds,a,bean,factory,i,e,has,been,refreshed,at,least,once,and,not,been,closed,yet;protected,final,boolean,has,bean,factory,synchronized,this,bean,factory,monitor,return,this,bean,factory,null
AbstractRefreshableApplicationContext -> protected final boolean hasBeanFactory();1496837955;Determine whether this context currently holds a bean factory,_i.e. has been refreshed at least once and not been closed yet.;protected final boolean hasBeanFactory() {_		synchronized (this.beanFactoryMonitor) {_			return (this.beanFactory != null)__		}_	};determine,whether,this,context,currently,holds,a,bean,factory,i,e,has,been,refreshed,at,least,once,and,not,been,closed,yet;protected,final,boolean,has,bean,factory,synchronized,this,bean,factory,monitor,return,this,bean,factory,null
AbstractRefreshableApplicationContext -> protected final boolean hasBeanFactory();1498780456;Determine whether this context currently holds a bean factory,_i.e. has been refreshed at least once and not been closed yet.;protected final boolean hasBeanFactory() {_		synchronized (this.beanFactoryMonitor) {_			return (this.beanFactory != null)__		}_	};determine,whether,this,context,currently,holds,a,bean,factory,i,e,has,been,refreshed,at,least,once,and,not,been,closed,yet;protected,final,boolean,has,bean,factory,synchronized,this,bean,factory,monitor,return,this,bean,factory,null
AbstractRefreshableApplicationContext -> protected final boolean hasBeanFactory();1530174524;Determine whether this context currently holds a bean factory,_i.e. has been refreshed at least once and not been closed yet.;protected final boolean hasBeanFactory() {_		synchronized (this.beanFactoryMonitor) {_			return (this.beanFactory != null)__		}_	};determine,whether,this,context,currently,holds,a,bean,factory,i,e,has,been,refreshed,at,least,once,and,not,been,closed,yet;protected,final,boolean,has,bean,factory,synchronized,this,bean,factory,monitor,return,this,bean,factory,null
AbstractRefreshableApplicationContext -> protected final boolean hasBeanFactory();1530174524;Determine whether this context currently holds a bean factory,_i.e. has been refreshed at least once and not been closed yet.;protected final boolean hasBeanFactory() {_		synchronized (this.beanFactoryMonitor) {_			return (this.beanFactory != null)__		}_	};determine,whether,this,context,currently,holds,a,bean,factory,i,e,has,been,refreshed,at,least,once,and,not,been,closed,yet;protected,final,boolean,has,bean,factory,synchronized,this,bean,factory,monitor,return,this,bean,factory,null
