commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the format name, to be resolved by the JSR-354 provider  * at runtime.  * <p>Default is none, obtaining a {@link MonetaryAmountFormat}  * based on the current locale.  */ ;/**  * Specify the format name, to be resolved by the JSR-354 provider  * at runtime.  * <p>Default is none, obtaining a {@link MonetaryAmountFormat}  * based on the current locale.  */ public void setFormatName(String formatName) {     this.formatName = formatName. }
false;public;2;4;;@Override public String print(MonetaryAmount object, Locale locale) {     return getMonetaryAmountFormat(locale).format(object). }
false;public;2;4;;@Override public MonetaryAmount parse(String text, Locale locale) {     return getMonetaryAmountFormat(locale).parse(text). }
true;protected;1;8;/**  * Obtain a MonetaryAmountFormat for the given locale.  * <p>The default implementation simply calls  * {@link javax.money.format.MonetaryFormats#getAmountFormat}  * with either the configured format name or the given locale.  * @param locale the current locale  * @return the MonetaryAmountFormat (never {@code null})  * @see #setFormatName  */ ;/**  * Obtain a MonetaryAmountFormat for the given locale.  * <p>The default implementation simply calls  * {@link javax.money.format.MonetaryFormats#getAmountFormat}  * with either the configured format name or the given locale.  * @param locale the current locale  * @return the MonetaryAmountFormat (never {@code null})  * @see #setFormatName  */ protected MonetaryAmountFormat getMonetaryAmountFormat(Locale locale) {     if (this.formatName != null) {         return MonetaryFormats.getAmountFormat(this.formatName).     } else {         return MonetaryFormats.getAmountFormat(locale).     } }
