commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Determine the {@link Formatter}-declared field type.  * @return the field type declared in the wrapped {@link Formatter} implementation  * (never {@code null})  * @throws IllegalArgumentException if the {@link Formatter}-declared field type  * cannot be inferred  */ ;/**  * Determine the {@link Formatter}-declared field type.  * @return the field type declared in the wrapped {@link Formatter} implementation  * (never {@code null})  * @throws IllegalArgumentException if the {@link Formatter}-declared field type  * cannot be inferred  */ public Class<?> getFieldType() {     return FormattingConversionService.getFieldType(this.formatter). }
false;public;1;17;;@Override public void setAsText(String text) throws IllegalArgumentException {     if (StringUtils.hasText(text)) {         try {             setValue(this.formatter.parse(text, LocaleContextHolder.getLocale())).         } catch (IllegalArgumentException ex) {             throw ex.         } catch (Throwable ex) {             throw new IllegalArgumentException("Parse attempt failed for value [" + text + "]", ex).         }     } else {         setValue(null).     } }
false;public;0;5;;@Override public String getAsText() {     Object value = getValue().     return (value != null ? this.formatter.print(value, LocaleContextHolder.getLocale()) : ""). }
