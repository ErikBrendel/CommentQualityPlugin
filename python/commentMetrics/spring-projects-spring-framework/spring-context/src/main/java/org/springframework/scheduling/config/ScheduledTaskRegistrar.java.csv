# id;timestamp;commentText;codeText;commentWords;codeWords
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1328020251;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new HashMap<Runnable, Trigger>()__		}_		this.triggerTasks.put(task, trigger)__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,if,this,trigger,tasks,null,this,trigger,tasks,new,hash,map,runnable,trigger,this,trigger,tasks,put,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1337698097;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1355313310;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1356735495;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1357119239;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1362408075;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1368482696;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1410983746;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1424955993;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1425061577;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1447421128;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		this.addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,this,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1447442804;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1447445908;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1462374368;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1467730834;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1474905889;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1495868221;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1496837955;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1497250713;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1498780456;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1500448076;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1509989799;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1517324430;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addTriggerTask(Runnable task, Trigger trigger);1530174524;Add a Runnable task to be triggered per the given {@link Trigger}._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(Runnable task, Trigger trigger) {_		addTriggerTask(new TriggerTask(task, trigger))__	};add,a,runnable,task,to,be,triggered,per,the,given,link,trigger,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,runnable,task,trigger,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1337698097;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1355313310;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1356735495;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1357119239;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1362408075;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1368482696;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1410983746;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1424955993;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1425061577;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1447421128;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1447442804;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1447445908;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1462374368;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1467730834;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1474905889;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1495868221;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1496837955;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1497250713;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1498780456;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1500448076;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1509989799;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1517324430;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks);1530174524;Specify fixed-delay tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedDelayTasksList(List<IntervalTask> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,fixed,delay,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,delay,tasks,list,list,interval,task,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> @Deprecated 	@Nullable 	public ScheduledTask scheduleFixedRateTask(IntervalTask task);1509989799;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3_@deprecated as of 5.0.2, in favor of {@link #scheduleFixedRateTask(FixedRateTask)};@Deprecated_	@Nullable_	public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		FixedRateTask taskToUse = (task instanceof FixedRateTask ? (FixedRateTask) task :_				new FixedRateTask(task.getRunnable(), task.getInterval(), task.getInitialDelay()))__		return scheduleFixedRateTask(taskToUse)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3,deprecated,as,of,5,0,2,in,favor,of,link,schedule,fixed,rate,task,fixed,rate,task;deprecated,nullable,public,scheduled,task,schedule,fixed,rate,task,interval,task,task,fixed,rate,task,task,to,use,task,instanceof,fixed,rate,task,fixed,rate,task,task,new,fixed,rate,task,task,get,runnable,task,get,interval,task,get,initial,delay,return,schedule,fixed,rate,task,task,to,use
ScheduledTaskRegistrar -> @Deprecated 	@Nullable 	public ScheduledTask scheduleFixedRateTask(IntervalTask task);1517324430;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3_@deprecated as of 5.0.2, in favor of {@link #scheduleFixedRateTask(FixedRateTask)};@Deprecated_	@Nullable_	public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		FixedRateTask taskToUse = (task instanceof FixedRateTask ? (FixedRateTask) task :_				new FixedRateTask(task.getRunnable(), task.getInterval(), task.getInitialDelay()))__		return scheduleFixedRateTask(taskToUse)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3,deprecated,as,of,5,0,2,in,favor,of,link,schedule,fixed,rate,task,fixed,rate,task;deprecated,nullable,public,scheduled,task,schedule,fixed,rate,task,interval,task,task,fixed,rate,task,task,to,use,task,instanceof,fixed,rate,task,fixed,rate,task,task,new,fixed,rate,task,task,get,runnable,task,get,interval,task,get,initial,delay,return,schedule,fixed,rate,task,task,to,use
ScheduledTaskRegistrar -> @Deprecated 	@Nullable 	public ScheduledTask scheduleFixedRateTask(IntervalTask task);1530174524;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3_@deprecated as of 5.0.2, in favor of {@link #scheduleFixedRateTask(FixedRateTask)};@Deprecated_	@Nullable_	public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		FixedRateTask taskToUse = (task instanceof FixedRateTask ? (FixedRateTask) task :_				new FixedRateTask(task.getRunnable(), task.getInterval(), task.getInitialDelay()))__		return scheduleFixedRateTask(taskToUse)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3,deprecated,as,of,5,0,2,in,favor,of,link,schedule,fixed,rate,task,fixed,rate,task;deprecated,nullable,public,scheduled,task,schedule,fixed,rate,task,interval,task,task,fixed,rate,task,task,to,use,task,instanceof,fixed,rate,task,fixed,rate,task,task,new,fixed,rate,task,task,get,runnable,task,get,interval,task,get,initial,delay,return,schedule,fixed,rate,task,task,to,use
ScheduledTaskRegistrar -> @Nullable 	public TaskScheduler getScheduler();1495868221;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;@Nullable_	public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;nullable,public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> @Nullable 	public TaskScheduler getScheduler();1496837955;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;@Nullable_	public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;nullable,public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> @Nullable 	public TaskScheduler getScheduler();1497250713;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;@Nullable_	public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;nullable,public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> @Nullable 	public TaskScheduler getScheduler();1498780456;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;@Nullable_	public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;nullable,public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> @Nullable 	public TaskScheduler getScheduler();1500448076;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;@Nullable_	public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;nullable,public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> @Nullable 	public TaskScheduler getScheduler();1509989799;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;@Nullable_	public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;nullable,public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> @Nullable 	public TaskScheduler getScheduler();1517324430;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;@Nullable_	public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;nullable,public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> @Nullable 	public TaskScheduler getScheduler();1530174524;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;@Nullable_	public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;nullable,public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1328020251;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new HashMap<Runnable, Long>()__		}_		this.fixedDelayTasks.put(task, delay)__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,hash,map,runnable,long,this,fixed,delay,tasks,put,task,delay
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1337698097;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1355313310;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1356735495;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1357119239;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1362408075;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1368482696;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1410983746;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1424955993;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1425061577;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1447421128;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		this.addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,this,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1447442804;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1447445908;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1462374368;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1467730834;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1474905889;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1495868221;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1496837955;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1497250713;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1498780456;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1500448076;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1509989799;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1517324430;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addFixedDelayTask(Runnable task, long delay);1530174524;Add a Runnable task to be triggered with the given fixed delay._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(Runnable task, long delay) {_		addFixedDelayTask(new IntervalTask(task, delay, 0))__	};add,a,runnable,task,to,be,triggered,with,the,given,fixed,delay,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,runnable,task,long,delay,add,fixed,delay,task,new,interval,task,task,delay,0
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1337698097;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1355313310;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1356735495;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1357119239;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1362408075;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1368482696;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1410983746;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1424955993;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1425061577;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1447421128;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		this.addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,this,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1447442804;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1447445908;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1462374368;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1467730834;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1474905889;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1495868221;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1496837955;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1497250713;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1498780456;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1500448076;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1509989799;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1517324430;Add a Runnable task to be triggered per the given cron expression;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> public void addCronTask(Runnable task, String expression);1530174524;Add a Runnable task to be triggered per the given cron expression.;public void addCronTask(Runnable task, String expression) {_		addCronTask(new CronTask(task, expression))__	};add,a,runnable,task,to,be,triggered,per,the,given,cron,expression;public,void,add,cron,task,runnable,task,string,expression,add,cron,task,new,cron,task,task,expression
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1495868221;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,delay,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1496837955;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,delay,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1497250713;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,delay,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1498780456;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,delay,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1500448076;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,delay,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1337698097;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1355313310;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1356735495;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1357119239;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1362408075;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1368482696;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1410983746;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1424955993;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1425061577;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1447421128;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1447442804;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1447445908;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1462374368;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<CronTask>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,cron,task,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1467730834;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1474905889;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1495868221;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1496837955;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1497250713;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1498780456;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1500448076;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1509989799;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1517324430;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void addCronTask(CronTask task);1530174524;Add a {@link CronTask}._@since 3.2;public void addCronTask(CronTask task) {_		if (this.cronTasks == null) {_			this.cronTasks = new ArrayList<>()__		}_		this.cronTasks.add(task)__	};add,a,link,cron,task,since,3,2;public,void,add,cron,task,cron,task,task,if,this,cron,tasks,null,this,cron,tasks,new,array,list,this,cron,tasks,add,task
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1328020251;Set the TaskScheduler to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1337698097;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1355313310;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1356735495;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1357119239;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1362408075;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1368482696;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1410983746;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1424955993;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1425061577;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1447421128;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1447442804;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1447445908;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1462374368;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1467730834;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1474905889;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1495868221;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1496837955;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1497250713;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1498780456;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1500448076;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1509989799;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1517324430;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setTaskScheduler(TaskScheduler taskScheduler);1530174524;Set the {@link TaskScheduler} to register scheduled tasks with.;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__	};set,the,link,task,scheduler,to,register,scheduled,tasks,with;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1328020251;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1337698097;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1355313310;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1356735495;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1357119239;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1362408075;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1368482696;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1410983746;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1424955993;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1425061577;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1447421128;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			this.addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,this,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1447442804;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1447445908;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1462374368;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1467730834;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1474905889;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1495868221;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1496837955;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Long> task : fixedRateTasks.entrySet()) {_			addFixedRateTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,for,map,entry,runnable,long,task,fixed,rate,tasks,entry,set,add,fixed,rate,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1497250713;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		fixedRateTasks.forEach(this::addFixedRateTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,fixed,rate,tasks,for,each,this,add,fixed,rate,task
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1498780456;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		fixedRateTasks.forEach(this::addFixedRateTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,fixed,rate,tasks,for,each,this,add,fixed,rate,task
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1500448076;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		fixedRateTasks.forEach(this::addFixedRateTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,fixed,rate,tasks,for,each,this,add,fixed,rate,task
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1509989799;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		fixedRateTasks.forEach(this::addFixedRateTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,fixed,rate,tasks,for,each,this,add,fixed,rate,task
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1517324430;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		fixedRateTasks.forEach(this::addFixedRateTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,fixed,rate,tasks,for,each,this,add,fixed,rate,task
ScheduledTaskRegistrar -> public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks);1530174524;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-rate values._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void setFixedRateTasks(Map<Runnable, Long> fixedRateTasks) {_		this.fixedRateTasks = new ArrayList<>()__		fixedRateTasks.forEach(this::addFixedRateTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,rate,values,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,set,fixed,rate,tasks,map,runnable,long,fixed,rate,tasks,this,fixed,rate,tasks,new,array,list,fixed,rate,tasks,for,each,this,add,fixed,rate,task
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1425061577;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		this.addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,this,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1447421128;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		this.addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,this,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1447442804;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1447445908;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1462374368;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1467730834;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1474905889;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1495868221;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1496837955;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1497250713;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1498780456;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1500448076;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1509989799;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1517324430;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long interval);1530174524;Add a {@code Runnable} task to be triggered at the given fixed-rate interval._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long interval) {_		addFixedRateTask(new IntervalTask(task, interval, 0))__	};add,a,code,runnable,task,to,be,triggered,at,the,given,fixed,rate,interval,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,interval,add,fixed,rate,task,new,interval,task,task,interval,0
ScheduledTaskRegistrar -> @SuppressWarnings("deprecation") 	protected void scheduleTasks();1517324430;Schedule all registered tasks against the underlying_{@linkplain #setTaskScheduler(TaskScheduler) task scheduler}.;@SuppressWarnings("deprecation")_	protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;suppress,warnings,deprecation,protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> @SuppressWarnings("deprecation") 	protected void scheduleTasks();1530174524;Schedule all registered tasks against the underlying_{@linkplain #setTaskScheduler(TaskScheduler) task scheduler}.;@SuppressWarnings("deprecation")_	protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;suppress,warnings,deprecation,protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> @Deprecated 	@Nullable 	public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1509989799;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3_@deprecated as of 5.0.2, in favor of {@link #scheduleFixedDelayTask(FixedDelayTask)};@Deprecated_	@Nullable_	public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		FixedDelayTask taskToUse = (task instanceof FixedDelayTask ? (FixedDelayTask) task :_				new FixedDelayTask(task.getRunnable(), task.getInterval(), task.getInitialDelay()))__		return scheduleFixedDelayTask(taskToUse)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3,deprecated,as,of,5,0,2,in,favor,of,link,schedule,fixed,delay,task,fixed,delay,task;deprecated,nullable,public,scheduled,task,schedule,fixed,delay,task,interval,task,task,fixed,delay,task,task,to,use,task,instanceof,fixed,delay,task,fixed,delay,task,task,new,fixed,delay,task,task,get,runnable,task,get,interval,task,get,initial,delay,return,schedule,fixed,delay,task,task,to,use
ScheduledTaskRegistrar -> @Deprecated 	@Nullable 	public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1517324430;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3_@deprecated as of 5.0.2, in favor of {@link #scheduleFixedDelayTask(FixedDelayTask)};@Deprecated_	@Nullable_	public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		FixedDelayTask taskToUse = (task instanceof FixedDelayTask ? (FixedDelayTask) task :_				new FixedDelayTask(task.getRunnable(), task.getInterval(), task.getInitialDelay()))__		return scheduleFixedDelayTask(taskToUse)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3,deprecated,as,of,5,0,2,in,favor,of,link,schedule,fixed,delay,task,fixed,delay,task;deprecated,nullable,public,scheduled,task,schedule,fixed,delay,task,interval,task,task,fixed,delay,task,task,to,use,task,instanceof,fixed,delay,task,fixed,delay,task,task,new,fixed,delay,task,task,get,runnable,task,get,interval,task,get,initial,delay,return,schedule,fixed,delay,task,task,to,use
ScheduledTaskRegistrar -> @Deprecated 	@Nullable 	public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1530174524;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3_@deprecated as of 5.0.2, in favor of {@link #scheduleFixedDelayTask(FixedDelayTask)};@Deprecated_	@Nullable_	public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		FixedDelayTask taskToUse = (task instanceof FixedDelayTask ? (FixedDelayTask) task :_				new FixedDelayTask(task.getRunnable(), task.getInterval(), task.getInitialDelay()))__		return scheduleFixedDelayTask(taskToUse)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3,deprecated,as,of,5,0,2,in,favor,of,link,schedule,fixed,delay,task,fixed,delay,task;deprecated,nullable,public,scheduled,task,schedule,fixed,delay,task,interval,task,task,fixed,delay,task,task,to,use,task,instanceof,fixed,delay,task,fixed,delay,task,task,new,fixed,delay,task,task,get,runnable,task,get,interval,task,get,initial,delay,return,schedule,fixed,delay,task,task,to,use
ScheduledTaskRegistrar -> public void afterPropertiesSet();1337698097;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler.;public void afterPropertiesSet() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;public,void,after,properties,set,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> public void afterPropertiesSet();1355313310;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;public void afterPropertiesSet() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;public,void,after,properties,set,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> public void afterPropertiesSet();1357119239;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;public void afterPropertiesSet() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;public,void,after,properties,set,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> public void afterPropertiesSet();1362408075;Calls {@link #scheduleTasks()} at bean construction time.;public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1356735495;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;@Override_	public void afterPropertiesSet() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;override,public,void,after,properties,set,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1368482696;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1410983746;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1424955993;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1425061577;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1447421128;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1447442804;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1447445908;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1462374368;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1467730834;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1474905889;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1495868221;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1496837955;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1497250713;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1498780456;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1500448076;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1509989799;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1517324430;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> @Override 	public void afterPropertiesSet();1530174524;Calls {@link #scheduleTasks()} at bean construction time.;@Override_	public void afterPropertiesSet() {_		scheduleTasks()__	};calls,link,schedule,tasks,at,bean,construction,time;override,public,void,after,properties,set,schedule,tasks
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1337698097;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1355313310;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1356735495;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1357119239;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1362408075;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1368482696;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1410983746;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1424955993;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1425061577;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1447421128;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1447442804;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1447445908;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1462374368;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<IntervalTask>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,interval,task,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1467730834;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1474905889;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1495868221;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1496837955;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1497250713;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1498780456;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1500448076;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1509989799;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1517324430;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedRateTask(IntervalTask task);1530174524;Add a fixed-rate {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(IntervalTask task) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new ArrayList<>()__		}_		this.fixedRateTasks.add(task)__	};add,a,fixed,rate,link,interval,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,interval,task,task,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,array,list,this,fixed,rate,tasks,add,task
ScheduledTaskRegistrar -> public ScheduledTask scheduleFixedRateTask(IntervalTask task);1462374368;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,fixed,rate,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleFixedRateTask(IntervalTask task);1467730834;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,fixed,rate,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleFixedRateTask(IntervalTask task);1474905889;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,fixed,rate,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public boolean hasTasks();1337698097;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (this.fixedRateTasks != null && !this.fixedRateTasks.isEmpty()) ||_				(this.fixedDelayTasks != null && !this.fixedDelayTasks.isEmpty()) ||_				(this.cronTasks != null && !this.cronTasks.isEmpty()) ||_				(this.triggerTasks != null && !this.triggerTasks.isEmpty())__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,this,fixed,rate,tasks,null,this,fixed,rate,tasks,is,empty,this,fixed,delay,tasks,null,this,fixed,delay,tasks,is,empty,this,cron,tasks,null,this,cron,tasks,is,empty,this,trigger,tasks,null,this,trigger,tasks,is,empty
ScheduledTaskRegistrar -> public boolean hasTasks();1355313310;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (this.fixedRateTasks != null && !this.fixedRateTasks.isEmpty()) ||_				(this.fixedDelayTasks != null && !this.fixedDelayTasks.isEmpty()) ||_				(this.cronTasks != null && !this.cronTasks.isEmpty()) ||_				(this.triggerTasks != null && !this.triggerTasks.isEmpty())__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,this,fixed,rate,tasks,null,this,fixed,rate,tasks,is,empty,this,fixed,delay,tasks,null,this,fixed,delay,tasks,is,empty,this,cron,tasks,null,this,cron,tasks,is,empty,this,trigger,tasks,null,this,trigger,tasks,is,empty
ScheduledTaskRegistrar -> public boolean hasTasks();1356735495;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (this.fixedRateTasks != null && !this.fixedRateTasks.isEmpty()) ||_				(this.fixedDelayTasks != null && !this.fixedDelayTasks.isEmpty()) ||_				(this.cronTasks != null && !this.cronTasks.isEmpty()) ||_				(this.triggerTasks != null && !this.triggerTasks.isEmpty())__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,this,fixed,rate,tasks,null,this,fixed,rate,tasks,is,empty,this,fixed,delay,tasks,null,this,fixed,delay,tasks,is,empty,this,cron,tasks,null,this,cron,tasks,is,empty,this,trigger,tasks,null,this,trigger,tasks,is,empty
ScheduledTaskRegistrar -> public boolean hasTasks();1357119239;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (this.fixedRateTasks != null && !this.fixedRateTasks.isEmpty()) ||_				(this.fixedDelayTasks != null && !this.fixedDelayTasks.isEmpty()) ||_				(this.cronTasks != null && !this.cronTasks.isEmpty()) ||_				(this.triggerTasks != null && !this.triggerTasks.isEmpty())__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,this,fixed,rate,tasks,null,this,fixed,rate,tasks,is,empty,this,fixed,delay,tasks,null,this,fixed,delay,tasks,is,empty,this,cron,tasks,null,this,cron,tasks,is,empty,this,trigger,tasks,null,this,trigger,tasks,is,empty
ScheduledTaskRegistrar -> public boolean hasTasks();1362408075;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (this.fixedRateTasks != null && !this.fixedRateTasks.isEmpty()) ||_				(this.fixedDelayTasks != null && !this.fixedDelayTasks.isEmpty()) ||_				(this.cronTasks != null && !this.cronTasks.isEmpty()) ||_				(this.triggerTasks != null && !this.triggerTasks.isEmpty())__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,this,fixed,rate,tasks,null,this,fixed,rate,tasks,is,empty,this,fixed,delay,tasks,null,this,fixed,delay,tasks,is,empty,this,cron,tasks,null,this,cron,tasks,is,empty,this,trigger,tasks,null,this,trigger,tasks,is,empty
ScheduledTaskRegistrar -> public boolean hasTasks();1368482696;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (this.fixedRateTasks != null && !this.fixedRateTasks.isEmpty()) ||_				(this.fixedDelayTasks != null && !this.fixedDelayTasks.isEmpty()) ||_				(this.cronTasks != null && !this.cronTasks.isEmpty()) ||_				(this.triggerTasks != null && !this.triggerTasks.isEmpty())__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,this,fixed,rate,tasks,null,this,fixed,rate,tasks,is,empty,this,fixed,delay,tasks,null,this,fixed,delay,tasks,is,empty,this,cron,tasks,null,this,cron,tasks,is,empty,this,trigger,tasks,null,this,trigger,tasks,is,empty
ScheduledTaskRegistrar -> public boolean hasTasks();1410983746;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1424955993;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1425061577;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1447421128;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1447442804;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1447445908;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1462374368;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1467730834;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1474905889;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1495868221;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1496837955;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1497250713;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1498780456;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1500448076;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1509989799;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1517324430;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public boolean hasTasks();1530174524;Return whether this {@code ScheduledTaskRegistrar} has any tasks registered._@since 3.2;public boolean hasTasks() {_		return (!CollectionUtils.isEmpty(this.triggerTasks) ||_				!CollectionUtils.isEmpty(this.cronTasks) ||_				!CollectionUtils.isEmpty(this.fixedRateTasks) ||_				!CollectionUtils.isEmpty(this.fixedDelayTasks))__	};return,whether,this,code,scheduled,task,registrar,has,any,tasks,registered,since,3,2;public,boolean,has,tasks,return,collection,utils,is,empty,this,trigger,tasks,collection,utils,is,empty,this,cron,tasks,collection,utils,is,empty,this,fixed,rate,tasks,collection,utils,is,empty,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1328020251;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = fixedDelayTasks__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,fixed,delay,tasks
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1337698097;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1355313310;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1356735495;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1357119239;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1362408075;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1368482696;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1410983746;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1424955993;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1425061577;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1447421128;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			this.addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,this,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1447442804;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1447445908;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1462374368;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<IntervalTask>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,interval,task,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1467730834;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1474905889;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1495868221;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1496837955;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Long> task : fixedDelayTasks.entrySet()) {_			addFixedDelayTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,for,map,entry,runnable,long,task,fixed,delay,tasks,entry,set,add,fixed,delay,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1497250713;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		fixedDelayTasks.forEach(this::addFixedDelayTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,fixed,delay,tasks,for,each,this,add,fixed,delay,task
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1498780456;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		fixedDelayTasks.forEach(this::addFixedDelayTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,fixed,delay,tasks,for,each,this,add,fixed,delay,task
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1500448076;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		fixedDelayTasks.forEach(this::addFixedDelayTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,fixed,delay,tasks,for,each,this,add,fixed,delay,task
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1509989799;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		fixedDelayTasks.forEach(this::addFixedDelayTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,fixed,delay,tasks,for,each,this,add,fixed,delay,task
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1517324430;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		fixedDelayTasks.forEach(this::addFixedDelayTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,fixed,delay,tasks,for,each,this,add,fixed,delay,task
ScheduledTaskRegistrar -> public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks);1530174524;Specify triggered tasks as a Map of Runnables (the tasks) and fixed-delay values._@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void setFixedDelayTasks(Map<Runnable, Long> fixedDelayTasks) {_		this.fixedDelayTasks = new ArrayList<>()__		fixedDelayTasks.forEach(this::addFixedDelayTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,fixed,delay,values,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,set,fixed,delay,tasks,map,runnable,long,fixed,delay,tasks,this,fixed,delay,tasks,new,array,list,fixed,delay,tasks,for,each,this,add,fixed,delay,task
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1328020251;Set the {@link org.springframework.scheduling.TaskScheduler} to register scheduled_tasks with, or a {@link java.util.concurrent.ScheduledExecutorService} to be_wrapped as a TaskScheduler.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,org,springframework,scheduling,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1337698097;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1355313310;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1356735495;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1357119239;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1362408075;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1368482696;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1410983746;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1424955993;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1425061577;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1447421128;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1447442804;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1447445908;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1462374368;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1467730834;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1474905889;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1495868221;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1496837955;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1497250713;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(Object scheduler);1498780456;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(Object scheduler) {_		Assert.notNull(scheduler, "Scheduler object must not be null")__		if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,object,scheduler,assert,not,null,scheduler,scheduler,object,must,not,be,null,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1337698097;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1355313310;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1356735495;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1357119239;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1362408075;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1368482696;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1410983746;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1424955993;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1425061577;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1447421128;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1447442804;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1447445908;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1462374368;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1467730834;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1474905889;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1495868221;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1496837955;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1497250713;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1498780456;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1500448076;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1509989799;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1517324430;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasksList(List<CronTask> cronTasks);1530174524;Specify triggered tasks as a list of {@link CronTask} objects. Primarily used by_{@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setCronTasksList(List<CronTask> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,list,of,link,cron,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,cron,tasks,list,list,cron,task,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1424955993;Return the cron tasks as a list of {@link CronTask}_@since 4.2;public List<CronTask> getCronTaskList() {_		return Collections.unmodifiableList(this.cronTasks)__	};return,the,cron,tasks,as,a,list,of,link,cron,task,since,4,2;public,list,cron,task,get,cron,task,list,return,collections,unmodifiable,list,this,cron,tasks
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1425061577;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@since 4.2;public List<CronTask> getCronTaskList() {_		return Collections.unmodifiableList(this.cronTasks)__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,since,4,2;public,list,cron,task,get,cron,task,list,return,collections,unmodifiable,list,this,cron,tasks
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1447421128;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) : null)__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,null
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1447442804;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) : Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1447445908;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.<CronTask>emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,cron,task,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1462374368;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.<CronTask>emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,cron,task,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1467730834;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.<CronTask>emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,cron,task,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1474905889;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1495868221;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1496837955;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1497250713;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1498780456;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1500448076;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1509989799;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1517324430;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<CronTask> getCronTaskList();1530174524;Get the cron tasks as an unmodifiable list of {@link CronTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<CronTask> getCronTaskList() {_		return (this.cronTasks != null ? Collections.unmodifiableList(this.cronTasks) :_				Collections.emptyList())__	};get,the,cron,tasks,as,an,unmodifiable,list,of,link,cron,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,cron,task,get,cron,task,list,return,this,cron,tasks,null,collections,unmodifiable,list,this,cron,tasks,collections,empty,list
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1337698097;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1355313310;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1356735495;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1357119239;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1362408075;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1368482696;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1410983746;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1424955993;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1425061577;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1447421128;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1447442804;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1447445908;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1462374368;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<TriggerTask>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,trigger,task,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1467730834;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1474905889;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1495868221;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1496837955;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1497250713;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1498780456;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1500448076;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1509989799;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1517324430;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public void addTriggerTask(TriggerTask task);1530174524;Add a {@code TriggerTask}._@since 3.2_@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addTriggerTask(TriggerTask task) {_		if (this.triggerTasks == null) {_			this.triggerTasks = new ArrayList<>()__		}_		this.triggerTasks.add(task)__	};add,a,code,trigger,task,since,3,2,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,trigger,task,trigger,task,task,if,this,trigger,tasks,null,this,trigger,tasks,new,array,list,this,trigger,tasks,add,task
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1424955993;Return the trigger tasks as a list of {@link TriggerTask}_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return Collections.unmodifiableList(this.triggerTasks)__	};return,the,trigger,tasks,as,a,list,of,link,trigger,task,since,4,2;public,list,trigger,task,get,trigger,task,list,return,collections,unmodifiable,list,this,trigger,tasks
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1425061577;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return Collections.unmodifiableList(this.triggerTasks)__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,since,4,2;public,list,trigger,task,get,trigger,task,list,return,collections,unmodifiable,list,this,trigger,tasks
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1447421128;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) : null)__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,null
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1447442804;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) : Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1447445908;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.<TriggerTask>emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,trigger,task,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1462374368;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.<TriggerTask>emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,trigger,task,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1467730834;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.<TriggerTask>emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,trigger,task,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1474905889;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1495868221;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1496837955;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1497250713;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1498780456;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1500448076;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1509989799;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1517324430;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<TriggerTask> getTriggerTaskList();1530174524;Get the trigger tasks as an unmodifiable list of {@link TriggerTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<TriggerTask> getTriggerTaskList() {_		return (this.triggerTasks != null? Collections.unmodifiableList(this.triggerTasks) :_				Collections.emptyList())__	};get,the,trigger,tasks,as,an,unmodifiable,list,of,link,trigger,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,trigger,task,get,trigger,task,list,return,this,trigger,tasks,null,collections,unmodifiable,list,this,trigger,tasks,collections,empty,list
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleTriggerTask(TriggerTask task);1496837955;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;@Nullable_	public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;nullable,public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleTriggerTask(TriggerTask task);1497250713;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;@Nullable_	public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;nullable,public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleTriggerTask(TriggerTask task);1498780456;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;@Nullable_	public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;nullable,public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleTriggerTask(TriggerTask task);1500448076;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;@Nullable_	public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;nullable,public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleTriggerTask(TriggerTask task);1509989799;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;@Nullable_	public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;nullable,public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleTriggerTask(TriggerTask task);1517324430;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;@Nullable_	public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;nullable,public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleTriggerTask(TriggerTask task);1530174524;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;@Nullable_	public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;nullable,public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleTriggerTask(TriggerTask task);1462374368;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleTriggerTask(TriggerTask task);1467730834;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleTriggerTask(TriggerTask task);1474905889;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleTriggerTask(TriggerTask task);1495868221;Schedule the specified trigger task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_@since 4.3;public ScheduledTask scheduleTriggerTask(TriggerTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addTriggerTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,trigger,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,since,4,3;public,scheduled,task,schedule,trigger,task,trigger,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,trigger,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1424955993;Return the fixed-delay tasks as a list of {@link IntervalTask}_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return Collections.unmodifiableList(this.fixedDelayTasks)__	};return,the,fixed,delay,tasks,as,a,list,of,link,interval,task,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,collections,unmodifiable,list,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1425061577;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return Collections.unmodifiableList(this.fixedDelayTasks)__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,collections,unmodifiable,list,this,fixed,delay,tasks
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1447421128;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) : null)__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,null
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1447442804;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) : Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1447445908;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.<IntervalTask>emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,interval,task,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1462374368;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.<IntervalTask>emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,interval,task,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1467730834;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.<IntervalTask>emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,interval,task,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1474905889;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1495868221;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1496837955;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1497250713;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1498780456;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1500448076;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1509989799;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1517324430;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedDelayTaskList();1530174524;Get the fixed-delay tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedDelayTaskList() {_		return (this.fixedDelayTasks != null ? Collections.unmodifiableList(this.fixedDelayTasks) :_				Collections.emptyList())__	};get,the,fixed,delay,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,delay,task,list,return,this,fixed,delay,tasks,null,collections,unmodifiable,list,this,fixed,delay,tasks,collections,empty,list
ScheduledTaskRegistrar -> public ScheduledTask scheduleCronTask(CronTask task);1462374368;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleCronTask(CronTask task);1467730834;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleCronTask(CronTask task);1474905889;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedRateTask(FixedRateTask task);1509989799;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 5.0.2;@Nullable_	public ScheduledTask scheduleFixedRateTask(FixedRateTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,5,0,2;nullable,public,scheduled,task,schedule,fixed,rate,task,fixed,rate,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedRateTask(FixedRateTask task);1517324430;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 5.0.2;@Nullable_	public ScheduledTask scheduleFixedRateTask(FixedRateTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,5,0,2;nullable,public,scheduled,task,schedule,fixed,rate,task,fixed,rate,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedRateTask(FixedRateTask task);1530174524;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 5.0.2;@Nullable_	public ScheduledTask scheduleFixedRateTask(FixedRateTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,5,0,2;nullable,public,scheduled,task,schedule,fixed,rate,task,fixed,rate,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1337698097;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1355313310;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1356735495;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1357119239;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1362408075;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1368482696;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1410983746;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1424955993;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1425061577;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1447421128;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1447442804;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1447445908;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1462374368;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<IntervalTask>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,interval,task,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1467730834;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1474905889;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1495868221;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1496837955;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1497250713;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1498780456;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1500448076;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1509989799;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1517324430;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> public void addFixedDelayTask(IntervalTask task);1530174524;Add a fixed-delay {@link IntervalTask}._@since 3.2_@see TaskScheduler#scheduleWithFixedDelay(Runnable, long);public void addFixedDelayTask(IntervalTask task) {_		if (this.fixedDelayTasks == null) {_			this.fixedDelayTasks = new ArrayList<>()__		}_		this.fixedDelayTasks.add(task)__	};add,a,fixed,delay,link,interval,task,since,3,2,see,task,scheduler,schedule,with,fixed,delay,runnable,long;public,void,add,fixed,delay,task,interval,task,task,if,this,fixed,delay,tasks,null,this,fixed,delay,tasks,new,array,list,this,fixed,delay,tasks,add,task
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedDelayTask(FixedDelayTask task);1509989799;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 5.0.2;@Nullable_	public ScheduledTask scheduleFixedDelayTask(FixedDelayTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,5,0,2;nullable,public,scheduled,task,schedule,fixed,delay,task,fixed,delay,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedDelayTask(FixedDelayTask task);1517324430;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 5.0.2;@Nullable_	public ScheduledTask scheduleFixedDelayTask(FixedDelayTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,5,0,2;nullable,public,scheduled,task,schedule,fixed,delay,task,fixed,delay,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedDelayTask(FixedDelayTask task);1530174524;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 5.0.2;@Nullable_	public ScheduledTask scheduleFixedDelayTask(FixedDelayTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,5,0,2;nullable,public,scheduled,task,schedule,fixed,delay,task,fixed,delay,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public void setScheduler(@Nullable Object scheduler);1500448076;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(@Nullable Object scheduler) {_		if (scheduler == null) {_			this.taskScheduler = null__		}_		else if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,nullable,object,scheduler,if,scheduler,null,this,task,scheduler,null,else,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(@Nullable Object scheduler);1509989799;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(@Nullable Object scheduler) {_		if (scheduler == null) {_			this.taskScheduler = null__		}_		else if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,nullable,object,scheduler,if,scheduler,null,this,task,scheduler,null,else,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(@Nullable Object scheduler);1517324430;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(@Nullable Object scheduler) {_		if (scheduler == null) {_			this.taskScheduler = null__		}_		else if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,nullable,object,scheduler,if,scheduler,null,this,task,scheduler,null,else,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setScheduler(@Nullable Object scheduler);1530174524;Set the {@link TaskScheduler} to register scheduled tasks with, or a_{@link java.util.concurrent.ScheduledExecutorService} to be wrapped as a_{@code TaskScheduler}.;public void setScheduler(@Nullable Object scheduler) {_		if (scheduler == null) {_			this.taskScheduler = null__		}_		else if (scheduler instanceof TaskScheduler) {_			this.taskScheduler = (TaskScheduler) scheduler__		}_		else if (scheduler instanceof ScheduledExecutorService) {_			this.taskScheduler = new ConcurrentTaskScheduler(((ScheduledExecutorService) scheduler))__		}_		else {_			throw new IllegalArgumentException("Unsupported scheduler type: " + scheduler.getClass())__		}_	};set,the,link,task,scheduler,to,register,scheduled,tasks,with,or,a,link,java,util,concurrent,scheduled,executor,service,to,be,wrapped,as,a,code,task,scheduler;public,void,set,scheduler,nullable,object,scheduler,if,scheduler,null,this,task,scheduler,null,else,if,scheduler,instanceof,task,scheduler,this,task,scheduler,task,scheduler,scheduler,else,if,scheduler,instanceof,scheduled,executor,service,this,task,scheduler,new,concurrent,task,scheduler,scheduled,executor,service,scheduler,else,throw,new,illegal,argument,exception,unsupported,scheduler,type,scheduler,get,class
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1337698097;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1355313310;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1356735495;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1357119239;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1362408075;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1368482696;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1410983746;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1424955993;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1425061577;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1447421128;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1447442804;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1447445908;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1462374368;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1467730834;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1474905889;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1495868221;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1496837955;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1497250713;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1498780456;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1500448076;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1509989799;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1517324430;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasksList(List<TriggerTask> triggerTasks);1530174524;Specify triggered tasks as a list of {@link TriggerTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setTriggerTasksList(List<TriggerTask> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,list,of,link,trigger,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,trigger,tasks,list,list,trigger,task,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedRateTask(IntervalTask task);1495868221;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,rate,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedRateTask(IntervalTask task);1496837955;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,rate,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedRateTask(IntervalTask task);1497250713;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,rate,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedRateTask(IntervalTask task);1498780456;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,rate,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleFixedRateTask(IntervalTask task);1500448076;Schedule the specified fixed-rate task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleFixedRateTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleAtFixedRate(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedRateTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,rate,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,fixed,rate,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,else,add,fixed,rate,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleCronTask(CronTask task);1495868221;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleCronTask(CronTask task);1496837955;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleCronTask(CronTask task);1497250713;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleCronTask(CronTask task);1498780456;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleCronTask(CronTask task);1500448076;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleCronTask(CronTask task);1509989799;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleCronTask(CronTask task);1517324430;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> @Nullable 	public ScheduledTask scheduleCronTask(CronTask task);1530174524;Schedule the specified cron task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;@Nullable_	public ScheduledTask scheduleCronTask(CronTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask(task)__			newTask = true__		}_		if (this.taskScheduler != null) {_			scheduledTask.future = this.taskScheduler.schedule(task.getRunnable(), task.getTrigger())__		}_		else {_			addCronTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,cron,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;nullable,public,scheduled,task,schedule,cron,task,cron,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,task,new,task,true,if,this,task,scheduler,null,scheduled,task,future,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,else,add,cron,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> protected void scheduleTasks();1362408075;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> protected void scheduleTasks();1368482696;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> protected void scheduleTasks();1410983746;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> protected void scheduleTasks();1424955993;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> protected void scheduleTasks();1425061577;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> protected void scheduleTasks();1447421128;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> protected void scheduleTasks();1447442804;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> protected void scheduleTasks();1447445908;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		long now = System.currentTimeMillis()___		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				this.scheduledFutures.add(this.taskScheduler.schedule(_						task.getRunnable(), task.getTrigger()))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleAtFixedRate(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				if (task.getInitialDelay() > 0) {_					Date startTime = new Date(now + task.getInitialDelay())__					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), startTime, task.getInterval()))__				}_				else {_					this.scheduledFutures.add(this.taskScheduler.scheduleWithFixedDelay(_							task.getRunnable(), task.getInterval()))__				}_			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,long,now,system,current,time,millis,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,this,scheduled,futures,add,this,task,scheduler,schedule,task,get,runnable,task,get,trigger,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,at,fixed,rate,task,get,runnable,task,get,interval,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,if,task,get,initial,delay,0,date,start,time,new,date,now,task,get,initial,delay,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,this,scheduled,futures,add,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval
ScheduledTaskRegistrar -> protected void scheduleTasks();1462374368;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> protected void scheduleTasks();1467730834;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> protected void scheduleTasks();1474905889;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> protected void scheduleTasks();1495868221;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> protected void scheduleTasks();1496837955;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> protected void scheduleTasks();1497250713;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> protected void scheduleTasks();1498780456;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> protected void scheduleTasks();1500448076;Schedule all registered tasks against the underlying {@linkplain_#setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> protected void scheduleTasks();1509989799;Schedule all registered tasks against the underlying_{@linkplain #setTaskScheduler(TaskScheduler) task scheduler}.;protected void scheduleTasks() {_		if (this.taskScheduler == null) {_			this.localExecutor = Executors.newSingleThreadScheduledExecutor()__			this.taskScheduler = new ConcurrentTaskScheduler(this.localExecutor)__		}_		if (this.triggerTasks != null) {_			for (TriggerTask task : this.triggerTasks) {_				addScheduledTask(scheduleTriggerTask(task))__			}_		}_		if (this.cronTasks != null) {_			for (CronTask task : this.cronTasks) {_				addScheduledTask(scheduleCronTask(task))__			}_		}_		if (this.fixedRateTasks != null) {_			for (IntervalTask task : this.fixedRateTasks) {_				addScheduledTask(scheduleFixedRateTask(task))__			}_		}_		if (this.fixedDelayTasks != null) {_			for (IntervalTask task : this.fixedDelayTasks) {_				addScheduledTask(scheduleFixedDelayTask(task))__			}_		}_	};schedule,all,registered,tasks,against,the,underlying,linkplain,set,task,scheduler,task,scheduler,task,scheduler;protected,void,schedule,tasks,if,this,task,scheduler,null,this,local,executor,executors,new,single,thread,scheduled,executor,this,task,scheduler,new,concurrent,task,scheduler,this,local,executor,if,this,trigger,tasks,null,for,trigger,task,task,this,trigger,tasks,add,scheduled,task,schedule,trigger,task,task,if,this,cron,tasks,null,for,cron,task,task,this,cron,tasks,add,scheduled,task,schedule,cron,task,task,if,this,fixed,rate,tasks,null,for,interval,task,task,this,fixed,rate,tasks,add,scheduled,task,schedule,fixed,rate,task,task,if,this,fixed,delay,tasks,null,for,interval,task,task,this,fixed,delay,tasks,add,scheduled,task,schedule,fixed,delay,task,task
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1328020251;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = triggerTasks__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,trigger,tasks
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1337698097;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1355313310;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1356735495;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1357119239;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1362408075;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1368482696;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1410983746;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1424955993;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1425061577;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1447421128;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			this.triggerTasks.add(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,this,trigger,tasks,add,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1447442804;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			addTriggerTask(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,add,trigger,task,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1447445908;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			addTriggerTask(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,add,trigger,task,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1462374368;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<TriggerTask>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			addTriggerTask(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,task,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,add,trigger,task,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1467730834;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			addTriggerTask(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,add,trigger,task,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1474905889;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			addTriggerTask(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,add,trigger,task,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1495868221;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			addTriggerTask(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,add,trigger,task,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1496837955;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		for (Map.Entry<Runnable, Trigger> task : triggerTasks.entrySet()) {_			addTriggerTask(new TriggerTask(task.getKey(), task.getValue()))__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,for,map,entry,runnable,trigger,task,trigger,tasks,entry,set,add,trigger,task,new,trigger,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1497250713;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		triggerTasks.forEach((task, trigger) -> addTriggerTask(new TriggerTask(task, trigger)))__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,tasks,for,each,task,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1498780456;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		triggerTasks.forEach((task, trigger) -> addTriggerTask(new TriggerTask(task, trigger)))__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,tasks,for,each,task,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1500448076;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		triggerTasks.forEach((task, trigger) -> addTriggerTask(new TriggerTask(task, trigger)))__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,tasks,for,each,task,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1509989799;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		triggerTasks.forEach((task, trigger) -> addTriggerTask(new TriggerTask(task, trigger)))__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,tasks,for,each,task,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1517324430;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		triggerTasks.forEach((task, trigger) -> addTriggerTask(new TriggerTask(task, trigger)))__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,tasks,for,each,task,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks);1530174524;Specify triggered tasks as a Map of Runnables (the tasks) and Trigger objects_(typically custom implementations of the {@link Trigger} interface).;public void setTriggerTasks(Map<Runnable, Trigger> triggerTasks) {_		this.triggerTasks = new ArrayList<>()__		triggerTasks.forEach((task, trigger) -> addTriggerTask(new TriggerTask(task, trigger)))__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,trigger,objects,typically,custom,implementations,of,the,link,trigger,interface;public,void,set,trigger,tasks,map,runnable,trigger,trigger,tasks,this,trigger,tasks,new,array,list,trigger,tasks,for,each,task,trigger,add,trigger,task,new,trigger,task,task,trigger
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1328020251;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		if (this.fixedRateTasks == null) {_			this.fixedRateTasks = new HashMap<Runnable, Long>()__		}_		this.fixedRateTasks.put(task, period)__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,if,this,fixed,rate,tasks,null,this,fixed,rate,tasks,new,hash,map,runnable,long,this,fixed,rate,tasks,put,task,period
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1337698097;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		this.addFixedRateTask(new IntervalTask(task, period, 0))__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,this,add,fixed,rate,task,new,interval,task,task,period,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1355313310;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		this.addFixedRateTask(new IntervalTask(task, period, 0))__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,this,add,fixed,rate,task,new,interval,task,task,period,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1356735495;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		this.addFixedRateTask(new IntervalTask(task, period, 0))__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,this,add,fixed,rate,task,new,interval,task,task,period,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1357119239;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		this.addFixedRateTask(new IntervalTask(task, period, 0))__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,this,add,fixed,rate,task,new,interval,task,task,period,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1362408075;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		this.addFixedRateTask(new IntervalTask(task, period, 0))__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,this,add,fixed,rate,task,new,interval,task,task,period,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1368482696;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		this.addFixedRateTask(new IntervalTask(task, period, 0))__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,this,add,fixed,rate,task,new,interval,task,task,period,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1410983746;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		this.addFixedRateTask(new IntervalTask(task, period, 0))__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,this,add,fixed,rate,task,new,interval,task,task,period,0
ScheduledTaskRegistrar -> public void addFixedRateTask(Runnable task, long period);1424955993;Add a Runnable task to be triggered at the given fixed-rate period._@see TaskScheduler#scheduleAtFixedRate(Runnable, long);public void addFixedRateTask(Runnable task, long period) {_		this.addFixedRateTask(new IntervalTask(task, period, 0))__	};add,a,runnable,task,to,be,triggered,at,the,given,fixed,rate,period,see,task,scheduler,schedule,at,fixed,rate,runnable,long;public,void,add,fixed,rate,task,runnable,task,long,period,this,add,fixed,rate,task,new,interval,task,task,period,0
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1424955993;Return the fixed-rate tasks as a list of {@link IntervalTask}._@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return Collections.unmodifiableList(this.fixedRateTasks)__	};return,the,fixed,rate,tasks,as,a,list,of,link,interval,task,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,collections,unmodifiable,list,this,fixed,rate,tasks
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1425061577;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return Collections.unmodifiableList(this.fixedRateTasks)__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,collections,unmodifiable,list,this,fixed,rate,tasks
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1447421128;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) : null)__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,null
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1447442804;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) : Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1447445908;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.<IntervalTask>emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,interval,task,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1462374368;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.<IntervalTask>emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,interval,task,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1467730834;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.<IntervalTask>emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,interval,task,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1474905889;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1495868221;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1496837955;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1497250713;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1498780456;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1500448076;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1509989799;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1517324430;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public List<IntervalTask> getFixedRateTaskList();1530174524;Get the fixed-rate tasks as an unmodifiable list of {@link IntervalTask} objects._@return the list of tasks (never {@code null})_@since 4.2;public List<IntervalTask> getFixedRateTaskList() {_		return (this.fixedRateTasks != null ? Collections.unmodifiableList(this.fixedRateTasks) :_				Collections.emptyList())__	};get,the,fixed,rate,tasks,as,an,unmodifiable,list,of,link,interval,task,objects,return,the,list,of,tasks,never,code,null,since,4,2;public,list,interval,task,get,fixed,rate,task,list,return,this,fixed,rate,tasks,null,collections,unmodifiable,list,this,fixed,rate,tasks,collections,empty,list
ScheduledTaskRegistrar -> public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1462374368;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,fixed,delay,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1467730834;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,fixed,delay,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public ScheduledTask scheduleFixedDelayTask(IntervalTask task);1474905889;Schedule the specified fixed-delay task, either right away if possible_or on initialization of the scheduler._@return a handle to the scheduled task, allowing to cancel it_(or {@code null} if processing a previously registered task)_@since 4.3;public ScheduledTask scheduleFixedDelayTask(IntervalTask task) {_		ScheduledTask scheduledTask = this.unresolvedTasks.remove(task)__		boolean newTask = false__		if (scheduledTask == null) {_			scheduledTask = new ScheduledTask()__			newTask = true__		}_		if (this.taskScheduler != null) {_			if (task.getInitialDelay() > 0) {_				Date startTime = new Date(System.currentTimeMillis() + task.getInitialDelay())__				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), startTime, task.getInterval())__			}_			else {_				scheduledTask.future =_						this.taskScheduler.scheduleWithFixedDelay(task.getRunnable(), task.getInterval())__			}_		}_		else {_			addFixedDelayTask(task)__			this.unresolvedTasks.put(task, scheduledTask)__		}_		return (newTask ? scheduledTask : null)__	};schedule,the,specified,fixed,delay,task,either,right,away,if,possible,or,on,initialization,of,the,scheduler,return,a,handle,to,the,scheduled,task,allowing,to,cancel,it,or,code,null,if,processing,a,previously,registered,task,since,4,3;public,scheduled,task,schedule,fixed,delay,task,interval,task,task,scheduled,task,scheduled,task,this,unresolved,tasks,remove,task,boolean,new,task,false,if,scheduled,task,null,scheduled,task,new,scheduled,task,new,task,true,if,this,task,scheduler,null,if,task,get,initial,delay,0,date,start,time,new,date,system,current,time,millis,task,get,initial,delay,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,start,time,task,get,interval,else,scheduled,task,future,this,task,scheduler,schedule,with,fixed,delay,task,get,runnable,task,get,interval,else,add,fixed,delay,task,task,this,unresolved,tasks,put,task,scheduled,task,return,new,task,scheduled,task,null
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1328020251;Return the scheduler instance for this registrar (may be null);public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,scheduler,instance,for,this,registrar,may,be,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1337698097;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1355313310;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1356735495;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1357119239;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1362408075;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1368482696;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1410983746;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1424955993;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1425061577;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1447421128;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1447442804;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1447445908;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1462374368;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1467730834;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public TaskScheduler getScheduler();1474905889;Return the {@link TaskScheduler} instance for this registrar (may be {@code null}).;public TaskScheduler getScheduler() {_		return this.taskScheduler__	};return,the,link,task,scheduler,instance,for,this,registrar,may,be,code,null;public,task,scheduler,get,scheduler,return,this,task,scheduler
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1328020251;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = cronTasks__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,cron,tasks
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1337698097;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1355313310;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1356735495;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1357119239;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1362408075;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1368482696;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1410983746;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1424955993;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1425061577;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1447421128;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			this.addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,this,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1447442804;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1447445908;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1462374368;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<CronTask>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,task,for,map,entry,runnable,string,task,cron,tasks,entry,set,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1467730834;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,for,map,entry,runnable,string,task,cron,tasks,entry,set,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1474905889;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,for,map,entry,runnable,string,task,cron,tasks,entry,set,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1495868221;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,for,map,entry,runnable,string,task,cron,tasks,entry,set,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1496837955;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		for (Map.Entry<Runnable, String> task : cronTasks.entrySet()) {_			addCronTask(task.getKey(), task.getValue())__		}_	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,for,map,entry,runnable,string,task,cron,tasks,entry,set,add,cron,task,task,get,key,task,get,value
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1497250713;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		cronTasks.forEach(this::addCronTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,tasks,for,each,this,add,cron,task
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1498780456;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		cronTasks.forEach(this::addCronTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,tasks,for,each,this,add,cron,task
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1500448076;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		cronTasks.forEach(this::addCronTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,tasks,for,each,this,add,cron,task
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1509989799;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		cronTasks.forEach(this::addCronTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,tasks,for,each,this,add,cron,task
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1517324430;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		cronTasks.forEach(this::addCronTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,tasks,for,each,this,add,cron,task
ScheduledTaskRegistrar -> public void setCronTasks(Map<Runnable, String> cronTasks);1530174524;Specify triggered tasks as a Map of Runnables (the tasks) and cron expressions._@see CronTrigger;public void setCronTasks(Map<Runnable, String> cronTasks) {_		this.cronTasks = new ArrayList<>()__		cronTasks.forEach(this::addCronTask)__	};specify,triggered,tasks,as,a,map,of,runnables,the,tasks,and,cron,expressions,see,cron,trigger;public,void,set,cron,tasks,map,runnable,string,cron,tasks,this,cron,tasks,new,array,list,cron,tasks,for,each,this,add,cron,task
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1337698097;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1355313310;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1356735495;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1357119239;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1362408075;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1368482696;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1410983746;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1424955993;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1425061577;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1447421128;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1447442804;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1447445908;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1462374368;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1467730834;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1474905889;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1495868221;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1496837955;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1497250713;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1498780456;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1500448076;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1509989799;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1517324430;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks);1530174524;Specify fixed-rate tasks as a list of {@link IntervalTask} objects. Primarily used_by {@code <task:*>} namespace parsing._@since 3.2_@see ScheduledTasksBeanDefinitionParser;public void setFixedRateTasksList(List<IntervalTask> fixedRateTasks) {_		this.fixedRateTasks = fixedRateTasks__	};specify,fixed,rate,tasks,as,a,list,of,link,interval,task,objects,primarily,used,by,code,task,namespace,parsing,since,3,2,see,scheduled,tasks,bean,definition,parser;public,void,set,fixed,rate,tasks,list,list,interval,task,fixed,rate,tasks,this,fixed,rate,tasks,fixed,rate,tasks
ScheduledTaskRegistrar -> @Override 	public Set<ScheduledTask> getScheduledTasks();1509989799;Return all locally registered tasks that have been scheduled by this registrar._@since 5.0.2_@see #addTriggerTask_@see #addCronTask_@see #addFixedRateTask_@see #addFixedDelayTask;@Override_	public Set<ScheduledTask> getScheduledTasks() {_		return Collections.unmodifiableSet(this.scheduledTasks)__	};return,all,locally,registered,tasks,that,have,been,scheduled,by,this,registrar,since,5,0,2,see,add,trigger,task,see,add,cron,task,see,add,fixed,rate,task,see,add,fixed,delay,task;override,public,set,scheduled,task,get,scheduled,tasks,return,collections,unmodifiable,set,this,scheduled,tasks
ScheduledTaskRegistrar -> @Override 	public Set<ScheduledTask> getScheduledTasks();1517324430;Return all locally registered tasks that have been scheduled by this registrar._@since 5.0.2_@see #addTriggerTask_@see #addCronTask_@see #addFixedRateTask_@see #addFixedDelayTask;@Override_	public Set<ScheduledTask> getScheduledTasks() {_		return Collections.unmodifiableSet(this.scheduledTasks)__	};return,all,locally,registered,tasks,that,have,been,scheduled,by,this,registrar,since,5,0,2,see,add,trigger,task,see,add,cron,task,see,add,fixed,rate,task,see,add,fixed,delay,task;override,public,set,scheduled,task,get,scheduled,tasks,return,collections,unmodifiable,set,this,scheduled,tasks
ScheduledTaskRegistrar -> @Override 	public Set<ScheduledTask> getScheduledTasks();1530174524;Return all locally registered tasks that have been scheduled by this registrar._@since 5.0.2_@see #addTriggerTask_@see #addCronTask_@see #addFixedRateTask_@see #addFixedDelayTask;@Override_	public Set<ScheduledTask> getScheduledTasks() {_		return Collections.unmodifiableSet(this.scheduledTasks)__	};return,all,locally,registered,tasks,that,have,been,scheduled,by,this,registrar,since,5,0,2,see,add,trigger,task,see,add,cron,task,see,add,fixed,rate,task,see,add,fixed,delay,task;override,public,set,scheduled,task,get,scheduled,tasks,return,collections,unmodifiable,set,this,scheduled,tasks
