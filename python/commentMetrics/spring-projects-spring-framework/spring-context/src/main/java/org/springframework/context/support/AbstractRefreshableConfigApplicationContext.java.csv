commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the config locations for this application context in init-param style,  * i.e. with distinct locations separated by commas, semicolons or whitespace.  * <p>If not set, the implementation may use a default as appropriate.  */ ;/**  * Set the config locations for this application context in init-param style,  * i.e. with distinct locations separated by commas, semicolons or whitespace.  * <p>If not set, the implementation may use a default as appropriate.  */ public void setConfigLocation(String location) {     setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS)). }
true;public;1;12;/**  * Set the config locations for this application context.  * <p>If not set, the implementation may use a default as appropriate.  */ ;/**  * Set the config locations for this application context.  * <p>If not set, the implementation may use a default as appropriate.  */ public void setConfigLocations(@Nullable String... locations) {     if (locations != null) {         Assert.noNullElements(locations, "Config locations must not be null").         this.configLocations = new String[locations.length].         for (int i = 0. i < locations.length. i++) {             this.configLocations[i] = resolvePath(locations[i]).trim().         }     } else {         this.configLocations = null.     } }
true;protected;0;4;/**  * Return an array of resource locations, referring to the XML bean definition  * files that this context should be built with. Can also include location  * patterns, which will get resolved via a ResourcePatternResolver.  * <p>The default implementation returns {@code null}. Subclasses can override  * this to provide a set of resource locations to load bean definitions from.  * @return an array of resource locations, or {@code null} if none  * @see #getResources  * @see #getResourcePatternResolver  */ ;/**  * Return an array of resource locations, referring to the XML bean definition  * files that this context should be built with. Can also include location  * patterns, which will get resolved via a ResourcePatternResolver.  * <p>The default implementation returns {@code null}. Subclasses can override  * this to provide a set of resource locations to load bean definitions from.  * @return an array of resource locations, or {@code null} if none  * @see #getResources  * @see #getResourcePatternResolver  */ @Nullable protected String[] getConfigLocations() {     return (this.configLocations != null ? this.configLocations : getDefaultConfigLocations()). }
true;protected;0;4;/**  * Return the default config locations to use, for the case where no  * explicit config locations have been specified.  * <p>The default implementation returns {@code null},  * requiring explicit config locations.  * @return an array of default config locations, if any  * @see #setConfigLocations  */ ;/**  * Return the default config locations to use, for the case where no  * explicit config locations have been specified.  * <p>The default implementation returns {@code null},  * requiring explicit config locations.  * @return an array of default config locations, if any  * @see #setConfigLocations  */ @Nullable protected String[] getDefaultConfigLocations() {     return null. }
true;protected;1;3;/**  * Resolve the given path, replacing placeholders with corresponding  * environment property values if necessary. Applied to config locations.  * @param path the original file path  * @return the resolved file path  * @see org.springframework.core.env.Environment#resolveRequiredPlaceholders(String)  */ ;/**  * Resolve the given path, replacing placeholders with corresponding  * environment property values if necessary. Applied to config locations.  * @param path the original file path  * @return the resolved file path  * @see org.springframework.core.env.Environment#resolveRequiredPlaceholders(String)  */ protected String resolvePath(String path) {     return getEnvironment().resolveRequiredPlaceholders(path). }
false;public;1;5;;@Override public void setId(String id) {     super.setId(id).     this.setIdCalled = true. }
true;public;1;7;/**  * Sets the id of this context to the bean name by default,  * for cases where the context instance is itself defined as a bean.  */ ;/**  * Sets the id of this context to the bean name by default,  * for cases where the context instance is itself defined as a bean.  */ @Override public void setBeanName(String name) {     if (!this.setIdCalled) {         super.setId(name).         setDisplayName("ApplicationContext '" + name + "'").     } }
true;public;0;6;/**  * Triggers {@link #refresh()} if not refreshed in the concrete context's  * constructor already.  */ ;/**  * Triggers {@link #refresh()} if not refreshed in the concrete context's  * constructor already.  */ @Override public void afterPropertiesSet() {     if (!isActive()) {         refresh().     } }
