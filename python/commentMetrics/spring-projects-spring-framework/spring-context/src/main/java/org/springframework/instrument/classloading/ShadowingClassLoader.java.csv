commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Add the given ClassFileTransformer to the list of transformers that this  * ClassLoader will apply.  * @param transformer the ClassFileTransformer  */ ;/**  * Add the given ClassFileTransformer to the list of transformers that this  * ClassLoader will apply.  * @param transformer the ClassFileTransformer  */ public void addTransformer(ClassFileTransformer transformer) {     Assert.notNull(transformer, "Transformer must not be null").     this.classFileTransformers.add(transformer). }
true;public;1;4;/**  * Copy all ClassFileTransformers from the given ClassLoader to the list of  * transformers that this ClassLoader will apply.  * @param other the ClassLoader to copy from  */ ;/**  * Copy all ClassFileTransformers from the given ClassLoader to the list of  * transformers that this ClassLoader will apply.  * @param other the ClassLoader to copy from  */ public void copyTransformers(ShadowingClassLoader other) {     Assert.notNull(other, "Other ClassLoader must not be null").     this.classFileTransformers.addAll(other.classFileTransformers). }
false;public;1;13;;@Override public Class<?> loadClass(String name) throws ClassNotFoundException {     if (shouldShadow(name)) {         Class<?> cls = this.classCache.get(name).         if (cls != null) {             return cls.         }         return doLoadClass(name).     } else {         return this.enclosingClassLoader.loadClass(name).     } }
true;private;1;4;/**  * Determine whether the given class should be excluded from shadowing.  * @param className the name of the class  * @return whether the specified class should be shadowed  */ ;/**  * Determine whether the given class should be excluded from shadowing.  * @param className the name of the class  * @return whether the specified class should be shadowed  */ private boolean shouldShadow(String className) {     return (!className.equals(getClass().getName()) && !className.endsWith("ShadowingClassLoader") && isEligibleForShadowing(className)). }
true;protected;1;3;/**  * Determine whether the specified class is eligible for shadowing  * by this class loader.  * @param className the class name to check  * @return whether the specified class is eligible  * @see #isExcluded  */ ;/**  * Determine whether the specified class is eligible for shadowing  * by this class loader.  * @param className the class name to check  * @return whether the specified class is eligible  * @see #isExcluded  */ protected boolean isEligibleForShadowing(String className) {     return !isExcluded(className). }
false;private;1;25;;private Class<?> doLoadClass(String name) throws ClassNotFoundException {     String internalName = StringUtils.replace(name, ".", "/") + ".class".     InputStream is = this.enclosingClassLoader.getResourceAsStream(internalName).     if (is == null) {         throw new ClassNotFoundException(name).     }     try {         byte[] bytes = FileCopyUtils.copyToByteArray(is).         bytes = applyTransformers(name, bytes).         Class<?> cls = defineClass(name, bytes, 0, bytes.length).         // Additional check for defining the package, if not defined yet.         if (cls.getPackage() == null) {             int packageSeparator = name.lastIndexOf('.').             if (packageSeparator != -1) {                 String packageName = name.substring(0, packageSeparator).                 definePackage(packageName, null, null, null, null, null, null, null).             }         }         this.classCache.put(name, cls).         return cls.     } catch (IOException ex) {         throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex).     } }
false;private;2;13;;private byte[] applyTransformers(String name, byte[] bytes) {     String internalName = StringUtils.replace(name, ".", "/").     try {         for (ClassFileTransformer transformer : this.classFileTransformers) {             byte[] transformed = transformer.transform(this, internalName, null, null, bytes).             bytes = (transformed != null ? transformed : bytes).         }         return bytes.     } catch (IllegalClassFormatException ex) {         throw new IllegalStateException(ex).     } }
false;public;1;4;;@Override public URL getResource(String name) {     return this.enclosingClassLoader.getResource(name). }
false;public;1;5;;@Override @Nullable public InputStream getResourceAsStream(String name) {     return this.enclosingClassLoader.getResourceAsStream(name). }
false;public;1;4;;@Override public Enumeration<URL> getResources(String name) throws IOException {     return this.enclosingClassLoader.getResources(name). }
