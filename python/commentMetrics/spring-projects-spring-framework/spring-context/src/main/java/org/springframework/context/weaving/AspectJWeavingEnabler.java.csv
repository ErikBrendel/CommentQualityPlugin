commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;public;1;4;;@Override public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {     this.loadTimeWeaver = loadTimeWeaver. }
false;public;0;4;;@Override public int getOrder() {     return HIGHEST_PRECEDENCE. }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     enableAspectJWeaving(this.loadTimeWeaver, this.beanClassLoader). }
true;public,static;2;14;/**  * Enable AspectJ weaving with the given {@link LoadTimeWeaver}.  * @param weaverToUse the LoadTimeWeaver to apply to (or {@code null} for a default weaver)  * @param beanClassLoader the class loader to create a default weaver for (if necessary)  */ ;/**  * Enable AspectJ weaving with the given {@link LoadTimeWeaver}.  * @param weaverToUse the LoadTimeWeaver to apply to (or {@code null} for a default weaver)  * @param beanClassLoader the class loader to create a default weaver for (if necessary)  */ public static void enableAspectJWeaving(@Nullable LoadTimeWeaver weaverToUse, @Nullable ClassLoader beanClassLoader) {     if (weaverToUse == null) {         if (InstrumentationLoadTimeWeaver.isInstrumentationAvailable()) {             weaverToUse = new InstrumentationLoadTimeWeaver(beanClassLoader).         } else {             throw new IllegalStateException("No LoadTimeWeaver available").         }     }     weaverToUse.addTransformer(new AspectJClassBypassingClassFileTransformer(new ClassPreProcessorAgentAdapter())). }
false;public;5;9;;@Override public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {     if (className.startsWith("org.aspectj") || className.startsWith("org/aspectj")) {         return classfileBuffer.     }     return this.delegate.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer). }
