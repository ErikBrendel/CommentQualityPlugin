# id;timestamp;commentText;codeText;commentWords;codeWords
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, 			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader);1377540280;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment,_			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader) {__		this.context = new ConditionContextImpl(registry, environment, applicationContext, classLoader, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,application,context,application,context,class,loader,class,loader,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,application,context,class,loader,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, 			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader);1377562322;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment,_			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, applicationContext, classLoader, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,application,context,application,context,class,loader,class,loader,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,application,context,class,loader,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, 			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader);1377625191;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment,_			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader) {__		this.context = new ConditionContextImpl(registry, environment, applicationContext, classLoader, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,application,context,application,context,class,loader,class,loader,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,application,context,class,loader,resource,loader
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1372363092;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1377540280;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1377562322;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1377625191;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1377640854;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1384168190;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1400245582;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1411015178;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1413848647;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1415280583;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1467730834;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1495868221;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1496263893;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1496837955;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1498780456;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1520529117;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata);1527623466;Determine if an item should be skipped based on {@code @Conditional} annotations._The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a_{@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})_@param metadata the meta data_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata) {_		return shouldSkip(metadata, null)__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,the,link,configuration,phase,will,be,deduced,from,the,type,of,item,i,e,a,code,configuration,class,will,be,link,configuration,phase,param,metadata,the,meta,data,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,return,should,skip,metadata,null
ConditionEvaluator -> public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase);1496837955;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		AnnotationAwareOrderComparator.sort(conditions)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if (requiredPhase == null || requiredPhase == phase) {_				if (!condition.matches(this.context, metadata)) {_					return true__				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,nullable,annotated,type,metadata,metadata,nullable,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,annotation,aware,order,comparator,sort,conditions,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase);1498780456;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		AnnotationAwareOrderComparator.sort(conditions)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if (requiredPhase == null || requiredPhase == phase) {_				if (!condition.matches(this.context, metadata)) {_					return true__				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,nullable,annotated,type,metadata,metadata,nullable,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,annotation,aware,order,comparator,sort,conditions,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase);1520529117;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		AnnotationAwareOrderComparator.sort(conditions)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if ((requiredPhase == null || requiredPhase == phase) && !condition.matches(this.context, metadata)) {_				return true__			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,nullable,annotated,type,metadata,metadata,nullable,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,annotation,aware,order,comparator,sort,conditions,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase);1527623466;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		AnnotationAwareOrderComparator.sort(conditions)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if ((requiredPhase == null || requiredPhase == phase) && !condition.matches(this.context, metadata)) {_				return true__			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,nullable,annotated,type,metadata,metadata,nullable,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,annotation,aware,order,comparator,sort,conditions,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1377640854;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1384168190;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1400245582;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1411015178;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1413848647;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1415280583;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1467730834;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1495868221;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader);1496263893;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {_		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,bean,definition,registry,registry,environment,environment,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(@Nullable BeanDefinitionRegistry registry, 			@Nullable Environment environment, @Nullable ResourceLoader resourceLoader);1496837955;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(@Nullable BeanDefinitionRegistry registry,_			@Nullable Environment environment, @Nullable ResourceLoader resourceLoader) {__		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,nullable,bean,definition,registry,registry,nullable,environment,environment,nullable,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(@Nullable BeanDefinitionRegistry registry, 			@Nullable Environment environment, @Nullable ResourceLoader resourceLoader);1498780456;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(@Nullable BeanDefinitionRegistry registry,_			@Nullable Environment environment, @Nullable ResourceLoader resourceLoader) {__		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,nullable,bean,definition,registry,registry,nullable,environment,environment,nullable,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(@Nullable BeanDefinitionRegistry registry, 			@Nullable Environment environment, @Nullable ResourceLoader resourceLoader);1520529117;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(@Nullable BeanDefinitionRegistry registry,_			@Nullable Environment environment, @Nullable ResourceLoader resourceLoader) {__		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,nullable,bean,definition,registry,registry,nullable,environment,environment,nullable,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public ConditionEvaluator(@Nullable BeanDefinitionRegistry registry, 			@Nullable Environment environment, @Nullable ResourceLoader resourceLoader);1527623466;Create a new {@link ConditionEvaluator} instance.;public ConditionEvaluator(@Nullable BeanDefinitionRegistry registry,_			@Nullable Environment environment, @Nullable ResourceLoader resourceLoader) {__		this.context = new ConditionContextImpl(registry, environment, resourceLoader)__	};create,a,new,link,condition,evaluator,instance;public,condition,evaluator,nullable,bean,definition,registry,registry,nullable,environment,environment,nullable,resource,loader,resource,loader,this,context,new,condition,context,impl,registry,environment,resource,loader
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1372363092;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(CONDITIONAL_ANNOTATION)) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, context.getClassLoader())__				ConfigurationPhase requiredPhase = null__				if (condition instanceof ConfigurationCondition) {_					requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__				}_				if (requiredPhase == null || requiredPhase == phase) {_					if (!condition.matches(context, metadata)) {_						return true__					}_				}_			}_		}_		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,context,get,class,loader,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1377540280;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, context.getClassLoader())__				ConfigurationPhase requiredPhase = null__				if (condition instanceof ConfigurationCondition) {_					requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__				}_				if (requiredPhase == null || requiredPhase == phase) {_					if (!condition.matches(context, metadata)) {_						return true__					}_				}_			}_		}_		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,context,get,class,loader,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1377562322;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, context.getClassLoader())__				ConfigurationPhase requiredPhase = null__				if (condition instanceof ConfigurationCondition) {_					requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__				}_				if (requiredPhase == null || requiredPhase == phase) {_					if (!condition.matches(context, metadata)) {_						return true__					}_				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,context,get,class,loader,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1377625191;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, context.getClassLoader())__				ConfigurationPhase requiredPhase = null__				if (condition instanceof ConfigurationCondition) {_					requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__				}_				if (requiredPhase == null || requiredPhase == phase) {_					if (!condition.matches(context, metadata)) {_						return true__					}_				}_			}_		}_		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,context,get,class,loader,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1377640854;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, context.getClassLoader())__				ConfigurationPhase requiredPhase = null__				if (condition instanceof ConfigurationCondition) {_					requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__				}_				if (requiredPhase == null || requiredPhase == phase) {_					if (!condition.matches(context, metadata)) {_						return true__					}_				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,context,get,class,loader,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1384168190;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, context.getClassLoader())__				ConfigurationPhase requiredPhase = null__				if (condition instanceof ConfigurationCondition) {_					requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__				}_				if (requiredPhase == null || requiredPhase == phase) {_					if (!condition.matches(context, metadata)) {_						return true__					}_				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,context,get,class,loader,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1400245582;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				ConfigurationPhase requiredPhase = null__				if (condition instanceof ConfigurationCondition) {_					requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__				}_				if (requiredPhase == null || requiredPhase == phase) {_					if (!condition.matches(this.context, metadata)) {_						return true__					}_				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1411015178;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<Condition>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		Collections.sort(conditions, AnnotationAwareOrderComparator.INSTANCE)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if (requiredPhase == null || requiredPhase == phase) {_				if (!condition.matches(this.context, metadata)) {_					return true__				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,condition,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,collections,sort,conditions,annotation,aware,order,comparator,instance,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1413848647;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<Condition>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		Collections.sort(conditions, AnnotationAwareOrderComparator.INSTANCE)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if (requiredPhase == null || requiredPhase == phase) {_				if (!condition.matches(this.context, metadata)) {_					return true__				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,condition,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,collections,sort,conditions,annotation,aware,order,comparator,instance,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1415280583;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<Condition>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		AnnotationAwareOrderComparator.sort(conditions)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if (requiredPhase == null || requiredPhase == phase) {_				if (!condition.matches(this.context, metadata)) {_					return true__				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,condition,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,annotation,aware,order,comparator,sort,conditions,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1467730834;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		AnnotationAwareOrderComparator.sort(conditions)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if (requiredPhase == null || requiredPhase == phase) {_				if (!condition.matches(this.context, metadata)) {_					return true__				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,annotation,aware,order,comparator,sort,conditions,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1495868221;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		AnnotationAwareOrderComparator.sort(conditions)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if (requiredPhase == null || requiredPhase == phase) {_				if (!condition.matches(this.context, metadata)) {_					return true__				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,annotation,aware,order,comparator,sort,conditions,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
ConditionEvaluator -> public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase);1496263893;Determine if an item should be skipped based on {@code @Conditional} annotations._@param metadata the meta data_@param phase the phase of the call_@return if the item should be skipped;public boolean shouldSkip(AnnotatedTypeMetadata metadata, ConfigurationPhase phase) {_		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {_			return false__		}__		if (phase == null) {_			if (metadata instanceof AnnotationMetadata &&_					ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {_				return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION)__			}_			return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)__		}__		List<Condition> conditions = new ArrayList<>()__		for (String[] conditionClasses : getConditionClasses(metadata)) {_			for (String conditionClass : conditionClasses) {_				Condition condition = getCondition(conditionClass, this.context.getClassLoader())__				conditions.add(condition)__			}_		}__		AnnotationAwareOrderComparator.sort(conditions)___		for (Condition condition : conditions) {_			ConfigurationPhase requiredPhase = null__			if (condition instanceof ConfigurationCondition) {_				requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase()__			}_			if (requiredPhase == null || requiredPhase == phase) {_				if (!condition.matches(this.context, metadata)) {_					return true__				}_			}_		}__		return false__	};determine,if,an,item,should,be,skipped,based,on,code,conditional,annotations,param,metadata,the,meta,data,param,phase,the,phase,of,the,call,return,if,the,item,should,be,skipped;public,boolean,should,skip,annotated,type,metadata,metadata,configuration,phase,phase,if,metadata,null,metadata,is,annotated,conditional,class,get,name,return,false,if,phase,null,if,metadata,instanceof,annotation,metadata,configuration,class,utils,is,configuration,candidate,annotation,metadata,metadata,return,should,skip,metadata,configuration,phase,return,should,skip,metadata,configuration,phase,list,condition,conditions,new,array,list,for,string,condition,classes,get,condition,classes,metadata,for,string,condition,class,condition,classes,condition,condition,get,condition,condition,class,this,context,get,class,loader,conditions,add,condition,annotation,aware,order,comparator,sort,conditions,for,condition,condition,conditions,configuration,phase,required,phase,null,if,condition,instanceof,configuration,condition,required,phase,configuration,condition,condition,get,configuration,phase,if,required,phase,null,required,phase,phase,if,condition,matches,this,context,metadata,return,true,return,false
