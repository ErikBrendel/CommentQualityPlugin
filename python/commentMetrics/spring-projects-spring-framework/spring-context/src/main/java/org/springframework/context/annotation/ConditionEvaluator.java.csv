commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Determine if an item should be skipped based on {@code @Conditional} annotations.  * The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a  * {@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})  * @param metadata the meta data  * @return if the item should be skipped  */ ;/**  * Determine if an item should be skipped based on {@code @Conditional} annotations.  * The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a  * {@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})  * @param metadata the meta data  * @return if the item should be skipped  */ public boolean shouldSkip(AnnotatedTypeMetadata metadata) {     return shouldSkip(metadata, null). }
true;public;2;35;/**  * Determine if an item should be skipped based on {@code @Conditional} annotations.  * @param metadata the meta data  * @param phase the phase of the call  * @return if the item should be skipped  */ ;/**  * Determine if an item should be skipped based on {@code @Conditional} annotations.  * @param metadata the meta data  * @param phase the phase of the call  * @return if the item should be skipped  */ public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase) {     if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {         return false.     }     if (phase == null) {         if (metadata instanceof AnnotationMetadata && ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) {             return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION).         }         return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN).     }     List<Condition> conditions = new ArrayList<>().     for (String[] conditionClasses : getConditionClasses(metadata)) {         for (String conditionClass : conditionClasses) {             Condition condition = getCondition(conditionClass, this.context.getClassLoader()).             conditions.add(condition).         }     }     AnnotationAwareOrderComparator.sort(conditions).     for (Condition condition : conditions) {         ConfigurationPhase requiredPhase = null.         if (condition instanceof ConfigurationCondition) {             requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase().         }         if ((requiredPhase == null || requiredPhase == phase) && !condition.matches(this.context, metadata)) {             return true.         }     }     return false. }
false;private;1;6;;@SuppressWarnings("unchecked") private List<String[]> getConditionClasses(AnnotatedTypeMetadata metadata) {     MultiValueMap<String, Object> attributes = metadata.getAllAnnotationAttributes(Conditional.class.getName(), true).     Object values = (attributes != null ? attributes.get("value") : null).     return (List<String[]>) (values != null ? values : Collections.emptyList()). }
false;private;2;4;;private Condition getCondition(String conditionClassName, @Nullable ClassLoader classloader) {     Class<?> conditionClass = ClassUtils.resolveClassName(conditionClassName, classloader).     return (Condition) BeanUtils.instantiateClass(conditionClass). }
false;private;1;10;;@Nullable private ConfigurableListableBeanFactory deduceBeanFactory(@Nullable BeanDefinitionRegistry source) {     if (source instanceof ConfigurableListableBeanFactory) {         return (ConfigurableListableBeanFactory) source.     }     if (source instanceof ConfigurableApplicationContext) {         return (((ConfigurableApplicationContext) source).getBeanFactory()).     }     return null. }
false;private;1;6;;private Environment deduceEnvironment(@Nullable BeanDefinitionRegistry source) {     if (source instanceof EnvironmentCapable) {         return ((EnvironmentCapable) source).getEnvironment().     }     return new StandardEnvironment(). }
false;private;1;6;;private ResourceLoader deduceResourceLoader(@Nullable BeanDefinitionRegistry source) {     if (source instanceof ResourceLoader) {         return (ResourceLoader) source.     }     return new DefaultResourceLoader(). }
false;private;2;15;;@Nullable private ClassLoader deduceClassLoader(@Nullable ResourceLoader resourceLoader, @Nullable ConfigurableListableBeanFactory beanFactory) {     if (resourceLoader != null) {         ClassLoader classLoader = resourceLoader.getClassLoader().         if (classLoader != null) {             return classLoader.         }     }     if (beanFactory != null) {         return beanFactory.getBeanClassLoader().     }     return ClassUtils.getDefaultClassLoader(). }
false;public;0;5;;@Override public BeanDefinitionRegistry getRegistry() {     Assert.state(this.registry != null, "No BeanDefinitionRegistry available").     return this.registry. }
false;public;0;5;;@Override @Nullable public ConfigurableListableBeanFactory getBeanFactory() {     return this.beanFactory. }
false;public;0;4;;@Override public Environment getEnvironment() {     return this.environment. }
false;public;0;4;;@Override public ResourceLoader getResourceLoader() {     return this.resourceLoader. }
false;public;0;5;;@Override @Nullable public ClassLoader getClassLoader() {     return this.classLoader. }
