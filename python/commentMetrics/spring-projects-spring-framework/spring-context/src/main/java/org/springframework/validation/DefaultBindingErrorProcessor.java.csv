commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public void processMissingFieldError(String missingField, BindingResult bindingResult) {     // Create field error with code "required".     String fixedField = bindingResult.getNestedPath() + missingField.     String[] codes = bindingResult.resolveMessageCodes(MISSING_FIELD_ERROR_CODE, missingField).     Object[] arguments = getArgumentsForBindError(bindingResult.getObjectName(), fixedField).     FieldError error = new FieldError(bindingResult.getObjectName(), fixedField, "", true, codes, arguments, "Field '" + fixedField + "' is required").     bindingResult.addError(error). }
false;public;2;16;;@Override public void processPropertyAccessException(PropertyAccessException ex, BindingResult bindingResult) {     // Create field error with the exceptions's code, e.g. "typeMismatch".     String field = ex.getPropertyName().     Assert.state(field != null, "No field in exception").     String[] codes = bindingResult.resolveMessageCodes(ex.getErrorCode(), field).     Object[] arguments = getArgumentsForBindError(bindingResult.getObjectName(), field).     Object rejectedValue = ex.getValue().     if (ObjectUtils.isArray(rejectedValue)) {         rejectedValue = StringUtils.arrayToCommaDelimitedString(ObjectUtils.toObjectArray(rejectedValue)).     }     FieldError error = new FieldError(bindingResult.getObjectName(), field, rejectedValue, true, codes, arguments, ex.getLocalizedMessage()).     error.wrap(ex).     bindingResult.addError(error). }
true;protected;2;4;/**  * Return FieldError arguments for a binding error on the given field.  * Invoked for each missing required field and each type mismatch.  * <p>The default implementation returns a single argument indicating the field name  * (of type DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes).  * @param objectName the name of the target object  * @param field the field that caused the binding error  * @return the Object array that represents the FieldError arguments  * @see org.springframework.validation.FieldError#getArguments  * @see org.springframework.context.support.DefaultMessageSourceResolvable  */ ;/**  * Return FieldError arguments for a binding error on the given field.  * Invoked for each missing required field and each type mismatch.  * <p>The default implementation returns a single argument indicating the field name  * (of type DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes).  * @param objectName the name of the target object  * @param field the field that caused the binding error  * @return the Object array that represents the FieldError arguments  * @see org.springframework.validation.FieldError#getArguments  * @see org.springframework.context.support.DefaultMessageSourceResolvable  */ protected Object[] getArgumentsForBindError(String objectName, String field) {     String[] codes = new String[] { objectName + Errors.NESTED_PATH_SEPARATOR + field, field }.     return new Object[] { new DefaultMessageSourceResolvable(codes, field) }. }
